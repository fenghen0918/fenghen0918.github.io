<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Oracle归档日志清理</title>
      <link href="/2023/11/28/mysql/oracle-gui-dang-ri-zhi-qing-li/"/>
      <url>/2023/11/28/mysql/oracle-gui-dang-ri-zhi-qing-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle归档日志清理"><a href="#Oracle归档日志清理" class="headerlink" title="Oracle归档日志清理"></a>Oracle归档日志清理</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>连接数据库时，提示：<code>ORA-00257:archiver error.Connect internal only, until freed</code>。表示归档日志满了。</p><h2 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h2><ol><li><p>连接数据库</p><pre class=" language-sql"><code class="language-sql">sqlplus <span class="token operator">/</span> <span class="token keyword">as</span> sysdba <span class="token comment" spellcheck="true">--连接</span>sql<span class="token operator">></span> <span class="token keyword">select</span> name <span class="token keyword">from</span> v$<span class="token keyword">database</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--查询当前实例，如果不是自己的实例，查看环境变量</span></code></pre></li><li><p>查询是否开启归档模式</p><pre class=" language-sql"><code class="language-sql">sql<span class="token operator">></span> archive log list<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--查看是否开启归档模式</span></code></pre></li><li><p>查询闪回区和归档区使用情况</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询闪回区</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$recovery_file_dest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--查看归档日志大小及使用情况</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$flash_recovery_area_usage<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--查看闪回区空间占用率，如果 ARCHIVED LOG 超过90%，Oracle随时有宕机的危险</span><span class="token comment" spellcheck="true">--查询归档区</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$archived_log<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--查看v$archive_log</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>BLOCKS<span class="token operator">*</span>BLOCK_SIZE<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token keyword">AS</span> <span class="token string">"ARCHIVE LOG SIZE (MB)"</span> <span class="token keyword">FROM</span> V$ARCHIVED_LOG<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--查看归档日志的总大小</span></code></pre><blockquote><p>查询结果：该电脑闪回区和归档区存储路径不同，所以分开判断：</p><p>闪回区使用为0，不用管。</p><p>归档区使用4G，可能是归档区满了，目前不知道归档区的限制大小是多少。</p></blockquote></li><li><p>清除归档日志（作用：可让闪回区、归档区的日志都得以释放）</p><pre class=" language-sql"><code class="language-sql">rman target sys<span class="token operator">/</span>密码@数据库实例名称RMAN<span class="token operator">></span> crosscheck archivelog <span class="token keyword">all</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--检查所有日志</span>RMAN<span class="token operator">></span> <span class="token keyword">delete</span> noprompt expired archivelog <span class="token keyword">all</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--删除过期日志</span>RMAN<span class="token operator">></span> <span class="token keyword">delete</span> noprompt ARCHIVELOG <span class="token keyword">ALL</span> COMPLETED BEFORE <span class="token string">'SYSDATE-7'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--删除7天前的归档日志</span></code></pre><blockquote><p>若闪回区满了，还有另一种方式，增大闪回区空间：</p><p><code>SQL&gt;alter system set DB_RECOVERY_FILE_DEST_SIZE=8G;</code></p></blockquote></li><li><p>尝试连接，如果还连不上，就重启数据库实例</p><pre class=" language-sql"><code class="language-sql">sql<span class="token operator">></span> <span class="token keyword">shutdown</span> immediate<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--如果长时间没反应，因为有大事务要回滚，导致数据库一直在等待回滚执行完成，ctrl+c取消</span>sql<span class="token operator">></span> <span class="token keyword">alter</span> system <span class="token keyword">checkpoint</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--设置检查点。一般在shutdown前,为了防止类似情况发生而丢失数据</span>sql<span class="token operator">></span> <span class="token keyword">shutdown</span> abort<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--强制关闭数据库</span>sql<span class="token operator">></span> startup<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--启动数据库</span>恢复正常</code></pre></li></ol><h2 id="设置自动清除归档定时任务"><a href="#设置自动清除归档定时任务" class="headerlink" title="设置自动清除归档定时任务"></a>设置自动清除归档定时任务</h2><ol><li><p>创建shell脚本</p><pre><code>[root@orcldb4 arch_clean_log]$ su - oracle [oracle@orcldb4 arch_clean_log]$ mkdir /home/oracle/arch_clean_log[oracle@orcldb4 arch_clean_log]$ cd /home/oracle/arch_clean_log[oracle@orcldb4 arch_clean_log]$ vi clean_arch.sh</code></pre><pre><code>#! /bin/bashsource ~/.bash_profileexec &gt;&gt; /home/oracle/arch_clean_log/del_arch`date +%F-%H`.log$ORACLE_HOME/bin/rman target / &lt;&lt;EOFcrosscheck archivelog all;delete noprompt expired archivelog all; delete noprompt archivelog until time 'sysdate-7'; exit;EOF</code></pre><blockquote><p>删除过期日志和7天前归档日志</p></blockquote><pre><code>[oracle@orcldb4 ORACLE]$ chmod +x clean_arch.sh</code></pre></li><li><p>设置定时任务</p><pre><code>进入root用户vi /etc/crontab #编辑系统任务计划0 2 * * * oracle /home/oracle/arch_clean_log/clean_arch.sh #每天凌晨2点执行</code></pre></li><li><p>重启定时服务</p><pre><code>[root@db ~]# systemctl restart crond.service 或者[root@db ~]# service crond restart</code></pre></li></ol><h2 id="其余记录"><a href="#其余记录" class="headerlink" title="其余记录"></a>其余记录</h2><h3 id="1-关闭-打开归档日志"><a href="#1-关闭-打开归档日志" class="headerlink" title="1.关闭/打开归档日志"></a>1.关闭/打开归档日志</h3><h4 id="1-1关闭归档日志"><a href="#1-1关闭归档日志" class="headerlink" title="1.1关闭归档日志"></a>1.1关闭归档日志</h4><pre><code>1 sql&gt; archive log list;   #查看是否关闭归档模式2 sql&gt; alter system set log_archive_start=false scope=spfile; #禁用自动归档3 sql&gt; shutdown immediate;  #立即关闭数据库4 sql&gt; startup mount;    #启动实例并加载数据库，但不打开5 sql&gt; alter database noarchivelog; #将数据库切换为非归档模式6 sql&gt; alter database open;   #打开数据库7 sql&gt; archive log list;   #查看此时便处于非归档模式</code></pre><h4 id="1-2开启归档日志"><a href="#1-2开启归档日志" class="headerlink" title="1.2开启归档日志"></a>1.2开启归档日志</h4><pre><code>1 sql&gt; archive log list;   #查看是否开启归档模式2 sql&gt; alter system set log_archive_start=true scope=spfile; #启用主动归档(可设置归档路径,自行学习)3 sql&gt; shutdown immediate;  #立即关闭数据库4 sql&gt; startup mount;    #启动实例并加载数据库，但不打开5 sql&gt; alter database archivelog; #将数据库切换为归档模式6 sql&gt; alter database open;   #打开数据库7 sql&gt; archive log list;   #查看此时是否处于归档模式8 查询以确定数据库位于archivelog模式中且归档过程正在运行sql&gt; select log_mode from v$database;sql&gt; select archiver from v$instance;</code></pre>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移新电脑之Hexo搬家</title>
      <link href="/2023/09/28/hexo/qian-yi-xin-dian-nao-zhi-hexo-ban-jia/"/>
      <url>/2023/09/28/hexo/qian-yi-xin-dian-nao-zhi-hexo-ban-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2023年目标——更换新笔记本（机械革命无界14pro），达成</p><p>接下来就是复杂的新老电脑更换的过程，由于hexo博客源文件在本机内，安装hexo时都知道，hexo是在博客领域里不算轻的框架，它需要NodeJs、Git、hexo源框架环境的支持才能运行，因此在迁移时仍然需要在新电脑上安装以上环境。</p><p>其实，迁移完全可以看我的搭建hexo博客写的教程：<a href="https://sulog.fun/2020/06/17/hexo/hexo-github-da-jian-matery-bo-ke-yi-da-jian-huan-jing-pian/#toc-heading-6">Hexo+github搭建matery博客一（搭建环境篇）</a>，本文只讲迁移的相关注意事项。</p><p><strong>言归正传</strong></p><h2 id="迁移记录"><a href="#迁移记录" class="headerlink" title="迁移记录"></a>迁移记录</h2><h3 id="安装NodeJS环境"><a href="#安装NodeJS环境" class="headerlink" title="安装NodeJS环境"></a>安装NodeJS环境</h3><hr><ol><li><p>根据上述安装NodeJS</p><blockquote><p>需要注意：</p><ol><li>安装nodejs需要在除系统C盘以外的盘，win10以上的电脑会出现系统盘保护</li></ol></blockquote></li><li><p>在node.js安装目录创建两个文件夹【node_global】及【node_cache】</p></li><li><p>配置环境变量</p></li><li><p>设置npm源</p></li><li><p><strong>重点：</strong>更改文件夹权限，找到安装nodejs的文件路径下的”node_cache”,”node_global”分别更改这两个文件夹的Users权限。</p><p>右击属性-》安全-》编辑，把Users的权限设置为全部允许</p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230928222829313.png" alt="image-20230928222829313" style="zoom:50%;"><blockquote><p>原因：需要执行此步来授权，因为nodeJS在安装时权限被设置为只有管理员可以写入/修改，我们作为用户在后续的git bash here中，操作<code>npm install -g hexo-cli</code>时会报错<code>npm error: The operation was rejected by your operating system.</code>没操作权限</p></blockquote></li></ol><h3 id="安装git环境"><a href="#安装git环境" class="headerlink" title="安装git环境"></a>安装git环境</h3><ol><li><p>安装git</p><blockquote><p>需要注意：</p><ol><li>安装nodejs需要在除系统C盘以外的盘，win10以上的电脑会出现系统盘保护</li></ol></blockquote></li></ol><blockquote><p>安装完环境后，搭建环境篇的第二、三步不需要，因为我们是迁移博客，只需要将老电脑上的hexo博客的源文件放到新电脑想要的位置即可</p></blockquote><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><ol><li><p>配置Git用户名和邮箱</p><p>在桌面点击鼠标右键，点击Git Bash Here，然后分别输入下面的两个命令，并回车：</p><pre><code>git config --global user.name "此处填写你注册时的用户名"git config --global user.email "此处填写你注册时的邮箱"# 执行完后在C盘用户文件夹中找.gitconfig文件，看是否修改成功</code></pre></li><li><p>配置Git免密登录，添加ssh-keys</p><blockquote><p>这里根据你是部署到哪里，github或云服务器，这里我以自己的云服务器为例，github可去看我博客<a href="https://sulog.fun/2020/08/01/hexo/hexo-bo-ke-bei-fen/">Hexo博客备份</a>恢复步骤。</p></blockquote><ol><li><p>在cmd下运行：<code>ssh-keygen -t rsa -C "yourname@email.com"</code>，一路回车；</p></li><li><p>会在.ssh目录生成<code>id_rsa</code>、<code>id_rsa.pub</code>两个文件，这就是密钥对，我们需要id_rsa.pub；</p></li><li><p>进入云服务器</p><pre><code>su git    //切换到git用户cd ~    //切换目录mkdir .ssh    //新建.ssh文件夹cd .ssh    //进入文件夹vim authorized_keys    //创建文件将主机windows下的ssh公钥内容粘贴进去，位置在C:\Users\用户\.ssh\id_rsa.pub保存退出</code></pre></li><li><p>测试</p><p>使用主机windows，以管理员的身份进入cmd命令行</p><pre><code>ssh -v git@你的公网IP</code></pre></li></ol></li></ol><h3 id="安装hexo框架环境"><a href="#安装hexo框架环境" class="headerlink" title="安装hexo框架环境"></a>安装hexo框架环境</h3><ol><li><p>选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为blog的文件夹，创建完后进入文件夹点击鼠标右键，选择Git Bash Here，输入命令<code>npm install -g hexo-cli</code></p><blockquote><p>如果报错，请看安装nodejs环境第五步</p></blockquote></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>hexo cl</p><p>hexo g</p><p>hexo s</p><p>hexo d</p><h2 id="番外：typora-picgo图床迁移"><a href="#番外：typora-picgo图床迁移" class="headerlink" title="番外：typora+picgo图床迁移"></a>番外：typora+picgo图床迁移</h2><h3 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h3><p>typora是md编辑器，用于写博客用。</p><ol><li><p>安装typora</p><blockquote><p> typora是收费的，需要下载破解版，这里推荐在<a href="https://axutongxue.com/">阿虚同学的百宝箱</a>里找。</p></blockquote></li><li><p>偏好设置</p><ol><li>通用——关闭自动升级</li><li>图像——用于搭配picgo粘贴图片自动上传图床</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230928224155780.png" alt="image-20230928224155780"></p></li></ol><h3 id="Picgo"><a href="#Picgo" class="headerlink" title="Picgo"></a>Picgo</h3><p>picgo是一个图片上传工具，专门用于将图片快速上传至我们的图床</p><blockquote><p>图床：简而言之就是将我们的图片上传至第三方云服务器上，来加速我们的页面加载图片。</p><p>同时，md文档的图片展示方式是一个url链接，通常图片是存储在电脑本地，url是本地绝对路径的链接，而不是word那种直接将图片粘在上面。在我们迁移电脑时，这些本地路径都会失效导致加载不出来，同理我们将md文件传给其他人也是无法显示的，需要将图片一并传给对方，这会很复杂。</p><p>因此，这里引用图床的概念，我们将图片上传至网上，无论在何地，只要有网络就能看到这张图片。</p></blockquote><ol><li><p>直接百度搜索下载picgo即可，picgo是在github上的。</p></li><li><p>配置</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230928225119763.png" alt="image-20230928225119763"></p><blockquote><p>KeyId、keySecret都是在阿里云上获取：</p><p>右上角头像-访问控制-用户-重新创建一个AccessKey</p><blockquote><p>注意：因为现在阿里云为了安全考虑，只能在创建时才能看到KeySecrect，需要记住，关闭弹窗后就再也看不到了，所以我们需要重新创建一个。</p><p>这只是一个卡号和卡密，没有任何依赖关系，所以我们可以放心创建和删除。</p></blockquote><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230928225737600.png" alt="image-20230928225737600"></p></blockquote></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230928230021568.png" alt="image-20230928230021568"></p><p>至此，hexo博客迁移完毕！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 电脑迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移新电脑之Hexo搬家</title>
      <link href="/2023/09/28/xue-xi/qian-yi-xin-dian-nao-zhi-tim-wu-fa-xiu-gai-wen-jian-lu-jing/"/>
      <url>/2023/09/28/xue-xi/qian-yi-xin-dian-nao-zhi-tim-wu-fa-xiu-gai-wen-jian-lu-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2023年目标——更换新笔记本（机械革命无界14pro），达成</p><p>接下来就是复杂的新老电脑更换的过程。</p><p>在安装TIM后，修改TIM的个人文件存储路径到D盘，发现修改后再次打开TIM存储路径仍然在C盘，这对日后缓存文件越来越多，导致C盘空闲容量越来越少，因此为了刚开始就养成好习惯，以绝后患，有了这篇解决方案。</p><p><strong>言归正传</strong></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>查看个人文件位置：<br> 打开TIM → 设置 → 文件管理 → 打开个人文件夹</li></ol><p>  <img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230928235520946.png" alt="image-20230928235520946"></p><ol start="2"><li><p>返回上一目录C:\Users\3*******0\Documents\Tencent Files，可以看到两个文件夹：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230928235730020.png" alt="image-20230928235730020"></p></li></ol><ol start="3"><li><p>在D:\新建一个文件TIM-Data，用来存储上面的两个文件夹，将上面两个文件夹剪切到TIM-Data；</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230928235742187.png" alt="image-20230928235742187"></p></li></ol><ol start="4"><li><p>将C:\Users\ 3*******0\Documents\Tencent Files的Tencent Files文件夹删除；</p></li><li><p>在公共文档 下建如下文件夹，C:\Users\ Public \Documents\Tencent\QQ；<br> 先在公用文档下建Tencent文件夹。</p></li></ol><blockquote><p> 注意是公用文档下，不是user个人账户下的文档文件夹；</p></blockquote><p>然后在Tencent下创建文件QQ文件夹；<br>在QQ文件夹下建文件UserDataInfo.ini</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230929000022473.png" alt="image-20230929000022473"></p><p>输入代码：</p><pre><code>[UserDataImportSet]NeedImport=0OldVersion=OldVerDataPathType=OldVerDataPath=OldQQInstallPath=D:\TIM[UserDataSet]UserDataSavePathType=2UserDataSavePath=D:\TIM-DataNewVersion=</code></pre><blockquote><p>OldQQInstallPath：TIM的安装路径</p><p>UserDataSavePath：文件的存储路径</p></blockquote><p>保存</p><ol start="6"><li>重新登录TIM。当登录界面出现你登录过的QQ号，表示配置成功，如果没有出现，说明配置出错了，重新检查一下所有步骤。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移新电脑之Windows1011家庭版默认无本地组策略编辑器（gpedit.msc）的解决方法</title>
      <link href="/2023/09/28/xue-xi/qian-yi-xin-dian-nao-zhi-windows11-jia-ting-ban-wu-ben-di-zu-ce-lue-bian-ji-qi-gpedit.msc-de-jie-jue-fang-fa-fu-ben/"/>
      <url>/2023/09/28/xue-xi/qian-yi-xin-dian-nao-zhi-windows11-jia-ting-ban-wu-ben-di-zu-ce-lue-bian-ji-qi-gpedit.msc-de-jie-jue-fang-fa-fu-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2023年目标——更换新笔记本（机械革命无界14pro），达成</p><p>接下来就是复杂的新老电脑更换的过程。</p><p>Windows 10家庭版在运行输入gpedit.msc，按回车时，会弹出以下报错界面</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230929000415455.png" alt="image-20230929000415455"></p><p>原因：win11家庭版没有本地组策略编辑器，需要手动安装。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>新建记事本，输入代码</li></ol><pre><code>@echo offpushd "%~dp0"dir /b %systemroot%\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;gp.txtdir /b %systemroot%\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;gp.txtfor /f %%i in ('findstr /i . gp.txt 2^&gt;nul') do dism /online /norestart /add-package:"%systemroot%\servicing\Packages\%%i"pause</code></pre><p>保存，文件名字任意，扩展名为.bat，保存类型选“所有文件（**.**）”，如下图</p><p>以管理员运行刚保存BAT，本例命名为gpedit.bat（现成的下载:<a href="https://wwz.lanzouj.com/ixiEo06f6qnc%E5%AF%86%E7%A0%81:gz5n%EF%BC%89%EF%BC%8C%E5%A6%82%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%E5%B0%86%E5%87%BA%E7%8E%B0%E4%B8%8B%E5%9B%BE%E7%95%8C%E9%9D%A2">https://wwz.lanzouj.com/ixiEo06f6qnc密码:gz5n），如运行成功将出现下图界面</a></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230929000752642.png" alt="image-20230929000752642"></p><p>再次运行gpedit.msc时，就会出现“本地组策略编辑器”</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230929000806834.png" alt="image-20230929000806834"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移新电脑之远程桌面问题：出现身份验证错误</title>
      <link href="/2023/09/28/xue-xi/qian-yi-xin-dian-nao-zhi-yuan-cheng-zhuo-mian-wen-ti-chu-xian-shen-fen-yan-zheng-cuo-wu/"/>
      <url>/2023/09/28/xue-xi/qian-yi-xin-dian-nao-zhi-yuan-cheng-zhuo-mian-wen-ti-chu-xian-shen-fen-yan-zheng-cuo-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2023年目标——更换新笔记本（机械革命无界14pro），达成</p><p>接下来就是复杂的新老电脑更换的过程。</p><p>使用windows自带远程桌面时，报以下错误：</p><p>远程桌面问题：出现身份验证错误。要求的函数不受支持。这可能是由于 CredSSP 加密数据库修正。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230929001231080.png" alt="image-20230929001231080"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>方法一：因为win11家庭版没有组策略，需要安装，安装方式在我上个博客。但安装后修改仍不管用。</p><p>方法二：可用，记得修改后重启。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230929001446083.png" alt="image-20230929001446083"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PMP考证之旅-冲刺</title>
      <link href="/2023/09/04/xue-xi/pmp-chong-ci/"/>
      <url>/2023/09/04/xue-xi/pmp-chong-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="PMP考前冲刺"><a href="#PMP考前冲刺" class="headerlink" title="PMP考前冲刺"></a>PMP考前冲刺</h1><h2 id="第一记：项目方法"><a href="#第一记：项目方法" class="headerlink" title="第一记：项目方法"></a>第一记：项目方法</h2><p><strong>题干：敏捷转型、采用混合，用什么方法</strong></p><h3 id="考点一：项目开发方法的选择"><a href="#考点一：项目开发方法的选择" class="headerlink" title="考点一：项目开发方法的选择"></a>考点一：项目开发方法的选择</h3><p>预测型开发方法：提前进行大量的计划工作、一次性交付、技术难度低</p><p>增量型开发方法：向客户提供各个已完成的能立即使用的可交付成果</p><p>迭代型开发方法：允许对未完成的工作进行反馈，改进工作</p><p>适应性开发方法：既有迭代也有增量，频繁交付，技术多变，难度较高</p><h3 id="考点二：项目混合式开发方法"><a href="#考点二：项目混合式开发方法" class="headerlink" title="考点二：项目混合式开发方法"></a>考点二：项目混合式开发方法</h3><p>兼顾敏捷+预测</p><h2 id="第二记：治理"><a href="#第二记：治理" class="headerlink" title="第二记：治理"></a>第二记：治理</h2><p><strong>题干：董事会，沟通未果无法解决，治理模型、模板，一个资源在多个项目</strong></p><h3 id="考点一（预测）：项目指导委员会"><a href="#考点一（预测）：项目指导委员会" class="headerlink" title="考点一（预测）：项目指导委员会"></a>考点一（预测）：项目指导委员会</h3><p>发起人在其中 </p><p>组织治理、无法解决的问题</p><h3 id="考点二（预测）：项目管理办公室PMO"><a href="#考点二（预测）：项目管理办公室PMO" class="headerlink" title="考点二（预测）：项目管理办公室PMO"></a>考点二（预测）：项目管理办公室PMO</h3><p>支持型、控制型、指令型</p><p>处理共享资源管理</p><p>制定项目管理方法模板</p><p>指导、辅导、提供经验教训</p><p><strong>考点三：敏捷卓越中心或价值交付办公室</strong></p><h2 id="第三记：整合"><a href="#第三记：整合" class="headerlink" title="第三记：整合"></a>第三记：整合</h2><p><strong>题干：组织过程资产、下一步迭代做计划</strong></p><p><strong>考点一（预测）：项目管理计划</strong></p><h3 id="考点二（敏捷）：迭代规划会议"><a href="#考点二（敏捷）：迭代规划会议" class="headerlink" title="考点二（敏捷）：迭代规划会议"></a>考点二（敏捷）：迭代规划会议</h3><p>产品负责人PO讲解代办列表内容</p><p>成员对任务进行拆解分工估算时间</p><h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><p><strong>题干：WBS、收集需求、范围蔓延、验收不通过</strong></p><h3 id="考点一（预测）：范围管理工具"><a href="#考点一（预测）：范围管理工具" class="headerlink" title="考点一（预测）：范围管理工具"></a>考点一（预测）：范围管理工具</h3><p>访谈——一对一</p><p>引导（联合应用设计/质量功能展开/用户故事）——跨职能，协调差异达成共识</p><p>焦点小组——引导主题专家进行讨论</p><p>头脑风暴——面对面，快</p><p>名义小组技术——结构化头脑风暴，排序</p><p>思维导图——创意整合，激发新创意</p><p>亲和图——创意分类，合并相似项</p><p>决策——投票</p><p>问卷调查（适合统计分析）——受众多，快速收集</p><p>观察（不愿意说/说不清楚）——工作跟踪</p><p>原型法（适合复杂项目）——迭代</p><p>标杆对照——和可比组织对比</p><h3 id="考点二（预测）：项目范围术语"><a href="#考点二（预测）：项目范围术语" class="headerlink" title="考点二（预测）：项目范围术语"></a>考点二（预测）：项目范围术语</h3><p>项目范围——必须完成的工作，有时也有产品范围</p><p>项目范围说明书——产品范围、可交付成果、验收标准、除外责任</p><p>项目章程——批准项目启动文件</p><p>需求跟踪矩阵——需求与项目目标联系起来</p><p>WBS——对工作的层级分解</p><p>产品范围——可交付成果的特征和功能</p><h3 id="考点三（预测）：解决客户不验收问题"><a href="#考点三（预测）：解决客户不验收问题" class="headerlink" title="考点三（预测）：解决客户不验收问题"></a>考点三（预测）：解决客户不验收问题</h3><p>制定正确的范围规范</p><p>定期核实可交付成果</p><p>杜绝范围蔓延</p><p><strong>考点四（敏捷）：代办列表</strong></p><h2 id="第五记：进度"><a href="#第五记：进度" class="headerlink" title="第五记：进度"></a>第五记：进度</h2><p><strong>题干：进度延期、进度落后成本超支、想了解交付时间、迭代速度慢了、如何避免延误、进度不断变更</strong></p><h3 id="考点一（预测）：进度管理工具"><a href="#考点一（预测）：进度管理工具" class="headerlink" title="考点一（预测）：进度管理工具"></a>考点一（预测）：进度管理工具</h3><p>进度网络分析——多种进度分析的统称</p><p>分解——工作分解</p><p>滚动式规划——渐进明细、敏捷</p><p>关键路径法——项目最长路径</p><p>假设情景分析——评估计划在不利条件的可行性</p><p>模拟——蒙特卡洛分析，在不利条件的结果</p><p>资源平衡——资源受限或过度分配，关键路径改变</p><p>资源平滑——资源受限或过度分配，关键路径不改变</p><p>赶工——增加资源和成本</p><p>快速跟进——串行变并行，可能返工</p><p>确定和整合依赖关系——强制和选择性依赖</p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231025162245407.png" alt="image-20231025162245407" style="zoom:50%;"><h3 id="考点二（预测）：估算方法"><a href="#考点二（预测）：估算方法" class="headerlink" title="考点二（预测）：估算方法"></a>考点二（预测）：估算方法</h3><p>参数估算——不费时、易计算，但依赖历史信息</p><p>类比估算——最快，最不准，难分摊成本估算</p><p>自下而上估算——耗时，但最准</p><p>三点估算——最坏1、中间4、最好估算1</p><p>专家判断——纯粹拍脑子</p><p><strong>考点三（预测）：项目进度基准、项目进度计划</strong></p><h3 id="考点四（敏捷）：估算方法"><a href="#考点四（敏捷）：估算方法" class="headerlink" title="考点四（敏捷）：估算方法"></a>考点四（敏捷）：估算方法</h3><p>相对规模估算（计划扑克）——对比1个故事点，粗略估算其他故事的故事点数</p><p>估算扑克——斐波那契数列衡量价值点</p><p>T恤估算——简化的扑克估算</p><p>点式估算——点数多少</p><p>估算团队速率——单位时间内完成的工作量</p><p><strong>考点五（敏捷）：产品路线图/发布计划/迭代计划</strong></p><p><strong>考点六（敏捷）：团队速率估算/待办列表调整</strong></p><h2 id="第六记：预算资源"><a href="#第六记：预算资源" class="headerlink" title="第六记：预算资源"></a>第六记：预算资源</h2><p><strong>题干：估算成本、成本超支、被削减</strong></p><h3 id="考点一（预测）：预算的组成"><a href="#考点一（预测）：预算的组成" class="headerlink" title="考点一（预测）：预算的组成"></a>考点一（预测）：预算的组成</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231025162700987.png" alt="image-20231025162700987"></p><p>用管理储备需要CCB变更批准，并修改成本基准</p><h3 id="考点二（预测）：挣值计算"><a href="#考点二（预测）：挣值计算" class="headerlink" title="考点二（预测）：挣值计算"></a>考点二（预测）：挣值计算</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231025162936810.png" alt="image-20231025162936810"></p><p><strong>考点三（预测）：问题处理</strong></p><p><strong>考点四（敏捷）：MVP</strong></p><p><strong>考点五（敏捷）：重新梳理待办事项</strong></p><h2 id="第七记：质量"><a href="#第七记：质量" class="headerlink" title="第七记：质量"></a>第七记：质量</h2><p><strong>题干：结果被拒收，不符合产品负责人期望，质量不合格，质量审计，测试失败，体验满意</strong></p><h3 id="考点一（预测）：质量管理概念"><a href="#考点一（预测）：质量管理概念" class="headerlink" title="考点一（预测）：质量管理概念"></a>考点一（预测）：质量管理概念</h3><p>质量测量指标——核对可交付成果</p><p>质量报告——帮助采取纠正措施，实现期望</p><p>质量四条理论——客户满意，PDCA、管理层责任、供应商互利合作</p><p>精益六西格玛——减少浪费</p><p>管理质量——批次产品问题</p><p>控制质量——核实可交付成果</p><h3 id="考点二（预测）：质量工具"><a href="#考点二（预测）：质量工具" class="headerlink" title="考点二（预测）：质量工具"></a>考点二（预测）：质量工具</h3><p>因果图——根本原因分析</p><p>流程图、核查表——逻辑关系、潜在问题</p><p>核对单——对过程逐一检查</p><p>质量成本——一致性成本、非一致性成本</p><p>成本效益分析——预期效益分析</p><p>控制图——过程是否受控、七点规则</p><p>直方图——普遍原因</p><p>散点图——两个变量之间关系</p><p>审计——识别最佳实践、确认变更实施情况</p><p><strong>考点三（敏捷）：验收标准</strong></p><p><strong>考点四（敏捷）：频繁交付</strong></p><h2 id="第八记：沟通"><a href="#第八记：沟通" class="headerlink" title="第八记：沟通"></a>第八记：沟通</h2><p><strong>题干：沟通方法、不了解项目状态、第一次听说、成员直接汇报管理层、缺失信息</strong></p><h3 id="考点一（预测）：沟通管理的概念和工具"><a href="#考点一（预测）：沟通管理的概念和工具" class="headerlink" title="考点一（预测）：沟通管理的概念和工具"></a>考点一（预测）：沟通管理的概念和工具</h3><p>沟通渠道：N（N-1）/2</p><p>沟通方法：</p><p>互动——会议、视频会议</p><p>推式——电子邮件</p><p>拉式——信息很大或受众广</p><p>正式沟通：报告、会议、干系人简报</p><p>非正式沟通：电子邮件、社交、网站</p><p><strong>考点二（预测）：解决沟通问题</strong></p><ol><li>沟通管理计划</li><li>沟通需求分析</li><li>规划沟通</li></ol><p><strong>考点三（敏捷）：信息发射源</strong></p><h2 id="第九记：风险"><a href="#第九记：风险" class="headerlink" title="第九记：风险"></a>第九记：风险</h2><p><strong>题干：风险、无法划拨资金</strong></p><h3 id="考点一（预测）：风险流程、工具、分类"><a href="#考点一（预测）：风险流程、工具、分类" class="headerlink" title="考点一（预测）：风险流程、工具、分类"></a>考点一（预测）：风险流程、工具、分类</h3><p>风险流程：规划风险管理-识别风险-定性-定量-规划风险应对-实施风险应对-监督风险</p><p>下一步：更新风险登记册</p><p>最好/应该怎么做：选具体方式</p><p><strong>风险工具</strong></p><p>swot分析、概率影响矩阵、访谈、审计、敏感性分析（龙卷风图）、决策树分析、风险审查会议</p><p><strong>应对措施</strong></p><p>上报（自然灾害）——超出项目经理范围</p><p>规避（去掉工作包/取消项目）——改变计划范围，完全消除</p><p>减轻（更多测试）</p><p>转移（保险、外包）——转给第三方</p><p>接受（应急储备）——准备应急储备</p><p>开拓（改进技术节约成本）——确保肯定实现</p><p>分享（风险共担合作）——分配给第三方</p><p>提高/增强（增加资源）——增加积极概率</p><p><strong>风险分类</strong></p><p>已知已知风险——先分析，执行应对措施，花费项目成本</p><p>已知未知风险——先分析，执行应急策略，花费应急储备，可能会产生变更</p><p>未知未知风险——先分析，花费管理储备</p><p><strong>考点二（敏捷）：增量交付、探针</strong></p><h2 id="第十记：采购"><a href="#第十记：采购" class="headerlink" title="第十记：采购"></a>第十记：采购</h2><p><strong>题干：供应商问题、合同</strong></p><h3 id="考点一（预测）：采购文件"><a href="#考点一（预测）：采购文件" class="headerlink" title="考点一（预测）：采购文件"></a>考点一（预测）：采购文件</h3><p>采购管理计划、采购工作说明书、卖方建议书</p><h3 id="考点二（预测）：采购合同类型"><a href="#考点二（预测）：采购合同类型" class="headerlink" title="考点二（预测）：采购合同类型"></a>考点二（预测）：采购合同类型</h3><p>固定总价（买方成本最小）——一口价</p><p>总价加经济调整——执行周期长</p><p>总价加激励——最高限价，反对浪费</p><p>成本加固定——范围不明确，项目复杂，奖金不变</p><p>成本加奖励——范围不明确，项目复杂，买方考核绩效</p><p>成本加激励——范围不明确，项目复杂，反对浪费</p><p>工料/单价合同——范围不明确，项目简单</p><h3 id="考点三（预测）：采购工具"><a href="#考点三（预测）：采购工具" class="headerlink" title="考点三（预测）：采购工具"></a>考点三（预测）：采购工具</h3><p>不确定外购还是自己完成——自制或外购分析</p><p>投标人想了解评标方法——供方选择分析</p><p>不了解卖方能力——市场调研</p><p>选定卖方后，如何签合同——谈判</p><p>评估卖方是否中标——建议书评价</p><p>卖方对招标书有疑问——投标人会议</p><p>卖方不够——广告</p><p>买卖纠纷，ADR诉讼——索赔</p><p>买卖是否合规——审计</p><p>交付成果是否合格——检查</p><p>验证卖方范围质量是否遵守合同——绩效审查</p><p><strong>考点四（敏捷）：采购合同（范围不明确）</strong></p><h2 id="第十一记：干系人"><a href="#第十一记：干系人" class="headerlink" title="第十一记：干系人"></a>第十一记：干系人</h2><p><strong>题干：出现新的干系人、反对变更、拒绝提供资源、质疑、焦虑</strong></p><h3 id="考点一（预测）：关键干系人职责"><a href="#考点一（预测）：关键干系人职责" class="headerlink" title="考点一（预测）：关键干系人职责"></a>考点一（预测）：关键干系人职责</h3><p>发起人——商业论证、项目章程</p><p>职能经理——获取资源</p><p>PMO——支持型、控制型、指令型。管理合规性</p><p>指导委员会——项目治理</p><p>CCB——变更审批</p><p>风险责任人——监控风险</p><h3 id="考点二（预测）：干系人管理工具、文件、过程"><a href="#考点二（预测）：干系人管理工具、文件、过程" class="headerlink" title="考点二（预测）：干系人管理工具、文件、过程"></a>考点二（预测）：干系人管理工具、文件、过程</h3><p>干系人登记册——记录干系人信息</p><p>干系人分析——收集分析干系人期望影响</p><p>干系人参与度评估矩阵——比较参与水平与期望水平</p><p>识别干系人——干系人登记册+干系人分析</p><p>干系人参与计划——制定管理策略</p><p>管理干系人——实施提高支持</p><p>监督干系人参与——调整管理策略</p><h3 id="考点三（预测）：干系人管理策略"><a href="#考点三（预测）：干系人管理策略" class="headerlink" title="考点三（预测）：干系人管理策略"></a>考点三（预测）：干系人管理策略</h3><p>权力利益方格——权力大利益大（重点管理）、权力利益小（令其满意）、权力小利益大（随时告知）、权力小利益小（监督）</p><h3 id="考点四（预测）：沟通和干系人区别"><a href="#考点四（预测）：沟通和干系人区别" class="headerlink" title="考点四（预测）：沟通和干系人区别"></a>考点四（预测）：沟通和干系人区别</h3><p>信息传递问题（考沟通）——信息不全，第一次听说等</p><p>干系人参与问题（考干系人）——不愿意参加，拒绝，不满意</p><h3 id="考点五（敏捷）：敏捷主要角色"><a href="#考点五（敏捷）：敏捷主要角色" class="headerlink" title="考点五（敏捷）：敏捷主要角色"></a>考点五（敏捷）：敏捷主要角色</h3><p>PO产品负责人——增加和调整用户故事成果评审、发布计划/产品路线图</p><p>敏捷教练——保护项目不被打扰</p><p>团队——自组织全职、渗透式沟通分享知识、沟通技术提高沟通</p><p><strong>集中办公</strong></p><h2 id="第十二记：工件"><a href="#第十二记：工件" class="headerlink" title="第十二记：工件"></a>第十二记：工件</h2><p><strong>题干：项目文档如何管理、文档过多影响效率</strong></p><h3 id="考点一（预测）：可交付成果概念"><a href="#考点一（预测）：可交付成果概念" class="headerlink" title="考点一（预测）：可交付成果概念"></a>考点一（预测）：可交付成果概念</h3><p>可交付成果——管理项目工作产出</p><p>核实的可交付成果——控制质量（内部验收）</p><p>验收的可交付成果——确认范围（外部验收）</p><p>移交的可交付成果——结束</p><p><strong>项目管理信息系统、配置管理系统</strong></p><p><strong>敏捷：简化文档</strong></p><h2 id="第十三记：价值"><a href="#第十三记：价值" class="headerlink" title="第十三记：价值"></a>第十三记：价值</h2><p><strong>题干：出现竞争对手如何快速交付、交付价值减少、时间紧迫如何开展工作</strong></p><h3 id="考点一（敏捷）：产品待办事项概念"><a href="#考点一（敏捷）：产品待办事项概念" class="headerlink" title="考点一（敏捷）：产品待办事项概念"></a>考点一（敏捷）：产品待办事项概念</h3><p>用户故事模糊、缺乏验收标准——代办事项梳理会提出</p><h3 id="考点二（敏捷）：待办事项优先级排序"><a href="#考点二（敏捷）：待办事项优先级排序" class="headerlink" title="考点二（敏捷）：待办事项优先级排序"></a>考点二（敏捷）：待办事项优先级排序</h3><p>莫斯科法——必须有、应该有、可以有、不会有</p><p>Kano卡诺模型——基本需求、性能需要、愉悦需要</p><p>100点法</p><p>相对量级——特性权重</p><h2 id="第十四记：培训"><a href="#第十四记：培训" class="headerlink" title="第十四记：培训"></a>第十四记：培训</h2><p><strong>题干：能力不足、不了解敏捷、PO无能力、干系人抵触敏捷</strong></p><p><strong>考点一：培训、指导、知识分享</strong></p><h2 id="第十五记：问题"><a href="#第十五记：问题" class="headerlink" title="第十五记：问题"></a>第十五记：问题</h2><p><strong>题干：绩效下降、未按时交付、遇到问题、出现缺陷、意见不同</strong></p><h3 id="考点一（预测）：风险、问题、变更解题思路"><a href="#考点一（预测）：风险、问题、变更解题思路" class="headerlink" title="考点一（预测）：风险、问题、变更解题思路"></a>考点一（预测）：风险、问题、变更解题思路</h3><p>新需求，不涉及问题风险——走变更流程</p><p>可能影响项目的事件——风险</p><p>已经发生的并将要发生的风险，不解决就影响——问题</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231026093404889.png"></p><h3 id="考点二（敏捷）：项目状态跟踪工具"><a href="#考点二（敏捷）：项目状态跟踪工具" class="headerlink" title="考点二（敏捷）：项目状态跟踪工具"></a>考点二（敏捷）：项目状态跟踪工具</h3><p>每日站会：提问题，不在会议解决</p><p>看板：在制品数量、累计流量图</p><p>燃尽图：向下曲线，表明当前时间剩余与计划工作量的关系</p><p><strong>敏捷团队共同解决</strong></p><h2 id="第十六记：变更"><a href="#第十六记：变更" class="headerlink" title="第十六记：变更"></a>第十六记：变更</h2><p><strong>题干：外部影响本项目、变更、避免范围镀金</strong></p><h3 id="考点一（预测）：变更流程"><a href="#考点一（预测）：变更流程" class="headerlink" title="考点一（预测）：变更流程"></a>考点一（预测）：变更流程</h3><p>识别变更-查阅变更管理计划-变更文件记录-PM和团队分析影响-指定行动方针-CCB审批-更新项目文件-实施变更</p><p><strong>考点二（敏捷）：纳入待办列表、优先级排序</strong></p><h2 id="第十七记：收尾"><a href="#第十七记：收尾" class="headerlink" title="第十七记：收尾"></a>第十七记：收尾</h2><p><strong>题干：收尾、接收经理、回顾会改进、回顾会作用</strong></p><h3 id="考点一（预测）：收尾流程"><a href="#考点一（预测）：收尾流程" class="headerlink" title="考点一（预测）：收尾流程"></a>考点一（预测）：收尾流程</h3><p>最终验收，确认范围实现-此后无变更-所有权移交客户-发布项目最终报告，评估绩效-整理经验教训-获得干系人反馈满意度-开庆功宴解散团队-结束</p><p><strong>考点二（敏捷）：评审会议、回顾会议</strong></p><p>评审会——PO接受或拒绝故事、协商下一步计划、项目成果评审反馈</p><p>回顾会——找问题找对策、待改进项放入待办列表</p><h2 id="第十八记：规则"><a href="#第十八记：规则" class="headerlink" title="第十八记：规则"></a>第十八记：规则</h2><p><strong>题干：团队会议混乱、迟到、职责、时间不可控、无纪律</strong></p><p><strong>考点一（预测/敏捷）：建立基本规则</strong></p><h3 id="考点二（预测）：资源管理文件"><a href="#考点二（预测）：资源管理文件" class="headerlink" title="考点二（预测）：资源管理文件"></a>考点二（预测）：资源管理文件</h3><p>资源管理计划——角色职责、识别资源、团队建设方法</p><p>团队绩效评价——能力改进</p><p>团队章程——团队价值观共识、沟通/冲突/决策流程</p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231026154544725.png" alt="image-20231026154544725" style="zoom:50%;"><h2 id="第十九记：建队"><a href="#第十九记：建队" class="headerlink" title="第十九记：建队"></a>第十九记：建队</h2><p><strong>题干：缺乏外部资源、需要外部专家给予支持、只有一家供应商、虚拟团队、文化差异</strong></p><p><strong>考点一：谈判</strong></p><h3 id="考点二：虚拟团队"><a href="#考点二：虚拟团队" class="headerlink" title="考点二：虚拟团队"></a>考点二：虚拟团队</h3><p>解决虚拟团队缺乏沟通、低绩效：</p><p>促进沟通——虚拟开工会、定期见面会</p><p>信息共享——看板、燃尽图、共享知识库、日历</p><p>在线讨论——视频会议、制定规则</p><h2 id="第二十记：领导力"><a href="#第二十记：领导力" class="headerlink" title="第二十记：领导力"></a>第二十记：领导力</h2><p><strong>题干：被干系人打扰、希望转去其他团队、获取什么类型新成员</strong></p><p><strong>考点一：领导力风格</strong></p><p>变革型——创新</p><p>魅力型——精神饱满</p><p>交易性——奖励</p><p>交互型——集合多个领导力</p><p>放任型——自我决策</p><p>仆人型——为他人着想</p><p>授权、教练（一起讨论、PM决定）、指令</p><p><strong>考点二：服务型领导力（消除障碍、避免干扰、设定愿景、提供支持）</strong></p><p><strong>考点三：营造安全氛围（敢于提出建议、新方法、信任）</strong></p><h2 id="第二十一记：情商"><a href="#第二十一记：情商" class="headerlink" title="第二十一记：情商"></a>第二十一记：情商</h2><p><strong>题干：情绪低落、个人原因不验收</strong></p><p>情商、人际关系</p><h2 id="第二十二记：授权"><a href="#第二十二记：授权" class="headerlink" title="第二十二记：授权"></a>第二十二记：授权</h2><p><strong>题干：协同工具谁来决策、成员希望加入团队谁来决定</strong></p><p>群体决策（罗马式表决、举手、宽带德尔菲）</p><h2 id="第二十三记：绩效"><a href="#第二十三记：绩效" class="headerlink" title="第二十三记：绩效"></a>第二十三记：绩效</h2><p><strong>题干：绩效下降</strong></p><p>问题处理流程、、激励方法</p><h3 id="考点一：团队建设工具"><a href="#考点一：团队建设工具" class="headerlink" title="考点一：团队建设工具"></a>考点一：团队建设工具</h3><p>认可和奖励、集中办公、人际关系、团队建设活动（塔克曼模型）、培训、情商、影响力</p><p>X（恶）Y（善/信任）理论</p><p><strong>（敏捷）团队自组织</strong></p><h2 id="第二十四记：冲突"><a href="#第二十四记：冲突" class="headerlink" title="第二十四记：冲突"></a>第二十四记：冲突</h2><p><strong>题干：内外部有分歧、磨合问题、意见不一致</strong></p><h3 id="冲突解决策略："><a href="#冲突解决策略：" class="headerlink" title="冲突解决策略："></a>冲突解决策略：</h3><p>面对、强迫、合作、缓解、妥协、撤退</p><p>先私下解决再升级</p><h2 id="第二十五记：障碍"><a href="#第二十五记：障碍" class="headerlink" title="第二十五记：障碍"></a>第二十五记：障碍</h2><p><strong>题干：障碍、噪音抱怨、测试遇到瓶颈</strong></p><p>识别障碍、障碍排优先级、分析障碍、解决障碍</p><h2 id="第二十六记：协作共识"><a href="#第二十六记：协作共识" class="headerlink" title="第二十六记：协作共识"></a>第二十六记：协作共识</h2><p><strong>题干：对产品功能担忧、达成共识、目标不一致</strong></p><p><strong>考点：共享愿景、目标或绩效指标达成一致</strong></p><h2 id="第二十七记：变革"><a href="#第二十七记：变革" class="headerlink" title="第二十七记：变革"></a>第二十七记：变革</h2><p><strong>题干：敏捷转型</strong></p><p><strong>考点一：变革管理</strong></p><p>组织变革管理迭代模型、ADKAR模型、转变模型，领导支持</p><p><strong>考点二：组织文化、组织架构、试点项目</strong></p><h2 id="第二十八记：收益"><a href="#第二十八记：收益" class="headerlink" title="第二十八记：收益"></a>第二十八记：收益</h2><p><strong>题干：商业价值、项目目标效益</strong></p><p><strong>考点一：商业论证&amp;项目章程（what）</strong></p><p>商业论证——业务需要、对业务目标贡献、成本效益分析</p><p>项目章程——授权资源、批准项目成立</p><p><strong>考点二：项目效益管理（how）</strong></p><p>PMO跟踪规划、干系人共识</p><p>成本效益分析、挣值决策树</p><p>效益管理计划——目标效益、战略一致性、责任人</p><p><strong>考点三：敏捷价值排序、项目愿景</strong></p><h2 id="第二十九记：合规"><a href="#第二十九记：合规" class="headerlink" title="第二十九记：合规"></a>第二十九记：合规</h2><p><strong>题干：法律法规</strong></p><p><strong>考点一：管理项目合规性</strong></p><p>确认合规要求-变更-风险-偏差分析-问题处理-PMO质量审计</p><p><strong>考点二：新增合规要求纳入待办列表</strong></p><h2 id="第三十记：原则绩效域"><a href="#第三十记：原则绩效域" class="headerlink" title="第三十记：原则绩效域"></a>第三十记：原则绩效域</h2><p><strong>题干：应用什么原则、应用什么绩效域</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
            <tag> 考证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PMP考证之旅-串讲</title>
      <link href="/2023/09/04/xue-xi/pmp-chuan-jiang/"/>
      <url>/2023/09/04/xue-xi/pmp-chuan-jiang/</url>
      
        <content type="html"><![CDATA[<h1 id="PMP考证之旅-串讲"><a href="#PMP考证之旅-串讲" class="headerlink" title="PMP考证之旅-串讲"></a>PMP考证之旅-串讲</h1><h2 id="项目管理基础"><a href="#项目管理基础" class="headerlink" title="项目管理基础"></a>项目管理基础</h2><h4 id="项目生命周期"><a href="#项目生命周期" class="headerlink" title="项目生命周期"></a>项目生命周期</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230919145244216.png" alt="image-20230919145244216"></p><p>项目生命周期<strong>包含</strong>项目管理生命周期</p><p>项目可以<strong>包含</strong>产品、产品<strong>也可以包含</strong>项目</p><h4 id="项目与运营"><a href="#项目与运营" class="headerlink" title="项目与运营"></a>项目与运营</h4><p>项目：独特性、临时性、渐进明细</p><p>运营：重复性、持续性</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230919145302849.png" alt="image-20230919145302849"></p><h4 id="项目、项目集、项目组合"><a href="#项目、项目集、项目组合" class="headerlink" title="项目、项目集、项目组合"></a>项目、项目集、项目组合</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230919145320750.png" alt="image-20230919145320750"></p><h4 id="组织过程资产、事业环境因素"><a href="#组织过程资产、事业环境因素" class="headerlink" title="组织过程资产、事业环境因素"></a>组织过程资产、事业环境因素</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230919145339303.png" alt="image-20230919145339303"></p><h4 id="组织结构的项目管理"><a href="#组织结构的项目管理" class="headerlink" title="组织结构的项目管理"></a>组织结构的项目管理</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230919154144902.png" alt="image-20230919154144902"></p><h4 id="裁剪的内容和步骤"><a href="#裁剪的内容和步骤" class="headerlink" title="裁剪的内容和步骤"></a>裁剪的内容和步骤</h4><p>项目管理办公室PMO：传统项目，提供各种模板，指导</p><p>价值交付办公室VDO：敏捷/适应型项目，培养团队成员</p><h2 id="项目过程管理"><a href="#项目过程管理" class="headerlink" title="项目过程管理"></a>项目过程管理</h2><h4 id="过程管理之原则知识点"><a href="#过程管理之原则知识点" class="headerlink" title="过程管理之原则知识点"></a>过程管理之原则知识点</h4><p><strong>驾驭复杂性：</strong></p><p>影响价值、范围、沟通、干系人、风险、技术创新。</p><p>降低复杂性的数量和影响</p><p><strong>拥抱适应性和韧性：</strong></p><p>从挫折或失败中快速恢复</p><p><strong>识别、评估和相应系统交付：</strong></p><p>从整理角度来考虑</p><p><strong>将质量融入到过程和交付物中：</strong></p><p>达到干系人期望</p><p>质量要求尽可能适当而有效</p><p><strong>优化风险应对：</strong></p><p>风险可能是积极的（机会）、消极的</p><p>风险是相关干系人达成一致</p><p>由一名责任人承担。</p><h3 id="启动过程组之任务"><a href="#启动过程组之任务" class="headerlink" title="启动过程组之任务"></a>启动过程组之任务</h3><h4 id="任务13：确定适当的项目方法和实践"><a href="#任务13：确定适当的项目方法和实践" class="headerlink" title="任务13：确定适当的项目方法和实践"></a>任务13：确定适当的项目方法和实践</h4><p>复杂性模型Cynefin框架：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230920100352016.png" alt="image-20230920100352016"></p><p>复杂性模型Stacey矩阵：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230920100534079.png" alt="image-20230920100534079"></p><h4 id="开发方法和交付节奏"><a href="#开发方法和交付节奏" class="headerlink" title="开发方法和交付节奏"></a>开发方法和交付节奏</h4><p>交付节奏：一次性交付、多次交付、定期交付、持续交付</p><p>开发方法：预测（一次性）、迭代（一次性）、增量（多次、定期）、敏捷（定期、持续）</p><h4 id="开发方法的考虑因素"><a href="#开发方法的考虑因素" class="headerlink" title="开发方法的考虑因素"></a>开发方法的考虑因素</h4><p><strong>产品、服务方面：</strong></p><p>创新、变更容易、能以组件方式快速交付可使用敏捷</p><p>有安全需求、法规要求通常为预测型</p><p><strong>项目方面：</strong></p><p>敏捷/适应型方法需要大量干系人参与</p><p>需要尽早交付，使用迭代/增量</p><p>资金有限，使用适应敏捷/迭代</p><p><strong>组织方面：</strong></p><p>自组织、能组建跨职能项目团队、人员规模7人左右使用敏捷</p><h4 id="敏捷宣言-原则"><a href="#敏捷宣言-原则" class="headerlink" title="敏捷宣言/原则"></a>敏捷宣言/原则</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230920103016064.png" alt="image-20230920103016064"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230920103244038.png" alt="image-20230920103244038"></p><h4 id="任务14：制定项目治理结构"><a href="#任务14：制定项目治理结构" class="headerlink" title="任务14：制定项目治理结构"></a>任务14：制定项目治理结构</h4><p><strong>项目治理：</strong>在项目之上高级别的指导、支持、监督、控制框架</p><p><strong>项目治理组织：</strong>项目指导委员会（以项目产生的虚拟组织）、项目最高决策机构</p><p><strong>项目管理办公室PMO：</strong>指导（标杆对照、经验教训）、支持、培养、促进变革，企业级PMO（解决多项目间矛盾，如项目资源分配优先级）</p><p><strong>敏捷卓越中心/价值交付办公室VDO：</strong>在敏捷中的组织，充当促进者，没有管理和监督职能</p><h4 id="任务9：整合项目规划活动"><a href="#任务9：整合项目规划活动" class="headerlink" title="任务9：整合项目规划活动"></a>任务9：整合项目规划活动</h4><p><strong>项目管理计划：</strong>管理计划+基准</p><p>配置管理计划=变更控制计划+版本管理计划</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230920105836692.png" alt="image-20230920105836692"></p><h4 id="任务8：规划和管理范围"><a href="#任务8：规划和管理范围" class="headerlink" title="任务8：规划和管理范围"></a>任务8：规划和管理范围</h4><p>范围蔓延（客户提）、范围镀金（自己提）</p><p>通过<strong>需求</strong>开发来获取项目需求，<strong>在此基础上确定项目的范围</strong></p><p><strong>需求的变更</strong>会引起<strong>项目范围的变更</strong></p><p>收集需求的工具：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230921111916682.png" alt="image-20230921111916682"></p><p>收集需求的输出：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230921112346978.png" alt="image-20230921112346978"></p><p><strong>定义范围</strong></p><p><strong>项目范围说明书：</strong></p><p>产品范围说明、验收标准、可交付成果、项目假设、制约因素、除外责任</p><p>项目范围说明书：做什么</p><p>范围管理计划：怎么做说明书的依据</p><p><strong>创建WBS工作分解结构&amp;WBS词典</strong></p><p>WBS：对可交付成果的分解</p><p>没有时间，只对范围有关</p><p>WBS词典：工作描述、负责组织、进度里程碑、进度活动、成本估算、质量要求、验收标准</p><p>范围基准=项目范围说明书+WBS+WBS词典</p><p><strong>确认范围</strong></p><p>验收可交付成果</p><p><strong>控制范围</strong></p><p>偏差分析、趋势分析</p><h4 id="任务6：规划和管理进度计划"><a href="#任务6：规划和管理进度计划" class="headerlink" title="任务6：规划和管理进度计划"></a>任务6：规划和管理进度计划</h4><p><strong>规划进度计划</strong></p><p>进度管理计划</p><p><strong>定义活动</strong></p><p>通过<strong>分解</strong>获得活动清单、活动属性、里程碑清单</p><p>活动属性：更详细的清单备注，符合渐进明细</p><p>里程碑清单：包含强制性里程碑、选择性里程碑（自定义的，为更好的实现强制性里程碑）</p><p><strong>排列活动顺序</strong></p><p>活动逻辑和依赖关系：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230921115256899.png" alt="image-20230921115256899"></p><p>项目进度网络图：</p><p>关键路径法</p><p><strong>估算活动资源</strong></p><p>估算的方法和概念：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230921120042242.png" alt="image-20230921120042242"></p><p>传统估算方式：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230921120323018.png" alt="image-20230921120323018"></p><p>敏捷估算方式：</p><p>相对估算：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230921120946642.png" alt="image-20230921120946642"></p><p><strong>估算活动持续时间</strong></p><p><strong>制定进度计划</strong></p><p>进度的工具</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230921121755791.png" alt="image-20230921121755791"></p><p>传统项目进度计划：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230921121920683.png" alt="image-20230921121920683"></p><p>敏捷项目进度计划</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230921122054670.png" alt="image-20230921122054670"></p><p><strong>控制进度</strong></p><p>燃尽图、燃起图：产量度量数据</p><h4 id="任务5：规划并管理预算和资源"><a href="#任务5：规划并管理预算和资源" class="headerlink" title="任务5：规划并管理预算和资源"></a>任务5：规划并管理预算和资源</h4><p><strong>规划成本管理</strong></p><p><strong>估算成本</strong></p><p><strong>制定预算</strong></p><p>储备分析</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922150245704.png" alt="image-20230922150245704"></p><p>项目预算的构成</p><p>活动成本的应急储备→工作包成本→控制账户成本→项目成本→项目应急储备→成本基准→管理储备→项目资金需求。</p><p>项目预算可以从阶梯状逐步去要钱。</p><p><strong>控制成本</strong></p><p>挣值管理</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922151142958.png" alt="image-20230922151142958"></p><p>价值CV=EV-AC，&gt;0好，未超预算</p><p>进度SV=EV-PV，&gt;0好，超前完成了</p><p>CPI=EV/AC，&gt;1好，未超预算（不一定）</p><p>SPI=EV/PV，&gt;1好，超期完成了（不一定）</p><p><strong>管理实物资源</strong></p><p>大量实物资源需要物流系统、物流计划、支持性文档</p><p>作用：减少浪费、减少搬运和存储时间、促进安全</p><h4 id="规划和管理产品-可交付成果的质量"><a href="#规划和管理产品-可交付成果的质量" class="headerlink" title="规划和管理产品/可交付成果的质量"></a>规划和管理产品/可交付成果的质量</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922154153834.png" alt="image-20230922154153834"></p><p><strong>规划质量管理</strong></p><p>规划质量的工具</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922154942083.png" alt="image-20230922154942083"></p><p>规划质量的输出</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922155253358.png" alt="image-20230922155253358"></p><p><strong>管理质量QA工具</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922155837704.png" alt="image-20230922155837704"></p><p>管理质量QA输出</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922160029232.png" alt="image-20230922160029232"></p><p><strong>控制质量QC</strong></p><p>控制图（六西格玛，前后±3）</p><h4 id="任务2：管理沟通"><a href="#任务2：管理沟通" class="headerlink" title="任务2：管理沟通"></a>任务2：管理沟通</h4><p>沟通类型</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922160348483.png" alt="image-20230922160348483"></p><p><strong>规划沟通管理</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922160948587.png" alt="image-20230922160948587"></p><p>沟通模型</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922161143135.png" alt="image-20230922161143135"></p><p>敏捷项目信息工具</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922161322810.png" alt="image-20230922161322810"></p><p><strong>监督沟通</strong></p><p>输入问题日志、输出变更请求</p><h4 id="任务3：评估和管理风险"><a href="#任务3：评估和管理风险" class="headerlink" title="任务3：评估和管理风险"></a>任务3：评估和管理风险</h4><p>不确定性（收集信息）、模糊性（渐进明细、原型法、实验）、复杂性、易变性（备选方案，进度储备）、风险（积极、消极）</p><p><strong>规划风险管理</strong></p><p><strong>识别风险</strong></p><p>识别风险的工具</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173205868.png" alt="image-20230930173205868"></p><p>风险等级和其他工件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173255409.png" alt="image-20230930173255409"></p><p><strong>实施定性风险分析</strong></p><p>定性风险分析工具</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173332408.png" alt="image-20230930173332408"></p><p> <strong>实施定量风险分析</strong></p><p>定量风险分析工具</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173409300.png" alt="image-20230930173409300"></p><p><strong>规划风险应对</strong></p><p>威胁应对策略</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173439749.png" alt="image-20230930173439749"></p><p>机会应对策略</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173538180.png" alt="image-20230930173538180"></p><p><strong>风险控制流程</strong></p><p><strong>风险控制流程</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173645276.png" alt="image-20230930173645276"></p><p><strong>实施风险应对</strong></p><p><strong>监督风险</strong></p><p>控制风险的工具</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173720703.png" alt="image-20230930173720703"></p><p>储备分析</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173746403.png" alt="image-20230930173746403"></p><p>敏捷风险管理</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173814344.png" alt="image-20230930173814344"></p><h4 id="任务11：规划和管理采购"><a href="#任务11：规划和管理采购" class="headerlink" title="任务11：规划和管理采购"></a>任务11：规划和管理采购</h4><p><strong>规划采购管理</strong></p><p>合同类型</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930173943300.png" alt="image-20230930173943300"></p><p><strong>工具和输出</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930174028054.png" alt="image-20230930174028054"></p><p><strong>实施采购</strong></p><p>工具和技术</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930174058255.png" alt="image-20230930174058255"></p><p><strong>控制采购</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930174137411.png" alt="image-20230930174137411"></p><h4 id="任务4：让相关方参与进来"><a href="#任务4：让相关方参与进来" class="headerlink" title="任务4：让相关方参与进来"></a>任务4：让相关方参与进来</h4><p> <strong>识别相关方</strong></p><p>相关方分析</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930174242728.png" alt="image-20230930174242728"></p><p><strong>规划相关方参与</strong></p><p>相关方参与计划</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930174314509.png" alt="image-20230930174314509"></p><p><strong>管理相关方参与（实施）</strong></p><p>通过计划来让相关方满意、达成共识</p><p><strong>监督相关方参与</strong></p><p>问题日志→变更请求</p><h4 id="任务12：管理项目工件"><a href="#任务12：管理项目工件" class="headerlink" title="任务12：管理项目工件"></a>任务12：管理项目工件</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930174349463.png" alt="image-20230930174349463"></p><h4 id="任务1：执行需要紧急交付商业价值的项目"><a href="#任务1：执行需要紧急交付商业价值的项目" class="headerlink" title="任务1：执行需要紧急交付商业价值的项目"></a>任务1：执行需要紧急交付商业价值的项目</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930174452799.png" alt="image-20230930174452799"></p><p>评估用户故事优先级</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930174510127.png" alt="image-20230930174510127"></p><h4 id="任务16：确保进行知识交流，使项目得以持续开展"><a href="#任务16：确保进行知识交流，使项目得以持续开展" class="headerlink" title="任务16：确保进行知识交流，使项目得以持续开展"></a>任务16：确保进行知识交流，使项目得以持续开展</h4><p>知识管理</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930174546979.png" alt="image-20230930174546979"></p><h4 id="任务15：管理项目问题"><a href="#任务15：管理项目问题" class="headerlink" title="任务15：管理项目问题"></a>任务15：管理项目问题</h4><p>审查工具和方法</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930174935333.png" alt="image-20230930174935333"></p><p>测量陷阱</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930175455223.png" alt="image-20230930175455223"></p><p>项目状态展示</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930175746182.png" alt="image-20230930175746182"></p><p>每日站立会议</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930180045731.png" alt="image-20230930180045731"></p><p>任务版&amp;看板</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930180203872.png" alt="image-20230930180203872"></p><p>监控团队的效率</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930181014081.png" alt="image-20230930181014081"></p><h4 id="任务10：管理项目变更"><a href="#任务10：管理项目变更" class="headerlink" title="任务10：管理项目变更"></a>任务10：管理项目变更</h4><p>变更请求</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930181917407.png" alt="image-20230930181917407"></p><p>变更控制流程图</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930182256433.png" alt="image-20230930182256433"></p><h4 id="任务17：规划和管理项目-阶段的首收尾或过渡工作"><a href="#任务17：规划和管理项目-阶段的首收尾或过渡工作" class="headerlink" title="任务17：规划和管理项目/阶段的首收尾或过渡工作"></a>任务17：规划和管理项目/阶段的首收尾或过渡工作</h4><p>传统项目收尾流程</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930183055525.png" alt="image-20230930183055525"></p><p>收尾会议</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230930183356856.png" alt="image-20230930183356856"></p><h2 id="人员管理"><a href="#人员管理" class="headerlink" title="人员管理"></a>人员管理</h2><p><strong>人员管理之原则</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006130055158.png" alt="image-20231006130055158"></p><h4 id="任务12：定义团队的基本规则"><a href="#任务12：定义团队的基本规则" class="headerlink" title="任务12：定义团队的基本规则"></a>任务12：定义团队的基本规则</h4><p>规划资源管理</p><p><strong>数据表现</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006131240452.png" alt="image-20231006131240452"></p><p>层级图</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006131419633.png" alt="image-20231006131419633"></p><p><strong>资源管理计划VS团队章程</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006132018937.png" alt="image-20231006132018937"></p><h4 id="任务16：建立团队"><a href="#任务16：建立团队" class="headerlink" title="任务16：建立团队"></a>任务16：建立团队</h4><p>获取资源</p><p><strong>虚拟团队</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006132518807.png" alt="image-20231006132518807"></p><p><strong>获取资源的工具</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006132815648.png" alt="image-20231006132815648"></p><h4 id="任务2：领导团队"><a href="#任务2：领导团队" class="headerlink" title="任务2：领导团队"></a>任务2：领导团队</h4><p><strong>领导力模型</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006133902159.png" alt="image-20231006133902159"></p><p><strong>服务型领导</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006134034232.png" alt="image-20231006134034232"></p><p><strong>领导力风格</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006134218207.png" alt="image-20231006134218207"></p><p><strong>敏捷项目主要成员</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006134544735.png" alt="image-20231006134544735"></p><h4 id="任务14：运用情商提升团队绩效"><a href="#任务14：运用情商提升团队绩效" class="headerlink" title="任务14：运用情商提升团队绩效"></a>任务14：运用情商提升团队绩效</h4><p><strong>情商</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006135026807.png" alt="image-20231006135026807"></p><h4 id="任务5：确保团队成员-相关方完成适当培训"><a href="#任务5：确保团队成员-相关方完成适当培训" class="headerlink" title="任务5：确保团队成员/相关方完成适当培训"></a>任务5：确保团队成员/相关方完成适当培训</h4><h4 id="任务13：指导有关的相关方"><a href="#任务13：指导有关的相关方" class="headerlink" title="任务13：指导有关的相关方"></a>任务13：指导有关的相关方</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006135509117.png" alt="image-20231006135509117"></p><h4 id="任务4：向团队成员和相关方授权"><a href="#任务4：向团队成员和相关方授权" class="headerlink" title="任务4：向团队成员和相关方授权"></a>任务4：向团队成员和相关方授权</h4><p><strong>群体决策的方法</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006135857261.png" alt="image-20231006135857261"></p><h4 id="任务3：支持团队绩效"><a href="#任务3：支持团队绩效" class="headerlink" title="任务3：支持团队绩效"></a>任务3：支持团队绩效</h4><p><strong>团队建设工具</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006140355373.png" alt="image-20231006140355373"></p><p><strong>激励机制</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006140909786.png" alt="image-20231006140909786"></p><p><strong>高绩效团队</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006141109283.png" alt="image-20231006141109283"></p><p><strong>团队度量指标</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006141154547.png" alt="image-20231006141154547"></p><h4 id="任务1：管理冲突"><a href="#任务1：管理冲突" class="headerlink" title="任务1：管理冲突"></a>任务1：管理冲突</h4><p><strong>冲突模型</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006141722285.png" alt="image-20231006141722285"></p><h4 id="任务7：解决和消除团队面临的障碍妨碍阻碍"><a href="#任务7：解决和消除团队面临的障碍妨碍阻碍" class="headerlink" title="任务7：解决和消除团队面临的障碍妨碍阻碍"></a>任务7：解决和消除团队面临的障碍妨碍阻碍</h4><p><strong>障碍定义</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006143039356.png" alt="image-20231006143039356"></p><h4 id="任务9：与相关方协作"><a href="#任务9：与相关方协作" class="headerlink" title="任务9：与相关方协作"></a>任务9：与相关方协作</h4><h4 id="任务10：凝聚共识"><a href="#任务10：凝聚共识" class="headerlink" title="任务10：凝聚共识"></a>任务10：凝聚共识</h4><p><strong>营造团队协作氛围</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006143457791.png" alt="image-20231006143457791"></p><h2 id="项目商业环境"><a href="#项目商业环境" class="headerlink" title="项目商业环境"></a>项目商业环境</h2><p><strong>商业环境之原则知识点</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006144404125.png" alt="image-20231006144404125"></p><h4 id="任务3：评估并应对外部业务环境变化对范围的影响"><a href="#任务3：评估并应对外部业务环境变化对范围的影响" class="headerlink" title="任务3：评估并应对外部业务环境变化对范围的影响"></a>任务3：评估并应对外部业务环境变化对范围的影响</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006144731897.png" alt="image-20231006144731897"></p><p><strong>内外部环境</strong></p><p>外部环境是必须使用的</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006144824168.png" alt="image-20231006144824168"></p><h4 id="任务4：为组织变革提供支持"><a href="#任务4：为组织变革提供支持" class="headerlink" title="任务4：为组织变革提供支持"></a>任务4：为组织变革提供支持</h4><p><strong>变革模型</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006145259280.png" alt="image-20231006145259280"></p><h4 id="任务2：评估并交付项目利益和价值"><a href="#任务2：评估并交付项目利益和价值" class="headerlink" title="任务2：评估并交付项目利益和价值"></a>任务2：评估并交付项目利益和价值</h4><p>制定项目章程</p><p><strong>战略工件</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006145654102.png" alt="image-20231006145654102"></p><p><strong>商业论证计算</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006145940757.png" alt="image-20231006145940757"></p><p><strong>项目启动会VS项目开工会</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006150024625.png" alt="image-20231006150024625"></p><h4 id="任务1：规划和管理项目的合规性"><a href="#任务1：规划和管理项目的合规性" class="headerlink" title="任务1：规划和管理项目的合规性"></a>任务1：规划和管理项目的合规性</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231006150413778.png" alt="image-20231006150413778"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
            <tag> 考证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PMP考证之旅-PMP错题册</title>
      <link href="/2023/09/04/xue-xi/pmp-cuo-ti-ce/"/>
      <url>/2023/09/04/xue-xi/pmp-cuo-ti-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="PMP考证之旅-PMP错题册"><a href="#PMP考证之旅-PMP错题册" class="headerlink" title="PMP考证之旅-PMP错题册"></a>PMP考证之旅-PMP错题册</h1><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231008145033844.png" alt="image-20231008145033844"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231008145159850.png" alt="image-20231008145159850"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231008145223281.png" alt="image-20231008145223281"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231008145251797.png" alt="image-20231008145251797"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231008145550634.png" alt="image-20231008145550634"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231008145605838.png" alt="image-20231008145605838"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231008145620597.png" alt="image-20231008145620597"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018145847170.png" alt="image-20231018145847170"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018145914973.png" alt="image-20231018145914973"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018152857393.png" alt="image-20231018152857393"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018152927509.png" alt="image-20231018152927509"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018153049417.png" alt="image-20231018153049417"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018154156355.png" alt="image-20231018154156355"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018154318287.png" alt="image-20231018154318287"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018160136804.png" alt="image-20231018160136804"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018160206628.png" alt="image-20231018160206628"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018160242034.png" alt="image-20231018160242034"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018160258910.png" alt="image-20231018160258910"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018164449452.png" alt="image-20231018164449452"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018164602611.png" alt="image-20231018164602611"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231018165401048.png" alt="image-20231018165401048"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231019171243854.png" alt="image-20231019171243854"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231019171322143.png" alt="image-20231019171322143"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231023163637818.png" alt="image-20231023163637818"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024102826985.png" alt="image-20231024102826985"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024102912159.png" alt="image-20231024102912159"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024103048596.png" alt="image-20231024103048596"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024103133950.png" alt="image-20231024103133950"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024104531555.png" alt="image-20231024104531555"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024104558869.png" alt="image-20231024104558869"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024104717079.png" alt="image-20231024104717079"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024110520185.png" alt="image-20231024110520185"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024110544324.png" alt="image-20231024110544324"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024110607892.png" alt="image-20231024110607892"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024110620606.png" alt="image-20231024110620606"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231024110716685.png" alt="image-20231024110716685"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231026112348324.png" alt="image-20231026112348324"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231026112518670.png" alt="image-20231026112518670"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231031171301453.png" alt="image-20231031171301453"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231031171352002.png" alt="image-20231031171352002"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106153823490.png" alt="image-20231106153823490"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106153923754.png" alt="image-20231106153923754"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106155759961.png" alt="image-20231106155759961"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106155954522.png" alt="image-20231106155954522"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106160149652.png" alt="image-20231106160149652"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106160242220.png" alt="image-20231106160242220"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106161710213.png" alt="image-20231106161710213"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106162725581.png" alt="image-20231106162725581"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106164219562.png" alt="image-20231106164219562"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106164412160.png" alt="image-20231106164412160"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231106164437349.png" alt="image-20231106164437349"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231108141117801.png" alt="image-20231108141117801"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231108141329398.png" alt="image-20231108141329398"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231108141420516.png" alt="image-20231108141420516"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
            <tag> 考证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx优化</title>
      <link href="/2023/08/31/util/nginx-you-hua/"/>
      <url>/2023/08/31/util/nginx-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx优化"><a href="#Nginx优化" class="headerlink" title="Nginx优化"></a>Nginx优化</h1><blockquote><p>背景：工作时出现过高并发访问时，用户访问网站偶尔会出现500报错，加载不出来页面，通过加服务器节点缓解的效率不高，通过排查，发现nginx服务器的最大打开文件数worker_rlimit_nofile没有配置，默认值为2000。在nginx配置该参数与服务器文件最大连接数ulimit -n一致为102400，恢复正常，因此查阅资料总结以下方法：</p></blockquote><p>参考：<a href="https://www.bilibili.com/video/BV13T4y1E7Tn?p=2&amp;vd_source=9189af973f55454291ebdc474dc4435f">Linux优化视频</a></p><h3 id="0、优化系统连接数"><a href="#0、优化系统连接数" class="headerlink" title="0、优化系统连接数"></a>0、优化系统连接数</h3><p>linux 默认值 open files为1024。查看当前系统值：</p><pre><code># ulimit -n1024</code></pre><p>说明server只允许同时打开1024个文件。</p><p>使用ulimit -a 可以查看当前系统的所有限制值，使用ulimit -n 可以查看当前的最大打开文件数。</p><p>新装的linux 默认只有1024 ，当作负载较大的服务器时，很容易遇到error: too many open files。因此，需要将其改大，在/etc/security/limits.conf最后增加：</p><pre><code>*               soft    nofile         102400*               hard    nofile         102400*               soft    noproc         102400*               hard    noproc         102400</code></pre><h3 id="1、Nginx运行工作进程数量"><a href="#1、Nginx运行工作进程数量" class="headerlink" title="1、Nginx运行工作进程数量"></a>1、Nginx运行工作进程数量</h3><p>Nginx运行工作进程个数一般设置CPU的核心或者核心数x2</p><p>如果不了解cpu的核数，可以top命令之后按1看出来</p><pre class=" language-linux"><code class="language-linux">[root@lx~]# vi/usr/local/nginx1.10/conf/nginx.confworker_processes 4;[root@lx~]# /usr/local/nginx1.10/sbin/nginx-s reload[root@lx~]# ps -aux | grep nginx |grep -v greproot 9834 0.0 0.0 47556 1948 ? &nbsp; &nbsp; Ss 22:36 0:00 nginx: master processnginxwww 10135 0.0 0.0 50088 2004 ? &nbsp; &nbsp; &nbsp; S &nbsp; 22:58 0:00 nginx: worker processwww 10136 0.0 0.0 50088 2004 ? &nbsp; &nbsp; &nbsp; S &nbsp; 22:58 0:00 nginx: worker processwww 10137 0.0 0.0 50088 2004 ? &nbsp; &nbsp; &nbsp; S &nbsp; 22:58 0:00 nginx: worker processwww 10138 0.0 0.0 50088 2004 ? &nbsp; &nbsp; &nbsp; S &nbsp; 22:58 0:00 nginx: worker process</code></pre><h3 id="2、Nginx运行CPU亲和力"><a href="#2、Nginx运行CPU亲和力" class="headerlink" title="2、Nginx运行CPU亲和力"></a>2、Nginx运行CPU亲和力</h3><p>比如4核配置：</p><pre><code>worker_processes 4;worker_cpu_affinity 0001 0010 0100 1000</code></pre><p>比如8核配置：</p><pre><code>worker_processes 8;worker_cpu_affinity 00000001 00000010 00000100 0000100000010000 00100000 01000000 10000000;</code></pre><p>或者根据自动设置对应服务器核心数量：</p><pre><code>worker_processes auto;worker_cpu_affinity auto;</code></pre><p>worker_processes最多开启8个，8个以上性能提升不会再提升了，而且稳定性变得更低，所以8个进程够用了。</p><h3 id="3、Nginx最大打开文件数"><a href="#3、Nginx最大打开文件数" class="headerlink" title="3、Nginx最大打开文件数"></a>3、Nginx最大打开文件数</h3><pre><code>worker_rlimit_nofile 102400;</code></pre><p>这个指令是指当一个nginx进程打开的最多文件描述符数目，最好与ulimit -n的值保持一致</p><h3 id="4、Nginx事件处理模型"><a href="#4、Nginx事件处理模型" class="headerlink" title="4、Nginx事件处理模型"></a>4、Nginx事件处理模型</h3><pre><code>events {&nbsp; use epoll;&nbsp; worker_connections 102400;&nbsp; multi_accept on;}</code></pre><p>nginx采用epoll事件模型，处理效率高。</p><p>work_connections是单个worker进程允许客户端最大连接数，这个数值一般根据服务器性能和内存来制定，实际最大值就是worker进程数乘以work_connections。</p><p>multi_accept 告诉nginx收到一个新连接通知后接受尽可能多的连接，默认是on，设置为on后，多个worker按串行方式来处理连接，也就是一个连接只有一个worker被唤醒，其他的处于休眠状态，设置为off后，多个worker按并行方式来处理连接，也就是一个连接会唤醒所有的worker，直到连接分配完毕，没有取得连接的继续休眠。当你的服务器连接数不多时，开启这个参数会让负载有一定的降低，但是当服务器的吞吐量很大时，为了效率，可以关闭这个参数。</p>]]></content>
      
      
      <categories>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PMP考证之旅-精讲</title>
      <link href="/2023/08/01/xue-xi/pmp-jing-jiang/"/>
      <url>/2023/08/01/xue-xi/pmp-jing-jiang/</url>
      
        <content type="html"><![CDATA[<h1 id="PMP考证之旅-精讲"><a href="#PMP考证之旅-精讲" class="headerlink" title="PMP考证之旅-精讲"></a>PMP考证之旅-精讲</h1><h2 id="第一章：引论"><a href="#第一章：引论" class="headerlink" title="第一章：引论"></a>第一章：引论</h2><h3 id="引论（上）"><a href="#引论（上）" class="headerlink" title="引论（上）"></a>引论（上）</h3><p>要求：</p><p>配合完成任务、互动回答、上完课复习讲义、知识点应用</p><p>项目管理整体思路：<br>管事（过程）—（业务环境）—理人（人员）</p><p>PMP考试简介</p><p>Project Management Professional</p><p>PMI项目管理协会</p><p>180题/230分钟<br>人员 42%，过程 50%，环境8%</p><p>职业道德与专业行为规范：责任、尊重、公正、诚实</p><h3 id="引论（中）"><a href="#引论（中）" class="headerlink" title="引论（中）"></a>引论（中）</h3><p>项目的概念：</p><p>为创造<strong>独特的</strong>产品、服务、成果而进行的<strong>临时性</strong>工作</p><p><strong>独特性</strong>（都不一样）、<strong>临时性</strong>（有始有终）、<strong>渐进明细性</strong>（逐渐清晰，框架内明细，有边界）</p><p>※注意：范围蔓延是超出边界的意思，是问题，而非特性。</p><p>项目管理的概念：</p><p>知识、技能、工具与技术应用于管理活动和领导力，以满足项目的要求。</p><p>重点和难点：平衡制约，实现价值。</p><p>四个层次：</p><p>1、分解：复杂事情简单化</p><p>2、临界值：简单事情量化</p><p>3、规律：量化事情专业化（总结规律）</p><p>4、框架模板：专业的事情模板化</p><p>项目的制约因素：</p><p>范围、进度、成本、质量、风险、资源、干系人（相关方）满意度。</p><p>· 不同项目的因素优先级会不同。</p><p>· 任何一个因素变化，会影响<strong>至少一个</strong>因素变动</p><p>· 制约因素最终目的是实现<strong>项目价值</strong></p><p>· 务必<strong>避免范围蔓延（甲方多要）、镀金（乙方多给）</strong></p><p>·<strong>可持续性</strong>逐渐会成为一个重要的制约因素</p><p>项目启动背景：</p><p>1、 个人：满足<strong>干系人要求</strong>需求</p><p>2、公司：执行、变更业务或技术<strong>战略</strong></p><p>3、社会：符合法律、法规或<strong>社会要求</strong></p><p>4、<strong>创新</strong>：创造、改进或修复产品、过程或服务</p><p>项目的作用：</p><p>1、<strong>产生变化</strong>：驱动变更/变革</p><p>2、<strong>创造商业价值</strong>：有形收益（钱）、无形收益（品牌）</p><p>十大知识领域：</p><p>1、项目整合管理</p><p>2、项目范围管理</p><p>3、项目进度管理</p><p>4、项目成本管理</p><p>5、项目质量管理</p><p>6、项目资源管理</p><p>7、项目沟通管理</p><p>8、项目风险管理</p><p>9、项目采购管理</p><p>10、项目干系人管理 </p><p>项目管理的五大过程组：</p><p>启动、规划、执行、监控、收尾</p><p>5大过程组项目都必会经历，监控贯穿始终</p><p>第七版：</p><p>价值、12原则、8大绩效域</p><h3 id="引论（下）"><a href="#引论（下）" class="headerlink" title="引论（下）"></a>引论（下）</h3><p>大纲：</p><p>引论（什么是项目管理、项目概念、特点）</p><p>项目价值交付系统（为什么<strong>以价值交付为导向</strong>，价值导向怎么走）</p><p>项目管理整体原则（12项项目管理要求<strong>原则</strong>）</p><p>干系人绩效域（<strong>提升干系人支持度、降低抵制</strong>）</p><p>团队绩效域（<strong>要人抢人外包，团队建设</strong>）</p><p>开发方法与生命周期绩效域（项目的各种<strong>开发形式</strong>，敏捷瀑布等）</p><p>交付绩效域（<strong>项目范围，需求收集</strong>）</p><p>规划绩效域（<strong>成本、进度表规划</strong>）</p><p>项目工作绩效域（执行阶段，<strong>经验总结</strong>）</p><p>测量绩效域（<strong>监控偏差，需求变更、汇报</strong>）</p><p>不确定性绩效域（<strong>环境、处理风险</strong>）</p><p>有效进行项目裁剪（不同流程工具裁剪）</p><p>适应型生命周期内容补充（敏捷、混合开发）</p><p>项目经理的定义：</p><p>执行组织委派，<strong>领导团队实现项目目标</strong>的个人</p><p>项目经理对项目的影响：</p><p>领导团队<strong>实现干系人期望</strong>、作为<strong>沟通接口</strong>、能<strong>培养非正式人际网络</strong>、好的项目经理具有：超凡的人际关系和沟通技能以及<strong>积极的态度</strong></p><p>项目经理与组织的交互：</p><p><strong>倡导者、展现项目管理价值</strong></p><p>运营与项目管理：</p><p>项目目标——<strong>发展</strong> 运营——<strong>生存</strong> </p><h2 id="第二章：价值交付系统"><a href="#第二章：价值交付系统" class="headerlink" title="第二章：价值交付系统"></a>第二章：价值交付系统</h2><p><strong>项目组合/项目集/项目管理</strong></p><p>项目组合：做正确的事、资源优先级分配（关注<strong>价值实现</strong>，实现<strong>战略目标</strong>，划分项目的<strong>优先顺序</strong>）</p><p>项目集：关联项目（关注<strong>收益实现，1+1&gt;2</strong>）</p><p>项目管理：单个项目（关注<strong>可交付物+收益</strong>）</p><p>项目组合+项目集+项目管理+组织驱动因素=组织级项目管理OPM</p><p>组织驱动因素：<strong>组织结构、组织文化、组织技术、人力资源实践</strong></p><p>组件的概念：</p><p>价值交付系统中<strong>组件</strong>创建了用于产生成果和收益的可交付物</p><p>交付物（成果）-&gt;收益-&gt;价值</p><p>项目集管理：</p><p>一组<strong>相互关联</strong>且被<strong>协调管理</strong>的项目（重点关注项目间的依赖关系）</p><p>项目组合管理：</p><p>识别、排序、授权、管理、控制（重点关注<strong>资源分配</strong>优先级、确保与<strong>组织战略</strong>协调一致）</p><p>价值交付的相关生态环节（环境）：</p><p><strong>治理架构</strong>——制定规则、政策、程序等方式行使职权，<strong>用于监督、决策、控制</strong>（不包括协调、平衡）</p><p><strong>组织结构</strong>——<strong>职能型</strong>（以部门经理为主，<strong>优：专业化，缺：沟通效率低</strong>）、<strong>项目型</strong>（以项目经理为主，<strong>优：沟通效率高，缺：职员无归属感</strong>）、弱<strong>矩阵型</strong>、平衡矩阵型、强矩阵（<strong>优：资源利用率高，缺：管理复杂度高</strong>）</p><p><strong>内外部环境</strong></p><p>影响来源——<strong>事业环境因素</strong>（EEF，<strong>特点：一般轻易改变不了</strong>，<strong>组织文化结构、基础设施、资源可用性、员工能力、法律限制</strong>）、<strong>组织过程资产</strong>（OPA，<strong>特点：不断的更新补充，帮助项目成功， 知识库、程序、经验教训报告</strong>）</p><p><strong>项目管理办公室（PMO）</strong>：对治理过程标准化，<strong>制定政策模板，给项目经理提供支持</strong>，指导培训，管理共享资源，项目资源排序</p><p>PMO职能：<strong>人员培养、流程制度、咨询辅导（标杆对照、经验教训）、管理工具、过程监控、绩效考核</strong></p><p>PMO三种类型：</p><p><strong>支持型</strong>——项目资源库、<strong>无权要求</strong></p><p><strong>控制型</strong>——对项目<strong>有一定的控制权</strong></p><p><strong>指令性</strong>——PMO<strong>直接管控</strong>项目</p><p>产品和项目的关系</p><p>产品生命周期：<strong>引入（概念、交付）、成长、成熟、衰退</strong></p><p>项目生命周期在产品生命周期的每个阶段内。<strong>产品生命周期&gt;项目生命周期&gt;开发生命周期</strong></p><p>项目生命周期：开始项目、组织与准备、执行项目工作、结束项目</p><p>项目生命周期的每个阶段<strong>是顺序、迭代或交替</strong>进行。</p><p>一个或多个项目阶段设计到与开发相关，成为开发生命周期：<strong>预测型、迭代型、增量型、敏捷型、混合型</strong>。统称为适应型</p><p>预测（瀑布）型——<strong>按顺序</strong>。适用于<strong>充分了解后</strong>，整批一次性交付</p><p>迭代型——<strong>重复</strong>循环开发。适用于<strong>不断变化目标范围，可部分交付</strong></p><p>增量型——<strong>渐进</strong>增加功能。适用于<strong>不断变化目标范围，可部分交付</strong></p><p>敏捷型——迭代和增量进一步应用。迭代快，<strong>时间和资源是固定的</strong>。适用于<strong>快速变化</strong>的环境</p><p>敏捷宣言：</p><p><strong>个体和互动</strong> 高于 流程和工具</p><p>工作的软件 高于 详尽的文档（<strong>事做好</strong>）</p><p><strong>客户合作</strong> 高于 合同谈判</p><p><strong>响应变化</strong> 高于 遵循计划</p><p>敏捷原则：</p><p><strong>持续交付，小步快跑</strong>（先交付最小可行产品MVP，如果需要先看可行性:开发原型，mvp可是最小实现价值的产品，比可行性开发原型久）</p><p>拥抱<strong>变化</strong>，提高优势</p><p>尽早反馈，<strong>价值排序</strong>（排待办，排优先级）</p><p>成果达成，衡量进度</p><p><strong>持续更新</strong>，强化敏捷</p><p><strong>精简产品</strong>，杜绝浪费</p><p>团队合作，<strong>每日互动</strong></p><p>信任成员，<strong>给予支持</strong></p><p><strong>当面沟通</strong>，高效明了</p><p>各方成员，稳定节奏</p><p>同心协力，<strong>自我组织</strong></p><p>团队<strong>自省</strong>，持续改进（回顾会，总结）</p><h2 id="第三章：项目管理原则"><a href="#第三章：项目管理原则" class="headerlink" title="第三章：项目管理原则"></a>第三章：项目管理原则</h2><p>项目管理原则</p><p><strong>1、成为勤勉、尊重、关心他人的管家</strong></p><p>维护价值观和道德。</p><p><strong>诚信</strong>：以身作则</p><p><strong>关心</strong>：<strong>帮助扫清障碍，如拉会，而非亲自解决问题</strong></p><p><strong>可信</strong>：<strong>名正言顺，有法定权利</strong></p><p><strong>合规</strong>：<strong>遵守法律法规，如安全检查表必须要交</strong></p><p>考点：<strong>必须被授权</strong>（通常在项目章程）、营造透明的工作环境、开放的沟通渠道，<strong>为团队成员扫清障碍</strong>。</p><p><strong>2、营造协作的项目团队环境</strong></p><p><strong>团队共识</strong>：<strong>团队章程制定，达成共识</strong>。</p><p>组织结构：默认矩阵型，资源在职能经理手里。</p><p>职权：实体授权</p><p>担责：对成果的负责</p><p>职责：有义务去完成一个事</p><p><strong>多元化团队要多元管理，求同存异</strong>。</p><p>考点：<strong>计划不是管理者来定，规则是具有共识性的</strong>，<strong>跨职能团队的规则要尽早建立</strong>。</p><p><strong>3、有效地干系人参与</strong></p><p><strong>提高支持（理解、共识）、降低抵制</strong></p><p>干系人参与和沟通管理有区别，干系人参与指对项目的态度意思。为了维护态度关系可以：<strong>互动会议、面对面会议、非正式对话、知识共享</strong></p><p>考点：<strong>先了解情况（干系人尽早识别、持续识别，识别态度是支持、反对、中立）、再分析问题、再制定策略</strong>，提高支持、降低抵制</p><p><strong>4、聚焦于价值</strong></p><p>项目管理商业文件：</p><p>**项目商业论证(可行性分析)**——项目发起人发起，项目经理提供建议</p><p>包含<strong>战略一致性、风险评估、经济可行性、投资回报率、预期关键绩效测量、替代方法</strong>，<strong>该工件能确保收益</strong></p><p>可以<strong>定性或定量</strong>。</p><p>如果<strong>引入新技术</strong>，通常先进行<strong>商业论证</strong></p><p><strong>收益管理计划</strong>(具体怎么实现收益，收益什么时候实现)</p><p>包含<strong>战略一致性、目标收益、假设、风险、收益责任人、实现收益的时限、测量指标</strong></p><p>项目经理与发起人要共同确保项目章程、项目管理计划、收益管理计划效果保持一致。</p><p><strong>净现值</strong>（类似排除通货膨胀前的的钱）<strong>大于0，方案可行，越大方案越优</strong>。</p><p><strong>内部收益率</strong>（净现值为0时的折现率，类似暴利程度），<strong>越大越好</strong></p><p><strong>投资回收期</strong>（回本时间），静态投资回收期：不考虑时间价值（不考虑通货膨胀），动态投资回收期：先折现，再计算。<strong>越短越好</strong></p><p><strong>5、识别、评估和影响系统交付</strong></p><p>认识到负责的项目只是组织中的一员，要明确在某个时间节点能给组织交付什么，组织能给你提供什么，不是自己单打独斗。</p><p><strong>6、展现领导力行为</strong></p><p><strong>领导力不是权力</strong>，不是职权让人服从，而是让人愿意跟你干</p><p><strong>混乱无序时，指令型更好；对高度胜任、敬业不用多管理；发生冲突，保持中立</strong></p><p>领导力风格：<strong>放任型领导（科研创新）、交易型领导、服务型领导、变革型领导（新系统）、魅力型领导、交互型领导、共享型领导（承担领导责任）</strong></p><p><strong>7、根据环境进行裁剪</strong></p><p>项目团队<strong>成员</strong>会做出更深入的<strong>承诺</strong></p><p><strong>减少行动或资源方面的浪费</strong></p><p><strong>以客户为本</strong></p><p><strong>项目资源</strong>得到<strong>更有效的利用</strong>（组织内互动反馈）</p><p><strong>8、将质量融入到过程和可交付物中</strong></p><p>质量和等级（特性）发生冲突时，先保证质量。</p><p>精确：重复测量的结果非常聚合，离散度小</p><p>准确：测量值接近实际值</p><p>五个基本理念：客户满意、预防胜于检查、持续改进PDCA、管理层的责任、与供应商的互利合作的关系</p><p>一个根本前提：<strong>质量管理</strong>需要兼顾项目管理（<strong>过程</strong>）和产品（<strong>结果</strong>）</p><p>五种质量管理水平：</p><p>让客户发现缺陷；</p><p>先通过<strong>控制质量</strong>（QC，测试）检测和纠正缺陷</p><p>通过<strong>质量保证</strong>（QA，过程检查）检查并纠正过程本身</p><p>将<strong>质量融入项目和产品的规划和设计</strong>中</p><p>致力于实现过程和产品质量<strong>文化</strong></p><p><strong>质量成本：一致性成本（预防成本、评估/检查成本）、非一致性成本（内部失效成本、外部失效成本）</strong></p><p><strong>预防成本——选择在正确的时间做事情、培训、供货商调查</strong></p><p><strong>评估/检查成本——破坏性测试导致的损失</strong></p><p><strong>内部失效成本——废品、库存、移交前返工</strong></p><p><strong>外部失效成本——业务流失、保修</strong></p><p><strong>9、驾驭复杂性</strong></p><p>复杂性是由人类行为、系统交互、模糊性不确定的</p><p>如何应对：找到着重点试点</p><p><strong>10、优化风险应对</strong></p><p>利用或强化正面风险（机会），规避或减轻负面风险（威胁）</p><p>单个项目风险（跑步伤膝盖）</p><p>整体项目风险（跑步）</p><p>风险是不确定的事件（未发生的），已发生的消极风险是问题（记录问题日志）</p><p>风险三要素：事件、概率、影响</p><p>风险的应对措施特征：</p><p>适当性和及时性与风险重要性匹配(风险汇报)</p><p>具有成本收益</p><p>在项目环境中切合实际</p><p>相关干系人达成共识</p><p>由一个责任人承担</p><p><strong>11、拥抱适应型和韧性</strong></p><p><strong>12、为实现预期的未来状态而驱动变革</strong></p><p> 使个人、群体、组织当前状态过度到实现期望收益的未来状态（如线下转线上），不是需求变更</p><h2 id="第四章：干系人绩效域"><a href="#第四章：干系人绩效域" class="headerlink" title="第四章：干系人绩效域"></a>第四章：干系人绩效域</h2><p>干系人：能影响项目、受到/自认为受项目的影响、个人、群体、组织；</p><p>干系人分析：定性、定量去收集信息分析</p><p><strong>具体环节：</strong></p><p>识别干系人-识别影响力、利益、参与度</p><p>规划干系人参与-制定参与计划</p><p>管理干系人参与-按照计划，满足期望、处理问题</p><p>监督干系人参与-调整策略与计划、调动干系人参与</p><h3 id="（环节）识别干系人："><a href="#（环节）识别干系人：" class="headerlink" title="（环节）识别干系人："></a><strong>（环节）识别干系人</strong>：</h3><p>适度关注，不是所有人都能顾及得来的</p><p><strong>（工具）数据收集&amp;分析</strong>-问卷调查、头脑风暴、干系人分析（兴趣、权利、所有权、知识、贡献）</p><p><strong>（工具）干系人映射分析/表现-三类方格（权力/利益方格，权力/影响方格）适合小型项目、凸显模型，适合复杂项目</strong></p><p><strong>权力/利益方格-</strong></p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922162309194.png"><p><strong>输出-干系人登记册</strong> </p><p>身份信息、评估信息（主要需求、主要期望、潜在影响）、干系人分类（支持/中立/反对）</p><p>与干系人进行<strong>1对1沟通</strong>，可了解个人动机，个人期望。</p><h3 id="（环节）规划干系人参与"><a href="#（环节）规划干系人参与" class="headerlink" title="（环节）规划干系人参与"></a>（环节）规划干系人参与</h3><p><strong>（工具）干系人参与度评估矩阵：</strong>D期望C当前态度-支持/中立/反对。</p><p>发现不一致，可开展必要的沟通，有效引导干系人参与</p><p><strong>（输出）干系人参与计划</strong>：促进干系人有效参与的策略和行动。</p><p>包含：关键干系人当前和计划参与程度、干系人变更的范围和影响、干系人之间的关系和潜在交叉</p><h3 id="（环节）管理干系人参与"><a href="#（环节）管理干系人参与" class="headerlink" title="（环节）管理干系人参与"></a>（环节）管理干系人参与</h3><p>处理问题，促进参与，提高支持，降低抵制</p><p>干系人影响力在项目启动时最大，随后降低</p><p>变更日志：不等于变更请求</p><p>问题日志：问题、负责人、解决期限</p><h3 id="（环节）监督干系人参与"><a href="#（环节）监督干系人参与" class="headerlink" title="（环节）监督干系人参与"></a>（环节）监督干系人参与</h3><p> <strong>（输出）项目管理数据和信息：</strong>工作绩效数据（数据）、工作绩效信息（整合分析数据的结果）、工作绩效报告（针对信息做出的决策和未来计划，类似周报）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922163335839.png" alt="image-20230922163335839"></p><p><strong>干系人绩效域的重要经验：</strong></p><p>干系人参与—对话、头脑风暴、会议等</p><p>提升干系人满意度—合理授权、有效培训 </p><p>给团队成员/干系人授权—任务问责</p><p>与干系人协作—构建信任</p><h2 id="第五章：团队绩效域"><a href="#第五章：团队绩效域" class="headerlink" title="第五章：团队绩效域"></a>第五章：团队绩效域</h2><p>服务型领导者的团队—自组织形式</p><p>服务型领导力行为—消除障碍、避免分心、鼓励和发展机会</p><h3 id="（环节）规划资源管理"><a href="#（环节）规划资源管理" class="headerlink" title="（环节）规划资源管理"></a>（环节）规划资源管理</h3><p><strong>（输出）资源管理计划、团队章程</strong></p><p><strong>资源管理计划：</strong>包含《职责分配矩阵RACI》（R执行、A负责、C征询意见、I知情）A每个活动只能有1个，包含角色和职责、项目组织图、如何识别和获取控制资源、如何进行团队建设、如何进行团队资源管理（招募、配备、遣散、培训需要、认可计划）</p><p><strong>团队章程：</strong>基本规则、价值观、会议指南、冲突处理</p><h3 id="（环节）估算活动资源"><a href="#（环节）估算活动资源" class="headerlink" title="（环节）估算活动资源"></a>（环节）估算活动资源</h3><p><strong>（输出）资源需求、估算依据、资源分解结构</strong></p><p><strong>（工具）估算类型：</strong></p><p>绝对估算（具体天数）—类比估算（根据历史项目估算，速度快准确率低）、参数估算（历史项目数据统计）、三点估算（乐、可能、悲取平均值）、自下而上估算（各人员估算，最准确）</p><p>相对估算（类似T恤等级；敏捷用）—计划扑克、亲和估算</p><p>资源分解结构—资源的类别（人、物）、类型（人、物的等级）</p><h3 id="（环节）获取资源"><a href="#（环节）获取资源" class="headerlink" title="（环节）获取资源"></a>（环节）获取资源</h3><p>获取下项目所需资源的过程</p><p>内部由职能经理/资源经理获取</p><p>外部由采购过程获取</p><p>项目经理若没有对资源的直接的控制权，要注意：</p><p>有效谈判、资源不能获取时风险预判、使用能力不同的替代资源</p><p><strong>（输出）实物资源分配单：</strong>记录项目将使用的材料、设备、用品、地点</p><p><strong>（输出）项目团队派工单：</strong>记录团队成员的角色、职责、需要将人员插入到项目管理计划的进度计划和组织图中</p><p><strong>（输出）资源日历：</strong>人员可用时间表（客观提供，职能经理提供）</p><p><strong>（输出）项目日历：</strong>可用工作日</p><p><strong>（输出）资源直方图：</strong>按时间段需要哪些资源</p><h3 id="（环节）建设团队"><a href="#（环节）建设团队" class="headerlink" title="（环节）建设团队"></a>（环节）建设团队</h3><p> 营造信任氛围、团队文化、提高团队/整体项目绩效</p><p><strong>（输出）团队绩效评价</strong></p><p>塔克曼团队发展阶段模型：形成（相互独立）-&gt;震荡（冲突）-&gt;规范（协同办公、相互信任）-&gt;成熟（相互依靠）-&gt;解散（离开项目）</p><p><strong>（工具）集中办公：</strong></p><p>可临时/可长久</p><p>又称紧密矩阵，并非组织结构</p><p>虚拟团队：注意沟通规划</p><p><strong>（工具）认可与奖励：</strong></p><p>鼓励多赢，鼓励在整个项目阶段中<strong>持续/及时</strong>奖励，不是最后</p><p>赢-输（零和）奖励会破坏团队凝聚力</p><p><strong>（工具）培训：</strong></p><p>应按<strong>资源管理计划</strong>中的安排来实施预定的培训</p><p>培训成本包含在项目预算中</p><p><strong>（工具）个人和团队评估</strong></p><p>让项目经理、项目团队洞察成员的优势和劣势</p><p>常用：态度调查、专项评估、结构化访谈、能力测试、焦点小组</p><p><strong>（工具）马斯洛需求层次理论</strong></p><p>生理需求、安全需求、社交需求、尊重（荣誉）需求、自我实现需求（用人之长，有兴趣做）</p><p><strong>（工具）麦克雷戈X、Y理论</strong></p><p>X理论：需要被鞭策被管制，Y理论：需要自主权、认可，Z理论：培养具有意义，能提升生产率、士气、满意度</p><p><strong>（工具）赫兹伯格双因素理论</strong></p><p>保健（基本）因素：给了算正常，不给会不满。如工作环境、劳动保护、工资水平等</p><p>激励（内在）因素：给了更好，不给算正常。愉快感，责任感。</p><p><strong>（工具）丹尼尔平克驱动力模型</strong></p><p>自主（能自决定）、目的（有意义）、专精（精进）</p><p><strong>（输出）团队绩效评价</strong></p><p>团队的有效性进行评价</p><p>评价指标：个人技能的改进（更好贡献）、团队能力的改进、离职率降低、凝聚力加强</p><h3 id="（环节）管理团队"><a href="#（环节）管理团队" class="headerlink" title="（环节）管理团队"></a>（环节）管理团队</h3><p>解决冲突、解决问题</p><p><strong>（工具）冲突管理</strong></p><p>冲突是正常的</p><p>早期冲突原因是优先级和资源，中后期冲突是进度</p><p>会议发生冲突，可通过促进技术改善交流。</p><p><strong>解决冲突的方法：</strong></p><p>合作—与参与者建立信任，需要时间去达成共识</p><p>强迫/命令—利用权力，暂时解决</p><p>妥协—各让一步</p><p>缓和/迁就—维持和谐关系</p><p>撤退/回避—没解决冲突</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922163410592.png" alt="image-20230922163410592"></p><p><strong>（工具）冲突的五个阶段</strong></p><p>1、潜在的对立</p><p>2、认知和情感投入</p><p>3、行为意向（想法）</p><p>4、行为</p><p>5、结果</p><p><strong>（工具）情商</strong></p><p><strong>（工具）领导力</strong></p><p>D1能力低意愿高：指导型（高指导低支持）</p><p>D2能力低意愿低：教练型（高指导高支持）</p><p>D3能力高意愿低：支持型（低指导高支持）</p><p>D4能力高意愿高：授权型（低指导低支持）</p><p><strong>（工具）高效制定决策（适用敏捷）</strong></p><p>罗马式表决法（拇指上下）、宽带德尔菲估算（匿名投票）、举手表决</p><p><strong>（工具）五种权力</strong></p><p>正式权力（法定）、奖励权力、惩罚权力（有力、但会破坏团队气氛）、专家权力（具有专业知识，有威严）、暗示权力（有关系）</p><h2 id="第六章：开发方法和生命周期绩效域"><a href="#第六章：开发方法和生命周期绩效域" class="headerlink" title="第六章：开发方法和生命周期绩效域"></a>第六章：开发方法和生命周期绩效域</h2><p><strong>生命周期分类：</strong></p><p><strong>预测型</strong>—<strong>传统方法</strong>，大量计划、一次性执行</p><p><strong>迭代型</strong>—<strong>重复性</strong>，对未完成工作反馈，改进、修改工作</p><p><strong>增量型</strong>—<strong>增量性</strong>，逐个完成可能立即使用的交付物</p><p><strong>敏捷型</strong>—有迭代有增量</p><h3 id="敏捷的灵魂"><a href="#敏捷的灵魂" class="headerlink" title="敏捷的灵魂"></a>敏捷的灵魂</h3><p><strong>敏捷宣言</strong></p><p><strong>个体和互动</strong> 高于 流程和工具</p><p><strong>工作的软件</strong> 高于 详尽的文档</p><p><strong>客户合作</strong> 高于 合同谈判</p><p><strong>响应变化</strong> 高于 遵循计划</p><p><strong>敏捷原则</strong></p><p>持续交付，<strong>小步快跑</strong></p><p><strong>拥抱变化</strong>，提高优势</p><p>尽早反馈，<strong>价值排序</strong></p><p><strong>成果达成</strong>，衡量进度</p><p><strong>持续更新</strong>，强化敏捷</p><p>精简产品，<strong>杜绝浪费</strong></p><p>团队合作，<strong>每日互动</strong></p><p><strong>信任成员，给予支援</strong></p><p><strong>当面沟通</strong>，高效明了</p><p>各方成员，<strong>稳定节奏</strong></p><p>同心协力，<strong>自我组织</strong></p><p><strong>团队自省</strong>，持续改进</p><h3 id="敏捷的角色"><a href="#敏捷的角色" class="headerlink" title="敏捷的角色"></a>敏捷的角色</h3><p><strong>跨职能团队成员（重点）</strong>：</p><p>T型人才（全栈式工程师）</p><p>敏捷团队是<strong>全职</strong>、<strong>不能随意发生变化</strong></p><p>有<strong>自组织团队</strong>（重点强调<strong>遵守承诺</strong>）</p><p><strong>团队</strong>来向产品负责人PO<strong>演示</strong>产品功能</p><p>团队<strong>需要定义DoD</strong>（工作是否完成的定义）</p><p><strong>DoD/AC/DoR区别和联系：</strong></p><p><strong>DoD</strong>是针对所有需求，任务，迭代的定义（<strong>一个完整的事</strong>）</p><p><strong>AC</strong>验收标准是<strong>每个需求的定义（局部性）</strong></p><p><strong>DoR</strong>是某个阶段正常开启的<strong>先决条件</strong>。</p><p><strong>DoR-&gt;DoD(A)</strong></p><p><strong>产品负责人PO（重点）：</strong></p><p><strong>确认产品功能</strong></p><p><strong>决定发布日期、发布内容</strong></p><p><strong>确定需求优先级</strong></p><p><strong>作为客户代言人，接收不同需求和反馈，梳理待办事项，不能在迭代中影响团队现有工作</strong></p><p><strong>接受或拒绝开发团队的工作成果</strong></p><p><strong>团队促进者PM（重点）：</strong></p><p><strong>项目经理</strong>、仆人式领导，<strong>不是决策者</strong>，</p><p>和PO密切工作，</p><p><strong>解决障碍</strong>，提供帮助</p><p><strong>处理外界对团队成员的干扰</strong>（信息发射源、看板不对称的问题，新需求转移PO，不影响团队）<br><strong>组织各种会议</strong>（站立会、冲刺回顾会、迭代规划会）</p><p><strong>仆人式（服务型）领导为团队赋权（重点）：</strong></p><p>提升自我意识（<strong>不强行决策、干预</strong>）</p><p>倾听（了解根因与现状，了解团队情绪）</p><p>为团队服务（<strong>解决团队障碍</strong>）</p><p>帮助他人成长（<strong>培训与辅导</strong>）</p><p>引导与控制（<strong>让团队说话</strong>，在流程上控制好）</p><p>促进安全（<strong>先私下沟通</strong>，鼓励自组织）</p><p>促进他人精力提升（<strong>减少其他人对团队影响</strong>）</p><p><strong>项目管理办公室PMO：</strong></p><p>价值驱动型、面向创新型、多学科型</p><h3 id="敏捷的方法"><a href="#敏捷的方法" class="headerlink" title="敏捷的方法"></a>敏捷的方法</h3><p> （工具）<strong>看板</strong>的作用与优势</p><p>限制执行的任务数，使问题推动和瓶颈<strong>可视化</strong></p><p>简单的看板包含三列：<strong>要完成、进行中、已完成</strong></p><p>（工具）极限编程</p><p>最适合需求快速变动的项目，结对编程，持续集成交付</p><p>（工具）Scrum</p><p><strong>一个敏捷项目过程骨架</strong>，包含<strong>SM项目经理</strong>负责维护这个过程，产品负责人、开发人员</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922163423209.png" alt="image-20230922163423209"></p><p>冲刺（类似迭代）：<strong>一般2-4周，固定的周期。设计、开发、测试都在冲刺中完成，不建议变更</strong>。</p><p>SoS：多个Scrum有关联，每个抽出<strong>代表组成新团队SoS</strong>，定期组织碰头会，<strong>促进沟通协调，清除障碍</strong></p><p>（工具）DSDM</p><p><strong>时间盒</strong>：时间有限制，防止拖沓、<strong>防止镀金</strong>。</p><p>时间盒不要添加人员，不许有变更，不要用来做绩效考核。</p><p>（工具）其他模式</p><p><strong>追逐太阳</strong>模式：到时间就转给下一步，可加快产品开发</p><p><strong>鱼缸窗口</strong>模式：长期视频会议</p><p><strong>远程结对</strong>模式：远程共享屏幕</p><h3 id="敏捷的过渡"><a href="#敏捷的过渡" class="headerlink" title="敏捷的过渡"></a>敏捷的过渡</h3><p><strong>混合型生命周期存在的意义和价值</strong></p><p><strong>团队不能完全敏捷的场景，敏捷过渡期，加速预测生命周期交付速度，改变团队成员的思维模式</strong></p><p><strong>混合型生命周期的不同类型</strong></p><p>敏捷的工具+预测的计划模式（传统中加上站立会、回顾会、短迭代）</p><p>以预测为主，敏捷为辅（一些模块需要试错）</p><p>以敏捷为主，预测为辅（一些外包出去的模块不支持敏捷，需要完整做完再做集成）</p><p><strong>混合型生命周期的答题思路</strong></p><p>敏捷灵魂（敏捷宣言、原则）、敏捷工具（看板、燃尽图等）、角色定位（项目经理SM）、沟通协调、扫清障碍、试点推广敏捷、关注质量时关注DoD，多项目时可能需要PMO参与。</p><p><strong>敏捷转型成功的策略和方法</strong></p><p><strong>过渡</strong>——要学习，加强团队干系人一致性</p><p><strong>增加增量</strong></p><p><strong>选风险不大、具有中低程度</strong>不确定性的项目<strong>尝试新技术</strong></p><p><strong>混合方法使用后，再使用更复杂的</strong></p><h2 id="第七章：交付绩效域"><a href="#第七章：交付绩效域" class="headerlink" title="第七章：交付绩效域"></a>第七章：交付绩效域</h2><p>工作分解结构（WBS）：要实施的工作<strong>范围</strong>的层级分解</p><p>完成的定义（DoD）：检查清单，一整个事</p><p>质量成本（COQ）：在整个生命周期下的所有成本，即预防、评估、非一致性损失成本</p><p>范围管理强调：<strong>不镀金（不多给），预防范围蔓延（不多要）</strong></p><p>项目范围：根据<strong>项目管理计划</strong>来衡量项目范围</p><p>产品范围：根据产品<strong>需求</strong>衡量产品范围</p><p><strong>具体环节：</strong></p><p>制定项目章程—制定批准授权PM动用资源的文件</p><p>规划范围管理—描述如何定义/确认/控制项目范围</p><p>收集需求—记录干系人需求</p><p>定义范围—制定的详细原型</p><p>创建WBS—分解成更小的易于管理的部分</p><p>规划质量管理—识别质量标准并描述如何达到</p><h3 id="制定项目章程"><a href="#制定项目章程" class="headerlink" title="制定项目章程"></a>制定项目章程</h3><p><strong>明确</strong>项目与组织战略的<strong>联系</strong>，<strong>确立</strong>项目<strong>地位</strong>，<strong>展示</strong>组织对项目<strong>承诺。</strong></p><h4 id="（输出）项目章程："><a href="#（输出）项目章程：" class="headerlink" title="（输出）项目章程："></a><strong>（输出）项目章程：</strong></h4><p><strong>经批准</strong>的章程意味着项目<strong>正式启动。</strong></p><p><strong>项目章程中任命项目经理，最晚在规划前。</strong></p><p><strong>组织治理委员会/项目管理办公室PMO</strong>来审批章程。</p><h4 id="（输出）假设日志"><a href="#（输出）假设日志" class="headerlink" title="（输出）假设日志"></a>（输出）假设日志</h4><h4 id="（输出）制约因素"><a href="#（输出）制约因素" class="headerlink" title="（输出）制约因素"></a>（输出）制约因素</h4><p>（工具）引导：</p><p>用于跨部门、多方意见不一致时。不加上个人观点，只引导让他人发声。中立，善于确认总结，巧妙解决冲突。</p><p>（输出）项目章程：</p><p>包含：高层及需求、关键干系人名单、发起人或批准项目章程的人员</p><p>（输出）假设日志：</p><p>包含：假设条件、制约因素（限制要求，如必须要完成的，钱不能超多少）</p><h3 id="规划范围管理"><a href="#规划范围管理" class="headerlink" title="规划范围管理"></a>规划范围管理</h3><h4 id="（输出）范围管理计划："><a href="#（输出）范围管理计划：" class="headerlink" title="（输出）范围管理计划："></a>（输出）范围管理计划：</h4><p>有助于<strong>范围蔓延</strong>的风险</p><h4 id="（输出）需求管理计划（商业分析计划）："><a href="#（输出）需求管理计划（商业分析计划）：" class="headerlink" title="（输出）需求管理计划（商业分析计划）："></a>（输出）需求管理计划（商业分析计划）：</h4><p>包含：需求优先级、测量指标、哪些需求属性将被列入需求跟踪矩阵</p><p><strong>需求优先级排序</strong></p><h3 id="收集需求"><a href="#收集需求" class="headerlink" title="收集需求"></a>收集需求</h3><p>需求是工作分解结构，成本/进度/质量的基础</p><p>（工具）需求分类</p><p><strong>业务需求</strong></p><p><strong>干系人需求</strong>（如干系人的喜好，喜欢背景颜色）</p><p><strong>解决方案需求</strong>（功能性、非功能性—如性能）</p><p><strong>过渡需求</strong>（如中间过渡用、培训）</p><p><strong>项目需求</strong>（如要输出项目管理计划文件）</p><p><strong>质量需求</strong>（如安全性、可靠性）</p><h4 id="（输出）需求文件：逐渐细化"><a href="#（输出）需求文件：逐渐细化" class="headerlink" title="（输出）需求文件：逐渐细化"></a><strong>（输出）需求文件：逐渐细化</strong></h4><p>（工具）头脑风暴—<strong>速度快</strong>，但<strong>容易互相受影响</strong></p><p>（工具）焦点小组—需要<strong>专业主持人</strong>，更激烈</p><p>（工具）问卷调查—<strong>地理位置分散</strong>、开展统计分析</p><p>（工具）标杆对照—适用于内外部/不同领域，为绩效考核提供基础</p><p>（工具）文件分析—分析文档，挖掘需求</p><p>（工具）亲和图—观点合并汇总，确定方案</p><p>（工具）思维导图—放射性思考，<strong>激发新创意</strong></p><p>（工具）名义小组技术—特殊头脑风暴</p><p>（工具）观察和交谈—工作跟随</p><p>（工具）原型法—<strong>渐进明细性</strong></p><h4 id="（输出）需求跟踪矩阵"><a href="#（输出）需求跟踪矩阵" class="headerlink" title="（输出）需求跟踪矩阵"></a><strong>（输出）需求跟踪矩阵</strong></h4><p><strong>需求</strong>要<strong>对应</strong>商业文件的<strong>商业（业务）价值</strong></p><p>包含<strong>质量规范</strong>。当可交付物不符合质量规范可以检查需求跟踪矩阵。</p><h3 id="定义范围"><a href="#定义范围" class="headerlink" title="定义范围"></a>定义范围</h3><p>根据可交付物、假设日志、制约因素定义项目边界</p><h4 id="（输出）项目范围说明书"><a href="#（输出）项目范围说明书" class="headerlink" title="（输出）项目范围说明书"></a>（输出）项目范围说明书</h4><p>包含：<strong>产品范围、可交付物、验收标准、除外责任</strong></p><p>（工具）引导、专家判断、产品分析、备选方案识别、多标准策略分析</p><p>专家判断—帕累托图</p><h3 id="创建WBS（工作分解结构）"><a href="#创建WBS（工作分解结构）" class="headerlink" title="创建WBS（工作分解结构）"></a>创建WBS（工作分解结构）</h3><p>定义项目的总范围，该工件可以<strong>提高效率、减少返工</strong></p><p>WBS底层叫<strong>工作包</strong>；</p><p>要分，但还不确定具体怎么分的叫<strong>规划包</strong>；</p><p><strong>控制账户</strong>为总项目；</p><p>一个控制账户可管理多个工作包，但一个工作包不能受多个控制账户管理。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922163437795.png" alt="image-20230922163437795"></p><p><strong>WBS分解原则</strong></p><p>MECE（不重复且穷尽），工作包相加为100%</p><p>分解到可控层面</p><p>滚动式规划（渐进明细）</p><h4 id="（输出）范围基准"><a href="#（输出）范围基准" class="headerlink" title="（输出）范围基准"></a>（输出）范围基准</h4><p><strong>包含范围说明书、WBS、WBS词典（解释说明）</strong></p><h3 id="规划质量管理"><a href="#规划质量管理" class="headerlink" title="规划质量管理"></a>规划质量管理</h3><p>制定质量标准（<strong>质量测量指标</strong>what）</p><p>记录如何达到（<strong>质量管理计划</strong>how）</p><p>制定联合质量政策——有利于整合不同干系人群体</p><p>（工具）成本收益/效益分析</p><p>对每个质量活动进行成本收益分析，如果投入成本和收益相等时，质量活动的性价比就不高了</p><p>（工具）流程图（过程图）</p><p><strong>可以向上查原因，向下做预测</strong></p><p>可制作SIPOC模型（流程之间的过程内容）</p><p>（工具）矩阵图：因素间的关系强弱</p><p>（工具）测试与检查的规划：如何去做测试用例，什么时候测</p><h4 id="（输出）质量管理计划"><a href="#（输出）质量管理计划" class="headerlink" title="（输出）质量管理计划"></a>（输出）质量管理计划</h4><p>包括采取质量的方式标准，质量角色和职责，流程</p><h4 id="（输出）质量测量指标"><a href="#（输出）质量测量指标" class="headerlink" title="（输出）质量测量指标"></a>（输出）质量测量指标</h4><p><strong>非常具体的参数</strong>，指标<strong>变动范围公差</strong></p><h2 id="第八章：规划绩效域"><a href="#第八章：规划绩效域" class="headerlink" title="第八章：规划绩效域"></a>第八章：规划绩效域</h2><p>估算： 如项目成本、资源、人力资源</p><p>准确度、精确度、合规性</p><p><strong>压缩进度：</strong>赶工（以最小成本代价）、<strong>快速跟进</strong>（串行变并行）</p><p>预算：已经批准的经费</p><p><strong>预测型</strong>规划方法——<strong>WBS任务分解结构</strong></p><p><strong>适应性</strong>迭代或增量规划方法——<strong>客户故事和待办事项列表</strong></p><p>适应性方法流程图：版本-发布计划（各个迭代）-迭代计划（各个特性(用户故事)）-各个任务</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922163455618.png" alt="image-20230922163455618"></p><p><strong>进度</strong>规划环节：规划进度管理、定义活动、排列活动顺序、估算活动持续时间、制定进度计划</p><p>项目<strong>成本</strong>规划环节：规划成本管理、估算成本、制定预算（成本基准）。确保在批准的预算内完工</p><p>规划绩效域其他环节：规划<strong>沟通</strong>管理、规划<strong>采购</strong>管理、制定项目管理计划（<strong>整合</strong>）</p><h3 id="规划进度管理"><a href="#规划进度管理" class="headerlink" title="规划进度管理"></a>规划进度管理</h3><p><strong>（输出）进度管理计划：</strong></p><p>指如何制定进度计划</p><p>控制临界值（如±30天都可以）、计量单位（天还是进度）、控制账户位置（重要性）、完成百分比规则</p><h3 id="定义活动"><a href="#定义活动" class="headerlink" title="定义活动"></a>定义活动</h3><p>将工作包<strong>分解成活动、任务</strong></p><p><strong>（输出）活动清单</strong></p><p><strong>（输出）活动属性-注释</strong></p><p><strong>（输出）里程碑清单：强制性（如合同要求）</strong>、<strong>选择性（为提高强制性里程碑所做的中期阶段）</strong>。里程碑是<strong>时间点</strong>，不是时间段。</p><p>（工具）分解：同时编制、<strong>让团队成员参与</strong></p><p>（工具）滚动式规划：渐进明细</p><h3 id="排列活动顺序"><a href="#排列活动顺序" class="headerlink" title="排列活动顺序"></a>排列活动顺序</h3><p>排序来提高效率</p><p>路径汇聚（多个紧前活动合成1个紧后活动）、路径分支、悬挂活动</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922163514627.png" alt="image-20230922163514627"></p><p><strong>（工具）紧前关系绘图法AON</strong></p><p>FS（最常用-第一件事结束，第二件事开始），SS，FF，SF</p><p><strong>（工具）确定和整合依赖关系</strong></p><p>强制依赖关系-先泡茶后喝茶</p><p>选择性依赖关系</p><p>外部依赖关系-卖茶叶的罢工</p><p>内部依赖关系-活动间紧前关系</p><p><strong>（工具）提前量和滞后量</strong></p><p>都是<strong>针对紧后活动</strong>而言的。</p><p><strong>提前量</strong>-提前开始紧后活动，<strong>负号表示</strong></p><p><strong>滞后量</strong>-推迟开始紧后活动，<strong>正号表示</strong></p><p>时间提前量和滞后量<strong>不能改变活动的逻辑关系</strong></p><h3 id="估算活动持续时间"><a href="#估算活动持续时间" class="headerlink" title="估算活动持续时间"></a>估算活动持续时间</h3><p>不包括提前量、滞后量，<strong>可以有变动区间，有小组给输入</strong></p><p>学生综合征（拖延症）、帕金森综合征（工作膨胀，效率变低）</p><p><strong>储备分析</strong></p><p>事件<strong>已知</strong>、影响<strong>已知</strong>—<strong>应对成本</strong></p><p>事件<strong>已知</strong>、影响<strong>未知</strong>—<strong>应急储备</strong></p><p>事件<strong>未知</strong>、影响<strong>未知</strong>—<strong>管理储备</strong></p><p><strong>（工具）估算：</strong></p><p><strong>类比估算</strong>—成本低，<strong>准确率低</strong></p><p><strong>参数估算</strong>—有统计关系、<strong>无法适应变化</strong></p><p><strong>三点估算</strong>—贝塔分布(悲观+乐观+4可能)/6</p><p><strong>自下而上估算</strong>—<strong>最准确</strong></p><h3 id="制定进度计划"><a href="#制定进度计划" class="headerlink" title="制定进度计划"></a>制定进度计划</h3><p><strong>（工具）关键路径法</strong></p><p><strong>关键路径—总工期最长的路径</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922163524314.png" alt="image-20230922163524314"></p><p><strong>总时差/总浮动时间—最晚结束-最早结束</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922163537458.png" alt="image-20230922163537458"></p><p>（工具）资源平衡（资源等级）</p><p><strong>资源平衡—改变关键路径</strong></p><p>（工具）<strong>资源平滑—不改变关键路径</strong></p><p>（工具）<strong>进度压缩—不缩减项目范围</strong></p><p><strong>赶工</strong>—以<strong>最小成本</strong>压缩工期，但可能<strong>增加成本（高成本）</strong></p><p><strong>快速跟进</strong>—串行变<strong>并行</strong>，可能<strong>返工（高风险）</strong></p><p>（工具）数据分析</p><p>挣值分析</p><p><strong>（输出）进度基准—经批准</strong>的进度模型</p><p><strong>（输出）项目进度计划</strong></p><p><strong>横道图（甘特图）</strong></p><p><strong>里程碑图</strong></p><p><strong>进度网络图</strong>（项目网络图）</p><p>（输出）<strong>项目日历</strong>—工作日，<strong>属于制约因素</strong></p><h3 id="规划成本管理"><a href="#规划成本管理" class="headerlink" title="规划成本管理"></a>规划成本管理</h3><p><strong>（输出）成本管理计划</strong>：</p><p><strong>计量单位（如人月）</strong>、<strong>组织程序链接（控制账户）</strong>、<strong>临界值</strong></p><h3 id="估算成本"><a href="#估算成本" class="headerlink" title="估算成本"></a>估算成本</h3><p>资金由发起人决定，项目经理作为估算区间的提供者。</p><p><strong>生命周期成本</strong>：整个产品生命周期，<strong>包含运维</strong></p><p><strong>直接成本</strong>—人员绩效</p><p><strong>间接成本</strong>—多项目分摊，如水费房租</p><p><strong>固定成本</strong>—固定资产，如计算机</p><p><strong>可变成本</strong>—随生产产品的增加而增加，如原材料</p><p><strong>项目经理可控成本</strong>—<strong>直接、可变成本</strong></p><p>机会成本—因选择B不得不放弃A的机会成本</p><p>沉没成本—花钱来确定取消项目的成本</p><p><strong>资产折旧：</strong></p><p><strong>直线折旧法—折旧最慢</strong></p><p><strong>双倍余额递减法—折扣最快，缴纳税金最低</strong></p><p><strong>（工具）储备分析</strong></p><p><strong>应急储备</strong>—已知未知风险，<strong>是成本基准</strong></p><p><strong>管理储备</strong>—未知未知风险，由管理层管理，<strong>不是成本基准</strong></p><p><strong>（输出）估算依据</strong></p><p><strong>备注</strong>，解释为什么这么多估算</p><h3 id="制定预算"><a href="#制定预算" class="headerlink" title="制定预算"></a>制定预算</h3><p><strong>经批准的，按时间段分配</strong>的预算</p><p><strong>（工具）历史信息审核</strong></p><p>主要指<strong>类比模型或参数模型</strong>。进行更准确的审核量化。</p><p><strong>（工具）资金限制平衡</strong></p><p>通过<strong>在项目进度计划中添加强制日期</strong>来实现</p><p>（如3月15日，不能超过这个预算，超过就走变更）</p><p><strong>（工具）融资</strong></p><p>使用<strong>外部资金</strong>，出资方可能会提出一些<strong>要求</strong></p><p><strong>（工具）成本汇总</strong></p><p><strong>（输出）成本基准</strong></p><p>S曲线，不包括管理储备。</p><p><strong>总资金</strong>（项目资金总需求，阶梯型没花完）=<strong>成本基准（基线）+管理储备</strong></p><p><strong>总预算=成本基准（基线）+管理储备</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230922163548833.png" alt="image-20230922163548833"></p><h3 id="规划沟通管理"><a href="#规划沟通管理" class="headerlink" title="规划沟通管理"></a>规划沟通管理</h3><p>who跟谁沟通，when什么时候沟通，how怎么沟通。输出沟通管理计划，能减少干系人临时寻问信息的请求。</p><p>（工具）沟通方式</p><p>正式书面——文件合同（违反原则时，第一次非正是口头，第二次正式书面）</p><p>正式口头——演讲</p><p><strong>非正式口头——会议，交谈</strong></p><p><strong>非正式书面——电子邮件</strong></p><p>（工具）传递方式</p><p><strong>（工具）沟通渠道计算</strong></p><p><strong>沟通渠道=N(N-1)/2，N是干系人数量</strong></p><p>（工具）沟通模型</p><p><strong>（工具）沟通方法</strong></p><p><strong>互动式：会谈、各种会议</strong>（当对方不满意，交换反馈/希望得到相关方支持适用）</p><p><strong>推式：电子邮件、报告、信件</strong></p><p><strong>拉式：知识库、在线课程、广告</strong>（有大量信息无法管理时，可用拉式）</p><p><strong>（输出）沟通管理计划</strong></p><p><strong>包括：干系人沟通需求、沟通频率、问题升级流程、沟通术语表、沟通方法</strong></p><h3 id="规划采购管理（甲方）"><a href="#规划采购管理（甲方）" class="headerlink" title="规划采购管理（甲方）"></a>规划采购管理（甲方）</h3><p><strong>自制或外购决策</strong>、明确采购方法、识别潜在卖方。</p><p>采购类型：<strong>分散式采购（会浪费）、集中式采购</strong></p><p><strong>（工具）自制或外购分析</strong></p><p>自制or外购</p><p>（工具）供方选择分析</p><p><strong>（输出）采购管理计划</strong></p><p>采购干系人角色职责、采购测量指标。</p><p><strong>（输出）采购策略</strong></p><p>包含：采购交付方法、合同支付类型、采购阶段</p><p><strong>（输出）招标文件</strong></p><p>也称：<strong>信息邀请书（RFI）、报价邀请书（RFQ）、建议邀请书（RFP）</strong></p><p><strong>（输出）采购工作说明书SOW</strong></p><p>充分详细的<strong>描述采购的产品、服务或成果</strong>。<strong>由甲方确认的。“工作大纲”</strong></p><p><strong>（输出）供方选择标准</strong></p><p>标准是客观或主观的。</p><p><strong>（输出）自制与外购决策</strong></p><p><strong>自制</strong>：<strong>由内部</strong>采购流程和协议</p><p><strong>外购</strong>：<strong>与外部</strong>服务商签订协议</p><p><strong>（输出）独立成本估算</strong></p><p>对采购的报价进行估算。</p><p><strong>当报价和估算存在明显差异</strong>，表明：</p><p><strong>采购工作说明书存在缺陷或模糊</strong></p><p>潜在<strong>卖方误解</strong>或未完全响应采购工作说明书</p><h3 id="制定项目管理计划"><a href="#制定项目管理计划" class="headerlink" title="制定项目管理计划"></a>制定项目管理计划</h3><p>包括<strong>三大项目基准+各个子计划</strong></p><p>制定过程是<strong>渐进明细</strong>的</p><p>通过<strong>整体变更控制流程</strong>来更新修订</p><p><strong>（工具）项目启动会&amp;项目开工会</strong></p><p><strong>项目启动会initiating：</strong>发布章程、任命项目经理、赋权</p><p><strong>项目开工会kick-off：</strong>计划完成后，实施前召开。成员互相认识、介绍计划达成共识理解、明确责任、灌输信心</p><p><strong>（输出）项目管理计划</strong></p><p><strong>项目基准：</strong></p><p>范围基准、进度基准、成本基准</p><p><strong>子计划：</strong></p><p>范围管理计划、需求管理计划、进度管理计划、成本管理计划、质量管理计划、资源管理计划、沟通管理计划、风险管理计划、采购管理计划、干系人参与计划</p><p>其他组件：</p><p>变更管理计划、配置管理计划</p><p>治理结构</p><p><strong>（输出）项目文件</strong></p><p>如日志、报告等</p><h2 id="第九章：工作绩效域"><a href="#第九章：工作绩效域" class="headerlink" title="第九章：工作绩效域"></a>第九章：工作绩效域</h2><h3 id="管理质量-质量保证QA"><a href="#管理质量-质量保证QA" class="headerlink" title="管理质量(质量保证QA)"></a>管理质量(质量保证QA)</h3><p><strong>质量审计——确定项目活动是否符合组织政策</strong>，<strong>在整个项目过程中开展</strong>，是所有人的共同责任，</p><p>在敏捷中，质量管理是所有团队成员执行</p><p>在传统中，质量管理是特定人员执行</p><p><strong>管理质量作用：</strong></p><p><strong>1、做出合格质量</strong></p><p><strong>2、建立信心</strong></p><p><strong>3、满足特定需求</strong></p><p><strong>4、审计质量要求，过程审计</strong></p><p><strong>5、改进生产过程</strong></p><p><strong>（工具）因果图/鱼骨图/石川ishikawa图</strong>（找根本原因）</p><p><strong>找出产生问题的根本原因</strong></p><p><strong>5个为什么</strong>也能找根本原因</p><p><strong>（工具）直方图</strong></p><p>利用柱状图相对高度来<strong>统计</strong>问题出现的次数，<strong>不考虑时间因素影响（非过程监控）</strong></p><p><strong>（工具）帕累托图（找最主要原因）</strong></p><p>82原则，<strong>有重点</strong>的采取纠正措施。</p><p>降序<strong>排列</strong>，涵盖100%可观察结果</p><p><strong>（工具）散点图（找公有原因）</strong></p><p>显示两个变量之间的关系</p><p>能找到两个变量问题的<strong>共同原因</strong></p><p>相关性：正比例（正相关）、负相关、不存在（零相关）</p><p>（工具）审计</p><p>是否遵循了组织和项目的政策，审计质量过程</p><p>作用：</p><p>识别全部正在实施的良好及最佳实践</p><p>识别不好</p><p>（工具）问题解决</p><p>定义问题、识别根本原因、生成解决方案、选择最佳方案、执行解决方案、验证解决有效性</p><p><strong>（工具）质量改进方法</strong></p><p><strong>PDCA（计划实施检查行动）、六西格玛</strong><br><strong>（输出）质量报告</strong></p><p>包含质量问题、改善建议</p><h3 id="实施采购（甲方）"><a href="#实施采购（甲方）" class="headerlink" title="实施采购（甲方）"></a>实施采购（甲方）</h3><p>授予合同（选定卖方）</p><p><strong>（输出）采购文档</strong></p><p>包括招标文件、采购工作说明书、独立成本估算、供方选择标准</p><p><strong>（输出）卖方建议书/投标书</strong></p><p><strong>（工具）投标人会议/承包人会议/供货商会议/标前会议</strong></p><p><strong>卖方提交建议书之前开会</strong></p><p>所有卖方同等对待</p><p><strong>（工具）建议书评价技术—供方要素加权评估法</strong></p><p><strong>（工具）谈判</strong></p><p><strong>项目经理不是采购谈判主谈人</strong></p><p>（输出）选定卖方</p><p>签订了合同草案的</p><p><strong>（输出）协议/合同</strong></p><p><strong>ADR是解决冲突提前商定好的解决方案</strong></p><p><strong>合同类型：</strong></p><p><strong>总价合同（适用于范围确定，甲方风险小）</strong>——</p><p>固定<strong>总价</strong>合同<strong>（一口价，甲方风险最小）</strong>、</p><p>总价加激励费用合同（实际利润=目标利润+（目标成本-实际成本）x卖方承担比例，<strong>有最高限价</strong>）、</p><p>总价加经济价格调整合同<strong>（时间长、周期长时用）</strong></p><p><strong>成本补偿合同</strong>（<strong>适用于范围不清</strong>/变化/高风险**/较复杂<strong>，</strong>乙方风险小**）——</p><p><strong>成本</strong>加固定费用合同 （300+100x10%）、</p><p>成本激励费用（<strong>无最高限价</strong>）、</p><p>成本加奖励费用（主观判断）、</p><p>成本百分比合同<strong>（乙方风险最小，甲方风险最大）</strong></p><p><strong>工料合同（适用于范围不确定，不复杂。风险介于两者中间）</strong>单价固定，总价因成本增加而变化。如1天多少钱，</p><h3 id="管理沟通"><a href="#管理沟通" class="headerlink" title="管理沟通"></a>管理沟通</h3><p>（工具）项目报告发布</p><p>适当层次、形式和细节</p><p><strong>（输出）项目沟通记录</strong></p><p><strong>PMIS</strong>、演示汇报</p><p><strong>敏捷项目要充分利用信息发射源——看板、任务版、燃尽图、燃起图</strong></p><h3 id="管理项目知识"><a href="#管理项目知识" class="headerlink" title="管理项目知识"></a>管理项目知识</h3><p>知识分为<strong>显性和隐性（洞察力、经验）</strong></p><p><strong>知识管理环节需要相互信任氛围</strong></p><p><strong>隐形知识难以用文字来分享，可通过会谈交互型方式，显性可通过知识数据库、存储库分享</strong></p><p><strong>（工具）知识管理</strong></p><p><strong>知识分享活动（讲座、会议）、交互式培训、讲故事、特别兴趣小组</strong></p><p><strong>面对面</strong></p><p><strong>（输出）经验教训登记册</strong></p><p><strong>不断地更新</strong>；在项目<strong>结束</strong>时，把信息归入<strong>知识库</strong>中</p><h3 id="指导与管理项目工作"><a href="#指导与管理项目工作" class="headerlink" title="指导与管理项目工作"></a>指导与管理项目工作</h3><p>执行计划和批准的变更</p><p><strong>（输出）批准的变更请求</strong></p><p><strong>可能由项目经理审查，必要时需要变更控制委员会审批（CCB）</strong></p><p>过去的数据不改变。</p><p>包括：</p><p><strong>纠正措施、预防措施（不改变基准线）</strong></p><p><strong>更新（一定会改变基准）</strong></p><p>缺陷补救（不一定会不会改变）</p><p>应用场景——出现大量返工导致延误，需要走变更</p><p><strong>（工具）项目管理信息系统</strong></p><p>事业环境因素一部分</p><p>自动得出关键绩效指标法KPI</p><p><strong>（输出）可交付物</strong></p><p>状态：</p><p><strong>核实的</strong>可交付物（<strong>QC控制质量</strong>检查过）</p><p><strong>验收的</strong>可交付物（确认范围）</p><p>可交付的<strong>移交</strong>（结束项目）</p><p><strong>（输出）工作绩效数据</strong></p><p>已完成的工作、进度情况、变更数量等<strong>第一手资料</strong></p><p>工作绩效数据→工作绩效信息→工作绩效报告</p><p><strong>（输出）问题日志</strong></p><p>已发生的风险，整个生命周期都要更新</p><p>包括：问题描述、优先级、谁解决、解决时间</p><h2 id="第十章：测量（监控）绩效域"><a href="#第十章：测量（监控）绩效域" class="headerlink" title="第十章：测量（监控）绩效域"></a>第十章：测量（监控）绩效域</h2><h3 id="控制范围"><a href="#控制范围" class="headerlink" title="控制范围"></a>控制范围</h3><p>防止<strong>范围蔓延</strong></p><p>将项目管理计划与绩效数据做比较，生成工作绩效信息、变更请求</p><h3 id="控制进度"><a href="#控制进度" class="headerlink" title="控制进度"></a>控制进度</h3><p>监督活动状态，更新项目进度，管理变更</p><p><strong>敏捷中——回顾会</strong>，已交付工作量和已完成工作估算值，对剩余工作计划（未完项）进行优先级排序</p><p>数据分析的工具：</p><p>（工具）<strong>燃尽图</strong>、挣值分析、偏差分析、趋势分析、绩效审查、假设情景分析</p><h3 id="控制成本"><a href="#控制成本" class="headerlink" title="控制成本"></a>控制成本</h3><p>监督项目预算、管理成本基准变更</p><p><strong>（工具）挣值分析</strong>——综合考虑范围、成本、进度，完工率和花费资金做对比</p><p>三个关键指标：</p><p>计划价值（PV）</p><p>挣值（EV）：和PV比是衡量工作量，和AC比是钱</p><p>实际成本（AC）</p><p><strong>CV成本偏差：EV-AC实际成本&gt;0好</strong></p><p><strong>SV进度偏差：EV-PV计划价值&gt;0好</strong></p><p><strong>CPI成本绩效指数：EV/AC实际成本</strong></p><p><strong>SPI进度绩效指数：EV/PV计划价值</strong></p><p><strong>完工尚需绩效TCPI：剩余工作量/剩余预算</strong>，剩余工作量：75*60%=45，剩余预算：75-50=25</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230913115227412.png" alt="image-20230913115227412"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230912180858688.png" alt="image-20230912180858688"></p><p><strong>完工偏差VAC=BAC-EAC&gt;0好</strong></p><h3 id="控制质量"><a href="#控制质量" class="headerlink" title="控制质量"></a>控制质量</h3><p><strong>（工具）控制图/六西格玛</strong></p><p>规格线：允许的最大值、最小值，<strong>协议要求</strong></p><p>控制上限/下限：需要纠正的位置，<strong>由项目经理和干系人设定</strong></p><p><strong>异常：控制线外、七点同侧、七点同趋势</strong></p><p>作用：<strong>衡量过程是否稳定</strong>、是否可预测</p><p>提醒人们<strong>还有时间</strong>解决问题</p><p><strong>敏捷项目</strong>中的谈到<strong>质量</strong>想到<strong>DoD（已完成）</strong>和<strong>AC（验收标准）</strong></p><h3 id="控制资源"><a href="#控制资源" class="headerlink" title="控制资源"></a>控制资源</h3><p>需要时使用，无需时释放</p><h3 id="控制采购"><a href="#控制采购" class="headerlink" title="控制采购"></a>控制采购</h3><p>（工具）采购审计/审查</p><p><strong>（工具）索赔管理</strong></p><p><strong>谈判是解决索赔和争议的首选手法</strong></p><p>如果无法解决，需要合同中规定的<strong>替换争议解决（ADR）</strong>执行</p><p>（输出）结束的采购</p><p>由采购管理员输出</p><h3 id="监督沟通"><a href="#监督沟通" class="headerlink" title="监督沟通"></a>监督沟通</h3><h3 id="监控项目工作"><a href="#监控项目工作" class="headerlink" title="监控项目工作"></a>监控项目工作</h3><p><strong>让干系人了解项目状态、认可绩效行动、让干系人了解项目成本、进度预测的未来状态</strong></p><p><strong>（输出）工作绩效报告</strong></p><p><strong>包括：状态报告（信号灯图）、备忘录、预测信息、进展报告、推荐意见</strong></p><p>（工具）展示信息常见方法</p><p><strong>仪表盘：信号灯图、横道图</strong></p><p><strong>信号发射源：燃尽图、燃起图</strong></p><p><strong>可视化监控：任务看板</strong></p><h3 id="实施整体变更控制"><a href="#实施整体变更控制" class="headerlink" title="实施整体变更控制"></a>实施整体变更控制</h3><p>审查变更、批准变更、管理变更、对变更结果沟通</p><p>变更决策强调<strong>及时性</strong></p><p><strong>小变更：项目发起人、项目经理</strong></p><p><strong>大变更：变更控制委员会CCB</strong></p><p>（工具）会议</p><p><strong>变更控制会议</strong>：<strong>项目经理</strong>是成员，<strong>不是主负责</strong></p><p><strong>（工具）变更控制程序</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230913113655412.png" alt="image-20230913113655412"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230913113708699.png" alt="image-20230913113708699"></p><p><strong>变更批准后，需修改计划和基准来体现变更</strong></p><h3 id="确认范围"><a href="#确认范围" class="headerlink" title="确认范围"></a>确认范围</h3><p>正式验收</p><h3 id="结束项目或阶段"><a href="#结束项目或阶段" class="headerlink" title="结束项目或阶段"></a>结束项目或阶段</h3><p>成果移交+经验总结+文件记录/审核+干系人满意度调查+资源遣散</p><p>（输出）最终报告</p><p>是否满足商业计划价值</p><h2 id="第十一章：不确定性绩效域"><a href="#第十一章：不确定性绩效域" class="headerlink" title="第十一章：不确定性绩效域"></a>第十一章：不确定性绩效域</h2><p><strong>UVCA时代</strong>：不确定性、模糊性、复杂性、易变性</p><p>（工具）Cynefin框架</p><p>五种复杂度和处理方式：清晰——分类，繁杂——专家分析，复杂——感知试错，混乱——行动，无序——收集信息</p><p><strong>三类风险：</strong></p><p><strong>已知已知风险</strong>——成本计入项目活动中，<strong>属于成本基准</strong></p><p><strong>已知未知风险</strong>——<strong>应急储备</strong></p><p><strong>未知未知风险</strong>——<strong>管理储备</strong>，<strong>不计入成本基准中</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230914093730804.png" alt="image-20230914093730804"></p><h3 id="规划风险管理"><a href="#规划风险管理" class="headerlink" title="规划风险管理"></a>规划风险管理</h3><p>确保风险程度大小与重要程度匹配</p><p>评估风险奠定<strong>共同认可的基础，</strong>什么属于低中高风险</p><p>在项目<strong>构思阶段</strong>就开始</p><p><strong>（输出）风险管理计划</strong></p><p>风险类别、概率影响矩阵、什么属于低中高风险，<strong>不包含具体风险的应对</strong></p><p><strong>（输出）风险分解结构RBS</strong></p><p>按风险<strong>进行分类和子类别</strong></p><h3 id="识别风险"><a href="#识别风险" class="headerlink" title="识别风险"></a>识别风险</h3><p>识别<strong>单个及整体</strong>风险，知道具体的风险详情</p><p><strong>指定风险责任人</strong></p><p><strong>（工具）数据收集</strong></p><p><strong>头脑风暴</strong>—<strong>优点快，缺点不客观</strong></p><p><strong>德尔菲</strong>—背靠背专家匿名，<strong>优点客观，缺点慢</strong></p><p><strong>访谈</strong>—有经验的<strong>专家</strong>参与</p><p><strong>核对单</strong></p><p><strong>（工具）数据分析</strong></p><p>假设条件和制约因素分析—假设条件的不准确性，制约因素的有效性来识别风险</p><p><strong>SWOT分析</strong>—考察优势抵挡威胁，机会抵挡劣势</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230914093929233.png" alt="image-20230914093929233"></p><p>（工具）提示清单</p><p><strong>将风险类别作为提示清单</strong>来识别风险</p><p><strong>（输出）风险登记册</strong></p><p>风险清单、风险责任人、应对措施</p><p><strong>（输出）风险报告</strong></p><p>用于汇报，整体风险、单个风险的内容。</p><h3 id="实施定性风险分析"><a href="#实施定性风险分析" class="headerlink" title="实施定性风险分析"></a>实施<strong>定性</strong>风险分析</h3><p>概率、影响程度、等级</p><p><strong>（工具）风险概率影响矩阵</strong></p><p>等级高——采取<strong>优先应对</strong>措施，<strong>首抓</strong></p><p>等级低——<strong>列入风险登记册</strong>、<strong>观察清单，监督</strong></p><p><strong>（工具）层级图/气泡图</strong></p><p><strong>两个以上</strong>参数对风险进行分类</p><p><strong>（工具）风险研讨会</strong></p><p>（输出）风险登记册</p><p><strong>加入定性分析</strong></p><p>（输出）风险报告、假设日志、问题日志</p><h3 id="实施定量风险分析"><a href="#实施定量风险分析" class="headerlink" title="实施定量风险分析"></a>实施定量风险分析</h3><p><strong>（工具）敏感性分析——分析每个因素对风险影响最大</strong></p><p><strong>龙卷风图</strong></p><p><strong>（工具）决策树分析</strong></p><p><strong>预期货币价值EMV=获利x概率-赔付x概率-成本</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230914094223837.png" alt="image-20230914094223837"></p><p>（输出）风险报告</p><h3 id="规划风险应对"><a href="#规划风险应对" class="headerlink" title="规划风险应对"></a>规划风险应对</h3><p>规划风险管理指对整个项目风险的管理，规划风险应对指对具体风险</p><p><strong>（工具）风险应对措施：</strong></p><p><strong>上报</strong>—无能为力的时候上报，<strong>威胁</strong>应对策略（<strong>明确自己无法解决</strong>）—<strong>上报Escalate</strong></p><p><strong>规避Avoid—</strong>适用于概率高，具有严重负面影响的高优先级威胁</p><p>（重点）<strong>转移—</strong>支付费用<strong>由第三方承担—外包、保险、协议类型</strong></p><p><strong>减轻—</strong>多测试、开发原型、<strong>加入冗余部件</strong></p><p><strong>接收—主动接受：准备应急储备</strong>，被动接受：什么都不做</p><p><strong>（工具）机会应对措施：</strong></p><p><strong>上报</strong>—<strong>不在项目范围内</strong>，上报</p><p><strong>开拓</strong>—将<strong>最有能力的资源</strong>分配给项目，100%抓住机会</p><p>（重点）<strong>分享</strong>—建立<strong>风险共担</strong>的合作关系</p><p><strong>提高</strong>—为尽早完成而<strong>增加资源</strong>，提高抓住概率</p><p><strong>接受</strong>—抓住但不主动追求</p><p>做题时要看到到底是风险还是机会，再选措施。</p><p><strong>（工具）应急应对策略</strong></p><p><strong>有充分预警信号，指定应急应对策略</strong>；</p><p>曲线救国，<strong>可能会变更</strong>。</p><p><strong>和应急储备不一样</strong>，储备在基准范围内，不走变更。</p><p>（工具）<strong>整体项目</strong>风险应对策略</p><p>规避——取消项目</p><p>（输出）风险登记册</p><p>触发器、预警信号，应急计划，<strong>弹回计划（应急没用，再制定新计划）</strong></p><p>（输出）风险报告</p><h3 id="实施风险应对"><a href="#实施风险应对" class="headerlink" title="实施风险应对"></a>实施风险应对</h3><p>执行风险应对</p><h3 id="监督风险"><a href="#监督风险" class="headerlink" title="监督风险"></a>监督风险</h3><p>已知已知风险——执行应对<strong>措施</strong></p><p><strong>已知未知</strong>风险——执行<strong>应急计划</strong>/可能<strong>走变更</strong></p><p><strong>未知未知</strong>风险——已发生：<strong>走变更</strong>，权变措施——如自然灾害未知未知，应该立即权变。</p><p>（工具）数据分析——<strong>储备分析</strong></p><p>比较剩余应急储备与剩余风险量</p><p><strong>（工具）审计/检查</strong></p><p><strong>有效性</strong>检查。<strong>风险审查会</strong></p><p>（输出）变更请求</p><p>纠正措施=应急措施+<strong>权变措施（未赋权的计划先执行）</strong></p><p>（输出）风险登记册</p><p>风险审计结果，应对结果</p><h2 id="第十二章：有效进行项目裁剪"><a href="#第十二章：有效进行项目裁剪" class="headerlink" title="第十二章：有效进行项目裁剪"></a>第十二章：有效进行项目裁剪</h2><p><strong>PMO项目管理办公室</strong>或<strong>价值交付办公室VDO</strong>进行裁剪的审批</p><p>持续改进——审查点、阶段关口、回顾会</p><p><strong>定期审查会议</strong></p><h2 id="第十三章：敏捷项目管理的其他考点内容补充"><a href="#第十三章：敏捷项目管理的其他考点内容补充" class="headerlink" title="第十三章：敏捷项目管理的其他考点内容补充"></a>第十三章：敏捷项目管理的其他考点内容补充</h2><p><strong>敏捷项目的启动和规划</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230919114926579.png" alt="image-20230919114926579"></p><h3 id="产品愿景"><a href="#产品愿景" class="headerlink" title="产品愿景"></a>产品愿景</h3><p><strong>（工具）电梯测试法</strong></p><p>1-2分钟向相关方介绍产品情况，让相关方感兴趣</p><p><strong>（工具）愿景盒子</strong></p><p>类似包装盒，有特性和说明书。</p><p><strong>（输出）敏捷团队章程</strong></p><p>包括：团队价值观、工作协议、基本规则、团队规范</p><p><strong>（输出）用户故事——需求</strong></p><p>包含角色（作为…）、功能（希望…）、价值（以便…）</p><p><strong>DoD整体的用户故事，AC用户故事拆解出的每个功能的验收标准</strong></p><p>Invest原则（小的，独立的，有价值的，可测试的依据）</p><p><strong>（输出）用户故事地图</strong></p><p><strong>（输出）产品待办列表Product backlog</strong></p><p>排序的，变化可更新的</p><p>DEEP原则：</p><p>详略得当的、被估算的、动态发展、排列优先级</p><p><strong>注意事项：</strong></p><p><strong>冲刺阶段不做调整，</strong></p><p><strong>本周期发生的bug不一定本期要完成，bug优先级由PO决定</strong></p><p>产品待办列表兼顾<strong>计划和需求</strong>，冲刺待办列表Sprint Backlog兼顾<strong>计划和设计</strong></p><p><strong>（工具）迭代计划会</strong></p><p>1、排待办事项/用户故事优先级，也可以单独开一个优先级梳理会</p><p>2、将待办事项/用户故事拆分为任务</p><p><strong>第一步迭代计划会流程：</strong></p><p>确认问题-拆分产品用户故事-估算故事-确认冲刺目标</p><p><strong>权衡故事优先级——价值期望度/满意度、成本、行业和技术、风险</strong></p><p>（工具）MoSCow规则</p><p>必须有、应该有、可能有、本次不会有</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230919114956663.png" alt="image-20230919114956663"></p><p>估算故事（工作量）：</p><p>（工具）故事点——扑克牌法、T恤法（x，xl、xxl）、亲和法</p><p>有助于跨职能驱动、故事点不会过期、更快</p><p>（工具）理想日法</p><p>迫使大家面对额外消耗</p><p>更容易解释、开始</p><p><strong>第二步迭代计划会：</strong></p><p><strong>全程PO参与，制定冲刺待办Spring backlog</strong></p><p>任务：如单元测试30min，界面设计20min</p><p><strong>总结：迭代计划会</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20230919115051373.png" alt="image-20230919115051373"></p><h3 id="敏捷项目管理的执行和监控"><a href="#敏捷项目管理的执行和监控" class="headerlink" title="敏捷项目管理的执行和监控"></a>敏捷项目管理的执行和监控</h3><p><strong>（工具）每日Scrum会/站立会</strong></p><p><strong>15min左右</strong></p><p>昨天干了什么，打算做什么，遇到什么问题</p><p>可看任务板、燃起图燃尽图</p><h3 id="敏捷项目管理的收尾"><a href="#敏捷项目管理的收尾" class="headerlink" title="敏捷项目管理的收尾"></a>敏捷项目管理的收尾</h3><p><strong>（工具）迭代评审会</strong></p><p><strong>团队（不是SM项目经理展示）向PO演示冲刺中开发的产品功能</strong></p><p>PO会邀请相关干系人参与会议</p><p><strong>（工具）迭代回顾会/反思会</strong></p><p><strong>评价迭代后的好的坏的、已完成的固化、未完成的改进</strong></p><h3 id="敏捷相关注意事项"><a href="#敏捷相关注意事项" class="headerlink" title="敏捷相关注意事项"></a>敏捷相关注意事项</h3><p><strong>干系人——直接互动</strong></p><p>团队——<strong>自组织团队、协作性团队</strong></p><p>交付——敏捷<strong>范围会不断变化，需求放入待办事项，不断更新，但冲刺阶段不要随意调整</strong></p><p>规划成本——<strong>轻量级估算（渐进明细）</strong>、短期规划</p><p>规划沟通——<strong>更频繁快速沟通、集中办公、邀请干系人</strong>参与评审会，透明</p><p>规划采购——<strong>只定义主体协议</strong></p><p>项目工作/测量——<strong>循环回顾，寻找根本原因</strong></p><p>不确定性——每个迭代要<strong>考虑风险</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP </tag>
            
            <tag> 考证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建求生之路2Linux服务器</title>
      <link href="/2023/01/04/linux/da-jian-qiu-sheng-zhi-lu-2-yun-fu-wu-qi/"/>
      <url>/2023/01/04/linux/da-jian-qiu-sheng-zhi-lu-2-yun-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20230105162538.png"><p>求生之路2，作为一个08年的游戏，伴随了多少人的童年，至今还经久不衰。当初小苏下的盗版，到长大后在steam买的正版（大家也要支持正版噢），到目前为止依然还在玩的游戏，非常经典的4人合作游戏。</p><p>早在很多年前，V社作为求生之路的开发者已经停止了游戏的维护，开发者们也原地解散，导致这个游戏没有优化更新，虽然游戏内的优化已经足够好，但组队联机的不稳定一直是求生的一个诟病，加上steam是国外的，时不时就是ping值报表，mod冲突，rpg服污染，使我每次和小伙伴们玩游戏前都要连接好几次，非常影响时间和游戏体验。</p><p>那么，有没有什么办法解决服务器不稳定的问题呢？有！我们自己搭个服务端。服务端可以理解我们在游戏里创建个房间，玩家就相当于客户端，进入房间就需要连接服务端。</p><p>自己的服务器的好处：</p><ol><li>国内服务器（上海），延迟低</li><li>可安装插件，实现8人房等功能</li></ol><p><strong>言归正传</strong></p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="购买云服务器"><a href="#购买云服务器" class="headerlink" title="购买云服务器"></a>购买云服务器</h3><p>这里购买的过程就不展开了，需要注意以下内容：</p><ol><li>购买时选择阿里云、腾讯云这种新用户首购一年的轻量服务器（到期后换厂商，不做冤大头），轻量服务器比云服务器的好处是配置稍高，价格实惠。</li><li>配置要求：2核2G4M（88园子首年）。经过两个月的测试，发现满载8人房，绝境求生（多特）模式下，可以稳定运行。波动图可发现基本上都是在4M以下。内存才500M左右。所以2G4M是足够的。如果你想加更多的插件+极限多特模式，经济充裕的话，4G6M也是可以选择的（159园子首年），再高就布局性价比了。</li><li>科普：带宽影响的是传输包的速度，如果长期承载超过带宽，就会有丢包的情况（前面有个witch，你准备一枪秒妹的时候，服务器加载中……），这就是因为数据包丢了。</li></ol><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20230109103906.png"><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20230109103953.png"><h3 id="服务器准备工作"><a href="#服务器准备工作" class="headerlink" title="服务器准备工作"></a>服务器准备工作</h3><ol><li><p>选择安装镜像：CentOS7.6</p></li><li><p>重置实例密码：在厂商控制台重置，就是你之后要连接linux服务器的管理员密码。</p></li><li><p>设置云服的防火墙，添加规则，TCP和UDP的协议，端口选择ALL，策略选择允许。</p><blockquote><p>只有开放了端口，我们把服务端建立在某个端口上，才能连上。如我们建了个图书馆，不把大门打开，人怎么进来。</p></blockquote></li><li><p>需要两个连接工具（网上有下载）</p><ol><li>Xftp：用于传输文件到服务器的工具</li><li>moba：远程连接ssh工具，用于命令行操作服务器</li></ol></li></ol><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><ol><li><p>进入moba，用刚才重置的实例密码进入服务器</p></li><li><p>依次输入以下指令（–注释不需要）</p><pre><code>sudo yum install xulrunner.i686——安装运行环境yum install screen——安装托盘程序mkdir ~/Steam——在桌面创建steam文件夹cd ~/Steam——打开steam文件夹wget http://media.steampowered.com/installer/steamcmd_linux.tar.gz——下载steamtar -zxvf steamcmd_linux.tar.gz——解压steam./steamcmd.sh——执行steam cmdlogin anonymous——匿名登录app_update 222860 validate——安装求生之路2客户端安装好后这里需要输入quit</code></pre></li><li><p>打开xftp，用刚才重置的实例密码进入服务器</p></li><li><p>安装插件（视频里有教比较简单的方法，另外tickrate里面的dll文件需要删除，在视频提供的插件整合包里已经删除了，所以无需额外操作）</p><p><a href="https://www.bilibili.com/video/BV11G4y197uF/">https://www.bilibili.com/video/BV11G4y197uF/</a></p><blockquote><p>按需添加（建议按视频加），里面也有讲解手动安装单个插件的方法</p></blockquote></li><li><p>添加server</p><blockquote><p>这里可以配置你要访问的端口相关信息</p><p>详细看一下该配置文件，有些需要改</p><p>如：服务器名字可以在这里修改；模式最好去掉，否则通过管理员来换绝境求生的特殊模式时，切换章节就会又恢复成战役模式。</p></blockquote></li><li><p>添加管理员</p><blockquote><p>增加管理员的id，可进入游戏单人模式，控制台输入status，就会出现</p></blockquote></li><li><p>开服指令<code>.sh</code>文件拖至求生之路2客户端的路径：/root/Steam/steamapps/common/Left 4 Dead 2 Dedicated Server</p></li><li><p>进入moba，用刚才重置的实例密码进入服务器</p></li><li><p>依次输入以下指令（–注释不需要）</p><pre><code>cd ~/Steam/steamapps/common/Left\ 4\ Dead\ 2\ Dedicated\ Server/——移至求生路径screen -S l4d2——创建一个求生之路2的托盘,这样的好处就是即使关掉红色的软件，求生之路2也会正常运行，不开托盘的话会直接崩服。chmod +x start.sh——第一次进入需要输入，以后可以跳过这一步./start.sh进游戏，连接connect xxx.xxx.xxx.xxx:xxxx</code></pre></li><li><p>相关托盘指令</p></li></ol><pre><code>如果遇到服务器远程卡死的情况下screen -x——进入正在执行的托盘Ctrl +C——关闭服务器如果不行，就screen -ls——查看托盘kill xxx——删掉托盘screen -S l4d2——重新创建一个托盘./start.sh——开服</code></pre><h3 id="设置域名访问（可选）"><a href="#设置域名访问（可选）" class="headerlink" title="设置域名访问（可选）"></a>设置域名访问（可选）</h3><p>域名访问的作用，就是好记：</p><p>连接时connect ip+端口，变成域名+端口的方式。如123.234.345.456:1001，可以变为sulog.fun:1001</p><p>首先，你需要购买一个域名：</p><ol><li>建议选择与服务器同一厂商，对后续域名备案、域名绑定都会简便不少。</li><li>域名建议到期就换，不当冤大头。</li><li>购买域名前需要提前一天（审核1天左右）实名认证和身份模板，都在厂商控制台进行。</li></ol><p>以腾讯云为例，在此处增加解析即可：</p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20230109113749.png">]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 求生之路2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客优化篇(matery)(三)</title>
      <link href="/2022/12/25/hexo/hexo-bo-ke-you-hua-pian-matery-san/"/>
      <url>/2022/12/25/hexo/hexo-bo-ke-you-hua-pian-matery-san/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又是一年年底，小站又迎来年更啦（doge），2022年，小苏做了两种尝试：</p><ol><li><p><strong>Hexo迁移云服务器</strong></p><ol><li>先说结果：成功。</li><li>原因：由于coding早在21年大概5月份就已经不支持搭建静态网站，github作为国外站点，搭建国内的网站加载速度往往不尽人意。于是小苏一不做二不休，将Hexo迁移到了云服务器上，效果确实很快，再也不用担心免费带来的不稳定性了，但随之而来的是云服务器的费用问题。</li></ol></li><li><p><strong>typecho博客搭建</strong></p><ol><li>先说结果：成功，但废弃了。</li><li>原因：迁移Hexo时有一个思考，Hexo体量属于比较大的（100M+），上传文章需要打开控制台输入指令，手机也不能上传，于是有了换博客引擎的想法。不得不说，typecho博客完美解决了这些问题，搭建起来非常方便，安装宝塔相当于傻瓜式操作，最主要还有后台web页面，方便小白上手使用博客。</li><li>但为什么废弃了呢？typecho我正能用别人设置好的主题，通过web后台页面改一些可配置的参数，但如果主题作者没有设置改的地方，是无法调整的，这就给我这个喜欢DIY的带来了局限性。其次是对Hexo的不舍，小站体量虽然大，但都是我一点点diy出来的结果，而且发博客一般都是电脑操作，对于手机写博客其实是个”伪需求“，于是，还是选择Hexo辣！</li></ol></li></ol><p>本次优化重点在：图片失效的恢复，主要因为<code>jsdelivr</code>挂了，导致原先图床上的图片都无法访问，解决方法是换了阿里云的oss对象存储作为图床。</p><p><strong>言归正传</strong></p><h2 id="调整记录"><a href="#调整记录" class="headerlink" title="调整记录"></a>调整记录</h2><blockquote><p>本次不能说是优化了，对一些地方做了简单的调整</p></blockquote><h2 id="❌删除"><a href="#❌删除" class="headerlink" title="❌删除"></a>❌删除</h2><ul><li><input disabled="" type="checkbox"> 相册</li></ul><h2 id="✅新增功能"><a href="#✅新增功能" class="headerlink" title="✅新增功能"></a>✅新增功能</h2><ul><li><input checked="" disabled="" type="checkbox"> 无</li></ul><h2 id="✅新增美化"><a href="#✅新增美化" class="headerlink" title="✅新增美化"></a>✅新增美化</h2><ul><li><input checked="" disabled="" type="checkbox"> 无</li></ul><h2 id="🆗内容修改"><a href="#🆗内容修改" class="headerlink" title="🆗内容修改"></a>🆗内容修改</h2><ul><li><input checked="" disabled="" type="checkbox"> 追番信息更新</li><li><input checked="" disabled="" type="checkbox"> logo更换</li></ul><h2 id="🔱博客优化"><a href="#🔱博客优化" class="headerlink" title="🔱博客优化"></a>🔱博客优化</h2><ul><li><p><input checked="" disabled="" type="checkbox">  CDN图片失效，更换图床（重点）</p></li><li><p><input disabled="" type="checkbox">  字体、搜索加载速度优化（尝试）</p></li></ul><h1 id="正片开始"><a href="#正片开始" class="headerlink" title="正片开始"></a>正片开始</h1><h2 id="1-❌删除功能"><a href="#1-❌删除功能" class="headerlink" title="1. ❌删除功能"></a>1. ❌删除功能</h2><h3 id="1-1相册"><a href="#1-1相册" class="headerlink" title="1.1相册"></a>1.1相册</h3><p>“关于我”页面有相册功能，为缩减博客体量，将相册的标签页去掉。</p><p>方法：根据<code>Hexo+github搭建matery博客二（主题配置篇） </code>的相册搭建方法去掉即可。</p><hr><h2 id="2-✅新增功能"><a href="#2-✅新增功能" class="headerlink" title="2.  ✅新增功能"></a>2.  ✅新增功能</h2><p>无</p><hr><h2 id="3-✅新增美化"><a href="#3-✅新增美化" class="headerlink" title="3.✅新增美化"></a>3.✅新增美化</h2><p>无</p><hr><h2 id="4-🆗内容修改"><a href="#4-🆗内容修改" class="headerlink" title="4.🆗内容修改"></a>4.🆗内容修改</h2><h3 id="4-1追番信息更新"><a href="#4-1追番信息更新" class="headerlink" title="4.1追番信息更新"></a>4.1追番信息更新</h3><ol><li><p>删除过去的追番信息</p><pre><code>hexo bangumi -d</code></pre><p>注意：该插件不需要我们每次部署都要输入更新数据的命令，只有你自己番剧更新时才需要执行更新指令，之前的番剧数据会一直保留，直到被你删除</p></li><li><p>更新追番信息</p><pre><code>hexo bangumi -u</code></pre></li><li><p>正常部署即可</p><pre><code>hexo clhexo ghexo s</code></pre></li></ol><h3 id="4-2Logo更新"><a href="#4-2Logo更新" class="headerlink" title="4.2Logo更新"></a>4.2Logo更新</h3><blockquote><p>原先的logo，favicon都是cdn加速的链接，由于<code>jsdelivr</code>失效，因此更换图床。</p></blockquote><p>在主题的_config.yml文件中，修改链接即可。</p><hr><h2 id="5-🔱博客优化"><a href="#5-🔱博客优化" class="headerlink" title="5.🔱博客优化"></a>5.🔱博客优化</h2><h3 id="5-1CDN图片失效，更换图床"><a href="#5-1CDN图片失效，更换图床" class="headerlink" title="5.1CDN图片失效，更换图床"></a>5.1CDN图片失效，更换图床</h3><blockquote><p><code>jsdelivr</code>失效，原先我的图床是github+jsdelivr的方式搭建，因此所有图片均为404。</p><p>有三种解决方法：</p><ol><li><p>在网上找免费图床，将图片上传上去生成图片，但免费图床不好找，如果之后也失效，咱们一点办法也没</p></li><li><p>（小苏选择）找大厂的收费存储当图床，便宜好用放心，我用的阿里云oss对象存储，40G存储/年9元。</p></li><li><p>服务器存储，顾名思义直接将图片放博客服务器里，但Hexo的markdown不清楚怎么放图片进文章里，Hexo5.0之前都可以用插件实现。但我的是Hexo6.0，以后琢磨琢磨可以的话用这种方式，就更省钱了。唯一缺点就是对服务器有一定负载，博客体量变大。</p></li></ol></blockquote><p>具体教程可参考：<a href="https://blog.csdn.net/weixin_46471601/article/details/124932929">https://blog.csdn.net/weixin_46471601/article/details/124932929</a></p><p>我是按照一步步走下来没问题的，用的是阿里云OSS+Picgo。</p><p><strong>有两点需要注意：</strong></p><ol><li><p>由于我是github图床迁移，先将github上的图片下载下来，再上传到oss上。</p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20221228151819.png"></li><li><p>替换markdown文章上的图片链接时，要选择好前缀<code>https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/</code>，直到图片名称的上一级，一级级的替换，不能全部<code>https://cdn.jsdelivr.net</code>覆盖，后缀没有去掉会导致图片加载不出来。（替换链接前，<strong>一定要备份文章！</strong>不然替换错了后悔莫及）</p></li></ol><blockquote><p>这里拓展一点，对象存储：</p><p>通俗来说，对象存储就类似于一个云盘，可以把任何东西存进去，并且给你生成一个网络链接，可以通过链接访问和下载。</p><p>当我把文章图片放对象存储器后，我访问博客，页面是服务器加载的，而图片是阿里云帮我加载，不占用我的博客资源，并且速度很快。</p><p>关于收费：对象存储的收费条例很复杂，通俗可理解为：基本使用费（40G，9元/年）+流量费（按量计费），流量费是根据你的文件访问量下载量来计费，我的博客访问量很低，所以这个费用微乎其微，几分钱，可以忽略不计。如果你的访问量很大，可以买流量包（下行流量包），如果不买就是按量计费。</p></blockquote><h3 id="5-2字体、全局搜索加速"><a href="#5-2字体、全局搜索加速" class="headerlink" title="5.2字体、全局搜索加速"></a>5.2字体、全局搜索加速</h3><p><strong>字体：</strong></p><ol><li><p>找到 <code>/themes/matery/source/css/</code>下的 my.css 文件，填入下面的代码：</p><pre><code>@font-face{    font-family: 'myFont';    src: url('https://sulog.oss-cn-hangzhou.aliyuncs.com/myfont.ttf');}body{    font-family: 'myFont';}</code></pre></li></ol><p><strong>全局搜索：</strong></p><blockquote><p>在网站F12时查看了加载逻辑，全局搜索是加载了search.xml文件。该文件是在hexo g构建时，会在public文件夹中生成了该文件，该文件就是遍历了所有文章的结果集。</p></blockquote><p>于是，我把生成后的search.xml上传到了oss上，并在<code>themes\matery\layout\_partial\search.ejs</code>中，对链接进行更换。</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">searchFunc</span><span class="token punctuation">(</span><span class="token string">"https://sulog.oss-cn-hangzhou.aliyuncs.com/search.xml"</span><span class="token punctuation">,</span> <span class="token string">'searchInput'</span><span class="token punctuation">,</span> <span class="token string">'searchResult'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>在你更新了文章后，需要将xml文件重新上传一次图床，以保证结果集是最新的，当然更新比较少时，你不介意可以隔一段时间再更新索引。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Typecho博客</title>
      <link href="/2022/10/22/hexo/da-jian-typecho-bo-ke/"/>
      <url>/2022/10/22/hexo/da-jian-typecho-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建typecho博客"><a href="#搭建typecho博客" class="headerlink" title="搭建typecho博客"></a>搭建typecho博客</h1><blockquote><p>只记录了必要的内容，详情可看第四步的搭建教程。</p></blockquote><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li><p>Centos7</p></li><li><p>typecho程序 <a href="http://typecho.org/download">http://typecho.org/download</a> （下载最新版即可）</p></li><li><p>主题下载（我使用的是Joe）</p><ol><li><a href="https://laolion.com/archives/2591.html">Joe魔改版</a></li><li><a href="https://github.com/Dreamer-Paul/Fantasy">Fantasy</a>粉色版</li><li><a href="https://typecho.me/969.html">single</a>简约</li></ol></li><li><p><a href="https://blog.csdn.net/qq_19273419/article/details/108660112">搭建教程</a></p><blockquote><p>搭建过程按上面就可以搭建完成e</p><p>需要注意的点：</p><ol><li>此教程是使用IP搭建的，如果是使用域名，请注意将IP换成域名</li><li>宝塔的地址：<a href="http://ip:8888/">http://ip:8888</a></li><li>忘记宝塔地址或账号密码，命令行输入<code>bt default</code>，查看默认登录信息</li></ol></blockquote></li></ol><h3 id="typecho使用"><a href="#typecho使用" class="headerlink" title="typecho使用"></a>typecho使用</h3><p>地址：<a href="http://ip/admin%EF%BC%8C%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7admin%EF%BC%8C%E5%AF%86%E7%A0%81%E5%B0%B1%E6%98%AF%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%AE%BE%E7%BD%AE%E7%9A%84%E5%AF%86%E7%A0%81">http://ip/admin，默认账号admin，密码就是搭建过程中设置的密码</a></p><p><strong>外观设置</strong></p><p>对外观的自定义设置，这个看外观作者开启了有哪些自定义功能</p><p><strong>创建单独页面（友链、留言板、音乐盒）</strong></p><p>主题中包含有模板，选择需要的模板，高级选项中关闭评论，引用，集中等功能（留言板不要关闭评论功能）</p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20220211103408.png"><p><strong>创建分类</strong></p><blockquote><p>标签不需要创建，在写文章时添加标签即可</p></blockquote><p><strong>设置-基本设置</strong></p><p>站点名称……</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>宝塔界面的“安全”，可以关闭防火墙。另外注意阿里云服务器的安全端口规则是否开启</li></ol>]]></content>
      
      
      <categories>
          
          <category> Typecho </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle</title>
      <link href="/2022/04/16/mysql/oracle-zhan-yong-cpu100/"/>
      <url>/2022/04/16/mysql/oracle-zhan-yong-cpu100/</url>
      
        <content type="html"><![CDATA[<h1 id="oracle占用CPU100"><a href="#oracle占用CPU100" class="headerlink" title="oracle占用CPU100%"></a>oracle占用CPU100%</h1><p>背景：迁移4.5迎新windows数据库服务器后，经常出现cpu100%占用，后来排查到是迎新系统有财务的定时调度，数据量比较大导致cpu占满。此文档记录查到原因的过程与解决方案。</p><ol><li><p>windows有个很强大的软件Process Explorer</p><ol><li>下载地址：<a href="https://www.onlinedown.net/soft/31805.htm">https://www.onlinedown.net/soft/31805.htm</a></li></ol></li><li><p>下载这个软件，里面有3个可执行文件，选第一个就行，放到问题服务器上（数据库服务器）</p></li><li><p>打开任务管理器，发现是oracle rdbms占用cpu较高</p></li><li><p>打开该软件，找到oracle rdbms进程，双击，点击Threads</p></li><li><p>查看到使用最高的线程tid</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20220116162912007.png" alt="image-20220116162912007"></p></li><li><p>进入plsql，查询sql_id</p><p>需要多次执行，找到出现频率最高的sql_id</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> sql_id <span class="token keyword">from</span> v$<span class="token keyword">session</span>    <span class="token keyword">where</span> paddr <span class="token operator">in</span><span class="token punctuation">(</span>      <span class="token keyword">select</span> addr <span class="token keyword">from</span> v$process      <span class="token keyword">where</span> spid <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'70224'</span><span class="token punctuation">)</span>   <span class="token punctuation">)</span>  </code></pre></li><li><p>根据6中的sql_id查询具体执行占用CPU过高的sql语句</p><p>这时就可以判断出是什么sql语句在占用cpu，这里查到是财务缴费的sql语句</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$sqlarea <span class="token keyword">where</span> sql_id <span class="token operator">in</span><span class="token punctuation">(</span>sql_id1<span class="token punctuation">,</span>sql_id2<span class="token punctuation">,</span>sql_id3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre></li><li><p>根据6中的sql_id，查询sid和serial</p><p>需要多次执行，找到出现频率最高的（执行一次可能会查询不到，因此需要多执行）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> sid<span class="token punctuation">,</span><span class="token keyword">serial</span><span class="token comment" spellcheck="true">#,sql_id from v$session where sql_id in(sql_id1,sql_id2,sql_id3...)  </span></code></pre></li><li><p>杀掉进程</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> system <span class="token keyword">kill</span> <span class="token keyword">session</span> 'sid<span class="token punctuation">,</span><span class="token keyword">serial</span><span class="token comment" spellcheck="true">#';  </span></code></pre><blockquote><p>这时问题得以解决，但只是暂时的，因为迎新会定时调度执行，到时候还是会占用。</p><p>因此后期还需要排查为什么会占用，优化sql，当然这些工作就交给研发，我们排查到这里就可以了。</p></blockquote></li></ol><blockquote><p>如果不是sql占用导致的，也有可能是监听的日志文件较大导致的。</p><p>原因：windows的oracle数据库会有这种情况，不会自动清理监听日志，需要我们手动清理</p><p>解决：</p><ol><li>找到监听日志地址<code>/u01/app/grid_base/diag/tnslsnr/rac1/listener/trace</code></li><li>如果过大就清空即可</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用资源链接整理</title>
      <link href="/2022/02/15/xue-xi/zi-yuan-lian-jie/"/>
      <url>/2022/02/15/xue-xi/zi-yuan-lian-jie/</url>
      
        <content type="html"><![CDATA[<p>链接整理</p><h3 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h3><ol><li>BootCDN（JS加速链接库）：<a href="http://www.bootcdn.cn/">www.bootcdn.cn</a></li><li>oci鼠标图标：<a href="https://zhutix.com/ico/ori-cursors/">https://zhutix.com/ico/ori-cursors/</a></li><li>图标：<a href="https://fontawesome.com/icons?d=gallery&amp;q=rain">https://fontawesome.com/icons?d=gallery&amp;q=rain</a></li><li>emoji符号大全：<a href="http://www.fhdq.net/emoji/emojifuhao.html">http://www.fhdq.net/emoji/emojifuhao.html</a></li><li>小歪API：<a href="https://api.ixiaowai.cn/">https://api.ixiaowai.cn/</a></li><li>Microsoft Office 2016免费破解版下载：<a href="http://www.paid8.com/">http://www.paid8.com/</a></li></ol><h3 id="工具链接"><a href="#工具链接" class="headerlink" title="工具链接"></a>工具链接</h3><ol><li>重装win10系统：<a href="https://iknow.lenovo.com.cn/detail/dc_177365.html">https://iknow.lenovo.com.cn/detail/dc_177365.html</a></li><li>RGB颜色值转换：<a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">https://www.sioe.cn/yingyong/yanse-rgb-16/</a></li><li>图片去底：<a href="https://www.aigei.com/bgremover">https://www.aigei.com/bgremover</a></li><li>图片尺寸、大小：<a href="https://www.gaitubao.com/">https://www.gaitubao.com/</a></li><li>短视频解析下载：<a href="https://www.heytoolman.com/rmwatermark">https://www.heytoolman.com/rmwatermark</a></li><li>抖音背景音乐获取：<a href="http://tool.qqjsz.cn/douyin_music/">http://tool.qqjsz.cn/douyin_music/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PLSQL使用</title>
      <link href="/2021/06/01/mysql/plsql-shi-yong/"/>
      <url>/2021/06/01/mysql/plsql-shi-yong/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b9de58e8979b7636f51761b68ea73c565d3098688aa6c991ad18ac3abf1d0258"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 公司 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实施 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装PLSQL</title>
      <link href="/2021/05/11/linux/windows-an-zhuang-plsql/"/>
      <url>/2021/05/11/linux/windows-an-zhuang-plsql/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows安装PLSQL"><a href="#Windows安装PLSQL" class="headerlink" title="Windows安装PLSQL"></a>Windows安装PLSQL</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>还有个文件夹没截上，instantclient_11_2</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210511093323.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>点击plsqldev1201x64.msi进行安装</p></li><li><p>点击桌面安装好的快捷方式</p></li><li><p>进行注册，注册码.txt</p></li><li><p>配置oci文件</p><ol><li><p>将instantclient_11_2文件夹剪切到plsql的安装目录</p><ol><li>安装目录可以右键快捷方式查看文件位置</li></ol></li><li><p>点击程序中的Configure-Perferences</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210511094109.png"></p><p>刚才剪切文件夹的路径<code>D:\oracle\PLSQLDeveloper12\instantclient_11_2</code></p><p>文件夹中的oci文件路径<code>D:\oracle\PLSQLDeveloper12\instantclient_11_2\oci.dll</code></p></li></ol></li><li><p>关闭程序，重新打开登录</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210511094334.png"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>运维问题集合</title>
      <link href="/2021/04/29/linux/yun-wei-wen-ti-ji-he/"/>
      <url>/2021/04/29/linux/yun-wei-wen-ti-ji-he/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e0661866204fc787ea38cc9763079d282c2be1d9e8dc18d7e10c129b9f8cdae5">50401a1b4252edfef05a7c1120311a28d7c9779e54cbf0d6b9b880a49e65437b6f4ecd595733aa0e6ab92dc56eeb4cbcbe86739bdfde2a6bcbddac2804966a7bd46fc8f18ad4a6b0ed56684a20d7eb97d1f92b20cfb9139867f6f1519b109f73782487dde5d6450348be6d108fcb3d1a12b1268894786a1edb349bee072a5f084759428d098f78f4b09ba3e8627071b32063e3b0d35da850907714b349984e5301694d7e0ca2e6c63076fed9efa467ec09423f36b84fac5aab084093dc6e76a7000023cd6a1ad9d241faddb962bdc66f1279c6ed6e1f3af2f7d3169e1a69b670b58b84e329647116b91d683bd75f536c0327076f26ce7737db70576aa8e15f4c381b6928a71eda7c6b98cef3e051a4f756eee052a7d12e574e00f215fdf6c737f75cad0fd09dfc7bd31d61650f2fc9a4da5a3d869d188852ed52e07522281ca27b425a98d0928d53780a357651aaf79240be35bdbea3649927968de707cd3122f46b0bbce6e1edda2657ca2df818f7de1d5a5967d2c7ee91efa11d9b9642a237af12a645c6e28d221438d85576e673c81423f909d52da34271807444384283cfafbac858afd5c8b2e634de2e74b1b2719047276fa7fc70b2f5c236281d070076ca85aad49e6b4907113a54a0ed33aea03fecd1d95b048736855ba9f9317b9b8a63053a755f8a9cf411983e24f696ab7823b28c7bb9b304bfcc4833d7517fafb233aaf2735b63abbb232fdb3d4ed7c909ee936ab03feb1a9604719acacbb2306868a8481dbfb1de944181abc8ddef6234e1ae3d9cb49019ee207fd5a20be586b0c0ceb7d6c9849aae311915348e1edb5081915805de724fae94b1506391f998716d58fd328ed1d5a8ec1895d06085d4484ac9324bd9c2e103bdc7bf1e272458fb23be457c086a04e40595d58cd33e0f68f02b014a5d07ce0bcce62f7d80e638297824454bd985ebbc1f305c3d8719f05f66a22851428216c9c23ca677f562c0191f731e0220340c659ce5c9a583e945cbc99901477ef0271bb064443b4defc928f5e12f3bab62784afd01e5493af92c31af1ecb6b3dbedec9a6de733b4307db224540905bdacb99c6c524615bc747fcceda73cddf48621da39525b0602ad75bec54b4977a9d39d9ba8562f68cbd04d74d3a3e56a339850ed2ecb01082f94aaad40c08a0fa3fc44eea144df38c71efbd0e26ca58f8311beab8bb730caa04dc0cd8b18f5875b435510d4c4ff35e74c2cd834d235454d9f9f3cd111cfb97ef2c4eff6d785587c25a8c1851319bdcbdb77123e6fe2440695fd38f6d33040ee5d8901dc0ce0a38d96be9d2878609ce8fb05b167ef4b8c9ab3ecccce1c73cd706b7bba9bdd82e3ee5b151ade15288d22f2bba7fff5bc1d46384f287a89487649d8b4113c15fce9e9d6af28c3d480ba944d8ad9dd9cded68ac4a4f2b9793ab126bfc879c2bf3ee552e8656eab1f0c0d03fb2ff82cdb529c99109b7bdecd45099230ed75b7b451209ff1dd1a7d9d422fefb5a4861d6c077d0afad84dee79f25e56c3c94f40eac7398bfecdd74465dccf45b68cc1fa85ba6a2bc3680d02a063a9c1b43acd26c09679634d4b15e98a59acc133398df10cf353eed5f22aa8c00068462f86fa29616a16004b0030221178e55e42a7f4f44a2d5c6367e7e8e69807fb79b9ad652806d521f68f30a53b1c3d1e49ecc9949f53ea05ad9c27dc1352cdd140874d8a6851d2431c991be89da1b289cef3e20d47baabbbd5e8dedab18699593a576782dd7630113cff13e21f86669c833fc0e3a8a8e0ef243a5fefb2af5f1ee2e0a4c3afd7c5ab810c63275ceddc4c6db8eab65a978384ccbffa66852ee354341a3868a6e367566b61a985b3e3e73fe892b92e56205147aabb3d9b92583590abe581dcbf8470ab40437593ff01b15df5d1e0fa4194799667e2ac605c6168819ce0eceb886f3bbb591dd89f33eb26fd9f06fa591df3d96b067fc50f0a8b5802b4a838a680873a2952867e4bcfb6800fc1b0aa614d324b78eb1e6209ea31b33e70c7a5f81d7e3e3542e83440b29722d2caa14015f79a90d49b42e77fd88ba25b11052e738df3dea33184f38c9e26edbf92ec7ad683dba0118c9e133b0639986f9f98c80ab8cf84aae7dec259e8f1612874da507552a956d655f39ab8b01db801bd2ca939f39b47bc6fc57ff731dc5a230520486ecbded1cd5202f4e6e330060a8723ba56e98ee881fb37bed2c290e991cc6d975339253e6713af4d2bbfbb05f57a91c793478ee7bfe55a9a24a33cf15d6cce1b017896cd77e2d68bc8e0b1e7183b38c3ccd35c70e21703e6d195697c82a2f4e1d4668416fdda26fbf0c64f6af30e7de8b8ac439ac9152ba8343a077e391d65c99b4082997e08ffb1231afb48d45e53fc8844df6aa9c23c7bc6be6108d62c672a54110fa8ca3fab1a3a2456d9427aa0029d36e71408e5b7d439c043f5c78cb32fc7dd9f91ca447c1948879281dc00ed0e3046a58c691ae9bfb709dc63a192adacce2428e700775d4f4f2f32223755ac9e70e431620981f3d0db080e0f3d27855f28a27d30d68163d481fb460d2e39245338d06ef90f476dc4cf03a8e0e170a566b0d4da317fee189a399ac882677ec2a0a419f6ef69d2bda61813026cb0dbc6bb96e52175f6b14a7c9b3833f8d8a93933af44bb84a90a205adbb75d71bd556c45a9e1bbbd06bd811af1acc062e225bb79c0c1d97b540caa9ca378cde94887b3ffd638b08f337243e0c0711ecad5675276a3763e84d2521b8223fb2318ada06fa06d93559ad170009e58a3f84b18b9998cbb8c3c0b1961ce839e56735eee4f2456a4d876bbd820b123c381b33712290752bba6cee6c606f0b708e18461022468fbc17ff707d9bcad87c394de99cad619daa6ea569884b12f402c173775482b07fb7b376e600b85dc9f476a41ce0add5895af6ae62af9b8fc69611f20dc2183417420fde7b1cf468f96daa363dd3aa95f8fe193106815278780829c70c22d5215b56defb6a6bc4c0a86cd0040536e641a7b0e16d174af10a75be3567e6a57a4cf4015c1b5f105e1614084d641dc8ff7cf8699a7eb869007ee4536069b2f70f672d7c0ad7f4a79bbe80f583f37d50ab7982686a1ca2315c8c893efea6f2cb5bb3b4ca9c98a4d85dd054060db287542109ada3aab3436f28c2563738f561b9e97a690df9da2e5364e7feb180157ad70ad2bbc83ea297337a03a6c421fe9899b404746c920e91f4aa2c0c69938e033939b9421b98ba83f359e6b5b2a56f86b16b610b3e907bc0f011ab3dbe7bb42ba4c17e2bddb2c5df31bb4b7b50df66fe5de77092c73f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 公司 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实施 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Mysql</title>
      <link href="/2021/04/26/linux/linux-an-zhuang-mysql/"/>
      <url>/2021/04/26/linux/linux-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="39c3983e129518686172148da0d13b4a91eb104ae696e95c8e6d2b525a652ba9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 公司 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实施 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Oracle</title>
      <link href="/2021/04/25/linux/linux-an-zhuang-oracle/"/>
      <url>/2021/04/25/linux/linux-an-zhuang-oracle/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="67593fa2f4215b1206ee29f800e6d0b9741f803590226f5e060f5281a8e849a1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 公司 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实施 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络配置</title>
      <link href="/2021/04/24/linux/linux-wang-luo/"/>
      <url>/2021/04/24/linux/linux-wang-luo/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="15731473d60e9f6ff604438153f3183aa965c60bb2342703b47ca597745ecc7b">50401a1b4252edfef05a7c1120311a28d7c9779e54cbf0d6b9b880a49e65437ba8d5f90f39925386cf93402f7af438c2a38f1fb4a6e61578b14a4b37e3c97f72c0847d2f57da77442d818845678d38e227c706c8d346c0159772ce188c17c79c55d55fd07917fc285bb8107f4620fe263c4160f7bda77d121de67ce126af2c71e00541062af0b737457444d71e30b22ed54ee4086872c07f2fa78962a94857fc966deb22f446caf15c591d65f6c057435531d8c9ad78bd60c554a83f141263e9c3677d39bae0f70c9e81078e9138159d98a0a3ed25bae76c101a41d601a2b845766ab7b173788cf5411b3702bbdde860d761ce4a787c94dcfa16ba6fb87afac7d884cbd8516952161d913da6b52b83fc622fb75c390e113315190b7d960fb7ead648d4b151103fcfafc0aae06593bb7b36a508ecdf182f633d73b72c807117d2fe2580f69ef40c0692cc0f7704376ecab4c6e7125274787887f11cf7c32f61b433e79f2cecc01c0e2af9394fe0ebc94721de8ce04b7fb57c3ffcfd5d1d38beb9d213247aaad54e5f1e406561d2e7b5a1e6468cbb0a45f6161d32316b5fefc5a8c10c37509d070d2f0b82c2e90eb096e586729143176dab8fd4cf65dd5df0b9202082b4d6366c55b28dba46ddfd75714974fcbd590542d867ad1cc9a451a8d662ca7a9369893692cffa778f9769d58dd06bea416bb59e6adacb0a4e4f54b9b4b75f07f8d22a3b6321cdf82be5ef13078ad4c74b2ec7971519ab62a440254420944d552116f0abe1d991429fca03e0aa8a95e3e2ac84cd2a0a334455ff9df21d8a6bf28e381db55e23111b145e27423050f60c8c216aaba8fab509b8738c210f2dc1f8fb8ca15e47bfb572c785435adb0c9ead617f023849ed996d7753281bf6c4df0e65ec5cc09604994f2b8d67b53da6c763565b4c0b2f282ee6e9fdd0396badb579593bfff143e90f0b2db317699bb8a6629ba2b614c98bc9e23c2db121c546f76e5827bd80695d59193a6dc419b5979b1ad1240c7b6ee5a05586198916dbc77b36dfd73494ad3a8c9fb58037d4353a2bc298d53351225fb37226b2d22f2628ef5750063aef42d4d30ed8f3f529ff907ab92a2bf77c789a17729a6f07489906fcc00e9936b1cc9c1be2efd00b3c01ac2a1b8443706f47ef5ea531346f6e55b40a6a24bd0d93538a6845044af4802c70ea40dd60d790829c734891095df373efdce9b09ccffb4179418ccbf91a56c50d7bd889ac04ce0e06163876d21585a62b64fbb82d33df15efcf95ffc76923fc89c7582b340e2094d0f13e1b1ddd4a52f4115942920420ab5eef3e77d5c05a51b7eefb9dca3c1f0058dfd50e0f1d450a95abefd236b7977321a944056d5085d8c239dd3f630160aed319b119d0c0afebb2988a75bf67df1d961c7ba94c0a7a78ddde60a3ac3149aa4ca336d7a4a457bad4cbae6716f501f9ab288258c523b2d60b8b8a21d5823a79a5cd17e04a00cde5988475e060c68703eb6eab71040cdae59176dd9eeb59afefd0e9f72e40a7318a5948989779869c2a8b152b7f92273e748320c34b7fa24eb3d8c80a29c78f58e0e012df234dc4ce337f509e6f53e145fe310bf58208d071b2645d533a7f448a6ee5e122f491833a76e17991fa0aef616e4fb7dab23e3fa0fccb2b9c3bea5f6f036a78d306f02013f34fb5cb4be6e654b610a26da06be09adba3707d38cd35f9e151843b016675d80f0fcdc3b3f0f11bd9263dda8ec13659d76c634222dc8d85f429775eeb1d2fdb1bfadb83dad9c71a1cd0d3c4ab7dd38169c558dfff405e844ed33cd6e05eaa2ca952ca44a8528f7eef945fc496ed35b319b2e46e77e2a4ff36766963bf2e98ed626f5ea33482e79bb279183827c9f3223625397fcf9becbe3a757ee7567b76ac8baf46d41963717ef29f0824c6216a7f7adde24a4ea0a94bf01ad0089174117dc614722bdf3b1124775ca2d045eb96c2d689669d5a0136517dbecc7f358a94fd49b565f86b37e6cb9a3f76c791d9c1d5d12edebdb28596e9db3aa718f53bbbf3c441ec96b7558e0cc6e834be75c668bd76509f003659506279d661ebb2793f2ec3d65cb6e103a95b308d3695a56ce213758b50b3cfe870a24104272e9e2fb4cfe120fb90348f5aa04058808ccf3c78206e9c7ec260d786e4c3455e61b57029f31f7ff9d61e4f0e42f2d59a21bb4f2c5150dcf39651cde77d205eb4cd350a1b7a2bbb20de4d30ce817b131350856aa66965e4e279e0e154ed934dcf0eadc47db5c35a06339681fbf1b36a622c94bb73284a31d6cfb27dd256029def5e2286af48fd252a6ce1b185b7f423793fe24ec3d3b84ca5f502e854473ee671f9962ae4ee2be564439e967ad1dca2ea162484b4553dcc940c132e0631e8b9331e4d7e8806c459064d3a769c8b9f1e427fb15938482cdf54ef4eba0e5117510cf875b4ae4314858565e2f1afb75831fbc038356ae8fa77023f435ee10f6e1373e1fce88eeec7a4271bcf932359e3108e46f49ef3964d1ade6bcd896d6b3acd96d757c20b9d80a5306b422fbaeda3618ac17e7049ae4e980a3cf2d4380f7a66e59b20f68430985de49128dcda526ebbd00cdc83ea333ede24cc8be78721772320c665ad41ddeaabf503ed825784d7d5a16f9d1d9a2419022e448c732152ff2216f36c1dca235ea1a3c01f3a18c460fd17957a474ad2b7d8226b70a6419f10b915e132158060a799374c52e650772f154d79fc424836fbc7c83d2afafa67d4e7729e93c93a4b559a91acf2b3e57ff43de7de69406456c3cc28a0cbef12b14701b41a5983bc05899b7d5382139437e11177a62b6235822bf8066f1f1eeee8f287dc3aa929ba4eda0a3b3cb778045937c7ecebe0794e90299213d1ab632bee707c7d30562c00f245527d20ac78036d02082c5b0fd778b5d76fdac8a0274ce23f3cc0e753e2a593d32babc56c01858bd4490f4b6ec7418b40ece12d0ed3478a1e7ce40bc406e7a9f4f64bf5463183c2121ed926e39a05180c81461f32cc79c4196e5c08a89bed4d4bf39ac2e478f822736a73745e5da3b807f4cc09b0bc3995d5cb195434dcb32fec7d90f9883f2624f69e6b475bf5e8d258d7d37a9fb09368cc03c002834d7b8674d86779c672d29457e66fab43b760171c0893ed770308a8239cad332f6500cce478e666c8ddb9fcd1a31d85ec218ce021cf4c54cccc34dd4de6e890269172d693a2e461112fafbd5c897786acdca91604f8e25adc66e97553d0665a7aad012e9486899f0dc726092cd45a688a774b765e0c6bb195a88656a1d9da046e1a49503f7464d0c506bb8275c8795e7bfb47c4b3d381794632f99b3d16542a9bb0529f4dd70f93563047d77d7381d3cc878ca36c0acb8f26fda39bfc3d26d9122b0385d202e056e71b992a48a40fc737d72fccd7e06cb860c4091bf0efa8480a880f55158451fcccfe9d863ec288f1b163d7b921a601905d3ddf6295b47cb7aca50073026a4f8982b8724a01d1576388b25deece258832b98b170137882717a5300e20feb6bef01af8139b4bb97f2ea9369bc9b8d29170e5d20c0babdd85506240bc8b661394fb567d70a83d8af72f9f86b62c90b56c7691f09dcb577b7531ec46ea0f489ad652a0ca732851d97378d36ed33096fd5248549122d3e521eba8c0447d2c07055698eb668014b005312d066f0de877c7ef5f56325e6a74d34fe446c99a201ec761f13278da7c3800402fc3ce7e206222f9b5e9aeb8ee2f263f5e61abf6c30340b1a0f0f5ab87cabcd610d7e24630ab8318c2efeee2b1849c4c3d66269c3fefc9960aea0587d74b433cccf6194c8be673c4800351936b568fad62e633a897c7857bfb0ef099f2f60236f10015dfab3651557047e447390259dde0332e147c68bee93f04f063368397de15a0519e01edb62804641e149c43644235c19c2d17a70d1299faf61e7af02542cfaa12f42a7a8a4e7d94ba4f860fd39ea5afbc8401af447949914bbe76026a8aa4be7f28275672c6733f59743171395f9fb445baed39e006e14ee9f3d9eeab6851925440bc3e70bb586e4d68430635b7995f240c666552002fc132b8d8d3d504c0724fdb82473e6a40a3cd59fb7f974d7f1d5efbc466d41493bacafe700c4c3e97f3eab5f502df0f1e09df4f4b944e8f0d172a22ab8fc3b1e858dc57b6b948fea60f88d325a7e6398da1cc32bfb72dba0ae5febacabb204e5aa882bf41e6f43f8de706b0cb57ffe06eb8333355e9ab68c3238acac450c2395cd6fee2e3c2ae34f631d0e6d203226a3209ea41e3b35559ee9008236f87060e901d0061615c3f2786e735853cfdc70ccf366af40a10883c320346d571001cf942c3fa40b1440ef2190370b588329350a3b70113316f1695fe1b47f6c755e61392ac780b17937fd14ef66ed83930b9f0c30677b14b8ac3a62ffaab631d938f90991aa7c3fdb67cbc4f0e8c13a636443ac0ec1baa3fda15ec1df6b10e2a0ccb19225808c4d20e1b22bdc451c0d42279b71511b55bee220984de5403549726534fbf2e5c1f2411d489debf24008fd4d44198e445794a76db731ff3f918525366ae47b6c5337c1d82e6ba051b8e30c5b916577ff1d35767b3a9e3745cb6ce5464f856d0a9453c352f87df7bfd8d700db670661ef73243890ddd1ff2fd0e380f8d282806b52fa23edd55782c3bc052914b7b545498310c56e6ee24931832473ea297e17d48c99e931aa091f491b23752a2dafb5545a8b170e061d57e583e3db273fb1d356e9180800607b9d893aad640f815352cf034629b8181590c387cabe8c58f2a4be8347dd2505d35b104c1bf8c6ae942785ffe0216533c7c7769fda0c81df248dd2daba3b7b211c8c6209cfdb9090580fbc68709102e16921636525b829a00fa87d0bdaa38c9f65fad5d7d7b52d4bdc35f424d194ef8822a1ea61905994601bde93a7d682358f2298792e4be9048d5524c6c75ab30807a887319291142595dfd0293727a42868e3ee474ae6208e7097c16dc0ec5ed8b5ce926d0b998f59c146fc2270c5db7acfc03eb37eb41aca7c9a0ef4aacd160496f19978f2c807872708ea624517eee5ab1a6f1e6cf4a4b05235c6244c2fb04efaf0fcf31e91e304400a9f7991b53255d415785e6a2a9e9e385ac4d63ebec257dc1c66a6b63b3718a8ef66529d0b4f3b0a2eed4452ed2ac027ccb90a5f66fcbc21a494c5713b556d22abe2fc28b086cac9ca5e22410913100e949325ce34520dad848853ef5e82a026a31c65043f9f2bac9a460b03ea214d8801f34c61b27de494fdddc0e4649e1b091b1d2735a687ecbd3e8589d2b742ba7c32724cff6fb94b75e60baf26621134a119263a2bf01b5f1920a77c0389c3fe3cf4ffc73a353e7a7b692114279c8f68105ea3e1beb583dfc6217fadef1f882b3a6884ab0e3d4d1ca4761cd899aa56d0cdab0d9daf120b9ef8f12dc4ac9d2409ca85348dd369625cefe8eaaf326ad9b8f7b348b5a77c7d9f1938705e427cf799c3874af598161cdef6b4c2312615cd3cde56723df90fef509ec3c849442e96f0e1f7348656461230d4047dfa3a0aef0879e5e7e5a3d15f402f2f6d0974ee0b0a740d9e83fb8ca2274133d14fac744fa26eb6518eff89bd5be670417573c3723a65a136262cf9d4966b0e098c0a334c8c51f0e4eaebc066dd5ea1c66489c32157b64747e66c581e9532d651cb85fccb220904cdd7a1aafcc1fbc7823ff79a899ce33ddecd3a5a2116ca12d97d2d42acff459deabfd445702f6d1c4f3e4ebdf6c8492c26ae1ecddadb39a95d64b05066805f092a04f65e15dee3a4fee364b3928e0c50d8dc0261c99ae9d4e48bdb2d0e85b189b0b95fd602e705379f0f0df4fa1a4e1af09a3b0e1250cb3a148e7b6b65e2eba080b771e34cec7bb1972ae8430c145fb4b96fba3c45baf6d7366eca09ff398aab31371673e6d65ae30ae85e50b03559c36240a399ccb7814ad027ac2fb318122ffcd35b137fc63ebd20eccbefec2fb16d880fada977e67baa20ddab4da487313317d632f55d3d1f9d8f6824b1c4f37429f9182d85f328b584776dc4caff5f4a1202d4cca204bdf5139931cc4882abb90cef0d7fa71d2d65e1025ce33ba48d581b6465aeaa8e4205c21445fae6f41516461850a060c890a2fbc7185bce5ffa5a1c8a2474e16706e04c00833e5c6124a9ea16361ad59f22d1262000e677fb142c8d3013922db9042841b45e92bc8168a60dcadce61579658a6609719f8b3dd9803e29665bcdec4529723bbbcc47d14aa099f67fcc95d4d5d9b6ef950ee79bad4783e37a70972bb047c113d0995d723abfffb09b279df73413fb17b7d602c42f015ea65334cb81190ddab89d3a1b877547ad11c2b1b22fa7660e40c584029b27effea7af6ae1f594a4c6ee611574f732dd2630c25a04ba6d66f2af238c9f212df3b71ed2bb7c0b51f8ff993477771b9aba903120c6c172f41d456bd3974aa72e82f62c535c09c8d2ba4d4b554fdb0d103811f1903ab6c1cf0d325484c580dc3a55ef72aa3ba2bd4e9b606fd210812761e15db8e78dc27df5b986f8b45b6fe3081ae0ed21b23c1a0d4ddb285838561196289c5c47def6f3d82092e47c6b93aa6ffd448df38a483b09418cca89afae500a005009a0a3797cc0dee2a8dafa2c60d8769155f273404adde8eb65ef7558d3a611ea7d522e291bce41d1473a23cbd889abbd66426714bccb9172d6afeec04ff2d3a2e491ba5c65fcf390eec1f7f846a418a77d2ce7d0e932df68cfeda49d91fee9ded1dbf1eeddf30d52362083749d648f497356eccc58819197f04856032c96b0b52de594f7f5757419760fff9b5f28593b5015e27b081687bf93ef0f96a9b0d76a71fa4b7d629ac8164ef19d4d8854e6e78fed88f7160e58a7d39d95e60fed95359eaefaf22c7198a232bca6e3ac9e2d176acb7dc75a916fb785eb28b0b74ce8a3b798e82b6bfa36fb5f1a5cfb54a6ad00506aeabb8807d9df9b422c0a41558df6cb214891c1e337752cacb8f2196037000f6c2c0b99dce835450ffdf396f51aced0b6b9d5931a1292432f2aef4f172d4dc6bf9b235b4c0c5be97f0ef5d0d588c8bef1bf6c1300d26640ff616d0ec04f95e28693b3c6a625a79176eb84c7a9e1947a20664997296ce81638837bfd74df1a312bfd235764fdbb092892e750fcf0b14f4413a24265478133d6d04ced4bcf95e3e840631cae86df4187c2348d81205b6ce5c2c6027c3b1b4f12999a65e0146effcb996956f6e5811a717f6d46047566c1d1c202ea9c21903173cbd2e8c97963ea3c74fa11233915029f749109b1edb4601c93020a0fc5ca439208f1b87a6c144142491ff532562a4ec29b49b11fad080496aeca3f7430a433d751af8495f9bba089d631a9b31eead50d0c3ff44bb1d3eca42a3477d0c26c2f2b531aaef896b20367034961970c2cffee7855d3e608d8771716c00d9f73046943417e8e21f5d9c3e2c3642135e7a354da01e98558cff1515c432bb4136e3382eee41e1932cbe7ebb83f503d202cf6823503445c408ed474513ede9013b97e294ccd7911539c442d74121244946ac478079e29a63198047a81ba710ddbed01800e5ebbe04c8a897e176f2290594414e8df5160d0a0ed9fca0c18e48132bf7649ce9adf89ad3d3c52dcfdb3750979f59a389c327b0995a6a070c2b9b52fac366cb8692cd67c6c217d6ffd0be8d5c27436e2e14e15f01162e6de346a37a813d733b2077da27e9ec91f60c2836c965fb25c60f8b6d71f51cc8240100c2958e38a9e5129c9b1dbcd0b59b511112f7965656e48388e9c5a17a2a2b33e292fadc4eb613c77d33117605dfa39c4085fbf89b2ec519fac51f8456c715ca56eba227e05b6808db2b9ca24a3511c3144c1884838207ce8eea268bcfc3b0c82d53aa50a83f1526421fe1a3e711b97a5d14420000b1efe38f9d7fe2120de5cb325c14db123f127e461943daa369adb8985cc273df3f7d431f866fcf2d0d782daf365cc17b2ed06612b16ac322558e9313c2a7f33149407bf59c7d79b13c7946ab1457864c85392bce645fe65822951bead0cd37a771e4907bbae6b308e3bd845db4927cb57d056ab590f36aceb0bef9dc0a1a3cb7845e0a554d4754644a242c0855f700760857679a9a0a222e0f37fc2cd0d1d5d31b44573f025c78f0b1b13c9883bbaf125f5cfe7536bc02af7a6f458e6bdd2dccbe4afbf16f6bb5eaff944d200910f91cdda903edf826026d2c23e53031d4751fa73b00cb130fcbfdfcd2dd7a23f665f7adde2595a3c3e86a9362761ac81280a1c3171c133a7a0eb13fbf4b1a1fd146ca7352a972fe64c14578e080084453ab0ec503081403380d342597bb2e7c049067f1972d825293bb83208a0bcc17950f8352d450e6fb9d067f9909dc4a6c6d4dbca4674133ef43a83ea1bad19b3a34d05f074d75e72f69f549bc3154bb37f21875e121492b5325154f7e02d3837b4e17a1bee5b8e72f7d24dff92f7975d9fd6925a62aad17635fb06d7d98699cd62242b69a61f67f840a956cd6bce514b2437aafa6122d017ac31e48ff2f277e7a3a23da32392edb6377cd9a2725ba067bf7f714fb70d557f2c0a92da81dcd13ad14d2b75402cb94be35c984a6e36391d78206c803008e40e59496857fca021ccce298a725899f35f1ffeaf6049cd40c5463e92ed546d05fa9044e539b51971e5fe40c1650224ff7574de41a23f091dc1ea2692814d908434048f50bf42e67c20fb608b0dc65ea08c1288961b3e0e01a2bd54238e224e8f31cfacd50de5168b9c65355df57e0335f02644ffbd0ffb783ab0568a976e11947cf5f564f0a78c2e827e4cc4227346efc80eb74a03049fde16249da748a3d253df67eaeb09bd9d216dde9a146a01e1a77bcc322182b0568224ed2e89173fabfbcc027efb1d3daa92d3385c798700f95a6ef046957053efb4f434aec8fe6d773c719394cbee087fcb8317dd8a744148f09399522d32d43a66f380497439b804ed7738e836450f8ea9d3f1c426f7ee5be813a8fc367970db30eb087425c1a5f241b5eb2abbd6c171aef7552a5c712ee32d6c13e44da1c988f7ca70f6b72dc121c4a29b0f2581665f92d25500cf1aa759e542d4af1fc8334c7b64abe8f68ac966639bc95ffb95917f937db1c3aaba52f9f25c979debfeb35385bae4216e729052dd4670d071f286ab9b86f7f5ca81ae8969c07bb3c16020e58488cc531fe642f2d7cc2e1f28393ce39022e36708cd9e110218fd7a8ee51b8930da3214c8ece99509f065efbedf2e034f2809125c589d56accbf0fdb647def8fd3fb91b3f27fa48ac6d8c9b4cec953c07c1a324a6fd99d1cfa7dd89b9dc4dae3c42490a6be36dd67439e844a39deedbb8252afdbc16eaf612d1132ddd084625f17f3b92e04c2d170012f49ef75238917f1109d79b2bc38b46c6dc7878409e9a971854b764a5858cfeff09cdddfb205173152e5802b07a4a491308b0ce41098c3807d98d8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 公司 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实施 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows虚拟机安装</title>
      <link href="/2021/04/22/linux/windows-xu-ni-ji-an-zhuang/"/>
      <url>/2021/04/22/linux/windows-xu-ni-ji-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="windows虚拟机安装"><a href="#windows虚拟机安装" class="headerlink" title="windows虚拟机安装"></a>windows虚拟机安装</h1><blockquote><p>windows虚拟机</p><p>windows2012R2 x64</p></blockquote><p><a href="https://blog.csdn.net/qq_28189423/article/details/89485402">https://blog.csdn.net/qq_28189423/article/details/89485402</a></p><h2 id="虚拟机扩容"><a href="#虚拟机扩容" class="headerlink" title="虚拟机扩容"></a>虚拟机扩容</h2><blockquote><p>在windows虚拟机中安装很多软件之后，之前安装的空间已经不够使用，再重新创建一个虚拟机显然很不符合实际，因此我们可以将现有虚拟机进行扩容</p></blockquote><ol><li><p>右键VMware的windows虚拟机-设置</p></li><li><p>选择硬盘，扩展<img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422095051.png"></p></li><li><p>这时会需要两个问题：</p><ol><li><p>快照问题，当点击扩展时会出现快照不能进行扩展</p><ol><li>需要删除所有快照才能使用扩展功能</li><li>删除快照：右键虚拟机-设置-快照-快照管理器-删除</li><li>注意：需要等进度条完成才算删除完毕</li><li>如果删除不完全，在之后第二个问题中会出现问题，后面会说</li></ol></li><li><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422095332.png"></p><blockquote><p>解决方案：</p><p>原因：由于创建虚拟机时将虚拟磁盘拆分成了多个文件，如下图所示。我们需要将文件合并成一个大文件，再对大文件进行扩容操作</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422095436.png" alt="安装时的选择"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422095522.png" alt="磁盘"></p><p>解决：</p><ol><li><p>首先找到你的虚拟机位置，记住磁盘位置，如<code>G:\system\CentOS 7 64 位\CentOS 7 64 位-000001.vmdk</code></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422095825.png"></p></li><li><p>之后新建一个文件夹，可以在虚拟机镜像文件夹中新建（名字随意），并记录新文件夹的位置，如：<code>G:\system\CentOS 7 64 位\new\</code></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422095952.png"></p></li><li><p>找到Vmware虚拟机安装目录，就是虚拟机平台的目录，如：<code>D:\Linux\VMware</code></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422100227.png"></p><p>在目录上输入cmd，打开终端</p></li><li><p>输入命令</p><pre><code>vmware-vdiskmanager.exe -r "你的原虚拟机镜像位置，就是第一个记录的路径" -t 0 "合并后的磁盘文件地址，就是第二次记录的路径+第一次记录路径的文件名"vmware-vdiskmanager.exe -r "G:\system\CentOS 7 64 位\CentOS 7 64 位-000001.vmdk" -t 0 "G:\system\CentOS 7 64 位\new\CentOS 7 64 位-000001.vmdk"     //示例</code></pre></li><li><p>等待片刻，会在新文件夹中整合出一个新的.vmdk文件</p><pre><code>//这是提示的消息vmware-vdiskmanager.exe&nbsp;-r&nbsp;"D:\Program&nbsp;Files&nbsp;(x86)\MAC&nbsp;OS\OS&nbsp;X&nbsp;10.13.vmdk"&nbsp;-t&nbsp;0&nbsp;"D:\Program&nbsp;Files&nbsp;(x86)\MAC&nbsp;OS2\OS&nbsp;X&nbsp;10.13.vmdk"VixDiskLib:&nbsp;Invalid&nbsp;configuration&nbsp;file&nbsp;parameter.&nbsp;Failed&nbsp;to&nbsp;read&nbsp;configuration&nbsp;file.Creating&nbsp;disk&nbsp;'D:\Program&nbsp;Files&nbsp;(x86)\MAC&nbsp;OS2\OS&nbsp;X&nbsp;10.13.vmdk'&nbsp;&nbsp;Convert:&nbsp;100%&nbsp;done.Virtual&nbsp;disk&nbsp;conversion&nbsp;successful.</code></pre><p>这里不一定是100%，有时候90%也是成功的</p><p>注意：一定确保已经创建了新文件夹，并且磁盘空间充足，否则会失败。这里合并之后的文件大小和你原来的虚拟机镜像大小一样，所以要提前保证空间充足</p></li><li><p>完成后，将原虚拟镜像中的配置文件.vmx复制到新文件夹中</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422100906.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422100930.png"></p></li><li><p>在vm虚拟机中，左上角文件-打开，选择新文件夹中的vmx文件，打开合并后的虚拟机，启动</p></li><li><p>发现虚拟机正常运行，关闭虚拟机</p></li><li><p>右键虚拟机-设置-磁盘-扩展（前提保证磁盘空间充足，否则会失败）</p></li><li><p>完成</p><ol><li><p><strong>注意！</strong>：vm扩展的大概原理会先将大文件复制，之后再扩展，也就是说磁盘剩余空间必须要超过当前空间，如：想扩展10个G，系统会先复制28.9G再扩展，也就是总体系统可用空间要超过38.9G。否则会提示文件系统空间不足，无法执行</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422101350.png"></p></li><li><p><strong>注意！</strong>：如果点击扩展，还是提示在部分链……请选择父虚拟磁盘。证明你的快照没有完全删除。</p><ol><li>解决：根据快照删除操作，新建一个快照，再将快照删除掉，等进度条读完，就可以解决问题。</li></ol></li></ol></li></ol></blockquote><p>扩容完之后，虚拟机的磁盘空间并不会增加，需要我们对扩容的空间进行分区操作。</p><p>windows2012R2分区操作如下：</p><ol><li><p>右键我的电脑，管理，工具，计算机管理，磁盘管理</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422102258.png"></p></li><li><p>发现多出来了未分配的分区，我们可以进行分配。</p><ol><li>如果想给先有磁盘，如C盘扩容，右键C盘，扩展卷，按照向导操作</li><li>如果想新建磁盘，如新增D盘，右键未分配的卷，新建卷，按照向导操作</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210422102425.png"></p></li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装</title>
      <link href="/2021/04/16/linux/linux-xu-ni-ji-an-zhuang/"/>
      <url>/2021/04/16/linux/linux-xu-ni-ji-an-zhuang/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="53b582db72ca141575ff9bf7a154abac7b5b9ad906e956920e6a93e7e44d4465">50401a1b4252edfef05a7c1120311a28d7c9779e54cbf0d6b9b880a49e65437b34100e8f275b74943600fad424291f6ec2db3d37f2d42db74ad7378d9ff1bdd6c23d5bfb841b1e9c19252dae5a14e6561063afa53a34eb1d9fb989a63cdc704930ffc52d2be5d1c018451ee1443d26c5f4faa2b54069130d419e37bd6a9e02e5f0779d523686c47e7809d7fbb52a3128a56a0f989df59fe650c65737c55e8a6960a44033dddc36e5e8cf3ac064173070793489e6e5b75d688d351f5aa2db5a3d6a33fef54cc74190f24b775b5523eba2448998c87fbe5b9078f4ea68bb6c06b56841ac409813607e862ed23ae246f462ce25d779358e6ef0ce3a355c225c82021c1f9ec2ff0cd45c10961783b34ede3071d9a2595061967fedfdf9c0a679c238b6a2d091ed254acd40f2e083e6d7daa4c2c5a0b1c87478fbedb209a973bdf251f23e8575a13b1df9b43cdb89f1c95b03b8c1d370a79e22f6721664030fa8c449953212cf81fd7e2e42e5834b361356a3c51c8703e7cc935d61de85a5c8a4d613637da3fcad89e26b6dd34f08b70f20322d505f39c43960da6a4520cb36fabc41b1a46ba8b6b58327334c0141d606887fac2ecea96dcd7225417b7e1e74b8d516af54a96d222c654cd48c78ba56884bae1ba12ed44cd2cd615d1e170962a1228350f3ea5a7a73d1edc8dc8229e72541eaba4e17284e2268c358828217222962673cc90bfa6e3e1fdd7900d37a9ec45c138e38072ee0fa29bcfa71d63c685e1f849fe058d25ce46dedb85b7e8a7b97bb70dd54219c107c057f773ef6ce6f9e5307e2d6f1b73339ee398abba288324ba6e6e883364c951d08793a808562a4741ac39ff44d3826701b6695d5feaf18d9e9ed0e97ce8699921e7e0af8734dc6414f778b13a8aff1f868f087538f36d71f0c553d8d1fce561544267216dbc5243ff39a3878c5b2322ade8055c23a10ce7d548a24164f1a3f5b4e3875b45e58af3b06f7dff9327fa7988cc981eada06af4eaa693ae7b04cb6f62edb30faff3d1ba1aa4ac395a36bd52f5119405269462d8973b1b4e073ca58275238d497521ec30289c0690496a1eea6407832929ff8b0424813181c039274faf1bb5e44cebdc2548a7d1b183cf101eeb016b9cd28f35838e5561d0f913b5fbdf9d4331837d92cfb75f237d427f67f118ddf61865dfd9030fd0c397fad03cc04b0dd307c16bdb8332519cf9902eb76fa9d0aca7764adcf2fd91b1db0dd228318c8e1032e1c79c0e26e42ec3a6e2374165aac29360d6d7b9c51043574b355f00aa9dbaf0f2b2d563cbcc36395e4eb087acd193c59c3afb4748765af34de27a0582ee6a5e94600dcd628c41fa076c4542bb740cb00bab6b46b133a1098dc9fd5608eaf2851b6bf864c42ea9dce6af95bfe1761b7dd1a4cfc690180f1d9d364442b1ba0220091ca665c36ed777839d99ac66bfe55708dfc79c68561f27104425d6322ac943439174d271f85132514bc5bdbc3e542dbecb257047ce814da3f9d87d79e584983b642659d473e56a9839db1af93433e09778bca8f1eb4989e48e0dd19d750ab594b86fae66e4c2aac941bbdbf8769d9c3ec7cfb7f81de4ac6d88f0137dd32ff30b67b914c86bd9ca19f3108f7d169e0b374953fbe59c38a72dab5c38305876505c63d53a046c96b637b1e5c2c6bd84527e74bf329d2c4b6602f77d56f2786dcc6d628c9f1045dcd2ae581074632c51ca984b971d89abcc496c972dc9aabbbb8e9c0f928689bc195d6d1bdeb6dcca2ccfb2624389c438e4e6d4723cece5730c74b44acb5d8c8feaaeb4b901a73431cc4039b485d9032c6cb0b7a919505de1bbaa1b69c72b1d4481050b5d17c0cf3cad75429cb7a5e3ba2e4d84fb874e020b1cc7a4ce44702bc829edc8b6a84e3adb35c455bdbebf31895ad2e68f3a1a7c2562d06fe9f0f41f42bfe407c1d9730bbc16ed9f709a5df26cb54bc872e64be78a098b82d5ff83072880ed7872b489175dd48882dd0ad13a8764cc92dd1fa0206b30a7767b92cd33fe953eb8c8fbe6eb4b31fe6edd62547accc236785026bfedb5697f909ed537b684f302da557fb153862e34bc55a99d4c73c38e92b3501f628dec64c84b5848001e72f89a2ac7cbcf1f631a3f41884d758062cd13ae3c0346ee9f5db259bde15cdd676540af2e27b08c45e72069cf3426038bc7b4f205d949be067ab04f58aa6f215be2294fa9cdcfd2fcd5da7179c2d27cb64dc0d474f47e61ae4d16e1f163ed01b87268d2b6733e2a5e125af0de2f6c1eeae66d1883f102e5a6052794d2f9f669f23a27098228e9d224c6ba030f5846bdcf1d71586b62acd04e0737d4c4c9aeba19944d8ab2900548b2920da08fe85864bea732c7214f389e43d7490e8cb66a4f810abdca2807c5bcca76a0979d0a4fe1be7453eadf89439f4e758b4d9de75ba39b39548cafc72a537cf9a1c4469be16745dad88a630ff51df7f225833cc3225e85fbacd72f101e1a9e6fd594bb4993f0636d5f9ec0c7ee52ba93c2d0ced8e3166924c8e10f35062a068cffa0c6100be96d93b410d05aef1631160e86f080abea3d9f61609f9cff57fecdcfa2301d6b7096732e1d5db04a590012ffbf5ee3ad3356ac2832f22ade141ed6d22094f06608df6ecaa879aa1299b2568c36528c462300a3d7d1696077d14cbb926704f9d29a4f76cc14b979dd354e1359a0ceb0d9e68</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 公司 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实施 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle</title>
      <link href="/2021/04/16/mysql/oracle/"/>
      <url>/2021/04/16/mysql/oracle/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><h2 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h2><ol><li><p>数据库</p><p>oracle数据的物理存储，包括数据文件、参数文件、日志等</p></li><li><p>实例</p><p>一个oracle实例有一系列的后台进程，一个数据库可以有n个实例。就好比说可以跑多个QQ一样</p></li><li><p>表空间</p><p>是数据文件（ora/dbf）的逻辑映射，也就是多个数据文件组成一个表空间，数据文件是看得见摸得着的文件，表空间是一个逻辑概念。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建表空间</span><span class="token keyword">create</span> <span class="token keyword">tablespace</span> 表空间名称 datafile <span class="token string">'c:\app\gen\oradata\myora\xxx.dbf'</span> size 表空间初始大小100mAutoextend <span class="token keyword">on</span><span class="token punctuation">;</span> （自增长）<span class="token comment" spellcheck="true">--查看已经创建好的表空间(创建完用户后才能看到刚才创建好的表空间)</span><span class="token keyword">select</span> default_tablespace<span class="token punctuation">,</span>temporary_tablespace<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>username <span class="token keyword">from</span> dba_users <span class="token number">d</span></code></pre></li><li><p>用户</p><p>用户使操作表的基本单位，相当于mysql中的数据库database。不同实例可以创建多个用户。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建用户</span><span class="token keyword">create</span> <span class="token keyword">user</span> 用户名identified <span class="token keyword">by</span> 密码<span class="token keyword">default</span> <span class="token keyword">tablespace</span> 表空间名称<span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> <span class="token keyword">temp</span><span class="token punctuation">;</span></code></pre></li><li><p>权限</p><p>有了用户，要想使用用户账号管理自己的表空间，还需要给它权限</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--给用户授予登录/创建表/管理员的权限</span><span class="token keyword">grant</span> <span class="token keyword">connect</span><span class="token operator">/</span>resource<span class="token operator">/</span><span class="token number">dba</span> <span class="token keyword">to</span> 用户名<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--给用户授予其他用户的表权限</span><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token operator">/</span><span class="token keyword">delete</span><span class="token operator">/</span><span class="token keyword">update</span><span class="token operator">/</span><span class="token keyword">insert</span> <span class="token keyword">on</span> 其他用户名<span class="token punctuation">.</span>表名 <span class="token keyword">to</span> 用户名<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--取消用户权限</span><span class="token keyword">revoke</span> 权限 <span class="token keyword">from</span> 用户名<span class="token punctuation">;</span></code></pre></li><li><p>数据文件</p><p>数据库的物理存储单位。数据库的数据是存储在表空间中的，真正是在某一个或多个数据文件中。</p></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20210516173105991.png" alt="image-20210516173105991"></p><h2 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h2><blockquote><p>此处以oracle 11g为例</p></blockquote><ol><li>取消安全更新</li><li>创建和配置数据库</li><li>服务器类</li><li>单实例数据库安装</li><li>高级安装</li><li>简体中文、英语</li><li>企业版</li><li>安装目录</li><li>一般用途/事务处理</li><li>数据库名（一般根据实际用途取名，如ecard）</li><li>内存（根据现场配，默认40%），字符集（默认gbk）</li><li>管理选项（下一步）</li><li>文件系统（根据现场指定数据库存放位置）</li><li>不启动自动备份</li><li>对所用账户使用相同的口令（大小写数字都要有，最少八位）</li><li>保存响应文件（保存设置）</li><li>安装ing</li><li>确定 完成</li></ol><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>在oracle服务端登录oracle的方法<a href="https://blog.csdn.net/heshushun/article/details/79773886">https://blog.csdn.net/heshushun/article/details/79773886</a></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol><li>先登录服务器后，切换到oracle用户状态下： su - oracle</li><li>检查oracle监听器运行状态： lsnrctl status命令查看。<ol><li>若没启动，执行启动监听，通过命令： lsnrctl start （lsnrctl stop 关闭监听）</li></ol></li><li>管理员 sysdba 权限登陆oracle： sqlplus / as sysdba</li><li>启动服务（实例）： startup</li></ol><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><pre><code>sql&gt; shutdown immediate; --如果长时间没反应，因为有大事务要回滚，导致数据库一直在等待回滚执行完成，ctrl+c取消sql&gt; alter system checkpoint; --设置检查点。一般在shutdown前,为了防止类似情况发生而丢失数据sql&gt; shutdown abort; --强制关闭数据库</code></pre><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><pre><code>SQL&gt; shutdown immediateSQL&gt; startup</code></pre><h3 id="检验服务是否开启"><a href="#检验服务是否开启" class="headerlink" title="检验服务是否开启"></a>检验服务是否开启</h3><ol><li><p>在oracle客户端登录oracle的方法</p><ol><li><p>原始的登录方法</p><pre><code>sqlplus scott/123@//192.168.94.133/orcl     //192.168.94.133是服务端的IP地址</code></pre></li><li><p>修改配置文件后的登录方法</p><pre><code>sqlplus scott/123@orcl_133</code></pre><p>可以理解为“orcl_133”是“//192.168.94.133/orcl”的别名，这个别名是在客户端软件(sqlplus)的安装目录下配置文件设置的。如E:\app\Administrator\product\11.2.0\client_1\network\admin\tnsnames.ora</p><p>这里以服务端的客户端软件为例，该配置文件为/opt/oracle/product/11.2.0/dbhome_1/network/admin/tnsnames.ora，默认文件内容为：</p><pre><code># tnsnames.ora Network Configuration File: /opt/oracle/product/11.2.0/dbhome_1/network/admin/tnsnames.ora# Generated by Oracle configuration tools.LISTENER_ORCL =  (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))ORCL =  (DESCRIPTION =    (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))    (CONNECT_DATA =      (SERVER = DEDICATED)      (SERVICE_NAME = orcl)    )  )</code></pre></li></ol></li></ol><p>可见在这里的客户端软件，ORCL是被指定为协议为TCP、IP地址为localhost，端口为1521的实例了，所以我们可以用sqlplus scott/123直接登录oracle。</p><p><strong>客户端登录服务端</strong></p><p>所以在只装oracle客户端的机器上，要使用sqlplus scott/123@orcl_133登录远程oracle的服务端，需要在该机器的tnsnames.ora文件增加：</p><pre><code>ortcl_133 =  (DESCRIPTION =    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.94.133)(PORT = 1521))    (CONNECT_DATA =      (SERVICE_NAME = orcl)    )  )</code></pre><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><ol><li>对缺省密码的有效期进行修改<ol><li>登录数据库<ol><li><code>sqlplus /nolog</code></li><li><code>conn 账号/密码 as sysdba</code>，以管理员权限登录数据库</li></ol></li><li>输入<code>alter profile default limit password_life_time unlimited;</code></li></ol></li><li>对空表不备份进行修改（调整为全量备份）<ol><li>输入<code>alter system set deferred_segment_creation=false;</code></li></ol></li></ol><h2 id="备份与导入"><a href="#备份与导入" class="headerlink" title="备份与导入"></a>备份与导入</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p><a href="https://blog.csdn.net/xuheng8600/article/details/84324707">https://blog.csdn.net/xuheng8600/article/details/84324707</a></p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>创建表空间和用户，以IDC_U_STUWORK为例</p><ol><li><p>oracle命令行登录</p><p><code>sqlplus 用户名/密码</code></p></li><li><p>创建表空间IDC_U_STUWORK，指定存储文件及路径/u01/app/oracle/oradata/orcl/IDC_U_STUWORK.dbf，表空间大小360M</p><p><code>create tablespace IDC_U_STUWORK datafile '/u01/app/oracle/oradata/orcl/IDC_U_STUWORK.dbf' size 360M;</code></p><blockquote><p>扩展：</p><ol><li>删除表空间：<ol><li><code>drop tablespace 表空间名</code></li><li>删除本地文件<code>/u01/app/oracle/oradata/orcl/IDC_U_STUWORK.dbf</code>即可</li></ol></li></ol></blockquote></li><li><p>创建用户并指定默认表空间</p><p><code>create user IDC_U_STUWORK identified by Jiaminjm1 default tablespace IDC_U_STUWORK;</code></p></li><li><p>赋予普通用户权限给用户</p><p><code>grant connect,resource to IDC_U_STUWORK;</code></p><blockquote><p>DBA: 拥有全部特权，是系统最高权限，只有DBA才可以创建数据库结构。<br>RESOURCE:拥有Resource权限的用户只可以创建实体，不可以创建数据库结构。<br>CONNECT:拥有Connect权限的用户只可以登录Oracle，不可以创建实体，不可以创建数据库结构。<br>对于普通用户：授予connect, resource权限。<br>对于DBA管理用户：授予connect，resource, dba权限。</p></blockquote></li><li><p>切换用户</p><p><code>sqlplus IDC_U_STUWORK/Jiaminjm1</code></p></li></ol><p>导入dmp数据</p><ol start="5"><li><p>导入</p><pre><code># 三种方式方式一：1.将oracle_6.0.4.dmp文件上传到/u01/app/oracle/admin/orcl/dpdump/中2.impdp IDC_U_STUWORK/Jiaminjm1@orcl file=oracle_6.0.4.dmp full=y ignore=y remap_schema=bladex_release:IDC_U_STUWORK transform=segment_attributes:n方式二：1.将oracle_6.0.4.dmp文件上传到/opt/dmp中2.修改文件属组： chown -R oracle:oinstall /opt/dmp3.创建文件夹dir：SQL&gt; create directory dir as '/opt/dmp';4.授权用户访问授权：SQL&gt; grant read,write on directory dir to IDC_U_STUWORK;5.impdp idc_u_stuwork/Jiaminjm1@orcl directory=dir dumpfile=oracle_6.0.4.dmp  remap_schema=bladex_release:IDC_U_STUWORK transform=segment_attributes:n</code></pre><blockquote><p>问题：ORA-39088: file name cannot contain a path specification</p><p>解决：方式一的错误，log文件名不能包含路径，直接修改成为文件名即可</p></blockquote><blockquote><p>问题：ORA-39145: directory object parameter must be specified and non-null</p><p>解决：方式一的错误，权限问题，给予用户最高权限<code>grant dba to 用户名</code></p></blockquote><blockquote><p>问题：导入时，出现大量ORA-39112: dependent object type comment skipped</p><p>解决：方式一的错误，没有指定用户转移，语句中增加参数<code>remap_schema=bladex_release:IDC_U_STUWORK transform=segment_attributes:n</code></p><blockquote><p>扩展：</p><p>remap_schema=bladex_release:IDC_U_STUWORK    原来的schema:现在的schema<br>transform=segment_attributes:n 去掉表空间和存储子句</p></blockquote></blockquote></li></ol><h2 id="表空间、用户、权限"><a href="#表空间、用户、权限" class="headerlink" title="表空间、用户、权限"></a>表空间、用户、权限</h2><p><a href="https://blog.csdn.net/wang_chaodong/article/details/116243090">https://blog.csdn.net/wang_chaodong/article/details/116243090</a></p><pre><code>使用sys账号进行操作# 查看哪些用户拥有dba权限select * from dba_role_privs where granted_role='DBA';# 去掉权限revoke dba from 用户名;# 修改密码alter user 用户（sys） identified by 密码;# 授权grant connect, resource to 用户名;</code></pre><h2 id="创建用户视图"><a href="#创建用户视图" class="headerlink" title="创建用户视图"></a>创建用户视图</h2><blockquote><p>向第三方提供视图，需要建个新用户（用户名2），并且只授权这一个视图的查询权限</p></blockquote><ol><li><p>创建用户</p><pre class=" language-mysql"><code class="language-mysql">create user 用户名2 identified by 密码 default tablespace tbs1 temporary tablespace tbs1_temp profile DEFAULT;</code></pre></li><li><p>授权（使用sys/system用户）</p><pre><code>grant connect,resource to 用户名2;--这两个是普通用户必须要的两个权限grant CREATE SYNONYM to 用户名2;--这个为了之后查询时方便，创建同义词权限grant select on 用户名1.视图名 to 用户名2;--授权一张表/视图的查询权限</code></pre></li><li><p>创建同义词（使用用户名2）</p><pre><code>create synonym 视图名 for 用户名1.视图名;</code></pre></li><li><p>查询即可</p></li></ol><h2 id="连接数查询"><a href="#连接数查询" class="headerlink" title="连接数查询"></a>连接数查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查看当前连接数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> v$<span class="token keyword">session</span><span class="token comment" spellcheck="true">--查看最大连接数</span><span class="token keyword">select</span> <span class="token keyword">value</span> <span class="token keyword">from</span> v$parameter <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'processes'</span> </code></pre><blockquote><p>查看连接数是否占满，对比上面两个查出来的数即可</p></blockquote><ol><li><p>plsql，sqlplus连接oracle非常慢，偶尔能连接上</p><p>原因是监听日志过大,4G封顶，一般windows装的oracle会出现此情况</p><p>解决：\app\Administrator\diag\tnslsnr\LS–20171012URU\listener\trace\listener.log，找到该路径，备份到其他地方后删除掉（需要先关闭监听服务TNSListner）。</p></li><li><p>Oracle密码过期, 报：ORA-01017: 用户名/口令无效; 登录被拒绝…</p><ol><li><p>通过sys进入管理员</p></li><li><p>查询密码有效期时间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_profiles <span class="token keyword">where</span> profile<span class="token operator">=</span><span class="token string">'DEFAULT'</span> <span class="token operator">and</span> resource_name<span class="token operator">=</span><span class="token string">'PASSWORD_LIFE_TIME'</span><span class="token punctuation">;</span>默认是<span class="token number">180</span>天，改成无限制<span class="token keyword">alter</span> profile <span class="token keyword">default</span> <span class="token keyword">limit</span> password_life_time unlimited<span class="token punctuation">;</span>再查询一下，注意事务</code></pre></li><li><p>修改新密码，不修改的话密码仍然是失效的</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> 数据库用户名 identified <span class="token keyword">by</span> 数据库新密码<span class="token punctuation">;</span></code></pre></li></ol></li><li><p>Oracle把一个表的数据复制到另一个表中</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>、新增一个表，通过另一个表的结构和数据：  <span class="token keyword">create</span> <span class="token keyword">table</span> tab2 <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tab1<span class="token punctuation">;</span><span class="token number">2</span>、如果表存在：  <span class="token keyword">insert</span> <span class="token keyword">into</span> tab2 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tab1<span class="token punctuation">;</span><span class="token number">3</span>、同一个表中，将A字段的值赋给B字段：  <span class="token keyword">update</span> table_name <span class="token keyword">set</span> B <span class="token operator">=</span> A<span class="token punctuation">;</span><span class="token number">4</span>、将一个表的字段数据插入到另一个表的字段数据中  <span class="token keyword">insert</span> <span class="token keyword">into</span> tab2      <span class="token punctuation">(</span>t_code<span class="token punctuation">,</span> t_name<span class="token punctuation">)</span>       <span class="token keyword">select</span> pk_code<span class="token punctuation">,</span> pk_name <span class="token keyword">from</span> tab1<span class="token punctuation">;</span>  <span class="token operator">*</span> 如果报提醒：ORA<span class="token number">-00928</span>: 缺失 <span class="token keyword">select</span> 关键字错误。  原因是：这里tab1<span class="token punctuation">(</span>Field1<span class="token punctuation">,</span>Field2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>不能加单引号<span class="token number">5</span><span class="token punctuation">.</span> 多个表的多个字段，插入同一个表的多个字段。  <span class="token keyword">insert</span> <span class="token keyword">into</span> tab1        <span class="token punctuation">(</span>tab_id<span class="token punctuation">,</span> tab2_name<span class="token punctuation">,</span> tab_code<span class="token punctuation">)</span>         <span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>pk_id<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>pk_name<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>pk_code          <span class="token keyword">from</span> tab1 <span class="token number">a</span><span class="token punctuation">,</span> tab2 <span class="token number">b</span>          <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>pk_id <span class="token operator">=</span> <span class="token string">'7777'</span>          <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>pk_code <span class="token operator">=</span> <span class="token string">'12'</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>表空间占满</strong></p><ol><li><p>进入sys用户</p></li><li><p>查看表空间占用率</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--因为表空间会涉及多个物理文件存储，此sql用于查看整个表空间的使用率（汇总版）</span><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span>tablespace_name <span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>bytes <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> 大小M<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>bytes <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> 已使用M<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>bytes <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> 空余M<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>bytes <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">a</span><span class="token punctuation">.</span>bytes 使用率<span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>sm$ts_avail <span class="token number">a</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>sm$ts_used <span class="token number">b</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>sm$ts_free <span class="token number">c</span> <span class="token keyword">WHERE</span> <span class="token number">a</span><span class="token punctuation">.</span>tablespace_name <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>tablespace_name <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>tablespace_name <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>tablespace_name<span class="token punctuation">;</span> </code></pre></li><li><p>查看表空间物理文件占用率</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--此sql拆解查看表空间中具体哪个物理文件占用高</span><span class="token keyword">SELECT</span> D<span class="token punctuation">.</span>TABLESPACE_NAME 表空间<span class="token punctuation">,</span>       D<span class="token punctuation">.</span>FILE_NAME 物理文件名<span class="token punctuation">,</span>       D<span class="token punctuation">.</span>AUTOEXTENSIBLE 是否开启自动扩展<span class="token punctuation">,</span>       <span class="token function">ROUND</span><span class="token punctuation">(</span>D<span class="token punctuation">.</span>BYTES <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 已使用M<span class="token punctuation">,</span>       <span class="token function">ROUND</span><span class="token punctuation">(</span>D<span class="token punctuation">.</span>MAXBYTES <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 总容量M<span class="token punctuation">,</span>       <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token punctuation">(</span>D<span class="token punctuation">.</span>BYTES <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> D<span class="token punctuation">.</span>MAXBYTES<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 文件使用率  <span class="token keyword">FROM</span> DBA_DATA_FILES D<span class="token comment" spellcheck="true">--WHERE D.TABLESPACE_NAME = 'SYSTEM';</span></code></pre></li><li><p>找到对应占用高的物理文件扩容</p><ol><li><p>方法一（将原物理文件扩展）：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--物理文件不能超过32G</span><span class="token keyword">alter</span> <span class="token keyword">database</span> datafile <span class="token string">'表空间位置'</span> resize 新的尺寸例如：<span class="token keyword">alter</span> <span class="token keyword">database</span> datafile <span class="token string">'/ora_data/icsdb/system01.dbf'</span> resize 500M<span class="token punctuation">;</span></code></pre></li><li><p>方法二（增加物理文件个数）：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">tablespace</span> 表空间名称 <span class="token keyword">add</span> datafile <span class="token string">'新的数据文件地址'</span> size 数据文件大小例如：<span class="token keyword">alter</span>  <span class="token keyword">tablespace</span> system <span class="token keyword">add</span> datafile <span class="token string">'/ora_data/icsdb/system02.dbf'</span> size 10G<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--增加后需要方法三，开启自动扩展</span></code></pre></li><li><p>方法三（设置表空间自动扩展）：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">database</span> datafile <span class="token string">'数据文件位置'</span> autoextend <span class="token keyword">on</span> <span class="token keyword">next</span> 自动扩展大小 maxsize 最大扩展大小例如：<span class="token keyword">alter</span> <span class="token keyword">database</span> datafile <span class="token string">'/ora_data/icsdb/system02.dbf'</span> autoextend <span class="token keyword">on</span> <span class="token keyword">next</span> 500m maxsize 31G<span class="token punctuation">;</span></code></pre><blockquote><p>扩展：</p><p>创建表空间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">tablespace</span> 表空间名称 datafile <span class="token string">'c:\app\gen\oradata\myora\xxx.dbf'</span> size 表空间初始大小100mautoextend <span class="token keyword">on</span> <span class="token keyword">next</span> 1024m maxsize 20480m<span class="token punctuation">;</span></code></pre></blockquote></li></ol></li><li><p>删除表很大的日志文件，缩小表空间</p><ol><li><p>查询表空间下的表占用大小</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查表空间内的表占用大小，用去缩小占用，大多数用来清除日志文件</span><span class="token keyword">select</span> t<span class="token punctuation">.</span>owner<span class="token punctuation">,</span>t<span class="token punctuation">.</span>segment_name<span class="token punctuation">,</span>t<span class="token punctuation">.</span>tablespace_name<span class="token punctuation">,</span>bytes<span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token keyword">as</span> sizes<span class="token punctuation">,</span>q<span class="token punctuation">.</span>num_rows<span class="token punctuation">,</span>t<span class="token punctuation">.</span>segment_type<span class="token keyword">from</span> dba_segments t<span class="token keyword">left</span> <span class="token keyword">join</span> dba_tables q<span class="token keyword">on</span> t<span class="token punctuation">.</span>segment_name<span class="token operator">=</span>q<span class="token punctuation">.</span>table_name<span class="token operator">and</span> t<span class="token punctuation">.</span>owner<span class="token operator">=</span>q<span class="token punctuation">.</span>owner<span class="token keyword">where</span> t<span class="token punctuation">.</span>segment_type<span class="token operator">=</span><span class="token string">'TABLE'</span><span class="token operator">and</span> t<span class="token punctuation">.</span>tablespace_name<span class="token operator">=</span><span class="token string">'TS_AAA'</span> <span class="token comment" spellcheck="true">--需要查看的表空间</span><span class="token keyword">order</span> <span class="token keyword">by</span> bytes<span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token keyword">desc</span></code></pre></li><li><p>删除表数据</p><p>truncate或delete</p></li><li><p>Oracle数据表删除后，表空间没有减少，需要压缩空间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表<span class="token number">1</span> <span class="token keyword">enable</span> <span class="token keyword">row</span> movement<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表<span class="token number">1</span> shrink space<span class="token punctuation">;</span>    </code></pre></li></ol></li></ol></li></ol><h2 id="表数量统计"><a href="#表数量统计" class="headerlink" title="表数量统计"></a>表数量统计</h2><p>mysql：</p><pre><code>SELECT COUNT(*)FROM INFORMATION_SCHEMA.TABLESWHERE TABLE_TYPE = 'BASE TABLE'</code></pre><p>oracle：</p><pre><code>--统计当前用户表SELECT COUNT(*) FROM USER_TABLES;--统计所有用户表SELECT COUNT(*) FROM all_tables；</code></pre><h2 id="日志清理"><a href="#日志清理" class="headerlink" title="日志清理"></a>日志清理</h2><p>1、清理归档日志：<a href="https://so.csdn.net/so/search?q=ORA&amp;spm=1001.2101.3001.7020">ORA</a>-00257:archiver error. Connect internal only. unitl freed.</p><p>查看《Oracle归档日志清理.md》</p><p>2、清理审计$AUD日志：磁盘满，system表空间满</p><p><a href="https://www.php.cn/faq/489599.html">https://www.php.cn/faq/489599.html</a></p><p>3、清理监听日志：磁盘满</p><p>linux:日志大小无限制</p><p><a href="http://www.manongjc.com/detail/60-vzeflwcchtyefxv.html">http://www.manongjc.com/detail/60-vzeflwcchtyefxv.html</a></p><p>windows:日志4G封顶</p><p>解决：\app\Administrator\diag\tnslsnr\LS–20171012URU\listener\trace\listener.log，找到该路径，备份到其他地方后删除掉（需要先关闭监听服务TNSListner）。</p><h2 id="自动备份"><a href="#自动备份" class="headerlink" title="自动备份"></a>自动备份</h2><h3 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h3><p>本教程可使用 system 账户将整个实例备份（包含空表），并自动删除超过 6 天 的历史数据。</p><ol><li><p>root 用户登录服务器</p><pre><code>mkdir -p /backup/oracledata #新建 Oracle 数据库备份目录chown -R oracle:oinstall /backup/oracledata #设置目录权限为 oinstall 用户组的 oracle 用户（用户 oracle 与用户组 oinstall 是在安装 Oracle 数据库时设置的）</code></pre></li><li><p>创建目录对象</p><p>因为使用 expdp 命令需要使用到目录对象(directory)，所以首先需要创建目 录对象，并赋予某个用户对目录对象的操作权限。</p><p><code>su – oracle #切换到 oracle 用户</code></p><p><code> sqlplus / as sysdba #切换到 SQLPLUS 环境</code></p><p>执行以下命令： </p><p><code>create directory expdp_bak_dir as '/backup/oracledata'; #指定输出目录</code></p><blockquote><p>报错：</p><pre><code>ERROR at line 1:ORA-01034: ORACLE not available</code></pre><p>原因：一般是由于监听或Oracle没有启动</p><ol><li><p>首先先测试一下，监听是否启动：lsnrctl status；如果监听没有启动，则 lsnrctl start；</p></li><li><p>启动oracle</p><ol><li><p><code>sqlplus / as sysdba</code></p></li><li><p><code>startup</code></p><blockquote><p>报错：LRM-00109: could not open parameter file ‘/u01/app/oracle/product/11.2.0.4/dbhome_1/dbs/init<strong>ecard</strong>.ora’</p><p>原因：看到找不到intecard.ora。记得自己的实例创建时是orcl。有可能是因为变量设置出现问题。实例名ORACLE_SID设置不对</p><ol><li><code>su - oracle</code></li><li><code>vim .bash_profile</code></li><li>修改ORACLE_SID=orcl</li><li>重启变量<code>source .bash_profile</code></li><li>再次尝试启动oracle</li></ol></blockquote></li></ol></li></ol></blockquote></li><li><p>编辑自动备份脚本</p><p><code>vi /backup/oracledata/oradatabak.sh </code>#新建文件，输入以下代码</p><pre><code>#!/bin/shexport ORACLE_SID=orclexport ORACLE_HOME=/u01/app/oracle/product/11.2.0.4/dbhome_1export NLS_LANG=american_america.al32utf8export DATA_DIR=/backup/oracledatanow=` date +%Y%m%d%H%M%S ` dmpfile=db$now.dmpecho start exp $dmpfile ... /u01/app/oracle/product/11.2.0.4/dbhome_1/bin/expdp system/password DUMPFILE=$dmpfile logfile=db$now.log DIRECTORY=expdp_bak_dir full=yecho "Delete the file bakup before 6 days..."find /backup/oracledata/ -mtime +6 -name "*.dmp" -exec rm -rf '{}' \;echo "Delete the file bakup successfully. " echo "Bakup completed."</code></pre><blockquote><p>注意点：</p></blockquote></li></ol><blockquote><ol><li><p>第二行ORACLE_SID，改为数据库的实例名</p></li><li><p>第九行，必须是目录后，空格，用户名/密码</p></li><li><p>不能将用户名密码一直到full=y另起一行写，会出错，因为这是一个完整的语句。</p><pre><code>错误信息/backup/oracledata/oradatabak.sh: line 10: system/password: No such file or directory</code></pre></li><li><p>备份文件目录：/backup/oracledata</p></li></ol></blockquote><p>   <code>chmod +x /home/backup/oracledata/ordatabak.sh #添加脚本执行权限</code></p><ol start="4"><li><p>设置系统自动定时执行备份脚本</p><p><code>vi /etc/crontab #编辑系统任务计划</code></p><p>将下面的代码写入最后一行： <code>0 0 * * * oracle /backup/oracledata/oradatabak.sh</code></p><p><code>./oradatabak.sh</code> 是<strong>手动备份</strong></p><p>#每天凌晨 0 点 00 分，以 oracle 用户执行 oradatabak.sh 备份文件</p><p><code>[root@db ~]# systemctl restart crond.service </code>或<code>service crond restart</code></p><p><code>[root@db ~]# systemctl enable crond.service</code></p><p>即每天凌晨 0 点 00 分进行备份，如需每天备份多次，可设置不同时间段备份： </p><p>例如：* 3,13,18 * * * oracle /backup/oracledata/oradatabak.sh 即每天 3 点、13 点、18 点进行备份。 </p><p>说明：文件备份目录，用户oracle必须有更改权限，否则无法备份。</p><blockquote><p>问题：到时间了却没有备份。查看当前时间<code>date</code>，发现系统时间不同步</p><p>解决：</p><ol><li><code>yum -y install ntpdate </code></li><li><code>ping baidu.com</code>，确定能访问外网</li><li><code>/usr/sbin/ntpdate stdtime.gov.hk</code>同步时间</li><li><code>date</code>查看时间</li></ol><p>问题：时区有问题</p><p>解决：</p><ol><li><p><a href="https://blog.csdn.net/weixin_42167759/article/details/90648225">https://blog.csdn.net/weixin_42167759/article/details/90648225</a></p></li><li><p><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p><p><code>timedatectl set-timezone Asia/Shanghai</code>    #其他时区以此类推</p><p>如果是旧版（Cenos6及Ubuntu16以前版本）</p><p><code>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p></li></ol></blockquote></li></ol><h3 id="数据库备份恢复"><a href="#数据库备份恢复" class="headerlink" title="数据库备份恢复"></a>数据库备份恢复</h3><p>恢复需在<strong>数据库服务器上</strong>进行，并保持程序、数据文件路径与备份前一致。</p><ol><li><p>在 PL/SQL 环境，设置数据库导入目录 <code>SQL&gt;create directory impdp_dir as '/backup/oracledata';</code> </p></li><li><p>在 PL/SQL 环境，授权 SYSTEM 用户访问授权 <code>SQL&gt;grant read,write on directory impdp_dir to system;</code></p></li><li><p>在控制台环境，在系统目录中创建目录 <code>mkdir -p /backup/oracledata </code></p></li><li><p>复制数据库备份文件至/backup/oracledata/目录 </p></li></ol><p>5）修改复制过来文件的权限</p><p>​    <code>chown -R oracle:oinstall /backup/oracledata</code></p><ol start="6"><li>在控制台环境，恢复数据库(全库恢复) <code>impdp system/kingstar@orcl DIRECTORY=EXPDP_BAK_DIR DUMPFILE= db20220104023001.dmp logfile= dmpfile.log full=y ignore=y</code></li></ol><blockquote><p>注意：</p><ol><li>logfile会在当前目录自动创建，不需要修改</li></ol></blockquote><blockquote><p>问题：bash: Impdp: command not found…</p><p>解决：是因为没有切换用户，<code>su - oracle</code>，再次尝试</p></blockquote><blockquote><p>问题：oracle用户的权限不够</p><pre><code>ORA-31640: unable to open dump file "/backup/oracledata/expdat.dmp" for readORA-27041: unable to open fileLinux-x86_64 Error: 13: Permission denied</code></pre><p>解决：是因为复制过来的备份文件所有者是root，需要修改为oracle</p><p>​    <code>chown -R oracle:oinstall /backup/oracledata</code></p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><p>plsql有表名，但select提示表不存在</p><p>解决：加双引号，<code>select * from "user"</code></p><p>原因：表名是小写的，通过<code>select * from user</code>查不到，oracle严格区分大小写，不加引号会默认变成大写。</p><p>为什么有些表能查到呢，因为小写的表名在创建表语句时，<code>create table "user"</code>，导致固定了小写，我们只能用小写查。然而平时创建表时不加<code>create table user</code>，这样创建出来的表就不区分大小写，因此我们可以不加引号随意查。</p></li><li><p>oracle占用CPU100%</p><p>查看《oracle占用CPU100%.md》</p></li></ol><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ol><li><p>oracle查询重复数据</p><blockquote><pre class=" language-sql"><code class="language-sql">   <span class="token number">1</span>、查找表中多余的重复记录，重复记录是根据单个字段（Id）来判断   <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token keyword">where</span> Id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> Id <span class="token keyword">from</span> 表 <span class="token keyword">group</span> <span class="token keyword">by</span> Id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>Id<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token number">2</span>、删除表中多余的重复记录，重复记录是根据单个字段（Id）来判断，只留有rowid最小的记录   <span class="token keyword">DELETE</span> <span class="token keyword">from</span> 表 <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> 表 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">AND</span>    ROWID <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>ROWID<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token number">3</span>、查找表中多余的重复记录（多个字段）   <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token number">a</span> <span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>Id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>seq<span class="token punctuation">)</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> Id<span class="token punctuation">,</span>seq <span class="token keyword">from</span> 表 <span class="token keyword">group</span> <span class="token keyword">by</span> Id<span class="token punctuation">,</span>seq <span class="token keyword">having</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token number">4</span>、删除表中多余的重复记录（多个字段），只留有rowid最小的记录   <span class="token keyword">delete</span> <span class="token keyword">from</span> 表 <span class="token number">a</span> <span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>Id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>seq<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> Id<span class="token punctuation">,</span>seq <span class="token keyword">from</span> 表 <span class="token keyword">group</span> <span class="token keyword">by</span> Id<span class="token punctuation">,</span>seq <span class="token keyword">having</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> rowid <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>rowid<span class="token punctuation">)</span> <span class="token keyword">from</span> 表 <span class="token keyword">group</span> <span class="token keyword">by</span> Id<span class="token punctuation">,</span>seq    <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></blockquote></li><li><p>一张表更新另一张表字段</p><blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table1 t1<span class="token keyword">SET</span> t1<span class="token punctuation">.</span>column_to_update <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> t2<span class="token punctuation">.</span>column_to_copy                          <span class="token keyword">FROM</span> table2 t2                          <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>join_column <span class="token operator">=</span> t2<span class="token punctuation">.</span>join_column<span class="token punctuation">)</span><span class="token punctuation">;</span>table1是要进行更新的表。​    table2是提供字段值的表。​    column_to_update是要更新的字段名。​    column_to_copy是提供值的字段名。​    join_column是用于连接两个表的列，通常是共有的某个关键列。</code></pre></blockquote></li><li><p>查询系统参数是否会立即生效</p><pre><code>select name,value ,ISSYS_MODIFIABLE from v$parameter where name like '%名字%';name                        value                      issys_modsga_max_size           612368567            FALSEsga_target_size        612368567             immediateISSYS_MODIFIABLE 返回是false 说明该参数无法用alter system语句动态修改，需要重启数据库。其中issys_mod有三种状态：1.IMMEDIATE 立即生效 2. DEFERRED 只对后续的session生效 3.FLASE 必须重启生效</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode使用sftp快速同步服务器文件</title>
      <link href="/2021/03/12/util/vscode-shi-yong-sftp-kuai-su-tong-bu-fu-wu-qi-wen-jian/"/>
      <url>/2021/03/12/util/vscode-shi-yong-sftp-kuai-su-tong-bu-fu-wu-qi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="VScode使用sftp快速同步服务器文件"><a href="#VScode使用sftp快速同步服务器文件" class="headerlink" title="VScode使用sftp快速同步服务器文件"></a>VScode使用sftp快速同步服务器文件</h1><blockquote><p>写这一片文章的目的，是在学习Nginx时需要在Linux上修改配置文件，但使用vim命令多次修改会比较繁琐。有没有一种方式可以像SecureCRT远程操控Linux命令行一样，操作服务器上的配置文件呢？答案是有的，VScode是一个十分强大的编辑器，可以集成很多插件。sftp这个插件就可以满足这一点。</p></blockquote><h2 id="VScode设置中文模式"><a href="#VScode设置中文模式" class="headerlink" title="VScode设置中文模式"></a>VScode设置中文模式</h2><blockquote><p>由于我的VScode还是英文版，在操作前打算把它设置成中文版，插件也可以满足这一需求。</p></blockquote><ol><li><p>打开vscode,界面如下</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312203735.png"></p></li><li><p>安装插件的方法：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312203805.png"></p><p>输入Chinese，选择第一个插件，进行安装</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312204049.png"></p><p>安装完成后，点击按钮进行重启软件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312204125.png"></p><p>完成，界面已经变成中文</p></li></ol><h2 id="使用sftp快速同步服务器文件"><a href="#使用sftp快速同步服务器文件" class="headerlink" title="使用sftp快速同步服务器文件"></a>使用sftp快速同步服务器文件</h2><ol><li><p>安装sftp插件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312203931.png"></p></li><li><p>添加一个本地文件夹到工作区(准备同步到服务器上的)</p><p>我这里选择了桌面</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312204410.png"></p></li><li><p>进行配置</p><ol><li><p>按F1或者ctrl+shift+p调出搜索栏, 输入”sftp”, 选择SFTP:Config</p><blockquote><p>如果点击出现expect to open……，文件并没有打开，证明没有完成第二步，需要打开一个本地文件夹到工作区，就可以打开</p></blockquote></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312210026.png"></p><ol start="2"><li>具体配置</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312210415.png"></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"My Server"</span><span class="token punctuation">,</span>    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"xxx.xxx.xxx.xxx"</span><span class="token punctuation">,</span>    <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"sftp"</span><span class="token punctuation">,</span>    <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"你的密码"</span><span class="token punctuation">,</span>    <span class="token property">"remotePath"</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    <span class="token property">"uploadOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"connectTimeout"</span><span class="token operator">:</span> <span class="token number">40000</span><span class="token punctuation">}</span></code></pre><p>保存文件之后就会自动连接，等待一段时间如果右下角出现连接超时timeout，需要加上<code>"connectTimeout": 40000</code>，默认为10000</p><blockquote><p>有可能还需要将远程端关闭防火墙。</p></blockquote><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312210744.png"></p><p>图中最下面的按钮，就是远程端的界面，连接成功之后就可以看到远程目录。</p></li><li><p>使用</p><p>在远程目录中找到要修改的配置文件，进行修改之后保存就可以自动同步到远程端。</p></li></ol><h2 id="VScode打开命令行"><a href="#VScode打开命令行" class="headerlink" title="VScode打开命令行"></a>VScode打开命令行</h2><blockquote><p>hexo博客部署经常会使用到gitbash命令行，在我们修改好配置文件后，再打开gitbash很麻烦，其实vscode就可以启动命令行，在一个窗口中就可以实现修改配置文件和执行命令</p></blockquote><ol><li><p>打开左侧资源管理器，打开目录（这时我们就可以在左侧看到博客的目录，方便随时选择和修改配置文件）</p></li><li><p>点击上方终端-&gt;新建终端。（会以刚才打开的目录为路径打开一个powershell窗口）</p></li><li><p>执行hexo cl，hexo g，hexo d</p><blockquote><p>问题：hexo : 无法加载文件 C:\Users\username\AppData\Roaming\npm\hexo.ps1`</p><p>原因：出现hexo命令无法在powershell窗口中执行</p><p>解决：</p><ol><li><p>win+q打开搜索，搜索powershell，点击以管理员身份运行</p></li><li><p>输入</p><pre><code>Set-ExecutionPolicy -ExecutionPolicy UNRESTRICTED</code></pre><p>会有一串安全警示，输入 <code>y</code> 回车，然后就可以愉快地在 PowerShell 中使用 <code>hexo</code> 了。</p></li></ol></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2021/03/07/util/nginx/"/>
      <url>/2021/03/07/util/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>是一款高性能的反向代理服务器，可以实现反向代理、负载均衡、动静分离等功能</p><h2 id="Nginx在Linux下的安装"><a href="#Nginx在Linux下的安装" class="headerlink" title="Nginx在Linux下的安装"></a>Nginx在Linux下的安装</h2><ol><li><p>需要安装 gcc 的环境</p><p><code>yum install gcc-c++</code></p></li><li><p>第三方的开发包</p><p><code>yum install -y pcre pcre-devel</code></p><p><code>yum install -y zlib zlib-devel</code></p><p><code>yum install -y openssl openssl-devel</code></p></li><li><p>上传Nginx文件</p></li><li><p>解压缩</p><p><code>tar -zxvf nginx-1.8.0.tar.gz</code></p><p>进入nginx-1.8.0目录  使用 configure 命令创建一 makeFile 文件。</p><pre><code>./configure \--prefix=/usr/local/nginx \--pid-path=/var/run/nginx/nginx.pid \--lock-path=/var/lock/nginx.lock \--error-log-path=/var/log/nginx/error.log \--http-log-path=/var/log/nginx/access.log \--with-http_gzip_static_module \--http-client-body-temp-path=/var/temp/nginx/client \--http-proxy-temp-path=/var/temp/nginx/proxy \--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \--http-scgi-temp-path=/var/temp/nginx/scgi</code></pre><p>执行后可以看到Makefile文件</p></li><li><p>编译</p><p><code>make</code></p></li><li><p>安装</p><p><code>make install</code></p><p>注意：启动nginx 之前，上边将临时文件目录指定为/var/temp/nginx/client， 需要在/var 下创建此 目录</p><p><code>mkdir /var/temp/nginx/client -p</code></p></li><li><p><strong>启动</strong></p><p><code>cd /usr/local/nginx/sbin</code></p><p><code>./nginx</code></p><p><strong>查看进程</strong></p><p><code>ps aux|grep nginx</code></p></li><li><p>访问</p><p>默认为80端口，可以直接Localhost访问</p><p>地址栏输入虚拟机的IP即可访问（默认为80端口）</p><p><code>192.168.176.128</code></p><blockquote><p>如果没有访问成功，有可能是因为防火墙没有关闭</p><p>centos7关闭防火墙：<code>systemctl stop firewalld</code></p><p>如果不想关闭防火墙，可以设置开放端口</p><p><code>firewall-cmd --add-port=8080/tcp --permanent</code></p><p>重启防火墙：<code>firewall-cmd -reload</code></p><p>查看开放的端口号：<code>firewall-cmd --list-all</code></p></blockquote><p><strong>关闭：</strong></p><p>​    方式一（杀进程）：<code>./nginx -s stop</code></p><p>​    方式二（退出）：<code>./nginx -s quit</code></p><p><strong>重启：</strong></p><p>​    <code>./nginx -s reload</code></p><p><strong>查看版本</strong></p><p>​    <code>./nginx -v</code></p></li></ol><h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><p>位置：<code>/usr/local/nginx/conf/nginx.conf</code></p><p>配置文件有三部分组成</p><ol><li><p>全局块</p><p>从配置文件开始到events间的区域</p><p>作用：主要设置一些影响nginx服务器整体运行的配置指令</p><p><code>worker_processes</code>：处理并发量的值，值越大处理并发量越多</p></li><li><p>events块</p><p>作用：影响Nginx服务器与用户网络连接</p><p><code>worker_connections</code>：支持最大的连接数</p></li><li><p><strong>http块</strong></p><p>配置最频繁的部分</p><p>包括http全局块、sever块</p></li></ol><h2 id="部署静态页面"><a href="#部署静态页面" class="headerlink" title="部署静态页面"></a>部署静态页面</h2><p>作用：在nginx服务器中访问静态页面</p><ol><li><p>将静态页面上传到nginx目录中</p></li><li><p>修改配置文件（conf/nginx.conf）</p><pre><code>        location / {            root   index;            index  index.html index.htm;        }# root代表文件夹，index代表首页#将root 改为index（自己的静态页面文件夹）</code></pre></li></ol><blockquote><p>修改配置文件的方法：</p><p>由于在linux上大量修改配置文件使用vim命令会很繁琐，这里推荐一种vscode远程修改上传配置文件的方法。</p><p><a href="https://sulog.top/2021/03/12/util/vscode-shi-yong-sftp-kuai-su-tong-bu-fu-wu-qi-wen-jian/">VScode使用sftp快速同步服务器文件</a></p></blockquote><h2 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h2><h3 id="端口绑定"><a href="#端口绑定" class="headerlink" title="端口绑定"></a>端口绑定</h3><p>作用：输入不同端口号就可以进入不同页面</p><ol><li><p>修改nginx配置文件</p><pre class=" language-json"><code class="language-json">server <span class="token punctuation">{</span>    listen       <span class="token number">81</span><span class="token punctuation">;</span> #端口号    server_name  localhost<span class="token punctuation">;</span> #域名或者Ip    location / <span class="token punctuation">{</span> #访问路径配置        root   index<span class="token punctuation">;</span> #目录        index  index.html index.htm<span class="token punctuation">;</span> #默认首页    <span class="token punctuation">}</span>    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span> #错误页面        location = /50x.html <span class="token punctuation">{</span>        root   html<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>#复制两份server，就可以有两台虚拟主机server <span class="token punctuation">{</span>    listen       <span class="token number">82</span><span class="token punctuation">;</span> #端口号    server_name  localhost<span class="token punctuation">;</span> #域名或者Ip    location / <span class="token punctuation">{</span> #访问路径配置        root   regist<span class="token punctuation">;</span> #目录        index  regist.html regist.htm<span class="token punctuation">;</span> #默认首页    <span class="token punctuation">}</span>    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span> #错误页面        location = /50x.html <span class="token punctuation">{</span>        root   html<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>重启nginx</p><p><code>./nginx -s reload</code></p></li><li><p>访问页面</p><p><code>192.168.179.128:81</code>    来到主页</p><p><code>192.168.179.128:82</code>    来到注册页面</p></li></ol><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p>作用：输入域名就可以进入页面</p><p>一个域名对应一个 ip 地址，一个 ip 地址可以被多个域名绑定。</p><ol><li><p>本地测试可以修改 hosts 文件（C:\Windows\System32\drivers\etc\host）</p><p><code>192.168.177.129   www.hmtravel.com</code></p><p><code>192.168.177.129   regist.hmtravel.com</code></p></li><li><p>修改nginx配置文件</p><pre class=" language-json"><code class="language-json">    server <span class="token punctuation">{</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span> #这里全配置成<span class="token number">80</span>        server_name  regist.hmtravel.com<span class="token punctuation">;</span> #修改此处        location / <span class="token punctuation">{</span>            root   regist<span class="token punctuation">;</span>            index  regist.html regist.htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    server <span class="token punctuation">{</span>        listen        <span class="token number">80</span><span class="token punctuation">;</span> #这里全配置成<span class="token number">80</span>        server_name  www.hmtravel.com<span class="token punctuation">;</span> #修改此处        location / <span class="token punctuation">{</span>            root   index<span class="token punctuation">;</span>            index  index.html index.htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>重启nginx</p><p><code>./nginx -s reload</code></p></li><li><p>访问页面</p><p><code>www.hmtravel.com</code></p><p><code>regist.hmtravel.com</code></p></li></ol><h2 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h2><p>作用：网络和服务器之间加上nginx</p><blockquote><p>反向代理是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器</p><p>正向代理是针对你的客户端，而反向代理是针对服务器的</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312160914.png" alt="正向代理"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312160949.png" alt="反向代理"></p><p>反向代理的好处：</p><ol><li>当服务器并发量变大时，搭建服务器集群，反向代理能将大并发量转移到反向代理服务器上，再由自己按照一定规则将请求发送给服务器</li><li>反向代理接收所有请求，反向代理服务器和服务器集群之间可以建立防火墙，从而提高安全性</li></ol></blockquote><h3 id="应用一"><a href="#应用一" class="headerlink" title="应用一"></a>应用一</h3><p>效果：访问<a href="http://www.hmtravel.com或192.168.179.128:80，实际访问的是tomcat页面">www.hmtravel.com或192.168.179.128:80，实际访问的是tomcat页面</a></p><ol><li><p>修改nginx配置文件</p><pre class=" language-json"><code class="language-json">upstream tomcat-travel<span class="token punctuation">{</span>    server <span class="token number">192.168</span>.<span class="token number">179.128</span><span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    server_name  www.hmtravel.com<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>    #root index<span class="token punctuation">;</span> #注释掉    proxy_pass http<span class="token operator">:</span>//tomcat-travel<span class="token punctuation">;</span> #代理上面的ip    index  index.html index.htm<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>重启nginx</p><p><code>./nginx -s reload</code></p></li><li><p>访问页面</p><p>输入<code>www.hmtravel.com</code>，效果看到tomcat页面</p><p>流程：访问域名<a href="http://www.hmtravel.com,找到/">www.hmtravel.com，找到</a> proxy_pass代理tomcat-travel，tomcat-travel对应的服务器是192.168.179.128:8080，返回tomcat页面</p></li></ol><div class="tip error "> 遇到的坑1.没有跳转到tomcat页面，仍然跳转的是travel页面。    解决：查看配置文件，root有没有注释掉</div><h3 id="应用二"><a href="#应用二" class="headerlink" title="应用二"></a>应用二</h3><p>效果：访问192.168.179.128:9001/edu/index.html和192.168.179.128:9001/dev/index.html访问的是不同的两个页面</p><ol><li><p>修改nginx配置文件</p><pre class=" language-json"><code class="language-json">server <span class="token punctuation">{</span>    listen       <span class="token number">9001</span><span class="token punctuation">;</span>#此处修改    server_name  <span class="token number">192.168</span>.<span class="token number">179.128</span><span class="token punctuation">;</span> #此处修改    location ~ /edu/ <span class="token punctuation">{</span> # ~是正则表达式的意思，包含edu就跳转指定页面    proxy_pass http<span class="token operator">:</span>//<span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span> 跳转到指定tomcat<span class="token punctuation">}</span>    location ~ /dev/ <span class="token punctuation">{</span> # ~是正则表达式的意思，包含edu就跳转指定页面    proxy_pass http<span class="token operator">:</span>//<span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">8081</span><span class="token punctuation">;</span> 跳转到指定tomcat<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>location 后可以跟几种形式</p><ol><li><p>= 表示uri必须和后面的保持一直才能访问，如： = /edu/a.html，则访问时必须是192.168.179.128:9001/edu/a.html</p></li><li><p>~ 表示正则表达式，包含即可，如：~ /edu/，则访问时</p><p>192.168.179.128:9001/edu/a.html,192.168.179.128:9001/edu/b.html均可访问</p></li><li><p><del>* 表示不区分大小写的正则表达式，如：</del>* /edu/，则访问192.168.179.128:9001/EDU/a.html,192.168.179.128:9001/edu/b.html均可访问</p></li></ol></blockquote></li><li><p>重启nginx</p><p><code>./nginx -s reload</code></p></li><li><p>访问页面</p><p>192.168.179.128:9001/edu/index.html</p><p>192.168.179.128:9001/dev/index.html</p></li></ol><h2 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h2><blockquote><p>负载均衡，其意思就是分摊到多个操作单元上进行执行</p></blockquote><h3 id="配置负载均衡-准备工作"><a href="#配置负载均衡-准备工作" class="headerlink" title="配置负载均衡-准备工作"></a>配置负载均衡-准备工作</h3><ol><li>将刚才的存放工程的tomcat复制三份，修改端口分别为8080 ，8081，8082</li><li>分别启动这三个tomcat服务</li><li>为了能够区分是访问哪个服务器的网站，可以在首页标题加上标记以便区分</li></ol><h3 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h3><p>效果：访问192.168.179.128:80，访问到8080,8081,8082的tomcat</p><ol><li><p>修改 Nginx配置文件</p><pre class=" language-json"><code class="language-json">#放在http块中 upstream tomcat-travel<span class="token punctuation">{</span>    server <span class="token number">192.168</span>.<span class="token number">179.128</span><span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span>    server <span class="token number">192.168</span>.<span class="token number">179.128</span><span class="token operator">:</span><span class="token number">8081</span><span class="token punctuation">;</span>    server <span class="token number">192.168</span>.<span class="token number">179.128</span><span class="token operator">:</span><span class="token number">8082</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>修改server</p><pre class=" language-json"><code class="language-json">server <span class="token punctuation">{</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    server_name  <span class="token number">192.169</span>.<span class="token number">179.128</span><span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>    proxy_pass http<span class="token operator">:</span>//tomcat-travel<span class="token punctuation">;</span> #代理上面的ip    index  index.html index.htm<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>输入网址进行测试</p><p>观察标题，看看是否不同，经测试每台服务器出现的概率为33.3%</p></li><li><p>修改权重</p><p>想要让某台服务器分担更多的压力，可以分配其权重，默认为1</p><pre class=" language-json"><code class="language-json">upstream tomcat-travel<span class="token punctuation">{</span>    server <span class="token number">192.168</span>.<span class="token number">179.128</span><span class="token operator">:</span><span class="token number">8080</span> weight=<span class="token number">2</span><span class="token punctuation">;</span>    server <span class="token number">192.168</span>.<span class="token number">179.128</span><span class="token operator">:</span><span class="token number">8081</span><span class="token punctuation">;</span>    server <span class="token number">192.168</span>.<span class="token number">179.128</span><span class="token operator">:</span><span class="token number">8082</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312174556.png"></p></li></ol><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><ol><li>轮询：平均按顺序访问，当一个服务器down掉就会自动剔除</li><li>权重：在ip后设置权重<code>weight = 2</code>，按照权重比例进行访问</li><li>ip hash：在upstream块中加上ip_hash 即可。根据访问用户的Ip计算哈希值，则该用户永远访问的就是该服务器，可以有效解决session问题。</li><li>fair：在upsteam块中加上fair即可。根据用户访问服务器的响应时间，哪个服务器响应时间短就访问哪个服务器。</li></ol><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>简单来说就是把动态请求和静态请求分开，nginx处理静态页面。</p><p>效果：访问192.168.179.128:80/image/1.jpg，访问的就是静态资源服务器中的数据。访问192.168.179.128:80……其他的页面，是正常反向代理访问的动态数据</p><ol><li><p>准备工作</p><p>将静态文件放到Linux服务器中，如/data/image/1.jpg</p></li><li><p>配置nginx服务器</p><pre class=" language-json"><code class="language-json">#静态资源服务器server <span class="token punctuation">{</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    server_name  <span class="token number">192.169</span>.<span class="token number">179.128</span><span class="token punctuation">;</span>    location /image/ <span class="token punctuation">{</span>    root /data/    #index  index.html index.htm<span class="token punctuation">;</span>    #autoindex on<span class="token punctuation">;</span> #页面显示目录列表<span class="token punctuation">}</span>#动态资源服务器（正常的反向代理）server <span class="token punctuation">{</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    server_name  <span class="token number">192.169</span>.<span class="token number">179.128</span><span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>    proxy_pass http<span class="token operator">:</span>//<span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span>    index  index.html index.htm<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot自定义拦截器和全局异常处理器</title>
      <link href="/2020/12/07/springboot/springboot-zi-ding-yi-lan-jie-qi-he-quan-ju-yi-chang-chu-li-qi/"/>
      <url>/2020/12/07/springboot/springboot-zi-ding-yi-lan-jie-qi-he-quan-ju-yi-chang-chu-li-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot自定义拦截器和全局异常处理器"><a href="#springboot自定义拦截器和全局异常处理器" class="headerlink" title="springboot自定义拦截器和全局异常处理器"></a>springboot自定义拦截器和全局异常处理器</h1><p><strong>一、自定义拦截器</strong></p><ol start="2"><li>创建web的全局配置类<ol><li>@Configuration</li><li>继承WebMvcConfigurerAdapter</li></ol></li><li></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//声明这是一个配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HandlerInterceptor inter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest arg0<span class="token punctuation">,</span> HttpServletResponse arg1<span class="token punctuation">,</span> Object arg2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义拦截器......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest arg0<span class="token punctuation">,</span> HttpServletResponse arg1<span class="token punctuation">,</span> Object arg2<span class="token punctuation">,</span> ModelAndView arg3<span class="token punctuation">)</span>                <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest arg0<span class="token punctuation">,</span> HttpServletResponse arg1<span class="token punctuation">,</span> Object arg2<span class="token punctuation">,</span> Exception arg3<span class="token punctuation">)</span>                <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>inter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>二、全局异常处理器</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//全局异常处理器</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">handleException</span><span class="token punctuation">(</span>Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"errorCode"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中获取request对象的几种方法</title>
      <link href="/2020/12/06/ssm-kuang-jia/java-zhong-huo-qu-request-dui-xiang-de-ji-chong-fang-fa/"/>
      <url>/2020/12/06/ssm-kuang-jia/java-zhong-huo-qu-request-dui-xiang-de-ji-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中获取request对象的几种方法"><a href="#Java中获取request对象的几种方法" class="headerlink" title="Java中获取request对象的几种方法"></a>Java中获取request对象的几种方法</h1><p>1.通过注解获取（很简单，推荐）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>     HttpServletRequest request<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里可以获取到request</span><span class="token punctuation">}</span></code></pre><p>2.在web.xml中配置一个监听：</p><blockquote><p>spring boot中不需要配置监听，直接使用第二步获得获取即可，还可以获取response</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>         org.springframework.web.context.request.RequestContextListener     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span></code></pre><p>java代码：（spring自带的，在实际中用到过这个，推荐使用）</p><pre class=" language-java"><code class="language-java">HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span>RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.直接在参数中传递（此方法不好用，不建议使用）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span></code></pre><p>4.如果有Struts：</p><pre class=" language-java"><code class="language-java">HttpServletRequest request <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在SpringBoot中用SpringAOP实现日志记录功能</title>
      <link href="/2020/12/05/springboot/zai-springboot-zhong-yong-springaop-shi-xian-ri-zhi-ji-lu-gong-neng/"/>
      <url>/2020/12/05/springboot/zai-springboot-zhong-yong-springaop-shi-xian-ri-zhi-ji-lu-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="在SpringBoot中用SpringAOP实现日志记录功能"><a href="#在SpringBoot中用SpringAOP实现日志记录功能" class="headerlink" title="在SpringBoot中用SpringAOP实现日志记录功能"></a>在SpringBoot中用SpringAOP实现日志记录功能</h1><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>我需要在一个SpringBoot的项目中的每个controller加入一个日志记录，记录关于请求的一些信息。</p><p>代码类似于:</p><p>　　<code>logger.info(request.getRequestUrl());</code></p><p>之类的。</p><p>代码不难，但由于Controller的数量不少，干起来也是体力活。所以想到了用Spring AOP来解决这个问题。</p><p><strong>首先，在pom中加入SpringAOP的相关依赖：</strong></p><pre><code>&lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>spring中实现aop，需要@Aspect注解，要在spring的配置文件中加入</p><p>&lt;aop:aspectj-autoproxy /&gt;或者纯注解方式EnableAspectJAutoProxy</p><p>那么我们这里要不要在程序的主类中增加@EnableAspectJAutoProxy来启用呢？   实际并<strong>不需要</strong>，可以看下面关于AOP的默认配置属性，其中spring.aop.auto属性默认是开启的，也就是说只要引入了AOP依赖后，默认已经增加了@EnableAspectJAutoProxy。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201208002944.png"></p><p>好的也就是说，只要引入SpringAOP相关的jar包依赖，我们就可以开始相关的Aspet的编程了。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebLogAspect</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WebLogAspect<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.stuPayment.controller..*.*(..))"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//切入点描述 这个是controller包的切入点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">controllerLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//签名，可以理解成这个切入点的一个名称</span>        <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.stuPayment.uiController..*.*(..))"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//切入点描述，这个是uiController包的切入点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">uiControllerLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"controllerLog() || uiControllerLog()"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在切入点的方法run之前要干的</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logBeforeController</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        RequestAttributes requestAttributes <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个RequestContextHolder是Springmvc提供来获得请求的东西</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span>requestAttributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 记录下请求内容</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"################URL : "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"################HTTP_METHOD : "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//请求方式get/post</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"################IP : "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"################THE ARGS OF THE CONTROLLER : "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//下面这个getSignature().getDeclaringTypeName()是获取包+类名的   然后后面的joinPoint.getSignature.getName()获取了方法名</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"################CLASS_METHOD : "</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><strong>@Aspect和@Component</strong></p><p>首先，这个@Aspect注释告诉Spring这是个切面类，然后@Compoment将转换成Spring容器中的bean或者是代理bean。 总之要写切面这两个注解一起用就是了。</p><p>既然是切面类，那么肯定是包含PointCut还有Advice两个要素的，下面对几个注解展开讲来看看在@Aspect中是怎么确定切入点（PointCut）和增强通知（Advice）的。</p><p><strong>@PointCut(表达式)</strong></p><p>切入点，包含表达式、签名两部分，</p><p>表达式是拿来确定切入点的位置的，说白了就是通过一些规则来确定，哪些方法是要增强的，也就是要拦截哪些方法。</p><p>签名就是方法名，没有实际用处，就是唯一标识</p><p><strong>@Before(签名/表达式)</strong></p><p>标注在通知方法上，标识在方法前执行……</p><p>然后看到注解下面的方法，就是描述advice的，我们看到有个参数<strong>JoinPoint</strong>，这个东西代表着织入增强处理的连接点。JoinPoint包含了几个很有用的参数：</p><ul><li>Object[] getArgs：返回目标方法的参数</li><li>Signature getSignature：返回目标方法的签名</li><li>Object getTarget：返回被织入增强处理的目标对象</li><li>Object getThis：返回AOP框架为目标对象生成的代理对象</li></ul><p>除了注解@Around的方法外，其他都可以加这个JoinPoint作参数。@Around注解的方法的参数一定要是ProceedingJoinPoint，下面会介绍。</p><p><strong>@Around</strong></p><p>环绕通知，参数一定要是ProceedingJoinPoint，我们可以把它看作被增强方法的替身，这个proceedingJoinPoint有个proceed（）方法，相当于就是那切入点的那个方法执行，简单地说就是让目标方法执行，然后这个方法会返回一个对象，这个对象就是那个切入点所在位置的方法所返回的对象。</p><p><strong>@AfterReturning</strong></p><p>执行后通知，这个注解可以指定两个属性，第一个是pointcut切入点表达式/签名，第二个是returning属性，表明可以在Advice的方法中有目标方法返回值的形参。</p><p><strong>@AfterThrowing</strong></p><p>异常抛出增强，在异常抛出后织入的增强。有点像上面的@AfterReturning，这个注解也是有两个属性，pointcut和throwing。</p><hr><h2 id="RequestContextHolder"><a href="#RequestContextHolder" class="headerlink" title="RequestContextHolder"></a>RequestContextHolder</h2><p>这里还要提到上面用到的一个类，java类中想要获得request和response对象，可以使用springmvc提供的这个类。</p><pre class=" language-java"><code class="language-java">RequestAttributes requestAttributes <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从session里面获取对应的值</span>String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> requestAttributes<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>RequestAttributes<span class="token punctuation">.</span>SCOPE_SESSION<span class="token punctuation">)</span><span class="token punctuation">;</span> HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span>requestAttributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span>requestAttributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>request能获得什么信息</strong></p><p>请求URL：<code>request.getRequestURL().toString())</code></p><p>请求方式(get/post)：<code>request.getMethod()</code></p><p>请求IP：<code>request.getRemoteAddr()</code></p><p><strong>joinPoint能获得什么信息</strong></p><p>包名：<code>joinPoint.getSignature().getDeclaringTypeName()</code></p><p>方法名：<code>joinPoint.getSignature().getName()</code></p><p>方法参数：<code>joinPoint.getArgs()</code></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/12/03/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-ba-hou-duan-zhi-liu-yan-ban/"/>
      <url>/2020/12/03/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-ba-hou-duan-zhi-liu-yan-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot博客（八）（后端之留言板）"><a href="#springboot博客（八）（后端之留言板）" class="headerlink" title="springboot博客（八）（后端之留言板）"></a>springboot博客（八）（后端之留言板）</h1><h2 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201203112243.png"></p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ol><li>和评论类似</li><li>对站点进行留言，回复</li><li>留言显示<ol><li>查询留言列表的时候，需要将留言和回复加以区分，根据留言功能来看，有父留言、子留言（回复），并且父子留言在前端显示的位置有不同，这里细说一下查询：<ul><li>根据id为“-1”和博客id查询出所有父留言（父级留言id为‘-1’）</li><li>根据父留言的id查询出一级子回复</li><li>根据子回复的id循环迭代查询出所有子集回复</li><li>将查询出来的子回复放到一个集合中</li></ul></li></ol></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>编写repository</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Message<span class="token punctuation">,</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查找父级留言</span>    List<span class="token operator">&lt;</span>Message<span class="token operator">></span> <span class="token function">findAllByParentMessageNull</span><span class="token punctuation">(</span>Sort sort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>编写service</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查找留言信息</span>List<span class="token operator">&lt;</span>Message<span class="token operator">></span> <span class="token function">listMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存留言信息</span>Message <span class="token function">saveMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Message<span class="token operator">></span> <span class="token function">listMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Sort sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">,</span><span class="token string">"createTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Message<span class="token operator">></span> parentMessage <span class="token operator">=</span> messageRepository<span class="token punctuation">.</span><span class="token function">findAllByParentMessageNull</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找父级留言</span>    <span class="token keyword">return</span> <span class="token function">eachMessage</span><span class="token punctuation">(</span>parentMessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用方法</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Message <span class="token function">saveMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Long parentMessageId <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getParentMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前端传来的是-1或者回复是传来的父id</span>    <span class="token comment" spellcheck="true">//前端只传来的id,我们需要存放的是message对象，所以进行以下操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>parentMessageId <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//有父级</span>        message<span class="token punctuation">.</span><span class="token function">setParentMessage</span><span class="token punctuation">(</span>messageRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>parentMessageId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        message<span class="token punctuation">.</span><span class="token function">setParentMessage</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    message<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Message m <span class="token operator">=</span> messageRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    将数据另外存在一个list中，避免改变表中数据     */</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Message<span class="token operator">></span> <span class="token function">eachMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Message<span class="token operator">></span> parents<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Message<span class="token operator">></span> messageView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Message parent <span class="token operator">:</span> parents<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历父留言</span>        Message m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageView<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加到集合中</span>    <span class="token punctuation">}</span>    <span class="token function">combineChildren</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用方法</span>    <span class="token keyword">return</span> messageView<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    遍历所有一级子回复     */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">combineChildren</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Message<span class="token operator">></span> messages<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Message parent<span class="token operator">:</span> messages<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历父留言</span>        List<span class="token operator">&lt;</span>Message<span class="token operator">></span> firstChilds <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getReplayMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得一级子留言</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Message firstChild <span class="token operator">:</span> firstChilds<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历子留言</span>            <span class="token function">recursively</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用方法</span>        <span class="token punctuation">}</span>        parent<span class="token punctuation">.</span><span class="token function">setReplayMessage</span><span class="token punctuation">(</span>temReplys<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将所有子留言，加入到父留言中</span>        temReplys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空临时存放子留言的集合</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Message<span class="token operator">></span> temReplys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临时存放子留言的集合</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recursively</span><span class="token punctuation">(</span>Message firstChild<span class="token punctuation">)</span><span class="token punctuation">{</span>    temReplys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将一级子留言存放进临时集合中</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span><span class="token function">getReplayMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果一级子留言还有子留言</span>        List<span class="token operator">&lt;</span>Message<span class="token operator">></span> nextChilds <span class="token operator">=</span> firstChild<span class="token punctuation">.</span><span class="token function">getReplayMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得二级子留言</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Message nextChild <span class="token operator">:</span> nextChilds<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遍历二级子留言</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span><span class="token function">getReplayMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果二级子留言还有子留言</span>                <span class="token function">recursively</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//迭代（二级加入临时集合中，再看有没有更多的子留言）</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>编写controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${comment.avatar}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String avatar<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    跳转到留言页面     */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/message"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"message"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    片段刷新     */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/messagecomment"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">messageComment</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"messages"</span><span class="token punctuation">,</span>messageService<span class="token punctuation">.</span><span class="token function">listMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"message :: messageList"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    保存留言     */</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/message"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">post</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//是管理员</span>        message<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setAdminMessage</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        message<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span>avatar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    messageService<span class="token punctuation">.</span><span class="token function">saveMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/messagecomment"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>前端渲染</p><p>```html</p><!-- 新增留言--><input type="hidden" name="parentMessage.id" value="-1"><input type="text" name="nickname" placeholder="Id" th:value="${session.user}!=null ? ${session.user.nickname}"><input type="text" name="email" placeholder="Email" th:value="${session.user}!=null ? ${session.user.email}"><!--留言区--><div class="comment" th:each="message : ${messages}">    <a class="avatar">        <img src="/2020/12/03/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-ba-hou-duan-zhi-liu-yan-ban/static/image/avatar.png" th:src="@{${message.avatar}}">    </a>    <div class="content">        <a class="author">            <span th:text="${message.nickname}">Matt</span>            <div class="ui mini basic teal left pointing label m-padded-mini" th:if="${message.adminMessage}">博主</div>        </a>        <div class="metadata">            </div></div></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot博客（七）（后端之音乐盒/前端页面优化）</title>
      <link href="/2020/12/02/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-qi-hou-duan-zhi-yin-le-he-qian-duan-ye-mian-you-hua/"/>
      <url>/2020/12/02/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-qi-hou-duan-zhi-yin-le-he-qian-duan-ye-mian-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot博客（七）（后端之音乐盒-前端页面优化）"><a href="#springboot博客（七）（后端之音乐盒-前端页面优化）" class="headerlink" title="springboot博客（七）（后端之音乐盒/前端页面优化）"></a>springboot博客（七）（后端之音乐盒/前端页面优化）</h1><h2 id="音乐盒"><a href="#音乐盒" class="headerlink" title="音乐盒"></a>音乐盒</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201202155624.png"></p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ol><li>音乐播放</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>搭建页面</p><p>直接套用图片墙的网页，加上网易云的链接即可</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">marginwidth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">marginheight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span>800</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span>400</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//music.163.com/outchain/player?type<span class="token punctuation">=</span>0&amp;id<span class="token punctuation">=</span>2153548870&amp;auto<span class="token punctuation">=</span>1&amp;height<span class="token punctuation">=</span>430<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre><blockquote><p>网易云音乐链接获取：</p><ol><li>进入页面选择喜欢的歌单</li><li>点击生成外部链接</li><li>有的歌单因为版权原因不能生成，多找几个试一下</li></ol></blockquote></li><li><p>编写controller</p><ol><li>跳转到音乐盒界面</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/music"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">music</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"music"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="页面功能优化"><a href="#页面功能优化" class="headerlink" title="页面功能优化"></a>页面功能优化</h2><h3 id="index-html页面"><a href="#index-html页面" class="headerlink" title="index.html页面"></a>index.html页面</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201202180930.png"></p><blockquote><ol><li>顶部图片美化</li><li>图标显示信息</li><li>导航隐藏回显</li></ol></blockquote><pre class=" language-html"><code class="language-html">// 显示微信$('.wechat').popup({    popup : $('.wechat-qr'),    position: 'bottom center'});// 显示邮箱$('.email').popup();// 导航栏显示var waypoint = new Waypoint({      element: document.getElementById('waypoint'),      handler: function(direction) {        if (direction == 'down') {          $('#nav').show(500);        } else {          $('#nav').hide(500);        }        console.log('Scrolled to waypoint!  ' + direction);      }    })</code></pre><h3 id="顶部图片"><a href="#顶部图片" class="headerlink" title="顶部图片"></a>顶部图片</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201202180750.png"></p><p>分类、标签、归档、搜索、音乐、图片、友链、博客详情、关于我</p><p>全部加上了顶部图片，并且设置为动态图片获取</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-bg-type_outer<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://api.ixiaowai.cn/gqapi/gqapi.php<span class="token punctuation">"</span></span>  <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui m-bg image<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-bg-class_cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui container<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> relative <span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">540</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-font-size-title m-right-bottom<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">'STXingkai'</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>博客分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-font-size-text-init-title m-margin-top<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>记忆是一种相聚的方式，放下是一种自由的形式。不必悲伤，不必忧愁，邂逅的回忆都是美好的故事<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201202180841.png"></p><p>使用timeline插件</p><ol><li><p>在<code>lib</code>中加入timeline的js，<code>css</code>中加入css</p></li><li><p>加入链接</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/css/timeline.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/timeline.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/lib/timeline/timeline.js<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/lib/timeline/timeline.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>中间内容</p><p>```html</p><div class="doc-container m-padded-tb-massive m-opacity" id="doc-container">    <th:block th:each="item : ${archiveMap}">        <section class="timeline">            <ul>                <li class="" th:each="blog : ${item.value}">                    <div>                        </div></li></ul></section></th:block></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot博客（六）（后端之友链/相册）</title>
      <link href="/2020/12/01/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-liu-hou-duan-zhi-you-lian-xiang-ce/"/>
      <url>/2020/12/01/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-liu-hou-duan-zhi-you-lian-xiang-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot博客（六）（后端之友链-相册）"><a href="#springboot博客（六）（后端之友链-相册）" class="headerlink" title="springboot博客（六）（后端之友链/相册）"></a>springboot博客（六）（后端之友链/相册）</h1><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201202020214.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201202020235.png"></p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ol><li>对友链的增加、删除、修改、查找</li><li>修改时回显数据</li><li>添加时判断是否相同</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><ol><li><p>编写实体类，生成数据库</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Id</span><span class="token annotation punctuation">@GeneratedValue</span><span class="token keyword">private</span> Long id<span class="token punctuation">;</span><span class="token keyword">private</span> String blogaddress<span class="token punctuation">;</span><span class="token keyword">private</span> String blogname<span class="token punctuation">;</span><span class="token annotation punctuation">@Temporal</span><span class="token punctuation">(</span>TemporalType<span class="token punctuation">.</span>TIMESTAMP<span class="token punctuation">)</span><span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建时间</span><span class="token keyword">private</span> String pictureaddress<span class="token punctuation">;</span></code></pre></li><li><p>搭建友链添加、友链显示页面</p></li><li><p>编写service</p><ol><li>查找所有</li><li>通过id查找一个</li><li>分页查找</li><li>保存</li><li>修改</li><li>删除</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>FriendLink<span class="token operator">></span> <span class="token function">listFriendLinks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> friendLinkRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> FriendLink <span class="token function">saveFriendLink</span><span class="token punctuation">(</span>FriendLink friendLink<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> friendLinkRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>friendLink<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> FriendLink <span class="token function">getFriendLink</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> friendLinkRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Page<span class="token operator">&lt;</span>FriendLink<span class="token operator">></span> <span class="token function">listFriendLink</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> friendLinkRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> FriendLink <span class="token function">updateFriendLink</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> FriendLink friendLink<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FriendLink f <span class="token operator">=</span> friendLinkRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotFindException</span><span class="token punctuation">(</span><span class="token string">"友链不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>friendLink<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteFriendLink</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    friendLinkRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>编写repository</p></li><li><p>编写controller</p><ol><li>friend<ol><li>跳转到友链管理页面</li><li>分页查询保存到model中</li></ol></li><li>input<ol><li>跳转到友链新增页面</li><li>new一个新对象，为了回显不报错</li></ol></li><li>post<ol><li>友链新增</li><li>向RedirectAttributes中增加提示消息</li><li>重定向到friend的请求中</li></ol></li><li>editInput<ol><li>跳转到友链修改页面</li><li>向model中存储friendLink对象</li></ol></li><li>editPost<ol><li>友链修改</li><li>向RedirectAttributes中增加提示消息</li><li>重定向到friend的请求中</li></ol></li><li>delete<ol><li>友链删除</li><li>向RedirectAttributes中增加提示消息</li><li>重定向到friend的请求中</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//跳转到友链管理页面</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/friendlinks"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">friend</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PageableDefault</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>sort <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>direction <span class="token operator">=</span> Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span> Pageable pageable<span class="token punctuation">,</span>                     Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span>friendLinkService<span class="token punctuation">.</span><span class="token function">listFriendLink</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"admin/friendlinks"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//跳转到友链新增页面</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/friendlinks/input"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">input</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"friendlink"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FriendLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"admin/friendlinks-input"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//跳转到编辑页面</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/friendlinks/{id}/input"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">edit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"friendlink"</span><span class="token punctuation">,</span>friendLinkService<span class="token punctuation">.</span><span class="token function">getFriendLink</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"admin/friendlinks-input"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//友链新增操作</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/friendlinks"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">post</span><span class="token punctuation">(</span>FriendLink friendLink<span class="token punctuation">,</span>RedirectAttributes attributes<span class="token punctuation">)</span><span class="token punctuation">{</span>    friendLink<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FriendLink F <span class="token operator">=</span> friendLinkService<span class="token punctuation">.</span><span class="token function">saveFriendLink</span><span class="token punctuation">(</span>friendLink<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>F <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"新增失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"新增成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/admin/friendlinks"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//编辑操作</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/friendlinks/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">post</span><span class="token punctuation">(</span>FriendLink friendLink<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Long id<span class="token punctuation">,</span> RedirectAttributes attributes<span class="token punctuation">)</span><span class="token punctuation">{</span>    friendLink<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FriendLink F <span class="token operator">=</span> friendLinkService<span class="token punctuation">.</span><span class="token function">updateFriendLink</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>friendLink<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>F <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"更新失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"更新成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/admin/friendlinks"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除操作</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/friendlinks/{id}/delete"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">,</span>RedirectAttributes attributes<span class="token punctuation">)</span><span class="token punctuation">{</span>    friendLinkService<span class="token punctuation">.</span><span class="token function">deleteFriendLink</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    attributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/admin/friendlinks"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h4><ol><li><p>friendlinks.html友链管理页面</p><ol><li>友链信息（循环）<ol><li>编号</li><li>博客名</li><li>博客地址</li><li>图片地址</li><li>日期</li></ol></li><li>上下一页</li><li>编辑、删除地址</li><li>新增地址</li></ol><p>```html</p>    1    ONESTAR    https://onestar.newstar.net.cn/    https://onestar.newstar.net.cn/    </li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot博客（五）（前端）</title>
      <link href="/2020/11/30/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-wu-qian-duan/"/>
      <url>/2020/11/30/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-wu-qian-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot博客（五）（前端）"><a href="#springboot博客（五）（前端）" class="headerlink" title="springboot博客（五）（前端）"></a>springboot博客（五）（前端）</h1><h2 id="首页优化"><a href="#首页优化" class="headerlink" title="首页优化"></a>首页优化</h2><ol><li><p>博客图片居中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui middle aligned mobile reversed stackable grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ol><hr><h2 id="首页展示"><a href="#首页展示" class="headerlink" title="首页展示"></a>首页展示</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201130105435.png"></p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ol><li>可以分页查看所有的博客</li><li>可以快速查看博客数最多的6个分类</li><li>可以快速查看标记博客最多的10个标签</li><li>可以快速查看最新的推荐博客</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="首页数据获取（传参）"><a href="#首页数据获取（传参）" class="headerlink" title="首页数据获取（传参）"></a>首页数据获取（传参）</h4><ol><li><p>编写controller</p><ol><li><p>将blog、types、tags、recommendBlogs对象传入model</p><ol><li><p>blog（博客）</p><ol><li>service定义一个方法，只通过pageable查询</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">listBlog</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> blogRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>types（热门分类）</p><blockquote><p>types和tags比较特殊，需要满足以下条件</p><p>按照指定数量获取，并且根据所包含的blog集合的size来排序</p></blockquote><ol><li><p>service定义一个方法，参数为指定的数量，并规定其排序的方式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token function">listTypeTop</span><span class="token punctuation">(</span>Integer size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Sort sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">,</span><span class="token string">"blogs.size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按照blogs.size降序排序</span>    Pageable pageable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token punctuation">,</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从头查询，查Size个，按照sort方式排序</span>    <span class="token keyword">return</span> typeRepository<span class="token punctuation">.</span><span class="token function">findTop</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>dao层定义方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select t from Type t"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token function">findTop</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li><li><p>tags同上（热门标签）</p></li><li><p>recommendBlogs（推荐博客）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//只有dao有一些差别</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select b from Blog b where b.recommend = true"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">findTop</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li><li><p>编写controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">indexController</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PageableDefault</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>sort <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>direction <span class="token operator">=</span> Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span> Pageable pageable<span class="token punctuation">,</span>                              Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"blog"</span><span class="token punctuation">,</span>blogService<span class="token punctuation">.</span><span class="token function">listBlog</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"types"</span><span class="token punctuation">,</span>typeService<span class="token punctuation">.</span><span class="token function">listTypeTop</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"tags"</span><span class="token punctuation">,</span>tagService<span class="token punctuation">.</span><span class="token function">listTagTop</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"recommendBlogs"</span><span class="token punctuation">,</span>blogService<span class="token punctuation">.</span><span class="token function">listRecommendBlogTop</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol></li></ol><h4 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h4><ol><li><p>博客总数目</p><pre class=" language-html"><code class="language-html">共 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui orange header m-inline-block m-text-thin<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${page.totalElements}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 14 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span> 篇</code></pre><blockquote><p>遇到的坑：page找不到</p><p>page是controller传过来page对象的key值<code>model.addAttribute("page",blogService.listBlog(pageable));</code></p></blockquote></li><li><p>博客（循环）</p><ol><li>标题：增加链接，开启一个新标签页访问</li><li>描述</li><li>头像</li><li>作者昵称</li><li>更新日期</li><li>浏览次数</li><li>分类名称</li><li>首图：增加链接</li><li>注释掉其他的静态博客</li></ol><p>```html</p><div class="ui padded vertical segment m-padded-tb-large" th:each="blog : ${page.content}">     <h3 class="ui header"><a href="#" th:href="@{/blog/{id}(id=${blog.id})}" target="_blank" th:text="${blog.title}">标题</a></h3>    <p class="m-text" th:text="|${blog.description}......|">描述...</p><!--这里的||是thymeleaf模板的解析，作用是拼接字符串-->    <img src="https://unsplash.it/100/100?image=1005" th:src="@{${blog.user.avatar}}" alt="" class="ui avatar image">    <div class="content"><a href="#" class="header" th:text="${blog.user.nickname}">贾 民</a></div>    <i class="calendar icon"></i> </div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot博客（四）（后台管理之博客）</title>
      <link href="/2020/11/27/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-si-hou-tai-guan-li-zhi-bo-ke/"/>
      <url>/2020/11/27/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-si-hou-tai-guan-li-zhi-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot博客（四）（后台管理之博客）"><a href="#springboot博客（四）（后台管理之博客）" class="headerlink" title="springboot博客（四）（后台管理之博客）"></a>springboot博客（四）（后台管理之博客）</h1><h2 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h2><h3 id="博客管理"><a href="#博客管理" class="headerlink" title="博客管理"></a>博客管理</h3><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201130103628.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201130103831.png"></p><h4 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h4><ol><li>博客展示、博客新增页面搭建</li><li>博客分页查询：根据标题/分类/是否推荐查询（异步交互）</li><li>博客的增加、修改、删除</li><li>增加、修改时：标题、内容、首图、描述不能为空</li></ol><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="博客分页查询"><a href="#博客分页查询" class="headerlink" title="博客分页查询"></a><strong>博客分页查询</strong></h5><ol><li><p>创建BlogService/BlogServiceImpl/BlogRepository</p><p>注意条件查询的语法</p><p><strong>BlogServiceImpl</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BlogService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BlogRepository blogRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Blog <span class="token function">getBlog</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> blogRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">listBlog</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">,</span> Blog blog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        此方法需要两个参数，        1:Specification:用于根据情况拼接条件        2：pageable：分页查询         */</span>        <span class="token keyword">return</span> blogRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token operator">&lt;</span>Blog<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Predicate <span class="token function">toPredicate</span><span class="token punctuation">(</span>Root<span class="token operator">&lt;</span>Blog<span class="token operator">></span> root<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//将对象映射成root，从中获得表的字段，属性名</span>                                         CriteriaQuery<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cq<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//封装条件的容器</span>                                         CriteriaBuilder cb<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//条件表达式，从中可以获取like,==等</span>                <span class="token comment" spellcheck="true">//在此方法中写条件</span>                List<span class="token operator">&lt;</span>Predicate<span class="token operator">></span> predicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初期装条件用</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>blog<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果前端增加了标题title条件，则拼接这个条件</span>                    predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>&lt;String<span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token operator">+</span>blog<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//cb.like():就是sql语句中的like</span>                    <span class="token comment" spellcheck="true">//参数1：表达式（就是表字段），通过root获取</span>                    <span class="token comment" spellcheck="true">//参数2：值（就是前端传来的Blog中的值）</span>                    <span class="token comment" spellcheck="true">//拼接之后的结果：title like '%xxx%'</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果前端增加了分类type条件，则拼接这个条件</span>                    predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>&lt;Type<span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>blog<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">isCommentabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//isCommentabled()就是boolean的get方法，如果勾选则为true</span>                    predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>&lt;Boolean<span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"recommend"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>blog<span class="token punctuation">.</span><span class="token function">isCommentabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                cq<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>predicates<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token punctuation">[</span>predicates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//cq.where：最终封装所有条件</span>                <span class="token comment" spellcheck="true">//参数：数组，并指定长度</span>                <span class="token comment" spellcheck="true">//拼接之后的结果：where title like '%xxx%' and ...</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Blog <span class="token function">saveBlog</span><span class="token punctuation">(</span>Blog blog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Blog <span class="token function">updateBlog</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> Blog blog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Blog b <span class="token operator">=</span> blogRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotFindException</span><span class="token punctuation">(</span><span class="token string">"修改的博客不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>blog<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteBlog</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        blogRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>BlogRepository</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*继承关系JpaRepository&lt;Blog,Long>：用于使用Jpa语句JpaSpecificationExecutor&lt;Blog>：用于复杂条件查询，根据情况拼接条件 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Blog<span class="token punctuation">,</span>Long<span class="token operator">></span><span class="token punctuation">,</span> JpaSpecificationExecutor<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>编写controller</p><p>进入Blog的方法：blogs(Pageable pageable,Blog blog,Model model)</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BlogService blogService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">blogs</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PageableDefault</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>sort <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"updateTime"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>direction <span class="token operator">=</span> Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span> Pageable pageable<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//分页</span>                        Blog blog<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用于接收前端的blog数据</span>                        Model model<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//用于存blog</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span>blogService<span class="token punctuation">.</span><span class="token function">listBlog</span><span class="token punctuation">(</span>pageable<span class="token punctuation">,</span> blog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/admin/blogs"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>修改前端页面</p><ol><li><p>blogs.html</p><ol><li><p>前端迭代取值，编辑删除按钮</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog,iterStat : ${page.content}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${iterStat.count}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blog.title}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>刻意练习清单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blog.type.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>认知升级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blog.recommend}?<span class="token punctuation">'</span>是<span class="token punctuation">'</span>:<span class="token punctuation">'</span>否<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${blog.updateTime}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2017-10-02 09:45<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/blogs/{id}/input(id<span class="token punctuation">=</span>${blog.id})}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui mini teal basic button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/blogs/{id}/delete(id<span class="token punctuation">=</span>${blog.id})}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui mini red basic button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></code></pre></li><li><p>上下一页（因为需要获取表单的数据一起提交，所以需要将上下一页换成onclick，当作表单提交）：隐藏域，传递page，onclick，attr属性自定义属性，script方法将值绑定到隐藏域中，一起提交。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page(this)<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data-page<span class="token punctuation">=</span>${page.number}-1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${page.first}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page(this)<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data-page<span class="token punctuation">=</span>${page.number}+1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${page.last}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>//上下一页给hidden赋值    function page(obj) {      $("[name='page']").val($(obj).data("page"));      loaddata();<span class="token comment" spellcheck="true">&lt;!--这里是第四步添加的--></span>    }</code></pre></li><li><p>异步提交（提交controller只刷新局部页面，需要thymeleaf片段刷新+ajax异步刷新）</p><blockquote><p>实现功能：点击搜索/上下一页，只刷新博客列表的table</p><p>方法：</p><ol><li>给table设置一个fragment片段</li><li>点击搜索/上下一页通过ajax发送请求给controller</li><li>controller处理数据，返回一个片段，实现局部刷新</li></ol></blockquote><ol><li><p>给table设置一个fragment片段</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogList<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui compact teal table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>增加controller方法，跳转片段</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/blogs/search"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//post请求</span><span class="token keyword">public</span> String <span class="token function">search</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PageableDefault</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>sort <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"updateTime"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>direction <span class="token operator">=</span> Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span> Pageable pageable<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//分页</span>                     BlogQuery blog<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用于接收前端的blog数据</span>                     Model model<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//用于存blog</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span>blogService<span class="token punctuation">.</span><span class="token function">listBlog</span><span class="token punctuation">(</span>pageable<span class="token punctuation">,</span> blog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"/admin/blogs :: blogList"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//片段</span><span class="token punctuation">}</span></code></pre></li><li><p>ajax异步刷新方法</p><pre><code>function loaddata() {    $("#table-container").load(/*[[@{admin/blogs/search}]]*/"/admin/blogs/search",{    title : $("[name='title']").val(),    typeId : $("[name='typeId']").val(),    recommend : $("[name='recommend']").prop('checked'),    page : $("[name='page']").val()    });}</code></pre></li><li><p>增加异步刷新方法的div，修改hidden隐藏域type为typeId</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--把表单包裹里面--></span></code></pre></li><li><p>page方法增加ajax方法</p><pre><code> loaddata();</code></pre></li><li><p>form表单改为div，search按钮变为button，通过jquery方法提交</p><pre><code>&lt;div  class="ui secondary segment form"&gt;    &lt;button type="button" id="search-btn" class="ui mini teal basic button"&gt;&lt;i class="search icon"&gt;&lt;/i&gt;搜索&lt;/button&gt;$("#search-btn").click(function () {    loaddata();});</code></pre></li></ol></li><li><p>显示分类下拉菜单</p><ol><li><p>在controller中使用typeService查询出所有分类</p><ol><li><p>需要先定义查询所有分类的方法，不需要分页查询</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token function">listType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> typeRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>存入model中</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在controller的blogs方法中添加，即第一次访问时查询分类</span><span class="token comment" spellcheck="true">//保存type下拉菜单数据</span>model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"types"</span><span class="token punctuation">,</span>typeService<span class="token punctuation">.</span><span class="token function">listType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li><li><p>前端渲染：</p><ol><li><p>遍历赋值，data-value,text</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type : ${types}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>data-value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${type.id}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${type.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>错误日志<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p>解决空指针（发现blog.gettype()是空指针）</p><ol><li><p>新建一个包：vo，创建一个实体类BlogQuery用于封装查询信息</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogQuery</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long typeId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> recommend<span class="token punctuation">;</span></code></pre></li><li><p>修改controller、service的Blog换位BlogQuery类型</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">blogs</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PageableDefault</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>sort <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"updateTime"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>direction <span class="token operator">=</span> Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span> Pageable pageable<span class="token punctuation">,</span>                    BlogQuery blog<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这里从Blog对象换位了BlogQuery，专门存前端传过来的条件</span>                    Model model<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li><li><p>判断条件改为查询对象中获取typeid</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">getTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里换成从blogQuery判断，不会出现空指针</span>    <span class="token comment" spellcheck="true">//如果前端增加了分类type条件，则拼接这个条件</span>    predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>&lt;Type<span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>blog<span class="token punctuation">.</span><span class="token function">getTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol></li></ol></li></ol></li></ol></li></ol><h5 id="博客添加"><a href="#博客添加" class="headerlink" title="博客添加"></a><strong>博客添加</strong></h5><ol><li><p>修改资源引入</p><ol><li><p>将抽取的片段资源引入加入editmd</p></li><li><p>检查blogs-input.html是否引入正确</p><pre><code>&lt;link rel="stylesheet" href="../../static/lib/editormd/css/editormd.min.css" th:href="@{/lib/editormd/css/editormd.min.css}"&gt;&lt;script src="../../static/lib/editormd/editormd.min.js" th:src="@{/lib/editormd/editormd.min.js}"&gt;&lt;/script&gt;</code></pre></li></ol></li><li><p>检查修改blogs-input.html中的表单name值是否与实体类匹配</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"type.id"</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"tagIds"</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"firstPicture"</span> placeholder<span class="token operator">=</span><span class="token string">"首图引用地址"</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> id<span class="token operator">=</span><span class="token string">"shareStatement"</span> name<span class="token operator">=</span><span class="token string">"shareStatement"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hidden"</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> id<span class="token operator">=</span><span class="token string">"commentabled"</span> name<span class="token operator">=</span><span class="token string">"commentabled"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hidden"</span><span class="token operator">></span></code></pre></li><li><p>保存、发布按钮的处理（将published值也传入表单中提交）</p><ol><li><p>增加隐含域published</p></li><li><p>保存发布按钮修改</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save-btn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui secondary button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>保存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>publish-btn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui teal button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发布<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改form表单</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog-form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/blogs}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>增加jquery方法提交表单</p><pre><code>//保存按钮$('#save-btn').click(function () {    $('[name="published"]').val(false);    $('#blog-form').submit();});//提交按钮$('#publish-btn').click(function () {    $('[name="published"]').val(true);    $('#blog-form').submit();})</code></pre></li></ol></li><li><p>前端非空校验</p><pre><code>// 标题、内容、分类、首图非空$('.ui.form').form({      fields : {        title : {          identifier: 'title',          rules: [{            type : 'empty',            prompt: '标题：请输入博客标题'          }]        },        content : {          identifier: 'content',          rules: [{            type : 'empty',            prompt: '标题：请输入博客内容'          }]        },        typeId : {          identifier: 'typeId',          rules: [{            type : 'empty',            prompt: '标题：请输入博客分类'          }]        },        firstPicture : {          identifier: 'firstPicture',          rules: [{            type : 'empty',            prompt: '标题：请输入博客首图'          }]        }      }    });</code></pre></li><li><p>跳转新增页面方法</p><ol><li><p>优化return，<code>static final</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String INPUT <span class="token operator">=</span> <span class="token string">"/admin/blogs-input"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LIST <span class="token operator">=</span> <span class="token string">"/admin/blogs"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REDIRECT_LIST <span class="token operator">=</span> <span class="token string">"redirect:/admin/blogs"</span><span class="token punctuation">;</span><span class="token keyword">public</span> String <span class="token function">blogs</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> LIST<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>controller定义方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/blogs/input"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">input</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"blog"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入一个空的blog，避免新增、修改并用页面中的${blog}报空指针</span>    <span class="token comment" spellcheck="true">//保存type下拉菜单数据</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"types"</span><span class="token punctuation">,</span>typeService<span class="token punctuation">.</span><span class="token function">listType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存tag下拉菜单数据</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"tags"</span><span class="token punctuation">,</span>tagService<span class="token punctuation">.</span><span class="token function">listTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> INPUT<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>增加查询所有tag的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Tag<span class="token operator">></span> <span class="token function">listTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> tagRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>前端遍历分类、标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type : ${types}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span>  <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>data-value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${type.id}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${type.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>错误日志<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag : ${tags}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span>  <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>data-value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${tag.id}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${tag.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>前端blogs.html增加href属性，指向跳转方法</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/blogs/input}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui mini right floated teal basic button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改jquery的md编辑器的路径</p><pre><code>$(function() {    contentEditor = editormd("md-content", {        width   : "100%",        height  : 640,        syncScrolling : "single",        //path    : "../../static/lib/editormd/lib/"        path    : "/lib/editormd/lib/"    });});</code></pre></li><li><p>修改md编辑器的宽度</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-container m-padded-tb-big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p>新增功能</p><ol><li><p>controller新增方法</p><ol><li><p>获取session中的user对象，存入blog对象中</p></li><li><p>设置type初始值到blog对象中</p></li><li><p>设置tag初始值到blog对象中</p><ol><li><p>service增加查询tags的方法</p><blockquote><p>前端传过来的是一个ids的标签id字符串，1,2,3。</p><p>将字符串按照,分割成数组，再遍历数组插入到集合当中</p></blockquote></li><li><p>在blog实体类增加属性tagIds</p><ol><li>只是一个属性值，不和数据库一一映射，@Transient</li><li>set/get</li></ol></li></ol></li><li><p>保存</p></li><li><p>增加消息提示</p></li></ol><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">post</span><span class="token punctuation">(</span>Blog blog<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">,</span> RedirectAttributes attributes<span class="token punctuation">)</span><span class="token punctuation">{</span>        blog<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从session中将user传入blog</span>        blog<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>typeService<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从增加条件中的id获取真正type对象传入blog</span>        blog<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span>tagService<span class="token punctuation">.</span><span class="token function">listTag</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">getIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从增加条件中的ids获取tag对象传入blog</span>        Blog blog1 <span class="token operator">=</span> blogService<span class="token punctuation">.</span><span class="token function">saveBlog</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存方法</span>        <span class="token comment" spellcheck="true">//增加消息提示</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>blog1<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            attributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"增加成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            attributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"增加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> REDIRECT_LIST<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>Service保存方法</p><ol><li>设置初始值<ol><li>createTime、updateTime、views</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Blog <span class="token function">saveBlog</span><span class="token punctuation">(</span>Blog blog<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化值</span>    blog<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blog<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blog<span class="token punctuation">.</span><span class="token function">setViews</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>service保存、更新、删除放在事务里</p><ol><li>@transactional</li></ol></li><li><p>前端增加消息提示</p><ol><li><p>增加提示框的div</p><p>```html</p><!--新增操作成功/失败提示框--></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台非空校验</title>
      <link href="/2020/11/26/xiang-mu/ge-ren-bo-ke-wang-zhan/hou-tai-fei-kong-xiao-yan/"/>
      <url>/2020/11/26/xiang-mu/ge-ren-bo-ke-wang-zhan/hou-tai-fei-kong-xiao-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="后台非空校验"><a href="#后台非空校验" class="headerlink" title="后台非空校验"></a>后台非空校验</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做个人博客项目的时候，其中分类管理模块实现的一个功能：新增分类不能为空，需要在后台加上非空校验。涉及到springboot+thymeleaf，这里总结一下。</p><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_type"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*通过注解的方式，添加校验    * name不能为空    * 使用注解@NotBlank(message = "分类名称不能为空")    * 如果为空，后台将会抛出异常    * */</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"分类名称不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分类名称</span><span class="token punctuation">}</span></code></pre><blockquote><p>其他的校验方式：</p><pre class=" language-java"><code class="language-java">JSR提供的校验注解：         <span class="token annotation punctuation">@Null</span>   被注释的元素必须为 null    <span class="token annotation punctuation">@NotNull</span>    被注释的元素必须不为 null    <span class="token annotation punctuation">@AssertTrue</span>     被注释的元素必须为 <span class="token boolean">true</span>    <span class="token annotation punctuation">@AssertFalse</span>    被注释的元素必须为 <span class="token boolean">false</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>     被注释的元素必须是一个数字，其值必须大于等于指定的最小值    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>     被注释的元素必须是一个数字，其值必须小于等于指定的最大值    <span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  被注释的元素必须是一个数字，其值必须大于等于指定的最小值    <span class="token annotation punctuation">@DecimalMax</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  被注释的元素必须是一个数字，其值必须小于等于指定的最大值    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max<span class="token operator">=</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token punctuation">)</span>   被注释的元素的大小必须在指定的范围内    <span class="token annotation punctuation">@Digits</span> <span class="token punctuation">(</span>integer<span class="token punctuation">,</span> fraction<span class="token punctuation">)</span>     被注释的元素必须是一个数字，其值必须在可接受的范围内    <span class="token annotation punctuation">@Past</span>   被注释的元素必须是一个过去的日期    <span class="token annotation punctuation">@Future</span>     被注释的元素必须是一个将来的日期    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regex<span class="token operator">=</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token punctuation">)</span>  被注释的元素必须符合指定的正则表达式      Hibernate Validator提供的校验注解：  <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span><span class="token punctuation">)</span>   验证字符串非null，且长度必须大于<span class="token number">0</span>    <span class="token annotation punctuation">@Email</span>  被注释的元素必须是电子邮箱地址    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token punctuation">)</span>  被注释的字符串的大小必须在指定的范围内    <span class="token annotation punctuation">@NotEmpty</span>   被注释的字符串的必须非空    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token punctuation">)</span>  被注释的元素必须在合适的范围内</code></pre></blockquote><h2 id="前端界面"><a href="#前端界面" class="headerlink" title="前端界面"></a>前端界面</h2><p>```html</p><!--增加th:object="${type}"：将表单与实体类绑定，以后用*{}可直接取其属性值--><form action="#" method="post" th:action="@{/admin/types}" th:object="${type}" class="ui form"><!--增加th:value="*{name}"：能直接取出th:object绑定对象的属性,为了回显数据--><input type="text" name="name" placeholder="分类名称" th:value="*{name}"><!--显示错误信息--></form>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh框架整合</title>
      <link href="/2020/11/26/ssh-kuang-jia/ssh-zheng-he/"/>
      <url>/2020/11/26/ssh-kuang-jia/ssh-zheng-he/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH整合"><a href="#SSH整合" class="headerlink" title="SSH整合"></a>SSH整合</h1><blockquote><p>环境：</p><p>jdk7，Tomcat8</p><p>Myeclipse，mysql</p></blockquote><p><strong>创建Web项目</strong></p><h2 id="添加Spring开发功能"><a href="#添加Spring开发功能" class="headerlink" title="添加Spring开发功能"></a><strong>添加Spring开发功能</strong></h2><ol><li><p>右键项目，Myeclipse，Project Facet，选择Spring</p></li><li><p>勾选“Spring Persistence”jar包，如下图所示。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201126172351.png"></p></li></ol><h2 id="添加Hibernate开发功能"><a href="#添加Hibernate开发功能" class="headerlink" title="添加Hibernate开发功能"></a><strong>添加Hibernate开发功能</strong></h2><ol><li><p>右键项目，Myeclipse，Project Facet，选择Habernate</p></li><li><p>取消勾选“Create SessionFactory class？”，如下图所示</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201126172714.png"></p></li><li><p>在applicationContext.xml文件中dataSource的bean中设置加载驱动</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--添加此处--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>新建model包，反向生成POJO类，并注意改POJO类中的照片的格式为byte[]类型，以及POJO类的映射文件中，照片字段的“type=”java.lang.String””删除掉；</p><ol><li><p>反向生成需要Myeclipse先连接数据库</p><ol><li><p>右上角增加Database Explorer</p></li><li><p>右键数据库new</p><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20201126173630.png" style="zoom:60%;"></li></ol></li><li><p>反向生成javabean</p><p>选择Hibernate，需要注意的几点：</p><ol><li>勾选前两个对勾</li><li>选择主键生成策略：assigned为默认，native为自增</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201126173809.png"></p></li></ol></li></ol><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20201126174213.png" style="zoom:60%;"><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20201126174318.png" style="zoom:60%;"><ol start="5"><li><p>新建dao包，编写添加学生信息的DAO；</p><ol><li>这里需要编写一个获得session的类BaseDao，配置bean</li><li>编写impl实现类，配置bean</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//继承BaseDao</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Xsb xs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Session session <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//BaseDao工具类获取session</span>        Transaction ts <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启事务</span>        session<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>xs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存操作</span>        ts<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交事务</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭session</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Xsb <span class="token function">findOne</span><span class="token punctuation">(</span>Integer xh<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Session session <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction ts <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token string">"from Xsb where xh = ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询</span>        query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> xh<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置？号</span>        List<span class="token operator">&lt;</span>Xsb<span class="token operator">></span> list<span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历</span>        Xsb user <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询一个时，可以直接获得第一个</span>        ts<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token operator">!=</span>null<span class="token punctuation">)</span>            <span class="token keyword">return</span> user<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Xsb<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Session session <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction ts <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token string">"from Xsb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Xsb<span class="token operator">></span> list <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">!=</span>null<span class="token punctuation">)</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.jk.dao.BaseDao<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--set方法注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.jk.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--指定父类--></span>    </code></pre><blockquote><p>spring的set方法注入：</p><ol><li>在类中声明</li><li>生成get/set方法</li><li>配置文件中配置<code>property</code></li></ol></blockquote><ol start="6"><li><p>新建service包，编写添加学生信息的service</p><ol><li><p>编写impl实现类，配置bean</p><ol><li>注入dao</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.jk.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userdao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ol><h2 id="添加Struts2开发功能"><a href="#添加Struts2开发功能" class="headerlink" title="添加Struts2开发功能"></a><strong>添加Struts2开发功能</strong></h2><p>加入jsp页面</p><ol><li><p>添加jar包；</p></li><li><p>创建struts.xml：src目录下</p><p>整合细节：action的class属性值为applicationContext.xml文件中注入的action的id</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE struts PUBLIC    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"    "http://struts.apache.org/dtds/struts-2.0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>struts</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>struts-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addXsView<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAction<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addXsView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/addXsInfo.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>struts</span><span class="token punctuation">></span></span></code></pre><blockquote><p>解释：</p><p>package：</p><ol><li>name：必须，随意取</li><li>extends：必须，用于识别这些struts标签</li></ol><p>action：</p><ol><li>name：请求链接</li><li>class：applicationContext.xml文件中注入的action类的bean的id</li><li>method：指定执行哪个方法，不指定就默认执行excute方法</li></ol><p>result：</p><ol><li>name：action方法返回的字符串</li><li>值：地址</li></ol></blockquote></li><li><p>在web.xml中添加过滤器；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>struts2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>actionPackages<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>com.mycompany.myapp.actions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>struts2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建struts.properties文件（写的代码为struts.objectFactory=spring）</p><p>ssh整合的关键，表示struts.xml使用spring来加载Bean</p></li><li><p>新建action包，创建action</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">userAction</span> <span class="token keyword">extends</span> <span class="token class-name">ActionSupport</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//action需要继承ActionSupport</span>        <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set方法注入</span>    <span class="token keyword">public</span> UserService <span class="token function">getUserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Xsb xs<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取前端表单传来的值</span>        <span class="token keyword">public</span> Xsb <span class="token function">getXs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> xs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXs</span><span class="token punctuation">(</span>Xsb xs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>xs <span class="token operator">=</span> xs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Integer xh1<span class="token operator">=</span>xs<span class="token punctuation">.</span><span class="token function">getXh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>xh1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Xsb xs1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Xsb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先创建一个对象</span>        xs1<span class="token punctuation">.</span><span class="token function">setXh</span><span class="token punctuation">(</span>xs<span class="token punctuation">.</span><span class="token function">getXh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将获取的值传入新对象中</span>        xs1<span class="token punctuation">.</span><span class="token function">setXm</span><span class="token punctuation">(</span>xs<span class="token punctuation">.</span><span class="token function">getXm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xs1<span class="token punctuation">.</span><span class="token function">setXb</span><span class="token punctuation">(</span>xs<span class="token punctuation">.</span><span class="token function">getXb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xs1<span class="token punctuation">.</span><span class="token function">setCssj</span><span class="token punctuation">(</span>xs<span class="token punctuation">.</span><span class="token function">getCssj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xs1<span class="token punctuation">.</span><span class="token function">setBz</span><span class="token punctuation">(</span>xs<span class="token punctuation">.</span><span class="token function">getBz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>xs1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存新对象</span>        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//SUCCESS是struts内部定义的字符串，使用时大写，不加双引号，也可以自己返回字符串，如"ok"</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">addXsView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">xsInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得request对象</span>        List<span class="token operator">&lt;</span>Xsb<span class="token operator">></span> list <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将值保存到request中</span>        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>struts获取前端的值：</p><ol><li><p>类中声明对象，不用创建</p></li><li><p>生成get/set方法</p></li><li><p>修改表单对应的数据</p><pre><code>&lt;s:form action="addXs" method="post" enctype="multipart/form-data"&gt;&lt;!--使用s:form--&gt;    &lt;table border="0" cellspacing="0" cellpadding="1"&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;s:textfield name="xs.xh" label="学号" value=""&gt;&lt;/s:textfield&gt;&lt;!--xs为类中声明的变量名，xh为对象的属性--&gt;            &lt;/td&gt;        &lt;/tr&gt;</code></pre></li><li><p>这时提交表单，数据就会保存在对象中。但是保存操作时，因为对象没有实例化，所以不能直接保存。需要先new一个新的对象，用set和get方法将数据保存进新对象中</p></li></ol><p>获取request对象的方法：</p><ol><li><code>HttpServletRequest request = ServletActionContext.getRequest();</code></li></ol></blockquote><pre><code>&lt;s:iterator value="#request.list" id="xs"&gt;&lt;!--遍历获取值--&gt;    &lt;tr&gt;        &lt;td&gt;&lt;s:property value="#xs.xh"/&gt;&lt;/td&gt;&lt;!--显示值--&gt;        &lt;td&gt;&lt;s:property value="#xs.xm"/&gt;&lt;/td&gt;        &lt;td&gt;            &lt;s:if test="#xs.xb==1"&gt;男&lt;/s:if&gt;            &lt;s:else&gt;女&lt;/s:else&gt;        &lt;/td&gt;        &lt;td&gt;&lt;s:property value="#xs.cssj"/&gt;&lt;/td&gt;        &lt;td&gt;&lt;s:property value="#xs.zxf"/&gt;&lt;/td&gt;        &lt;td&gt;            &lt;a href="findXs .action?xs.xh=&lt;s:property value="#xs.xh"/&gt;"&gt;详细信息&lt;/a&gt;        &lt;/td&gt;    &lt;/tr&gt;&lt;/s:iterator&gt;</code></pre></li></ol><blockquote><p>遇到的坑：</p><ol><li><p>404或者提交表单出现空指针异常</p><p>原因：baseDao的bean没有配置完成，检查applicationContext.xml</p></li></ol></blockquote><h2 id="最终的配置文件"><a href="#最终的配置文件" class="headerlink" title="最终的配置文件"></a><strong>最终的配置文件</strong></h2><p>application.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate4.LocalSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernateProperties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.dialect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    org.hibernate.dialect.MySQLDialect                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mappingResources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com/jk/model/User.hbm.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com/jk/model/Xsb.hbm.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate4.HibernateTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--以下为手动配置的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.jk.dao.BaseDao<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.jk.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.jk.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userdao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAction<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.jk.action.userAction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>struts.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE struts PUBLIC    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"    "http://struts.apache.org/dtds/struts-2.0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>struts</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>struts-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addXsView<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAction<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addXsView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/addXsInfo.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addXs<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAction<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/success.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/existXs.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xsInfo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAction<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xsInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/xsInfo.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>struts</span><span class="token punctuation">></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20201126183724.png" style="zoom:80%;"><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20201126183724.png" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> ssh框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot博客（三）（后台管理之分类标签）</title>
      <link href="/2020/11/23/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-san-hou-tai-guan-li-zhi-fen-lei-biao-qian/"/>
      <url>/2020/11/23/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-san-hou-tai-guan-li-zhi-fen-lei-biao-qian/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot博客（三）（后台管理之分类标签）"><a href="#springboot博客（三）（后台管理之分类标签）" class="headerlink" title="springboot博客（三）（后台管理之分类标签）"></a>springboot博客（三）（后台管理之分类标签）</h1><h2 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h2><h3 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h3><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201130103146.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201130103242.png"></p><h4 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h4><ol><li>分类显示、分类新增页面搭建</li><li>分类新增、修改、删除</li><li>分类上下一页展示</li><li>分类不能为空，不能重复</li></ol><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p>分类管理页面</p><p>复制blogs的页面进行修改</p></li><li><p>分类列表页面</p><p>复制blogs-input的页面进行修改</p></li><li><p><strong>分类新增</strong>、修改、删除</p><ol><li><p>创建<code>TypeService，TypeServiceImpl，TypeRepostory</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TypeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TypeRepository typeRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Type <span class="token function">saveType</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> typeRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Type <span class="token function">getType</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> typeRepository<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">/*    pageable是springboot自带的分页工具    */</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token function">listType</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> typeRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Type <span class="token function">updateType</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Type t <span class="token operator">=</span> typeRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询到分类</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotFindException</span><span class="token punctuation">(</span><span class="token string">"不存在该分类！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将分类覆盖到查到的对象中，实现更新</span>        <span class="token keyword">return</span> typeRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将其保存到数据库</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteType</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        typeRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TypeRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Type<span class="token punctuation">,</span>Long<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>创建<code>Typecontroller</code>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TypeService typeService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/types"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//参数pageable：springboot会将分页的数据封装进这里，每页显示数量8，id倒叙排序</span>    <span class="token keyword">public</span> String <span class="token function">types</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PageableDefault</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>sort <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>direction <span class="token operator">=</span> Sort<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span> Pageable pageable<span class="token punctuation">,</span>                        Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span>typeService<span class="token punctuation">.</span><span class="token function">listType</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"/admin/types"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>修改页面</p><p><strong>page发送到前端的数据：</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"content"</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog122"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog121"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog120"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog119"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog118"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog117"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog116"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog115"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog114"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog113"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog112"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog111"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog110"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog109"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"blog108"</span><span class="token punctuation">,</span><span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"this is blog content"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"last"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"totalPages"</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span>  <span class="token property">"totalElements"</span><span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span>  <span class="token property">"number"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"first"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"direction"</span><span class="token operator">:</span><span class="token string">"DESC"</span><span class="token punctuation">,</span>    <span class="token property">"property"</span><span class="token operator">:</span><span class="token string">"id"</span><span class="token punctuation">,</span>    <span class="token property">"ignoreCase"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"nullHandling"</span><span class="token operator">:</span><span class="token string">"NATIVE"</span><span class="token punctuation">,</span>    <span class="token property">"ascending"</span><span class="token operator">:</span><span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"numberOfElements"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">}</span></code></pre><ol><li>types.html</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type,iterStat : ${page.content}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--${page.content}：分类的信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${iterStat.count}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${type.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>刻意练习清单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/types/{id}/input/(id<span class="token punctuation">=</span>${type.id})}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui mini teal basic button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--id会赋给{id}，从而赋值给controller中的参数id--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/types/{id}/delete/(id<span class="token punctuation">=</span>${type.id})}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui mini red basic button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui mini pagination menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/types(page<span class="token punctuation">=</span>${page.number}-1)}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                 <span class="token comment" spellcheck="true">&lt;!--传参page会被封装进controller的pageable中，实现上下页转换--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/types(page<span class="token punctuation">=</span>${page.number}+1})}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/types/input}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui mini right floated teal basic button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>_fragment.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/blogs}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>classappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${n<span class="token punctuation">=</span><span class="token punctuation">=</span>1}?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini home icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/types}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> m-item item m-mobile-hide<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>classappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${n<span class="token punctuation">=</span><span class="token punctuation">=</span>2}?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini idea icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/tags}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>classappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${n<span class="token punctuation">=</span><span class="token punctuation">=</span>3}?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini tags icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p><strong>跳转新增分类页面，新增分类</strong></p><p>编写typeController</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    跳转新增分类页面     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/types/input"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"/admin/types-input"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    新增分类     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/types"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">post</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//表单提交的name会封装进type对象中</span>        Type t <span class="token operator">=</span> typeService<span class="token punctuation">.</span><span class="token function">saveType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/admin/types"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>编写types-input.html</p><pre class=" language-html"><code class="language-html">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/types}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--此处增加action，post请求--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui left labeled input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui teal basic label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>分类名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui error message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui right aligned container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>window.history.go(-1)<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>返回<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui teal submit button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--此处增加submit--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>让上下一页按条件隐藏</strong></p><p>编写types.html页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui mini pagination menu<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${page.totalPages}<span class="token punctuation">></span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--总页数>1--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/types(page<span class="token punctuation">=</span>${page.number}-1)}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${page.first}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--传参page会被封装进controller的pageable中，实现上下页转换--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/admin/types(page<span class="token punctuation">=</span>${page.number}+1)}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${page.last}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>增加 添加成功/失败的反馈消息</strong></p><ol><li><p>controller中用redirectAttribute保存消息</p></li><li><p>在types.html页面增加组件接收消息</p><p>```html</p><!--新增操作成功/失败提示框--></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot博客（二）（后台管理）</title>
      <link href="/2020/11/22/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-er-hou-tai-guan-li-zhi-deng-lu/"/>
      <url>/2020/11/22/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-er-hou-tai-guan-li-zhi-deng-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot博客（二）（后台管理之登录）"><a href="#springboot博客（二）（后台管理之登录）" class="headerlink" title="springboot博客（二）（后台管理之登录）"></a>springboot博客（二）（后台管理之登录）</h1><h2 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201130102036.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201130103100.png"></p><h4 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h4><ol><li>登录页面、后台管理首页搭建</li><li>用户名、密码校验，跳转到管理页面</li><li>用户名密码不能为空</li><li>密码MD5加密</li><li>未登录不能直接进入管理首页</li></ol><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p>构建登陆页面和后台管理首页</p><ol><li>登陆页面：head/javascrpit保留，从<a href="https://semantic-ui.com/examples/login.html">semantic</a>拷贝登录页面</li><li>后台管理首页：拷贝admin/index页面</li><li>公用页面：从原共有页面拷贝，换位admin的nav导航，使用fragment引用布局</li></ol></li><li><p>UserService和UserRepository</p><ol><li>UserService：<code>checkUser()</code></li><li>UserRepository：继承jpa，<code>findByUsernameAndPassword(String username,String password)</code></li></ol><blockquote><p>这里主要是获取数据库中的用户名和密码，通过控制器传递过来的密码进行解析匹配，匹配成功则登录</p></blockquote></li><li><p>LoginController实现登录</p><blockquote><ul><li>登录校验：将前端传递过来的用户名和密码给service进行检验核对，并放入session域中（session是全局的，登录后访问其他页面或者重开页面也是登录状态）</li><li>登录成功跳转后台管理页面，失败则跳转登录页面</li><li>登录成功后可以进行注销，注销后返回登录页面</li></ul></blockquote><ol><li><p>admin：跳转到登录页面</p></li><li><p>login：判断用户，进行登录（正确转发，错误重定向），正确存session，错误存RedirectAttributes错误信息</p></li><li><p>logout：移除Session，重定向<code>redirect:/admin</code></p></li><li><p>指定表单action,登录按钮div换成button,给前端页面登出按钮增加href（在抽取的模板中修改）</p></li><li><p>在数据库存个信息</p></li><li><p>增加验证：用户名密码不能为空，</p></li><li><p>增加（原本的消息提示框是验证的提示框，所以需要自己写一个）提示消息框</p><p>```html</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot博客（一）（环境搭建）</title>
      <link href="/2020/11/15/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-yi-huan-jing-da-jian/"/>
      <url>/2020/11/15/xiang-mu/ge-ren-bo-ke-wang-zhan/springboot-bo-ke-yi-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot博客（一）（环境搭建）"><a href="#springboot博客（一）（环境搭建）" class="headerlink" title="springboot博客（一）（环境搭建）"></a>springboot博客（一）（环境搭建）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一篇关于springboot的个人博客后端搭建详细过程，关于前端页面的编写这里不再详细赘述，但后端用到的thymeleaf渲染页面和一些关键jquery也会记录在内。话不多说，我们现在就开始吧！</p><p>关于具体搭建过程请移步到<strong>环境搭建、页面处理</strong></p><blockquote><p><strong>技术选型：</strong></p><ul><li> 后端：Spring Boot + JPA + thymeleaf模板</li><li> 数据库：MySQL</li><li> 前端UI：Semantic UI框架</li></ul><p><strong>工具与环境：</strong></p><ul><li> IDEA</li><li> Maven 3</li><li> JDK 8</li></ul></blockquote><h2 id="需求与功能"><a href="#需求与功能" class="headerlink" title="需求与功能"></a>需求与功能</h2><h3 id="1-1-用户故事"><a href="#1-1-用户故事" class="headerlink" title="1.1 用户故事"></a>1.1 用户故事</h3><p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p><p><strong>用户故事模板</strong>：</p><ul><li> 作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li></ul><p><strong>关键点</strong>：角色、功能、商业价值</p><p><strong>举例</strong>：</p><ul><li> 作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li><li> 作为公司，可以张贴新工作。</li></ul><p>个人博客系统的用户故事：</p><p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p><ul><li> 访客，可以分页查看所有的博客</li><li> 访客，可以快速查看博客数最多的6个分类</li><li> 访客，可以查看所有的分类</li><li> 访客，可以查看某个分类下的博客列表</li><li> 访客，可以快速查看标记博客最多的10个标签</li><li> 访客，可以查看所有的标签</li><li> 访客，可以查看某个标签下的博客列表</li><li> 访客，可以根据年度时间线查看博客列表</li><li> 访客，可以快速查看最新的推荐博客</li><li> 访客，可以用关键字全局搜索博客</li><li> 访客，可以查看单个博客内容</li><li> 访客，可以对博客内容进行评论</li><li> 访客，可以赞赏博客内容</li><li> 访客，可以微信扫码阅读博客内容</li><li> 访客，可以在首页扫描公众号二维码关注我</li><li> 我，可以用户名和密码登录后台管理</li><li>我，可以管理博客<ul><li> 我，可以发布新博客</li><li> 我，可以对博客进行分类</li><li> 我，可以对博客打标签</li><li> 我，可以修改博客</li><li> 我，可以删除博客</li><li> 我，可以根据标题，分类，标签查询博客</li></ul></li><li>我，可以管理博客分类<ul><li> 我，可以新增一个分类</li><li> 我，可以修改一个分类</li><li> 我，可以删除一个分类</li><li> 我，可以根据分类名称查询分类</li></ul></li><li>我，可以管理标签<ul><li> 我，可以新增一个标签</li><li> 我，可以修改一个标签</li><li> 我，可以删除一个标签</li><li> 我，可以根据名称查询标签</li></ul></li></ul><h3 id="1-2-功能规划"><a href="#1-2-功能规划" class="headerlink" title="1.2 功能规划"></a>1.2 功能规划</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201130113147.png"></p><hr><h2 id="2、页面设计与开发"><a href="#2、页面设计与开发" class="headerlink" title="2、页面设计与开发"></a>2、页面设计与开发</h2><h3 id="2-1-设计"><a href="#2-1-设计" class="headerlink" title="2.1 设计"></a>2.1 设计</h3><p><strong>页面规划：</strong></p><p>前端展示：首页、详情页、分类、标签、归档、关于我</p><p>后台管理：登录页、后台首页、博客、分类、标签</p><h3 id="2-2-页面开发"><a href="#2-2-页面开发" class="headerlink" title="2.2 页面开发"></a>2.2 页面开发</h3><p><a href="https://semantic-ui.com/">Semantic UI官网</a></p><p><a href="http://www.semantic-ui.cn/">Semantic UI中文官网</a></p><p><a href="https://imcoding.me/blogs/5">WebStorm下载与破解</a></p><p><a href="https://www.toptal.com/designers/subtlepatterns/">背景图片资源</a></p><h3 id="2-3-插件集成"><a href="#2-3-插件集成" class="headerlink" title="2.3 插件集成"></a>2.3 插件集成</h3><p><a href="https://pandao.github.io/editor.md/">编辑器 Markdown</a></p><p><a href="https://github.com/sofish/typo.css">内容排版 typo.css</a></p><p><a href="https://daneden.github.io/animate.css/">动画 animate.css</a></p><p><a href="https://github.com/PrismJS/prism">代码高亮 prism</a></p><p><a href="https://tscanlin.github.io/tocbot/">目录生成 Tocbot</a></p><p><a href="http://imakewebthings.com/waypoints/">滚动侦测 waypoints</a></p><p><a href="https://github.com/flesler/jquery.scrollTo">平滑滚动 jquery.scrollTo</a></p><p><a href="https://davidshimjs.github.io/qrcodejs/">二维码生成 qrcode.js</a></p><hr><h2 id="环境搭建、页面处理"><a href="#环境搭建、页面处理" class="headerlink" title="环境搭建、页面处理"></a><strong>环境搭建、页面处理</strong></h2><h3 id="1-环境构建"><a href="#1-环境构建" class="headerlink" title="1. 环境构建"></a>1. 环境构建</h3><ol><li><p>创建springboot工程，jdk8</p></li><li><p>引入模块</p><ol><li>web</li><li>Thymeleaf</li><li>JPA</li><li>Mysql</li><li>Aspects</li><li>DevTools</li></ol><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--这里thymeleaf使用3.x的版本--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf.version</span><span class="token punctuation">></span></span>3.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atlassian.commonmark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commonmark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atlassian.commonmark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commonmark-ext-heading-anchor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atlassian.commonmark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commonmark-ext-gfm-tables<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置文件application.yml</p><pre class=" language-yml"><code class="language-yml">spring:  thymeleaf:    mode: HTML  profiles:    active: dev</code></pre><p>application-dev.yml</p><blockquote><p>需要提前创建好数据库</p></blockquote><pre class=" language-yml"><code class="language-yml">spring:  datasource:    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://localhost:3306/myblog?useUnicode=true&characterEncoding=utf-8    username: root    password: 1234  jpa: #所有Jpa的配置项都在jpaProperties中    hibernate:      ddl-auto: update #更新或创建数据表结构    show-sql: true #控制台显示sqllogging:  level:    root: info    top.jm: debug  file: log/myblog-dev.log</code></pre><p>application-pro.xml</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://localhost:3306/myblog?useUnicode=true&characterEncoding=utf-8    username: root    password: 1234  jpa:    hibernate:      ddl-auto: none    show-sql: truelogging:  level:    root: warn    top.jm: info  file: log/myblog-pro.log</code></pre><p>SpringBoot中有日志默认的生成以及切分，在这里我们可以重写SpringBoot默认日志配置，自定义日志大小和名称等等，在资源文件夹下添加logback-spring.xml进行配置</p></li></ol><h3 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2. 异常处理"></a>2. 异常处理</h3><blockquote><p>在页面访问的时候，会有一些比较常见的异常报错信息，比如路径无法访问404异常、服务器错误500异常以及自己定义的错误页面等等，SpringBoot框架提供了处理错误页面的方法，在这里，咱们对404、500、error异常页面进行处理。</p></blockquote><ol><li><p>在<code>resources/templates</code>下创建<code>error</code>文件夹，创建404/500/error.html，springboot在出现该状态码时会自动在该目录找该页面 </p></li><li><p>在<code>templates</code>文件夹下创建index.html，用于测试</p></li><li><p>创建controller，跳转测试用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">indexController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//int i = 1/0;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>小知识：</p><p>因为导入了devtools的jar包，我们可以实现热部署，重编译运行就可以了</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201023183434.png"></p></blockquote></li></ol><p><strong>跳转error.html的方法</strong></p><blockquote><p>对于404和500错误页面，SpringBoot可以根据页面的命名方式找到对应的文件，而自定义的错误就需要我们自己来拦截了，让代码出现问题的时候跳转到我们自己定义的错误页面，这里就需要自定义拦截器。</p></blockquote><ol><li><p>创建拦截器，拦截所有controller请求</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token comment" spellcheck="true">//表示拦截controller的所有请求</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span>            LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ControllerExceptionHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建日志对象</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示这是个异常处理的拦截器</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">exceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Request URL:{},Exception:{}"</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"exception"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error/error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样路径会识别到templates下的路径</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p><strong>错误页面信息显示（便于开发时在页面看到错误）</strong></p><ol><li>在error.html中加上</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>&amp;lt;!--<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--这里是转义，即“&lt;--”注释的开头，这样在界面就不会显示，开发人员开启控制台的原代码就能看到异常信息--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>Failed Request URL : <span class="token punctuation">'</span> + ${url}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>Exception message : <span class="token punctuation">'</span> + ${exception.message}<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">th:</span>remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name"><span class="token namespace">th:</span>remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>st : ${exception.stackTrace}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${st}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>--&amp;gt;<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><strong>让404仍然跳转到404.html，而不是所有异常都跳转error.html</strong></p><ol><li><p>修改异常（测试用）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">indexController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//int i = 1/0;</span>    String blog <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>blog <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotFindException</span><span class="token punctuation">(</span><span class="token string">"blog是null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>创建异常类在myblog包内</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示这个状态码是404</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotFindException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">NotFindException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">NotFindException</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">NotFindException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>自定义拦截器中增加</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果异常信息是404，就抛出去给springboot来处理，自己的拦截器不拦截</span><span class="token keyword">if</span><span class="token punctuation">(</span>AnnotationUtils<span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ResponseStatus<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="3-日志处理"><a href="#3-日志处理" class="headerlink" title="3. 日志处理"></a>3. 日志处理</h3><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>每发送一个请求，控制台就打印日志</p><pre><code>2020-11-30 10:50:25.544  INFO 16016 --- [nio-8080-exec-2] top.jm.myblog.aspect.LogAspect           : request:{}RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='top.jm.myblog.controller.IndexController.indexController', args=[Page request [number: 0, size 5, sort: id: DESC], {}]}</code></pre><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>​    采用spring的aop来实现日志处理，AOP可以以切面的形式拦截，将日志内容记录下来，这里记录以下日志信息：</p><ul><li>访问的URL</li><li>访问者的IP</li><li>访问时调用的方法</li><li>访问时传递的参数</li><li>访问时返回的内容</li></ul><ol><li><p>创建一个切面类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取日志对象</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//切面</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* top.jm.myblog.controller.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//前置方法</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"log()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取request对象</span>        ServletRequestAttributes attributes <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取信息</span>        String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取url</span>        String ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取ip</span>        String method <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取方法名</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取请求参数</span>        RequestLog requestLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestLog</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>ip<span class="token punctuation">,</span>method<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//封装并用日志输出</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request:{}"</span><span class="token operator">+</span>requestLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//logger.info("--------before--------");</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置方法</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"log()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//logger.info("--------after----------");</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回值方法</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"log()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterReturning</span><span class="token punctuation">(</span>Object result<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// logger.info("return-----{}",result);</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用于封装log信息</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">RequestLog</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> String url<span class="token punctuation">;</span>        <span class="token keyword">private</span> String ip<span class="token punctuation">;</span>        <span class="token keyword">private</span> String classMethod<span class="token punctuation">;</span>        <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">RequestLog</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String ip<span class="token punctuation">,</span> String classMethod<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>classMethod <span class="token operator">=</span> classMethod<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>args <span class="token operator">=</span> args<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"RequestLog{"</span> <span class="token operator">+</span>                    <span class="token string">"url='"</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                    <span class="token string">", ip='"</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                    <span class="token string">", classMethod='"</span> <span class="token operator">+</span> classMethod <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                    <span class="token string">", args="</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>修改controller（测试用）</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">indexController</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-------index--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="4-页面处理"><a href="#4-页面处理" class="headerlink" title="4. 页面处理"></a>4. 页面处理</h3><ol><li><p>静态页面导入project</p><ol><li>将templates、static导入进去</li><li>使用maven的clean清除target缓存</li><li>重新运行通过controller访问Index.html</li><li>发现有些样式和图片没有引进，需要修改thymeleaf路径<ol><li><code>th:href="@{/css/me.css}"</code></li><li><code>th:src="@{images/wechat.jpg}"</code></li></ol></li></ol></li><li><p>thymeleaf公共布局抽取</p><p>作用：将公共布局抽取到一个页面中，修改公共页面，即修改所有样式</p><blockquote><p>模板：<code>th:fragment=""</code></p><ul><li>传参：<code>th:fragment="模板名(参数名)"</code></li><li>使用参数：<code>th:replace="${参数名}"</code></li></ul><p>引用：<code>th:replace="模板所在的html名::模板名"</code>（将表标签内及自己全部替换为模板）</p><ul><li><p>传参：<code>th:replace="模板所在的html名::模板名(参数)"</code></p></li><li><p>传参的过程：</p><ol><li>引用的参数传给模板</li><li>模板进行接收参数进行渲染</li><li>渲染好的模板返回给引用</li></ol></li><li><p>参数格式：</p><pre><code>~{ templatename :: selector }</code></pre><p>支持：<br><code>~{ templatename :: #html_id }</code> 表示 取 html 的 id 标签<br><code>~{ ::selector}</code> 表示 代码段在本页面<br><code>~{ templatename }</code> 引入 templatename 所有的 html 代码</p></li></ul></blockquote><ol><li><p>建立公共页面<code>_fragment.html</code></p></li><li><p>抽取和使用fragment</p><ol><li><p>head的抽取</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>head(title)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${title}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>博客详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/css/typo.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/typo.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/css/animate.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/animate.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/lib/prism/prism.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{lib/prism/prism.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/lib/tocbot/tocbot.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/lib/tocbot/tocbot.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/css/me.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/me.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_fragment::head(~{::title})<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><blockquote><p>分析：</p><ol><li>模板抽取，参数为title</li><li>引用时，传入参数<code>~{::title}</code>，表示引用的title标签作为参数传入模板</li><li>模板的<code>th:replace="${title}"</code>渲染上值</li><li>渲染后的模板替换到引用的位置</li></ol></blockquote></li><li><p>nav导航的抽取</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted attached segment m-padded-tb-mini m-shadow-small<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav(n)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted secondary stackable menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui teal header item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>classappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${n<span class="token punctuation">=</span><span class="token punctuation">=</span>1}?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini home icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>classappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${n<span class="token punctuation">=</span><span class="token punctuation">=</span>2}?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini idea icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>classappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${n<span class="token punctuation">=</span><span class="token punctuation">=</span>3}?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini tags icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>classappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${n<span class="token punctuation">=</span><span class="token punctuation">=</span>4}?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini clone icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>归档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>classappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${n<span class="token punctuation">=</span><span class="token punctuation">=</span>5}?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini info icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>关于我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right m-item item m-mobile-hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui icon inverted transparent input m-margin-tb-tiny<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search....<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search link icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui menu toggle black icon button m-right-top m-mobile-show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_fragment::nav(1)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted attached segment m-padded-tb-mini m-shadow-small<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p>底部footer的抽取</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted vertical segment m-padded-tb-massive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_fragment::footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted vertical segment m-padded-tb-massive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre><ol start="4"><li><p>script抽取</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">th:</span>block</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>script<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.jsdelivr.net/npm/jquery.scrollto@2.1.2/jquery.scrollTo.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/lib/prism/prism.js<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{lib/prism/prism.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/lib/tocbot/tocbot.min.js<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{lib/tocbot/tocbot.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/lib/qrcode/qrcode.min.js<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{lib/qrcode/qrcode.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/lib/waypoints/jquery.waypoints.min.js<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{lib/waypoints/jquery.waypoints.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">th:</span>block</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--/*/&lt;th:block th:fragment="script">/*/--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--/*/&lt;/th:block>/*/--></span></code></pre><blockquote><p>这里的/*/：在html中是注释的存在，但是在thymeleaf模板中，仍然有效</p></blockquote></li></ol></li></ol></li><li><p>错误页面美化</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_fragment::head(~{::title})<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/css/me.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/me.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--导航--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_fragment::nav(0)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted attached segment m-padded-tb-mini m-shadow-small<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted secondary stackable menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui teal header item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active m-item item m-mobile-hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini home icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini idea icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini tags icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini clone icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>归档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-item item m-mobile-hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini info icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>关于我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right m-item item m-mobile-hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui icon inverted transparent input m-margin-tb-tiny<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search....<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search link icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui menu toggle black icon button m-right-top m-mobile-show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-container-small m-padded-tb-massive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui error message m-padded-tb-huge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>对不起，您访问的资源不存在！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--底部footer--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_fragment::footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted vertical segment m-padded-tb-massive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui center aligned container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted divided stackable grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>three wide column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted link list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../static/images/wechat.jpg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{images/wechat.jpg}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui rounded image<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">110</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>three wide column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted header m-text-thin m-text-spaced <span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>最新博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted link list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item m-text-thin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户故事（User Story）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item m-text-thin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户故事（User Story）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item m-text-thin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户故事（User Story）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>three wide column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted header m-text-thin m-text-spaced <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>联系我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted link list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item m-text-thin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email：lirenmi@163.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item m-text-thin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>QQ：865729312<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seven wide column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted header m-text-thin m-text-spaced <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-text-thin m-text-spaced m-opacity-mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是我的个人博客、会分享关于编程、写作、思考相关的任何内容，希望可以给来到这儿的人有所帮助...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ui inverted section divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-text-thin m-text-spaced m-opacity-tiny<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Copyright © 2016 - 2017 Lirenmi Designed by Lirenmi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="1-设计与规范"><a href="#1-设计与规范" class="headerlink" title="1. 设计与规范"></a>1. 设计与规范</h3><p>我们根据面向对象编程的思想，先建立实体类，利用JPA根据实体类生成对应的数据库。</p><p><strong>1.1 实体类</strong></p><ul><li>博客Blog</li><li>博客分类Type</li><li>博客标签Tag</li><li>博客评论Comment</li><li>用户User</li></ul><p><strong>实体关系</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201025152646.png"></p><p>评论类自关联关系</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201025152715.png"></p><p><strong>Blog类</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201025152757.png"></p><p><strong>Type类</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201025152828.png"></p><p><strong>Tag类</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201025152848.png"></p><p><strong>Comment类</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201025152946.png"></p><p><strong>User类</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201025153029.png"></p><p><strong>1.2 应用分层</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201025153138.png"></p><p><strong>1.3 命名约定</strong></p><p>Service/Dao层命名约定：</p><ul><li>获取单个对象的方法用get作前缀</li><li>获取多个对象的方法用list作前缀</li><li>获取统计值的方法用count作前缀</li><li>插入的方法save或insert作前缀</li><li>删除的方法用remove或delete作前缀</li><li>修改的方法用update作前缀</li></ul><h3 id="2-实体类构建"><a href="#2-实体类构建" class="headerlink" title="2. 实体类构建"></a>2. 实体类构建</h3><ol><li><p>创建实体类</p></li><li><p>配置实体关系</p><ol><li><p>声明对象变量</p></li><li><p>指明一对多/多对多关系，并表示“多”为维护方 </p><blockquote><p>注意几点：</p><ol><li>@Table别忘了加name，虽然爆红，但不影响使用</li><li>@GeneratedValue指明id生成策略</li><li>Date需要指明@Temporal时间戳</li><li>@ManyToOne：多对1，1对多的关系界定：当前实体类和对方的关系。并且1的一方需要指明被谁维护mappedBy</li><li>记得加上引用对象的get/set方法</li><li>@ManyToMany级联新增</li></ol></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token comment" spellcheck="true">//指明实体类</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_blog"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指明映射哪个表</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span><span class="token comment" spellcheck="true">//标记主键</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token comment" spellcheck="true">//主键的生成策略，默认自增</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标题</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内容</span>    <span class="token keyword">private</span> String firstPicture<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首图</span>    <span class="token keyword">private</span> String flag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记</span>    <span class="token keyword">private</span> Integer views<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浏览次数</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> appreciation<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赞赏开启</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> shareStatement<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//版权开启</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> commentabled<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//评论开启</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> published<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发布</span>    <span class="token annotation punctuation">@Temporal</span><span class="token punctuation">(</span>TemporalType<span class="token punctuation">.</span>TIMESTAMP<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示是一个完整的时间</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建时间</span>    <span class="token annotation punctuation">@Temporal</span><span class="token punctuation">(</span>TemporalType<span class="token punctuation">.</span>TIMESTAMP<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新时间</span>    <span class="token annotation punctuation">@ManyToOne</span><span class="token comment" spellcheck="true">//多个博客属于1个类型</span>    <span class="token keyword">private</span> Type type<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>cascade <span class="token operator">=</span> <span class="token punctuation">{</span>CascadeType<span class="token punctuation">.</span>PERSIST<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//级联新增，当新增一个tag，数据库也会跟着新增</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Tag<span class="token operator">></span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//list的需要new</span>    <span class="token annotation punctuation">@ManyToOne</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">"blog"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//“1”的一方需要被“多”的维护：mappedBy指：被维护</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Comment<span class="token operator">></span> comments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li><li><p>启动项目，自动生成表</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql高级（二）</title>
      <link href="/2020/11/13/mysql/mysql-gao-ji-er/"/>
      <url>/2020/11/13/mysql/mysql-gao-ji-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql高级（二）"><a href="#Mysql高级（二）" class="headerlink" title="Mysql高级（二）"></a>Mysql高级（二）</h1><h2 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h2><p>在数据库中，数据也是一种供许多用户共享的资源，为了保证数据的一致性】有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。</p><h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><p> 对数据操作的类型：</p><ol><li>读锁：共享锁，针对同一份数据，多个读操作可以同时进行，不会互相影响</li><li>写锁：排它锁，当前写操作没有完成前，它会阻断其他写锁和读锁</li></ol><p>对数据操作的粒度：</p><ol><li>表锁</li><li>行锁</li></ol><hr><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p>特点：偏向MyISAM存储引擎，开销小，加锁快；无死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低</p><p>Myisam的读写锁调度是写优先，这也是myisam不适合做写为主表的引擎。因为写锁后，其他线程不能进行任何操作，大量的更新会让查询很难获得锁，从而造成永久阻塞。</p><p>命令：</p><ol start="3"><li>手动增加表锁：<code>lock table 表名 read/write,表名 read/write;</code></li><li>释放锁：<code>unlock tables</code></li></ol><p><strong>（表）读锁</strong></p><ol><li>session1给表加读锁，能对该表进行读，其他session也能读该表</li><li>session1不能读其他表，其他session可以读其他表</li><li>session1不能改自己加锁的表，其他session改加锁的表会进入阻塞<ol><li>等session1释放锁，其他session的改操作才会执行</li></ol></li></ol><p><strong>（表）写锁</strong></p><ol><li>session1给表加写锁，能对该表进行读、改，其他session读该表会进入阻塞<ol><li>等session1释放锁，其他session的操作才会执行</li></ol></li><li>session1不能读其他表，其他session可以读改其他表</li></ol><p><strong>总结</strong></p><p>读锁会阻塞写，但是不会阻塞读。而写锁会把读和写都阻塞。</p><p><strong>分析表锁</strong></p><ol><li>查看表上加过的锁：<code>show open tables</code></li><li>查看锁的状态：<code>show status like 'table%'</code><ol><li>Table_locks_immediate：产生标记锁定的次数，表示可以立即获得锁的查询次数</li><li>Table_locks_waited：出现表级锁定争用而发生等待的次数（不能立即获得锁的次数），值越高，证明存在严重的表级争用情况</li></ol></li></ol><hr><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>特点：偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，<strong>并发度最高</strong>。但也有其脆弱的一面，如果</p><p>InnoDB与MyISAM的最大不同有两点：一是支持事务；二是采用了行级锁。</p><p><strong>事务的一些知识</strong></p><p>ACID：</p><ol><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ol><p>并发事务带来的问题：</p><ol><li>更新覆盖</li><li>脏读</li><li>不可重复读</li><li>幻读</li></ol><p>事务的隔离级别：</p><ol><li>读未提交</li><li>读已提交</li><li>可重复度：InnoDB默认</li><li>串行化</li></ol><p><strong>总结</strong></p><ol><li><p>行锁两个事务同时操作同一行时，后面的事务会进入阻塞状态</p><ol><li>等待事务1提交之后，事务2才会执行</li></ol></li><li><p>当操作不同行时，互不影响</p></li><li><p>索引失效，会导致行锁升级为表锁</p><pre class=" language-sql"><code class="language-sql">索引：<span class="token number">a</span>，索引：<span class="token number">b</span><span class="token comment" spellcheck="true">#session1</span><span class="token keyword">update</span> test <span class="token keyword">set</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">41</span> <span class="token keyword">where</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">4000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#b是字符串类型，没有加单引号导致索引失效</span><span class="token comment" spellcheck="true">#session2</span><span class="token keyword">update</span> test <span class="token keyword">set</span> <span class="token number">b</span><span class="token operator">=</span><span class="token string">'9000'</span> whrer <span class="token number">b</span><span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：由于session1中的事务索引失效，导致session2进入阻塞</span><span class="token comment" spellcheck="true">#session1</span>commmit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：session1提交之后，session2恢复执行</span></code></pre></li></ol><p><strong>间隙锁</strong></p><ol><li>当执行过程中通过<strong>范围查找</strong>，它就会锁定整个范围内的所有索引键值，即使这个键值不存在。<ol><li>不存在的键值被无辜锁定，导致锁定之后，无法在该范围内插入任何数据</li></ol></li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#表中数据id:1,3,4,5,6</span><span class="token comment" spellcheck="true">#session1</span><span class="token keyword">update</span> test <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">18</span> <span class="token keyword">where</span> id<span class="token operator">></span><span class="token number">1</span> <span class="token operator">and</span> id<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#session2</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：因为id在1-6之间，在此范围内插入数据，会产生间隙锁，session2进入阻塞</span><span class="token comment" spellcheck="true">#session1</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：session1提交之后，session2恢复执行。以后session2是在session1之后才执行的，故不会受到1的操作</span></code></pre><p><strong>如何锁定一行</strong></p><ol><li>begin</li><li>for update</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#session1</span><span class="token keyword">begin</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#for update会为id=8的行加上锁</span><span class="token comment" spellcheck="true">#session2</span><span class="token keyword">update</span> test age<span class="token operator">=</span><span class="token number">18</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#进入阻塞状态</span><span class="token comment" spellcheck="true">#session1</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#session1提交之后，session2恢复执行</span></code></pre><p><strong>分析行锁</strong></p><ol><li><code>show status like 'innodb_row_lock%'</code></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201113093632.png"></p><p><strong>优化建议</strong></p><ol><li>尽可能让所有数据检索都通过索引来完成，避免索引失效行锁升级为表锁</li><li>合理设计索引，尽量缩小锁的范围，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可能低级别事务隔离</li></ol><hr><h3 id="页锁"><a href="#页锁" class="headerlink" title="页锁"></a>页锁</h3><p>开销和加锁时间介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间；并发一般。</p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>slave会从master读取binlog来进行数据同步</p><p>复制过程：</p><ol><li>master将改变记录到二进制日志（binary log）。这些记录过程叫做二进制日志事件，binary log events</li><li>salve将master的binary log events拷贝到它的中继日志（relay log）</li><li>salve重做中继日志中的事件，将改变应用到自己的数据库中</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201113105142.png"></p><h3 id="复制的基本原则"><a href="#复制的基本原则" class="headerlink" title="复制的基本原则"></a>复制的基本原则</h3><ol><li>每个slave只有一个Master</li><li>每个slave只能有一个唯一的服务器id</li><li>每个master可以有多个slave</li></ol><h3 id="一主一从常见配置"><a href="#一主一从常见配置" class="headerlink" title="一主一从常见配置"></a>一主一从常见配置</h3><ol><li>mysql版本一致且后台以服务运行，必须双向ping ip 能通</li><li>主从都配置在[mysqld]结点下，都是小写</li><li>主机修改配置my.ini<ol><li>【必须】主服务器唯一ID：<code>sever-id=1</code></li><li>【必须】启用二进制日志：<code>log-bin=自己本地的路径/mysqlbin</code>，如<code>log-bin=D:/devSoft/MySQLServer5.5/data/mysqlbin</code></li><li>【可选】启动错误日志：<code>log-err=自己本地的路径/mysqlerr</code></li><li>【可选】根目录：<code>basedir="自己本地路径"</code>，如<code>log-bin=D:/devSoft/MySQLServer5.5/</code></li><li>【可选】临时目录：<code>tempdir="自己本地路径"</code></li><li>【可选】数据目录：<code>datadir="自己本地路径/Data/"</code></li><li>read-only=0，主机，读写都可以</li><li>【可选】设置不要复制的数据库：<code>binlog-ignore-db=mysql</code></li><li>【可选】设置需要复制的数据库：<code>binlog-do-db=需要复制的主数据库名字</code></li></ol></li><li>从机修改配置my.cnf<ol><li>【必须】从服务器唯一ID：将<code>server-id=1</code>注释掉，往下拉，开启<code>server-id=2</code>的注释</li><li>【可选】启用二进制日志</li></ol></li><li>修改配置文件后，重启主/从机的服务<ol><li><code>service mysql stop</code></li><li><code>service mysql start</code></li></ol></li><li>主机从机关闭防火墙<ol><li>windows手动关闭</li><li>关闭虚拟机Linux防护墙 <code>service iptables stop</code></li></ol></li><li>在windows主机上建立账户并授权slave<ol><li>登录mysql账号</li><li><code>grant replication slave on *.* to 'zhangsan'@'从机数据库ip'identified by '123456'</code>：表示从机可以通过zhangsan用户，密码123456来操作主机</li><li>刷新：<code>flush privileges;</code></li><li>查询master状态<ol><li><code>show master status;</code></li><li>记录下file、position的值：表示告知从机从哪开始复制</li></ol></li></ol></li><li>在Linux从机上配置需要复制的主机<ol><li>登录mysql账号</li><li>配置需要复制的主机：<code>change master to master_host='主机数据库ip',master_user='张三',master_password='123456',master_log_file='mysqlbin.上述file的数字',master_log_pos=上述position的值;</code><ol><li>如果出现error 1198，需要<code>stop slave</code>，再进行配置</li></ol></li><li>启动从服务器复制功能：<code>start slave;</code></li><li>查看slave状态<ol><li><code>show slave status\G</code><ol><li>Slave_IO_Running:Yes</li><li>Slave_SQL_Running:Yes：这两个值必须同时为Yes，否则失败</li></ol></li></ol></li></ol></li><li>配置完成，进行测试：<ol><li>主机新建库、表、Insert操作。</li><li>从机进行查询，发现已经自动复制完成</li></ol></li><li>关闭从服务复制功能<ol><li><code>stop slave;</code></li></ol></li></ol><blockquote><p>注意：</p><p>如果配置出现问题，如没有出现两个Yes，需要关闭从服务复制功能，重新主机授权，记录最新的file和position值，再在从机上配置需要复制的主机。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql高级（一）</title>
      <link href="/2020/11/10/mysql/mysql-gao-ji-yi/"/>
      <url>/2020/11/10/mysql/mysql-gao-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql高级"><a href="#Mysql高级" class="headerlink" title="Mysql高级"></a>Mysql高级</h1><h2 id="mysql的架构介绍"><a href="#mysql的架构介绍" class="headerlink" title="mysql的架构介绍"></a>mysql的架构介绍</h2><h3 id="Linux安装Mysql"><a href="#Linux安装Mysql" class="headerlink" title="Linux安装Mysql"></a>Linux安装Mysql</h3><ol><li><p>检查当前系统是否安装过mysql</p><ol><li>在opt目录下打开命令行</li><li>查询命令：<code>rpm -qa|grep -i mysql</code></li><li>删除命令：<code>rpm -e rpm软件包名</code></li></ol></li><li><p>安装Mysql服务端</p><ol><li>安装<code>rpm -ivh Mysql-server-5.5.48...rpm</code></li></ol></li><li><p>安装mysql客户端</p><ol><li>安装<code>rpm -ivh mysql-client...rpm</code></li></ol></li><li><p>查看mysql安装版本（是否安装成功）</p><p><code>mysqladmin --version</code>命令，类似java -version如果打出消息，即为成功。</p></li><li><p>启动</p><p><code>service mysql start</code></p><p>查看是否开启：<code>ps -ef|grep mysql</code></p></li><li><p>关闭</p><p><code>service mysql stop</code></p></li><li><p>修改Mysql登录密码</p><ol><li>启动服务之后，执行命令<code>/usr/bin/mysqladmin -u root  password '123456'</code></li><li>通过<code>mysql -uroot -p123456</code>进行登录</li></ol></li><li><p>设置mysql自启动</p><ol><li><code>chkconfig --level 5 mysql on</code>开启</li><li><code>chkconfig --list|grep mysql</code>查看</li><li>【可选操作】<code>ntsysv</code>也是查看，如果[*]mysql带 *，就是自启动</li></ol></li><li><p>配置文件</p><ol><li><p>拷贝配置文件</p><ol><li>5.5版本： <code>cp /usr/share/mysql/my-huge.cnf /etc/my.cnf</code></li><li>5.6版本：<code>cp /usr/share/mysql/my-default.cnf /etc/my.cnf</code></li></ol></li><li><p>重新启动mysql</p><p><code>service mysql stop/start</code></p></li><li><p>登录</p><p><code>mysql -uroot -p123456</code></p></li><li><p>退出</p><p><code>exit</code></p></li><li><p>修改字符集</p><ol><li><code>cd /etc</code></li><li>查看是否有my.cnf文件，<code>ls -1 my.cnf</code></li><li><code>vim my.cnf</code></li><li>[client]节点下，socket下加上<code>default-character-set=utf-8</code></li><li>[mysqld]节点下，port下加上<ol><li><code>character_set_server=utf8</code></li><li><code>charactet_set_client=utf8</code></li><li><code>collation-server=utf8_general_ci</code></li></ol></li><li>[mysql]节点下，no-auto-rehash下加上<code>default-character-set=utf8</code></li><li>esc，<code>wq!</code>保存退出</li><li>重启数据库，登录数据库，插入中文测试（新建的库才有用）</li></ol></li></ol></li></ol><h4 id="mysql安装目录介绍"><a href="#mysql安装目录介绍" class="headerlink" title="mysql安装目录介绍"></a>mysql安装目录介绍</h4><p>查看安装目录<code>ps -ef|grep mysql</code></p><table><thead><tr><th>路径</th><th>解释</th><th>备注</th></tr></thead><tbody><tr><td>/var/lib/mysql/</td><td>mysql数据库的存放路径**</td><td>重要</td></tr><tr><td>/usr/share/mysql</td><td>配置文件目录</td><td></td></tr><tr><td>/usr/bin</td><td>相关命令目录**</td><td>重要</td></tr><tr><td>/etc/init.d/mysql</td><td>启停相关脚本</td><td></td></tr></tbody></table><h3 id="Mysql配置文件"><a href="#Mysql配置文件" class="headerlink" title="Mysql配置文件"></a>Mysql配置文件</h3><p><strong>二进制日志log-bin</strong></p><p>用于主从复制</p><p><strong>错误日志log-error</strong></p><p>默认是关闭的，记录严重的警告和错误信息，每次启动关闭的信息</p><p><strong>查询日志log</strong></p><p>默认关闭，记录查询到的sql语句</p><p><strong>数据文件</strong></p><ol><li>双系统<ol><li>window：\data</li><li>linux：/var/lib/mysql，每一个目录代表一个同名的库</li></ol></li><li>frm文件：存放表结构</li><li>myd文件：存放表数据</li><li>myi文件：存放表索引</li></ol><p><strong>如何配置</strong></p><ol><li>windows：my.ini文件</li><li>linux：/etc/my.cnf文件</li></ol><h3 id="Mysql逻辑架构"><a href="#Mysql逻辑架构" class="headerlink" title="Mysql逻辑架构"></a>Mysql逻辑架构</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201108210850.png"></p><ol><li><p>连接层</p></li><li><p>服务层</p><ol><li><p>Management Serveices &amp; Utilities： 系统管理和控制工具</p></li><li><p>SQL Interface: SQL接口<br>接受用户的SQL命令，并且返回用户需要查询的结果。比如select from就是调用SQL Interface</p></li><li><p>Parser: 解析器<br>SQL命令传递到解析器的时候会被解析器验证和解析。</p></li><li><p>Optimizer: 查询优化器。<br>SQL语句在查询之前会使用查询优化器对查询进行优化，即选取最优的方式执行。 </p></li><li><p>Cache和Buffer： 查询缓存。</p><p>如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。</p></li></ol></li><li><p>引擎层</p></li><li><p>存储层</p></li></ol><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ol><li><p>查看命令</p><ol><li>方式一：看你的mysql现在已提供什么存储引擎：<code>show engines;</code></li><li>方式二：看你的mysql当前默认的存储引擎:<code>show variables like '%storage_engine%';</code></li></ol></li><li><p>MyISAM和InnoDB</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201031134947.png"></p></li></ol><hr><h2 id="索引优化分析"><a href="#索引优化分析" class="headerlink" title="索引优化分析"></a>索引优化分析</h2><p>整体优化策略：</p><ol><li>慢查询的开启并捕获</li><li>explain+慢sql分析</li><li>show profile查询sql在mysql服务器里执行细节和生命周期情况</li><li>sql数据库服务器的参数调优</li></ol><h3 id="性能下降sql慢，执行-等待时间长"><a href="#性能下降sql慢，执行-等待时间长" class="headerlink" title="性能下降sql慢，执行/等待时间长"></a>性能下降sql慢，执行/等待时间长</h3><ol><li>查询语句写的烂</li><li>索引失效<ol><li>单值<code>create index 索引名idx_user_name on 表名user（列名name）</code></li><li>复合<code>create index 索引名idx_user_name on 表名user（列名name）</code></li></ol></li><li>关联查询太多join（设计缺陷或不得已的需求）</li><li>服务器调优及各个参数设置（缓冲、线程数等）</li></ol><h3 id="常见通用的Join查询"><a href="#常见通用的Join查询" class="headerlink" title="常见通用的Join查询"></a>常见通用的Join查询</h3><ol><li><p>机读sql执行顺序</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201109121045.png"></p></li><li><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201109121527.png"></p><p>注意：mysql不支持full join</p><ol><li><p>全外连：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_emp <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> tb_deptId <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>deptId <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token keyword">union</span> <span class="token comment" spellcheck="true">#连接表，并去重</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_emp <span class="token number">a</span> <span class="token keyword">right</span> <span class="token keyword">join</span> tb_deptId <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>deptId <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id </code></pre></li><li><p>全外连，中间部分去掉</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_emp <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> tb_deptId <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>deptId <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_emp <span class="token number">a</span> <span class="token keyword">right</span> <span class="token keyword">join</span> tb_deptId <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>deptId <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span></code></pre></li></ol></li></ol><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>定义：是帮助mysql高效获取数据的数据结构。简单理解为：<strong>排好序的快速查找数据结构</strong></p><p>除了数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法，这种数据结构就是索引。</p><p>一般索引本身也很大，以索引文件的形式存储在磁盘上</p><p><strong>优势</strong></p><ol><li>类似大学图书馆的书目索引，提高数据检索的效率（树的高度），降低数据库的io成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低了cpu成本</li></ol><p><strong>劣势</strong></p><ol><li>实际上索引也是一张表，表保存了主键和索引字段，并指向实体表的记录，所以索引列也是要占用空间的</li><li>虽然索引提高了查询速度，同时却会降低更新表的速度。每次更新表，还要更改索引信息。</li><li>要花时间研究建立最优秀的索引</li></ol><h4 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h4><ol><li>单值索引：一个索引只包含单个列，一个表可以有多个单值索引</li><li>唯一索引：索引列的值必须唯一，但允许空值</li><li>复合索引：一个索引包含多个列</li></ol><p><strong>基本语法：</strong></p><ol><li><p>创建：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token keyword">unique</span><span class="token punctuation">]</span> <span class="token keyword">index</span> indexName <span class="token keyword">on</span> mytable<span class="token punctuation">(</span>columnname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> mytable <span class="token keyword">add</span> <span class="token punctuation">[</span><span class="token keyword">unique</span><span class="token punctuation">]</span> <span class="token keyword">index</span><span class="token punctuation">[</span>indexName<span class="token punctuation">]</span> <span class="token keyword">on</span> <span class="token punctuation">(</span>columnname<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>删除：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span><span class="token punctuation">[</span>indexName<span class="token punctuation">]</span> <span class="token keyword">on</span> mytable<span class="token punctuation">;</span></code></pre></li><li><p>查看：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> table_name</code></pre></li><li><p>alter命令</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>列名<span class="token punctuation">)</span>：添加主键<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">unique</span> 索引名<span class="token punctuation">(</span>列名<span class="token punctuation">)</span>：创建索引的值必须是唯一的<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">index</span> 索引名（列名）：增加普通索引<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 fulltext 索引名（列名）：全文索引</code></pre></li></ol><p><strong>哪些情况需要创建索引</strong></p><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段</li><li>查询中与其他表关联的字段，外键关系建立索引</li><li>单值/组合索引的选择问题，组合索引性价比更高</li><li>查询中排序的字段，排序字段若通过索引去访问呢将大大提高排序速度</li><li>查询中统计或分组字段</li></ol><p><strong>不要创建索引</strong></p><ol><li>记录数据少</li><li>经常增删改</li><li>where条件用不到的字段</li><li>过滤性不好</li></ol><h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h4><p>B+Tree</p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，知道MYSQL是怎么处理SQL语句的</p><p>用法：explain+SQL语句</p><p>用处：</p><ol><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ol><h4 id="各字段的解释"><a href="#各字段的解释" class="headerlink" title="各字段的解释"></a>各字段的解释</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201109172842.png"></p><ol><li>id：查询中执行select子句或操作表达顺序<ol><li>id相同，执行顺序从上到下</li><li>id不同，id值越大，越先被执行</li><li>id有相同有不同，越大越优先，其余顺序执行。<ol><li>derived衍生表，derived2就是Id为2查询出来的表作为衍生表。</li></ol></li></ol></li><li>select_type：查询的类型，主要用于区别普通、联合、子查询等复杂查询<ol><li>simple：简单的select查询，查询中不包含子查询或union</li><li>primary：查询中若包含任何复杂的子查询，最外层查询则被标记为</li><li>subquery：在select或where列表中包含的子查询</li><li>derived：在from列表中包含的的子查询被标记为derived（衍生），mysql会递归执行这些子查询，把结果放在临时表里</li><li>union：若第二个select出现在union之后，则会标记为union；若union包含在from子句的子查询中，外层select将被标记为derived</li><li>union result：从union表获得结果的select</li></ol></li><li>table：显示这一行的数据是关于哪张表的</li><li>type：访问类型排列，显示查询使用了哪种类型<ol><li>最好到最差：system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all</li><li>一般来说，<strong>保证查询达到range级别，最好达到ref</strong><ol><li>system：表只有一行记录，const类型的特例</li><li>const：标识通过索引一次就查找到，const用于比较primary key 或者 unique索引。因为只匹配一行数据，所以很快。若where id = 1（唯一/主键索引确定）</li><li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常用于主键或唯一索引扫描（多个表的唯一/主键索引确定）</li><li>ref：非唯一性索引扫描，返回匹配某个单独值的所有行</li><li>range：只检索给定范围的行，使用一个索引来选择行。一般来说就是between、&lt;、&gt;，in，这种范围扫描索引扫描比全表扫描好。</li><li>index：全索引扫描，与all区别为index类型只遍历树，通常比all快，因为索引文件通常比数据文件小</li><li>all：遍历全表以找到匹配的行</li></ol></li></ol></li><li>possible_keys：显示可能应用在这张表中的索引，一个或多个。查询涉及到字段存在索引，但不一定被实际使用</li><li>key：实际使用的索引。如果为Null，则没有使用索引。如果使用了覆盖索引，则该索引出现在key列表中</li><li>key_len：表示索引中使用的字节数，显示的值为索引字段最大可能长度，并非实际使用长度。在不损失精度的情况下，长度越短越好。</li><li>ref：显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值</li><li>rows：根据表统计信息及索引寻用情况，大致估算出找到所需的就所需要读取的行数，越小越好</li><li>extra：包含不适合在其他列中显示但是十分重要的额外信息<ol><li><strong>Using filesort</strong>：我们创建的索引，虽然mysql用索引来查找，但是排序却没有用到，而是自己在表内又进行了内部排序。Mysql无法利用索引进行排序称作“文件排序”（复合索引c1_c2_c3，where c1=’’,order by c3）</li><li><strong>Using temporary</strong>：使用了临时表保存中间结果，Mysql在对查询结果排序时使用临时表。常见排序order by，或分组查询group by（复合索引c1_c2,group by c2）</li><li><strong>Using index</strong>：表示响应的select操作使用了覆盖索引，避免访问了数据行。如果同时出现using where，表明索引被用类执行索引键值查找。如果每日有出现using where，表明索引用来读取数据而并非执行查找。<ol><li>覆盖索引：建立的复合索引的个数和顺序，和查找时的个数和顺序相同。就是select的数据列只用从索引中就能取得，不必读取数据行，mysql可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件。</li></ol></li><li>Using where：表明使用了where过滤</li><li>using join buffer：使用了连接缓存</li><li>impossible where：where子句的值总是false，不能用来获取任何元组</li><li>select tables optimized away：(不常见)在没有group by子句下，对索引优化的一些操作</li><li>distinct：（不常见）优化distinct操作，在找到第一个匹配的时候就停止找相同值的动作</li></ol></li></ol><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><h4 id="索引分析"><a href="#索引分析" class="headerlink" title="索引分析"></a>索引分析</h4><h5 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h5><ol><li><p>范围查询，后面的索引会失效</p></li><li><p>创建所有条件的索引</p></li><li><p>删除索引</p></li><li><p>创建新索引</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例:查询category_id为1且comments大于1的情况下，view最多的article_id</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>author_id <span class="token keyword">from</span> article <span class="token keyword">where</span> category_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> comments<span class="token operator">></span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> views <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#第一次创建索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_article_ccv <span class="token keyword">on</span> article<span class="token punctuation">(</span>category_id<span class="token punctuation">,</span>comments<span class="token punctuation">,</span>views<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#出现以下问题：type为range，用到了索引，但由于comments是范围查找，导致后面的views索引失效，出现Using fileSort</span><span class="token comment" spellcheck="true">#删除索引</span><span class="token keyword">drop</span> <span class="token keyword">index</span> idx_article_ccv <span class="token keyword">on</span> article<span class="token comment" spellcheck="true">#第二次创建索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_article_cv <span class="token keyword">on</span> article<span class="token punctuation">(</span>category_id<span class="token punctuation">,</span>views<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#出现情况：type为ref,用到了索引，并且ref用到了常量，没有出现Using fileSort</span></code></pre></li></ol><h5 id="两表"><a href="#两表" class="headerlink" title="两表"></a>两表</h5><ol><li><p>左右连接，索引建在从表上</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> class <span class="token keyword">left</span> <span class="token keyword">join</span> book <span class="token keyword">on</span> class<span class="token punctuation">.</span>card <span class="token operator">=</span> book<span class="token punctuation">.</span>card<span class="token comment" spellcheck="true">#建立索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_class_card <span class="token keyword">on</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#出现的情况：建在主表上，type为index,查找rows仍然是所有数据</span><span class="token comment" spellcheck="true">#建立索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_book_card <span class="token keyword">on</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#出现的情况：建立在从表上，type为ref，并且ref是class.card，查找的rows变为1</span></code></pre></li></ol><h5 id="三表"><a href="#三表" class="headerlink" title="三表"></a>三表</h5><ol><li><p>左右连接，索引建在从表</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> class <span class="token keyword">left</span> <span class="token keyword">join</span> book <span class="token keyword">on</span> class<span class="token punctuation">.</span>card <span class="token operator">=</span> book<span class="token punctuation">.</span>card <span class="token keyword">left</span> <span class="token keyword">join</span> phone <span class="token keyword">on</span> book<span class="token punctuation">.</span>card <span class="token operator">=</span> phone<span class="token punctuation">.</span>card<span class="token comment" spellcheck="true">#建立索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_book_card <span class="token keyword">on</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#建立索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_phone_card <span class="token keyword">on</span> phone<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#出现的情况：建立在从表上，type为ref，并且ref是class.card、book.card，查找的rows变为1</span></code></pre></li><li><p>join语句的优化：</p><ol><li>尽可能减少join语句循环嵌套，永远用小表驱动大表（小表作为主表）</li><li>优先优化循环嵌套的内层循环</li><li>保证join语句中被驱动表上的Join条件字段已被索引</li><li>当无法保证被驱动表的join条件字段被索引且内存充足，调大joinbuffer的设置</li></ol></li></ol><h4 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201110200535.png"></p><ol><li><p>全值匹配：复合索引3个，用到的查询条件也是3个。</p></li><li><p>最左前缀法则：</p><ol><li>带头大哥不能死：第一个索引没有用到，其他索引就会失效</li><li>中间兄弟不能断：第一个索引用到了，但第二个条件中没有用到，则后续的索引都不会用到</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#符合索引c1,c2,c3,c4</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test03 <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c3</span><span class="token operator">=</span><span class="token string">'a3'</span> <span class="token operator">and</span> <span class="token number">c2</span> <span class="token operator">=</span><span class="token string">'a2'</span><span class="token comment" spellcheck="true">#结果：c123都用到了索引，mysql在底层已经优化翻译</span></code></pre></li><li><p>索引列上不做任何操作（计算、函数、（自动或手动）类型转换），会导致索引失效而转向全表扫描</p><ol><li><p>在条件语句中，对索引列包裹有函数</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#符合索引为(nameAgePosition)，失效</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> staffs <span class="token keyword">where</span> <span class="token keyword">left</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'judy'</span></code></pre></li></ol></li><li><p>范围查询，后面的索引会失效</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#name用到索引，age用到range范围索引，pos失效</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> staffs <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'judy'</span> <span class="token operator">and</span> age<span class="token operator">></span><span class="token number">25</span> <span class="token operator">and</span> pos <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token comment" spellcheck="true">#复合索引c1,c2,c3,c4</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test03 <span class="token keyword">where</span> <span class="token number">c1</span><span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span><span class="token operator">=</span><span class="token string">'a2'</span> <span class="token operator">and</span> <span class="token number">c4</span><span class="token operator">></span><span class="token string">'a4'</span> <span class="token operator">and</span> <span class="token number">c3</span> <span class="token operator">=</span> <span class="token string">'a3'</span><span class="token comment" spellcheck="true">#结果：4个均用到索引</span></code></pre></li><li><p>尽量使用覆盖索引，减少select *</p><p>这样只会在索引中进行查找，而不需要进行io操作查找表中数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> staffs <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'judy'</span> <span class="token operator">and</span> age<span class="token operator">=</span><span class="token number">25</span> <span class="token operator">and</span> pos<span class="token operator">=</span><span class="token string">'manager'</span><span class="token comment" spellcheck="true">#出现的情况：除了索引的列，其他列还需要在表中查找</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>pos <span class="token keyword">from</span> staffs <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'judy'</span> <span class="token operator">and</span> age<span class="token operator">=</span><span class="token number">25</span> <span class="token operator">and</span> pos<span class="token operator">=</span><span class="token string">'manager'</span><span class="token comment" spellcheck="true">#出现的情况：只会在索引中查找。出现Using index</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>pos <span class="token keyword">from</span> staffs <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'judy'</span><span class="token comment" spellcheck="true">#出现的情况：也会用到索引中扫描，出现Using index</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>pos <span class="token keyword">from</span> staffs <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'judy'</span> <span class="token operator">and</span> age<span class="token operator">></span><span class="token number">25</span> <span class="token operator">and</span> pos<span class="token operator">=</span><span class="token string">'manager'</span><span class="token comment" spellcheck="true">#出现的情况：type是ref，而不是range，因为查找的数据都是在索引中查找，级别就是ref，涉及到表中查找才会使range</span></code></pre></li><li><p>使用不等于会导致索引失效</p></li><li><p>is null,is not null无法使用索引</p></li><li><p>like以通配符开头会导致索引失效</p><ol><li><p>like百分号加右边</p><p>这种情况下，type是range级别</p></li><li><p>如果一定要用 %字符串%，为保证索引不失效，需要使用覆盖索引解决，查询的字段都需要在索引上。如果有一个不在就会导致索引失效从而全盘扫描。</p></li></ol></li><li><p>字符串不加单引号会导致索引失效（自动做了类型转换，参考第三条）</p></li><li><p>少用or，索引会失效</p></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201111160635.png"></p><p><strong>案例</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#复合索引c1,c2,c3,c4</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span><span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span><span class="token operator">=</span><span class="token string">'a2'</span> <span class="token operator">and</span> <span class="token number">c4</span><span class="token operator">=</span><span class="token string">'a4'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：c1,c2用于查找，c3用来排序</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test03 <span class="token keyword">where</span> <span class="token number">c1</span><span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span><span class="token operator">=</span><span class="token string">'a2'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token string">'c4'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：c1,c2用到，c4没用到排序，产生filesort 内排序</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span><span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c5</span><span class="token operator">=</span><span class="token string">'a5'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c2</span><span class="token punctuation">,</span><span class="token number">c3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：c1用到，c2,c3用于排序，无filesort</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span><span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c5</span><span class="token operator">=</span><span class="token string">'a5'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c3</span><span class="token punctuation">,</span><span class="token number">c2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：c1用到，出现filesort</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span><span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span><span class="token operator">=</span><span class="token string">'a2'</span> <span class="token keyword">where</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c3</span><span class="token punctuation">,</span><span class="token number">c2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：c1用到，因为c2是个常量，所以只有c3做了排序，所以不会出现filesort</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span><span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c4</span><span class="token operator">=</span><span class="token string">'a4'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">c2</span><span class="token punctuation">,</span><span class="token number">c3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：c1用到，c2,c3用于排序</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span><span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c4</span><span class="token operator">=</span><span class="token string">'a4'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">c3</span><span class="token punctuation">,</span><span class="token number">c2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果，c1用到，出现using filesort,using temporary。</span>定值是常量，范围之后是失效，最后看排序。<span class="token keyword">group</span> <span class="token keyword">by</span>分组前必排序，如果排序错乱，则会产生内排序和临时表</code></pre><p><strong>一般性建议</strong></p><ol><li>对于单值索引，尽量选择针对当前查询过滤性更好的索引</li><li>在选择组合索引，但其查询过滤性最好的字段应该放在最靠左的位置</li><li>在选择组合索引时，尽量选择能够包含当前查询中where字句更频繁的字段的索引</li><li>尽可能通过分析统计信息和调整查询的写法，来达到合适索引的目的</li></ol><h3 id="Order-By-优化"><a href="#Order-By-优化" class="headerlink" title="Order By 优化"></a>Order By 优化</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#复合索引age_birth</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tbl <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">20</span> <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：用到索引排序using index</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tbl <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">20</span> <span class="token keyword">order</span> <span class="token keyword">by</span> birth<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：using filesort</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tbl <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">20</span> <span class="token keyword">order</span> <span class="token keyword">by</span> birth<span class="token punctuation">,</span>age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果: using filesort</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tbl <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">20</span> <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span><span class="token punctuation">,</span>birth <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：using filesort</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tbl <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">20</span> <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">desc</span><span class="token punctuation">,</span>birth <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#结果：用到索引排序using index(同升、同降都能用到索引)</span><span class="token keyword">key</span> a_b_c<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">)</span>使用索引遵循最左前缀<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span> <span class="token keyword">desc</span><span class="token punctuation">,</span><span class="token number">b</span> <span class="token keyword">desc</span><span class="token punctuation">,</span><span class="token number">c</span> <span class="token keyword">desc</span>如果<span class="token keyword">where</span>使用索引的最左前缀定义为常量，<span class="token keyword">order</span> <span class="token keyword">by</span> 能使用索引<span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">=</span> const <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">=</span> const <span class="token operator">and</span> <span class="token number">b</span> <span class="token operator">=</span> const <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c</span><span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">=</span> const <span class="token operator">and</span> <span class="token number">b</span> <span class="token operator">></span> const <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span> <span class="token comment" spellcheck="true">#这里虽然b是范围，但是a是常量和order的bc相连，故生效</span>索引<span class="token operator">*</span><span class="token operator">*</span>不能<span class="token operator">*</span><span class="token operator">*</span>进行排序的情况：<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span> <span class="token keyword">asc</span><span class="token punctuation">,</span><span class="token number">b</span> <span class="token keyword">desc</span><span class="token punctuation">,</span><span class="token number">c</span> <span class="token keyword">desc</span> <span class="token comment" spellcheck="true">#排序不一致</span><span class="token keyword">where</span> g<span class="token operator">=</span>const <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span> <span class="token comment" spellcheck="true">#丢失a索引</span><span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span>const <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c</span> <span class="token comment" spellcheck="true">#丢失b索引</span><span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span>const <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token number">d</span> <span class="token comment" spellcheck="true">#d不是索引的一部分</span><span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span> <span class="token comment" spellcheck="true">#对于排序来说，多个相等条件也是范围查询</span></code></pre><p>Mysql支持两种方式排序：FileSort和Index，Index效率高，它指mysql扫描索引本身完成排序，Filesort方式为内排序</p><p><strong>会index方式排序的情况：</strong></p><p>mysql能为排序与查询使用相同的索引</p><ol><li>order by语句使用索引最左前列（最左前缀原则）</li><li>使用where子句与order by子句条件列组合满足索引最左前列</li></ol><p><strong>filesort的两种排序算法：</strong></p><ol><li>双路排序：（在mysql5之前）进行两次IO操作，数据可以全部取出</li><li>单路排序：一般进行一次IO操作，性能优于双路。但数据只能取出sort_buffer缓冲区大小，如果没有得到需要的结果，还需要继续取出，从而出现多次IO操作，有可能不如双路。<ol><li>优化策略：<ol><li>避免使用select *，它会增加字段大小从而占满缓冲区<ol><li>如果查询的字段大小总和小于max_length_for_sort_data，就会用单路，否则会用多路</li><li>两种算法都有可能占满sort_buffer，超出后会进行多次取数据的IO操作</li></ol></li><li>尝试提高sort_buffer_size</li><li>尝试提高max_length_for_sort_data</li></ol></li></ol></li></ol><h3 id="Group-by-优化："><a href="#Group-by-优化：" class="headerlink" title="Group by 优化："></a>Group by 优化：</h3><ol><li>group by 实质是先排序后进行分组，遵循索引的最左前缀原则</li><li>当无法使用索引列，增大max_length_for_sort_data、sort_buffer_size</li><li>where高于having，能写在where限定的条件就不要用在having</li></ol><hr><h2 id="查询截取分析"><a href="#查询截取分析" class="headerlink" title="查询截取分析"></a>查询截取分析</h2><h3 id="in与exists的优化"><a href="#in与exists的优化" class="headerlink" title="in与exists的优化"></a>in与exists的优化</h3><p><strong>小表驱动大表，即小的数据集驱动大的数据集</strong></p><ol><li><p>当B表的数据集小于A表的数据集时，in优于exists</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> B<span class="token punctuation">)</span>等价于<span class="token keyword">for</span> <span class="token keyword">select</span> id <span class="token keyword">from</span> B <span class="token comment" spellcheck="true">#外循环数据集小</span><span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">where</span> A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id <span class="token comment" spellcheck="true">#内循环数据集大</span></code></pre></li><li><p>当A表数据集小于B表的数据集时，用exists优于in</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> B <span class="token keyword">where</span> B<span class="token punctuation">.</span>id <span class="token operator">=</span> A<span class="token punctuation">.</span>id<span class="token punctuation">)</span>等价于<span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token comment" spellcheck="true">#外循环数据集小</span><span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> B <span class="token keyword">where</span> B<span class="token punctuation">.</span>id <span class="token operator">=</span> A<span class="token punctuation">.</span>id <span class="token comment" spellcheck="true">#内循环数据集大    </span></code></pre><p>意思就是：将主查询的数据，放到子查询中做条件验证，根据验证结果（true或false）来决定主查询的数据结果是否得以保留</p><p>Exists: 先查询一次外SELECT，后去子查询里做验证。IN：先查询子SELECT，然后用外表的一个记录做验证。</p></li></ol><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>是mysql提供的一种日志记录，它用于记录mysql响应时间超过阈值的语句。具体运行时间超过long_query_time</p><p>默认情况下，mysql数据库没有开启慢查询日志，需要手动配置参数。不调优的时候，一般建议关闭</p><ol><li>查看是否开启：<code>show variables like '%slow_query_log%'</code></li><li>开启：<code>set global slow_query_log=1</code><ol><li>开启只会对当前数据库生效，重启mysql会失效</li></ol></li><li>【可选】指定默认路径：<code>slow_query_log_file</code>，系统默认为：<code>host_name-slow.log</code></li><li>查看阈值：<code>show variables like 'long_query_time%'</code>，默认为10s</li><li>设置阈值：<code>set global long_query_time=3</code><ol><li>需要重新连接或新开一个会话才会看到生效</li></ol></li><li>查看抓取了几条慢查询sql：<code>show global status like '%Slow_queries%'</code></li></ol><p><strong>慢查询日志分析工具mysqldumpslow</strong></p><p> <img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201112140911.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201112141001.png"></p><h3 id="批量插入数据脚本"><a href="#批量插入数据脚本" class="headerlink" title="批量插入数据脚本"></a>批量插入数据脚本</h3><p>案例需求：插入50w个记录，要求员工名和部门编号为随机</p><ol><li><p>建表</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 新建库</span><span class="token keyword">create</span> <span class="token keyword">database</span> bigData<span class="token punctuation">;</span><span class="token keyword">use</span> bigData<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#1 建表dept</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dept<span class="token punctuation">(</span>  id <span class="token keyword">INT</span> UNSIGNED <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  deptno <span class="token keyword">MEDIUMINT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>   dname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">""</span><span class="token punctuation">,</span>  loc <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">""</span>  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>UTF8 <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">#2 建表emp</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp  <span class="token punctuation">(</span>  id <span class="token keyword">INT</span> UNSIGNED <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  empno <span class="token keyword">MEDIUMINT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*编号*/</span>  ename <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*名字*/</span>  job <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*工作*/</span>  mgr <span class="token keyword">MEDIUMINT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*上级编号*/</span>  hiredate <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*入职时间*/</span>  sal <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*薪水*/</span>  comm <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*红利*/</span>  deptno <span class="token keyword">MEDIUMINT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/*部门编号*/</span>  <span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>UTF8 <span class="token punctuation">;</span> </code></pre></li><li><p>设置参数<code>log_bin_trust_function_creators</code></p><ol><li>由于开启慢查询日志，需要配置一个参数，否则创建函数会报错<code>DETERMINISTIC</code></li><li><code>show variables like 'log_bin_trust_function_creators';</code></li><li><code>set global log_bin_turst_function_creators=1;</code></li></ol></li><li><p>创建函数，保证每条数据都不同</p><ol><li><p>随机产生字符串</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $$<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> rand_string<span class="token punctuation">(</span>n <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token comment" spellcheck="true">##方法开始</span> <span class="token keyword">DECLARE</span> chars_str <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span>   <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">##声明一个 字符窜长度为 100 的变量 chars_str ,默认值 </span> <span class="token keyword">DECLARE</span> return_str <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##循环开始</span> <span class="token keyword">WHILE</span> i <span class="token operator">&lt;</span> n <span class="token keyword">DO</span>   <span class="token keyword">SET</span> return_str <span class="token operator">=</span>CONCAT<span class="token punctuation">(</span>return_str<span class="token punctuation">,</span>SUBSTRING<span class="token punctuation">(</span>chars_str<span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##concat 连接函数  ，substring(a,index,length) 从index处开始截取</span> <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span> <span class="token keyword">RETURN</span> return_str<span class="token punctuation">;</span><span class="token keyword">END</span> $$</code></pre></li><li><p>随机产生部门编号</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#用于随机产生部门编号</span><span class="token keyword">DELIMITER</span> $$<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> rand_num<span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">SET</span> i <span class="token operator">=</span> FLOOR<span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">RETURN</span> i<span class="token punctuation">;</span>   <span class="token keyword">END</span> $$</code></pre></li></ol></li><li><p>创建存储过程，用于插入数据</p><ol><li><p>emp表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $$<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> insert_emp10000<span class="token punctuation">(</span><span class="token operator">IN</span> <span class="token keyword">START</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">IN</span> max_num <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/*参数1：起始员工id，参数2：插入的数据量*/</span><span class="token keyword">BEGIN</span>  <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">#set autocommit =0 把autocommit设置成0  ；事务开启</span> <span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     REPEAT  <span class="token comment" spellcheck="true">##重复，先执行后判断</span> <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp10000 <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> ename <span class="token punctuation">,</span>job <span class="token punctuation">,</span>mgr <span class="token punctuation">,</span>hiredate <span class="token punctuation">,</span>sal <span class="token punctuation">,</span>comm <span class="token punctuation">,</span>deptno <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">START</span><span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token punctuation">,</span>rand_string<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'SALESMAN'</span><span class="token punctuation">,</span><span class="token number">0001</span><span class="token punctuation">,</span>CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   UNTIL i <span class="token operator">=</span> max_num   <span class="token comment" spellcheck="true">##直到  上面也是一个循环</span> <span class="token keyword">END</span> REPEAT<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">##满足条件后结束循环</span> <span class="token keyword">COMMIT</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">##执行完成后一起提交</span> <span class="token keyword">END</span> $$</code></pre></li><li><p>dept表</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#执行存储过程，往dept表添加随机数据</span><span class="token keyword">DELIMITER</span> $$<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> insert_dept<span class="token punctuation">(</span><span class="token operator">IN</span> <span class="token keyword">START</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">IN</span> max_num <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/*参数1：起始部门id，参数2：插入的数据量*/</span><span class="token keyword">BEGIN</span>  <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     REPEAT   <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> dept <span class="token punctuation">(</span>deptno <span class="token punctuation">,</span>dname<span class="token punctuation">,</span>loc <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token keyword">START</span> <span class="token operator">+</span>i <span class="token punctuation">,</span>rand_string<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand_string<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   UNTIL i <span class="token operator">=</span> max_num   <span class="token keyword">END</span> REPEAT<span class="token punctuation">;</span>   <span class="token keyword">COMMIT</span><span class="token punctuation">;</span>   <span class="token keyword">END</span> $$</code></pre></li></ol></li><li><p>调用存储过程，插入数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token keyword">CALL</span> insert_dept<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">CALL</span> insert_emp<span class="token punctuation">(</span><span class="token number">100001</span><span class="token punctuation">,</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li></ol><h3 id="Show-Profile"><a href="#Show-Profile" class="headerlink" title="Show Profile"></a>Show Profile</h3><p>用来分析当前会话中语句执行的资源消耗，记录每一步花费了多少时间</p><p>默认情况下，处于关闭状态，并保存最近15此运行结果</p><p><strong>步骤</strong></p><ol><li>查看Mysql版本是否支持：<code>show variables like 'profiling'</code></li><li>开启功能：<code>set profiling = on</code></li><li>运行sql：执行一些sql语句，用于之后的记录</li><li>查看结果：<code>show profiles</code></li><li>诊断sql（查询这个sql的整个生命周期每个阶段的时间）：<code>show profile cpu,block io for query 号码</code>，这里的号码是上一步查出来的id</li><li>结论：出现有以下几点，需要优化<ol><li>converting heap to myisam 查询结果太大，内存不够用</li><li>creating tem table 创建临时表<ol><li>拷贝数据到临时表</li><li>用完再删除</li></ol></li><li>copying to tmp table on disk 把内存中临时表复制到磁盘</li><li>Locked</li></ol></li></ol><h3 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h3><p>作用：用于把所有sql语句，将会记录在mysql库里的general_log表中，可以用下面的指令查看</p><p><code>select * from mysql.general_log;</code></p><p>注意：不要在生产环境开启这个功能</p><p><strong>步骤</strong></p><ol><li><code>set global general_log = 1;</code></li><li><code>set global log_output='TABLE'</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础</title>
      <link href="/2020/11/07/mysql/mysql/"/>
      <url>/2020/11/07/mysql/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>数据库的好处</strong></p><ol><li>持久化数据到本地</li><li>可以实现结构化查询，方便管理</li></ol><p><strong>数据库相关概念</strong></p><ol><li>DB：数据库，保存一组有组织的数据的容器</li><li>DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据</li><li>SQL:结构化查询语言，用于和DBMS通信的语言</li></ol><p><strong>数据库存储数据的特点</strong></p><ol><li>将数据放到表中，表再放到库中</li><li>一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。</li><li>表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。</li><li>表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”</li><li>表中的数据是按行存储的，每一行类似于java中的“对象”。</li></ol><hr><h2 id="Mysql软件操作"><a href="#Mysql软件操作" class="headerlink" title="Mysql软件操作"></a>Mysql软件操作</h2><p><strong>Mysql安装/卸载</strong></p><p><strong>安装</strong></p><ol><li>安装mysql，选择custom自定义安装可以指定路径</li><li>mysql配置，在弹出的配置即可。如果关闭了就在安装路径下的bin/MySQLInstanceConfig.exe<ol><li>Detailed Configuration 精确配置</li><li>Developer Machine 开发机</li><li>Multifunctional Database 多功能数据库</li><li> DDS/OLAP 并发链接数最大20</li><li>Manual 字符集：utf8</li><li>Launch the MySQL （小对勾）开机自启，根据需要修改</li><li>Include Bin Directory ：开启dos命令行操作数据库。即帮助配置环境变量</li><li>Enable root access from remote （小对勾）：开启远程机访问，根据需要修改</li></ol></li></ol><p><strong>卸载</strong></p><ol><li>控制面板，卸载</li><li>找到安装路径，把安装路径的文件删除</li><li>找到c:/program Data （隐藏文件夹）的mysql文件夹删除</li><li>安装仍不成功就清理注册表</li></ol><p><strong>配置文件</strong></p><p><code>my.ini</code>（mysqld）</p><p>port：端口号</p><p>basedir：安装目录</p><p>datadir：数据目录</p><p>character-set-server：字符集</p><blockquote><p>dos命令行下中文乱码：</p><ol><li><code>show variables like 'char%';</code>查看字符集</li><li><code>set character_set_results=gb2312;</code>修改字符集为gb2312</li></ol></blockquote><p>default-storage-engine：默认存储引擎</p><blockquote><p>注意：需要重启服务才会生效</p></blockquote><p><strong>启动和停止</strong></p><p>方式一：计算机——右击管理——服务——Mysql名<br>方式二：通过管理员身份运行<br>net start 服务名（启动服务）<br>net stop 服务名（停止服务）</p><p><strong>登录和退出r</strong></p><p>方式一：通过mysql自带的客户端<br>只限于root用户</p><p>方式二：通过windows自带的客户端<br>登录：<br>mysql 【-h主机名 -P端口号 】-u用户名 -p密码（-p密码之间不能有空格）</p><p>退出：<br>exit或ctrl+C</p><blockquote><p>如果dos环境不识别mysql，证明环境变量没有配好</p><p>找到系统变量，Path，将mysql安装路径放在最前面，用;隔开</p></blockquote><p><strong>可视化图形界面SQLyog</strong></p><p>新建连接，输入之后即可链接</p><p>ctrl+滚轮：调整字体大小</p><hr><h2 id="MySQL的常见命令"><a href="#MySQL的常见命令" class="headerlink" title="MySQL的常见命令"></a>MySQL的常见命令</h2><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>查看当前所有的数据库    <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>        <span class="token operator">></span> information_schema    元数据信息        <span class="token operator">></span> mysql    用户信息        <span class="token operator">></span> perfoemance_schema    性能信息<span class="token number">2</span><span class="token punctuation">.</span>打开指定的库    <span class="token keyword">use</span> 库名<span class="token number">3</span><span class="token punctuation">.</span>查看当前库的所有表    <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span>查看其它库的所有表（并不会跳转到该库）    <span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token keyword">from</span> 库名<span class="token punctuation">;</span>    查看当前所在库    <span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">.</span>创建表    <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>        列名 列类型<span class="token punctuation">,</span>        列名 列类型，        。。。    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6</span><span class="token punctuation">.</span>查看表结构    <span class="token keyword">desc</span> 表名<span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">.</span>查看服务器的版本    方式一：登录到mysql服务端    <span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    方式二：没有登录到mysql服务端    mysql <span class="token comment" spellcheck="true">--version</span>    或    mysql <span class="token comment" spellcheck="true">--V</span></code></pre><p><strong>MySQL的语法规范</strong></p><ol><li>不区分大小写,但建议关键字大写，表名、列名小写</li><li>每条命令最好用分号结尾</li><li>每条命令根据需要，可以进行缩进 或换行</li><li>注释<pre><code>单行注释：#注释文字   单行注释：-- 注释文字   多行注释：/* 注释文字  */</code></pre></li></ol><hr><h2 id="DQL数据查询语言"><a href="#DQL数据查询语言" class="headerlink" title="DQL数据查询语言"></a>DQL数据查询语言</h2><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20201103115505683.png"></p><blockquote><p>需要先切换到指定库</p><p>`折中号可以省略</p><p>格式化：选中，F12</p><p>双击列名可以直接出现，不用手敲字段名</p></blockquote><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><pre class=" language-sql"><code class="language-sql">语法：<span class="token keyword">SELECT</span> 要查询的东西【<span class="token keyword">FROM</span> 表名】<span class="token punctuation">;</span>特点：①通过<span class="token keyword">select</span>查询完的结果 ，是一个虚拟的表格，不是真实存在② 要查询的东西 可以是常量值（<span class="token keyword">select</span> <span class="token number">100</span><span class="token punctuation">;</span>）、可以是表达式<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">100</span><span class="token operator">%</span><span class="token number">98</span><span class="token punctuation">;</span><span class="token punctuation">)</span>、可以是字段<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">'john'</span><span class="token punctuation">;</span><span class="token punctuation">)</span>、可以是函数<span class="token punctuation">(</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p><strong>起别名<code>as</code></strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> last_name <span class="token keyword">as</span> name<span class="token keyword">select</span> last_name name</code></pre><p>如果别名有空格或特殊字符，需要使用双引号”name”</p><p>当给表起别名，查询的字段就不能使用原来表名做限定，而是<code>别名.字段名</code></p><p><strong>去重<code>distinct</code></strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> department_id <span class="token keyword">from</span> emplyees</code></pre><p><strong>+号的作用</strong></p><p>只有一个功能：运算符</p><ol><li><p>select 100+90;两个操作数都是数值型，做加法运算</p></li><li><p>select ‘123’+90;其中一方为字符型，试图将字符型数值转换为数值。</p><p>  select ‘john’+90;</p><p>  如果转换成功，则加法运算</p><p>  如果转换失败，则将字符型数值转换为0</p><p>  如果一方为null，则结果一定为null</p></li></ol><p><strong>拼接<code>concat</code></strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 结果<span class="token punctuation">;</span></code></pre><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><pre class=" language-sql"><code class="language-sql">语法：<span class="token keyword">select</span>     要查询的字段<span class="token operator">|</span>表达式<span class="token operator">|</span>常量值<span class="token operator">|</span>函数<span class="token keyword">from</span>     表<span class="token keyword">where</span>     条件 <span class="token punctuation">;</span></code></pre><p><strong>分类：</strong></p><ol><li><p>条件表达式</p><pre><code>示例：salary&gt;10000   条件运算符：</code></pre><p>&lt; &gt;= &lt;= = != &lt;&gt;<br><strong>注意</strong>：!=和&lt;&gt;和not(…)是相同概念，推荐使用&lt;&gt;</p></li><li><p>逻辑表达式<br>示例：salary&gt;10000 &amp;&amp; salary&lt;20000</p></li><li><p>逻辑运算符：<br>and（&amp;&amp;）:两个条件如果同时成立，结果为true，否则为false<br>or(||)：两个条件只要有一个成立，结果为true，否则为false<br>not(!)：如果条件成立，则not后为false，否则为true</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查询部门编号不是在90-100之间，或者工资高于15000的员工信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span><span class="token operator">not</span><span class="token punctuation">(</span>department_id<span class="token operator">></span><span class="token number">90</span> <span class="token operator">and</span> department_id <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">or</span> salary<span class="token operator">></span><span class="token number">15000</span><span class="token punctuation">;</span></code></pre></li><li><p>模糊查询</p><p><strong><code>like</code></strong></p><ol><li><p>通常与通配符使用</p></li><li><p><code>like '%%'</code>查询不到null值</p><p>通配符：</p><p>  <code>%</code>：任意多个字符，包含0个字符</p><p>  <code> _</code>：任意单个字符</p></li></ol><p>转义字符<code>eacape</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#转义字符</span><span class="token comment" spellcheck="true">#查询员工名中第二个字符为_下划线的</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> last_name <span class="token operator">like</span> <span class="token string">'_$%'</span> <span class="token keyword">escape</span><span class="token string">' $'</span> <span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#模糊查询like</span><span class="token comment" spellcheck="true">#查询员工名中第三个字符为e的</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> last_name <span class="token operator">like</span> <span class="token string">'__n%'</span><span class="token punctuation">;</span></code></pre><p><strong>between…and…</strong></p><ol><li><p>要求小数在前</p></li><li><p>包含临界值</p></li></ol><p><strong>in</strong></p><ol><li>列表的值类型必须统一或者兼容</li></ol></li><li><p>不支持通配符</p><ol start="3"><li>不区分大小写</li></ol></li><li><p>字符必须用单引号括起来</p></li></ol><p><strong><code>is null</code></strong></p><ol><li>=或&lt;&gt;不能用于判断null值</li><li>安全等于<code>&lt;=&gt;</code>和<code>is null</code>，前者可以判断普通数值和null，后者只能判断null，但后者可读性高，推荐使用<ol start="3"><li>函数ifnull(x1,x2)：如果x1不为null则返回x1，否则返回x2</li></ol></li></ol><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><pre class=" language-sql"><code class="language-sql">语法：<span class="token keyword">select</span>    要查询的东西<span class="token keyword">from</span>    表<span class="token keyword">where</span>     条件<span class="token keyword">order</span> <span class="token keyword">by</span> 排序的字段<span class="token operator">|</span>表达式<span class="token operator">|</span>函数<span class="token operator">|</span>别名 【<span class="token keyword">asc</span><span class="token operator">|</span><span class="token keyword">desc</span>】</code></pre><p>特点：</p><ol><li>asc为升序，不写默认为升序</li><li>desc为降序，从高到低</li><li>可以设置多个排序规则，如<code>order by salary desc,employee_id asc</code></li><li>order by子句一般放在查询语句的最后面，limit子句除外</li></ol><h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><p>一、单行函数（处理函数）</p><pre><code>1、字符函数    concat拼接：concat(firstname,'_',lastname)    substr截取子串：substr('abcde',3)--&gt;cde，substr('abcde',1,2)--&gt;ab（索引从1开始）    upper转换成大写    lower转换成小写    trim去前后指定的空格和字符：trim(' a  ')，trim('a' from 'aaaabaaacaaa')--&gt;baaac    ltrim去左边空格    rtrim去右边空格    replace替换：replace('abc','b','a')--&gt;aac    lpad左填充：lpad('abc',5,'*')--&gt;**abc    rpad右填充    instr返回子串第一次出现的索引：instr('abcde','cd')--&gt;3    length 获取字节个数    2、数学函数    round 四舍五入：round(1.2)--&gt;1，round(1.22,1)--&gt;1.2    rand 随机数    floor向下取整：floor(-9.9)--&gt;-10    ceil向上取整    mod取余：mod(10,-3)--&gt;1,mod(-10,3)--&gt;-1，（余数和被除数的符号有关）（公式:a-a/b*b）    truncate截断：truncate(1.6999,1)--&gt;1.6    3、日期函数    now当前系统日期+时间    curdate当前系统日期，不包含时间    curtime当前系统时间，不包含日期    datediff计算相差天数    year 年/月/日/时/分/秒：year(birthday)--&gt;返回年    monthname 英文月    day    天    hour 小时    minute    分钟    second    秒    str_to_date 将字符转换成日期：str_to_date('9-12-1999','%m-%d-%Y')，    date_format将日期转换成字符：data_format(now(),'%y年%m月%d日')    4、流程控制函数    if 处理双分支：select name,if(salary is null,'没工资','有工资') as 备注 from employees    case语句 处理多分支        情况1：处理等值判断(case后有值)            select salary 原工资,            case department_id            when 30 then salary*1.1            when 40 then salary*1.2            else salary            end as 新工资            from employees        情况2：处理条件判断（case后无值）            select salary,            case            when salary&gt;20000 then 'a'            when salary&gt;15000 then 'b'            else 'c'            end as 工资级别            from employees    5、其他函数    version版本    database当前库    user当前连接用户</code></pre><table><thead><tr><th align="center">%Y</th><th align="center">四位年份</th></tr></thead><tbody><tr><td align="center">%y</td><td align="center">2位年份</td></tr><tr><td align="center">%m</td><td align="center">月份01，02</td></tr><tr><td align="center">%c</td><td align="center">月份1，2</td></tr><tr><td align="center">%d</td><td align="center">日01，02</td></tr><tr><td align="center">%H</td><td align="center">小时，24小时制</td></tr><tr><td align="center">%h</td><td align="center">小时，12小时制</td></tr><tr><td align="center">%i</td><td align="center">分钟00，01</td></tr><tr><td align="center">%s</td><td align="center">秒00，01</td></tr></tbody></table><p>二、分组函数（聚合/统计函数）</p><pre><code>sum 求和max 最大值min 最小值avg 平均值count 计数特点：    1、以上五个分组函数都忽略null值，除了count(*)    2、sum和avg一般用于处理数值型    max、min、count可以处理任何数据类型    3、都可以搭配distinct使用，用于统计去重后的结果    4、count的参数可以支持：    字段、*、常量值，一般放1        效率：        MYISAM：count(*)效率高，因为内部有计数器        INNODB：count(*)和count(1)的效率差不多，比count(字段)高，字段需要进行判断是否为null，来决定是否+1的操作。建议使用 count(*)    5、和分组函数一同查询的字段要求是group by后的字段</code></pre><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><pre class=" language-sql"><code class="language-sql">语法：<span class="token keyword">select</span> 查询的字段，分组函数<span class="token keyword">from</span> 表<span class="token punctuation">[</span><span class="token keyword">where</span> 筛选条件<span class="token punctuation">]</span><span class="token keyword">group</span> <span class="token keyword">by</span> 分组的字段<span class="token punctuation">[</span><span class="token keyword">having</span> 筛选条件<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">order</span> <span class="token keyword">by</span> 子句<span class="token punctuation">]</span></code></pre><pre><code>特点：1、可以按单个字段、多个字段、表达式/函数分组（用的较少）2、和聚合函数一同查询的字段最好是分组后(group by)的字段（重要）3、分组筛选            针对的表        位置                关键字分组前筛选：    原始表            group by的前面          where分组后筛选：    分组后的结果集      group by的后面        having*聚合函数做筛选条件，一定是在having子句中*能在分组前筛选的，优先考虑使用分组前筛选（效率问题）4、可以按多个字段分组，字段之间用逗号隔开（就是将多个字段都相同的分为一个组）5、可以支持排序6、having后可以支持别名(oracle不支持)</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例1：查询每个工种的最高工资</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span>job_id<span class="token keyword">from</span> employees<span class="token keyword">group</span> <span class="token keyword">by</span> job_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#案例2：查询每个位置上的部门个数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>location_id<span class="token keyword">from</span> departments<span class="token keyword">group</span> <span class="token keyword">by</span> location_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#案例3：查询有奖金的每个领导手下员工的最高工资</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span>manager_id<span class="token keyword">from</span> employees<span class="token keyword">where</span> commission_pct <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token keyword">group</span> <span class="token keyword">by</span> manager_id<span class="token comment" spellcheck="true">#案例4：查询每个工种有奖金的员工的最高工资>12000的工种编号和最高工资</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span>job_id<span class="token keyword">from</span> employees<span class="token keyword">where</span> commission_pct <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token keyword">group</span> <span class="token keyword">by</span> job_id<span class="token keyword">having</span> job_id<span class="token operator">></span><span class="token number">12000</span><span class="token comment" spellcheck="true">#案例5：查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，没有管理者的员工不计算在内</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span>manager_id<span class="token keyword">from</span> employees<span class="token keyword">where</span> manager_id <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token keyword">group</span> <span class="token keyword">by</span> manager_id<span class="token keyword">having</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">6000</span><span class="token comment" spellcheck="true">#案例6：查询所有部门的编号，员工数量和工资平均值，并按照平均工资降序</span><span class="token keyword">select</span> department_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span> employees<span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">desc</span></code></pre><h3 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h3><p>分类：</p><pre><code>按年代分类：    sql92标准：仅支持内连接     sql99标准（推荐）：全支持，除了外连接的全外不支持按功能分类    1.内连接：        等值连接:            1. 多表等值连接结果是多表交集部分            2. n表连接，需要n-1个连接条件            3. 多表顺序无要求            4. 一般给表起别名（用别名，select字段也需要别名进行限定）            5. 可以搭配所有子句使用        非等值连接        自连接        内连接 inner            语法：                select 查询列表                from 表1 别名 [连接类型]                join 表2 别名                on 连接条件                [where 筛选条件]                [group by 分组]                [having 筛选条件]                [order by 排序列表]            1.inner可以省略            2. 筛选条件放在where后面，连接条件放在on后面    2.外连接：        应用场景：            **用于查询一个表中有，另一个表没有的记录**            1. 查询结果为主表左右记录                如果表中有和它匹配的，就匹配                没有就显示为Null                外连接查询结果=内连接结果+主表有而从表没有的记录        左外连接 left [outer] 左表为主表        右外连接 right [outer] 右表为主表        全外连接 full [outer]            全外连接=内连接结果+表1有但表2没有+表2有但表1没有    3.交叉连接（笛卡尔乘积） cross</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例1（等值+筛选）：查询有奖金的员工名、部门名</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span>department_name<span class="token keyword">from</span> employees <span class="token number">e</span><span class="token punctuation">,</span>departments <span class="token number">d</span><span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id<span class="token operator">and</span> <span class="token number">e</span><span class="token punctuation">.</span>commission_pct <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#案例2（等值+分组）：查询每个城市的部门个数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 个数<span class="token punctuation">,</span>city<span class="token keyword">from</span> departments <span class="token number">d</span><span class="token punctuation">,</span>locations l<span class="token keyword">where</span> <span class="token number">d</span><span class="token punctuation">.</span>location_id <span class="token operator">=</span> l<span class="token punctuation">.</span>location_id<span class="token keyword">group</span> <span class="token keyword">by</span> city<span class="token comment" spellcheck="true">#案例3：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</span><span class="token keyword">select</span> department_name<span class="token punctuation">,</span>department<span class="token punctuation">.</span>manager_id<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">from</span> employees<span class="token punctuation">,</span>departments<span class="token keyword">where</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token operator">and</span> commission_pct <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token keyword">group</span> <span class="token keyword">by</span> department_name<span class="token comment" spellcheck="true">#案例4（非等值连接）：查询员工的工资和工资级别</span><span class="token keyword">select</span> salary<span class="token punctuation">,</span>grade_level<span class="token keyword">from</span> emplpyees <span class="token number">e</span> <span class="token punctuation">,</span>job_grades g<span class="token keyword">where</span> salary <span class="token operator">between</span> g<span class="token punctuation">.</span>lowest_sal <span class="token operator">and</span> g<span class="token punctuation">.</span>highest<span class="token punctuation">.</span>sal<span class="token comment" spellcheck="true">#案例5（自连接）：查询员工名和上级的名称</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>employees_id<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>m<span class="token punctuation">.</span>employees_id<span class="token punctuation">,</span>m<span class="token punctuation">.</span>last_name<span class="token keyword">from</span> employees <span class="token number">e</span><span class="token punctuation">,</span>emoloyees m<span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>manager_id <span class="token operator">=</span> m<span class="token punctuation">.</span>employees_id</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#内连查询</span><span class="token comment" spellcheck="true">#案例1：查询部门个数>3的城市名和部门个数</span><span class="token keyword">select</span> city<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 部门个数<span class="token keyword">from</span> departments <span class="token number">d</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> locations l<span class="token keyword">on</span> <span class="token number">d</span><span class="token punctuation">.</span>location_id <span class="token operator">=</span> l<span class="token punctuation">.</span>location_id<span class="token keyword">group</span> <span class="token keyword">by</span> city<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token comment" spellcheck="true">#案例2：查询哪个部门的员工个数>3的部门名和员工个数，并按个数降序</span><span class="token keyword">select</span> department_name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">from</span> department <span class="token number">d</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> employees <span class="token number">e</span><span class="token keyword">on</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id<span class="token keyword">group</span> <span class="token keyword">by</span> department_name<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token comment" spellcheck="true">#案例3（3表连接）：查询员工名、部门名、工种名，并按照部门名降序</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>job_title<span class="token keyword">from</span> employees <span class="token number">e</span><span class="token keyword">inner</span> <span class="token keyword">join</span> departments <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id<span class="token keyword">inner</span> <span class="token keyword">join</span> job j <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>job_id <span class="token operator">=</span> j<span class="token punctuation">.</span>job_id<span class="token keyword">order</span> <span class="token keyword">by</span> department_name <span class="token keyword">desc</span><span class="token comment" spellcheck="true">#案例4（非等值连接）：查询工资级别的个数>20的个数，并且按照工资级别降序</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>grade_lecel<span class="token keyword">from</span> employees <span class="token number">e</span> <span class="token keyword">join</span> job_grades g<span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>salary <span class="token operator">between</span> g<span class="token punctuation">.</span>lowest_sal <span class="token operator">and</span> g<span class="token punctuation">.</span>highest_sal<span class="token keyword">group</span> <span class="token keyword">by</span> grade_level<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">20</span><span class="token keyword">order</span> <span class="token keyword">by</span> grade_level <span class="token keyword">desc</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#外联查询</span><span class="token comment" spellcheck="true">#案例1：查询没有男朋友的女神名单</span><span class="token keyword">select</span> <span class="token number">b</span><span class="token punctuation">.</span>name<span class="token keyword">from</span> beauty <span class="token number">b</span> <span class="token keyword">left</span> <span class="token keyword">join</span> boys bo<span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>boyfriend_id <span class="token operator">=</span> bo<span class="token punctuation">.</span>id<span class="token keyword">where</span> bo<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token comment" spellcheck="true">#案例2：查询哪个部门没有员工</span><span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span>department_name<span class="token keyword">from</span> departments <span class="token number">d</span> <span class="token keyword">left</span> <span class="token keyword">join</span> employees <span class="token number">e</span><span class="token keyword">on</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id<span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>employees_id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token comment" spellcheck="true">#案例3：查询编号>3的女神的男朋友信息，如果有则列出详情，没有，用Null填充</span><span class="token keyword">select</span> <span class="token number">b</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>bo<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> beauty <span class="token number">b</span> <span class="token keyword">left</span> <span class="token keyword">join</span> boys bo<span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>boyfriend_id <span class="token operator">=</span> bo<span class="token punctuation">.</span>id<span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>id<span class="token operator">></span><span class="token number">3</span><span class="token comment" spellcheck="true">#案例4：查询哪个城市没有部门</span><span class="token keyword">select</span> city<span class="token keyword">from</span> location l <span class="token keyword">left</span> <span class="token keyword">join</span> department <span class="token number">d</span><span class="token keyword">on</span> l<span class="token punctuation">.</span>location_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>location<span class="token punctuation">.</span>id<span class="token keyword">where</span> l<span class="token punctuation">.</span>department_id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token comment" spellcheck="true">#案例5：查询部门名为SAL或IT的员工信息</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>department_name<span class="token keyword">from</span> employees <span class="token number">e</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> departments <span class="token number">d</span><span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id<span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>department_name <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'SAL'</span><span class="token punctuation">,</span><span class="token string">'IT'</span><span class="token punctuation">)</span></code></pre><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201104232057.png"></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>含义：</p><pre><code>又称多表查询，当查询的字段来自于多个表时，就会用到连接查询一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询在外面的查询语句，称为主查询或外查询</code></pre><p>分类：</p><pre><code>按子查询出现的位置：    select后面：        支持标量子查询    from 后面        支持表子查询    where或having后面★        标量子查询★         列子查询★        行子查询 （用的较少）    exists后面（相关子查询）:        语法：            select exists(select * from x) --&gt; 0不存在,1存在        表子查询按结果集的行列数不同    标量子查询（结果集只有一行一列）    列子查询（结果集只有一列多行）    行子查询（结果集只有一行多列）    表子查询（结果集一般为多行多列）</code></pre><p>特点：</p><pre><code>1、子查询都放在小括号内2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧3、子查询优先于主查询执行，主查询使用了子查询的执行结果4、子查询根据查询结果的行数不同分为以下两类：① 单行子查询    结果集只有一行    一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;=     非法使用子查询的情况：    a、子查询的结果为一组值    b、子查询的结果为空    ② 多行子查询    结果集有多行    一般搭配多行操作符使用：any、all、in、not in    in： 属于子查询结果中的任意一个就行    any和all，和子查询结果中某一个进行比较，true则返回，不常用，往往可以用其他查询代替</code></pre><ol><li>where后面</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#标量子查询</span><span class="token comment" spellcheck="true">#案例1：查询公司工资最少的员工的last_name,job_id和salary</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>salary<span class="token keyword">from</span> employees<span class="token keyword">where</span> salary<span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">from</span> employees<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#案例2：查询最低工资大于50号部门最低工资的部门id和其最低工资</span><span class="token comment" spellcheck="true">#1.查询50号部门最低工资</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span> employees<span class="token keyword">where</span> department_id <span class="token operator">=</span> <span class="token number">50</span><span class="token comment" spellcheck="true">#2.查询所有部门的最低工资</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span>department_id<span class="token keyword">from</span> employees<span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token comment" spellcheck="true">#3. 2>1的基础上，查询部门id和其最低工资</span><span class="token keyword">select</span> department_id<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span> employees<span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token keyword">having</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>    <span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">from</span> employees    <span class="token keyword">where</span> department_id <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#列子查询（多行子查询）</span><span class="token comment" spellcheck="true">#案例1：返回location_id是1400或1700的部门中的所有员工姓名</span><span class="token comment" spellcheck="true">#1.查询id为1400，1700的部门编号</span><span class="token keyword">select</span> department_id<span class="token keyword">from</span> locations<span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1400</span><span class="token punctuation">,</span><span class="token number">1700</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2.查询所有员工，部门号是1</span><span class="token keyword">select</span> last_name<span class="token keyword">from</span> employees<span class="token keyword">where</span> department_id <span class="token operator">in</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span> department_id    <span class="token keyword">from</span> locations    <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1400</span><span class="token punctuation">,</span><span class="token number">1700</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#案例2：返回其它部门中比job_id为'IT_PROG'部门任一工资低的员工的员工号、姓名、job_id以及salary</span><span class="token comment" spellcheck="true">#1.job_id为'IT_PROG'部门的最低工资</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> salary<span class="token keyword">from</span> employees<span class="token keyword">where</span> job_id<span class="token operator">=</span><span class="token string">'IT_PROG'</span><span class="token comment" spellcheck="true">#2.</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>salary<span class="token keyword">from</span> employees<span class="token keyword">where</span> salary <span class="token operator">&lt;</span> <span class="token keyword">any</span><span class="token punctuation">(</span>    <span class="token keyword">select</span> <span class="token keyword">distinct</span> salary    <span class="token keyword">from</span> employees    <span class="token keyword">where</span> job_id<span class="token operator">=</span><span class="token string">'IT_PROG'</span><span class="token punctuation">)</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#行子查询（结果集一行多列或多行多列）</span><span class="token comment" spellcheck="true">#案例：查询员工编号最小并且工资最高的员工信息</span><span class="token comment" spellcheck="true">#局限：两个字段都需要相同的约束符=,in</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employees<span class="token keyword">where</span> <span class="token punctuation">(</span>employees_id<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>     <span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>employees_id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">from</span> employees<span class="token punctuation">)</span></code></pre><ol start="2"><li>select后面</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例1：查询每个部门的员工个数</span><span class="token comment" spellcheck="true">#约束：必须是标量子查询，结果集是一行一列</span><span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token punctuation">(</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> employees <span class="token number">e</span>    <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id<span class="token punctuation">)</span>个数<span class="token keyword">from</span> departments <span class="token number">d</span></code></pre><ol start="3"><li>from后面</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例1：查询每个部门的平均工资的工资等级</span><span class="token keyword">select</span> ag_dep<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>g<span class="token punctuation">.</span>level<span class="token keyword">from</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span>department_id    <span class="token keyword">from</span> employees    <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">)</span> ag_dep<span class="token keyword">inner</span> <span class="token keyword">join</span> job_grades g<span class="token keyword">on</span> ag_dep<span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">between</span> lowest_sal <span class="token operator">and</span> highest_sal<span class="token punctuation">;</span></code></pre><ol start="4"><li>exists后面（相关子查询）</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例1：查询有员工的部门名</span><span class="token keyword">select</span> department_name<span class="token keyword">from</span> departments <span class="token number">d</span><span class="token keyword">where</span> <span class="token keyword">exists</span><span class="token punctuation">(</span>    <span class="token keyword">select</span> <span class="token operator">*</span>    <span class="token keyword">from</span> employees <span class="token number">e</span>    <span class="token keyword">where</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id<span class="token punctuation">)</span><span class="token punctuation">;</span>https:<span class="token comment" spellcheck="true">//wenku.baidu.com/view/9fb65893b94cf7ec4afe04a1b0717fd5360cb28c.html</span></code></pre><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>应用场景</p><pre><code>实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</code></pre><p>语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 字段<span class="token operator">|</span>表达式<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> 表【<span class="token keyword">where</span> 条件】【<span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段】【<span class="token keyword">having</span> 条件】【<span class="token keyword">order</span> <span class="token keyword">by</span> 排序的字段】<span class="token keyword">limit</span> 【起始的条目索引】，条目数<span class="token punctuation">;</span></code></pre><p>特点：</p><pre><code>1.起始条目索引从0开始2.limit子句放在查询语句的最后3.索引公式：select * from  表 limit （page-1）*size,sizepage:要显示的页数sizePerpage：显示的个数假如:每页显示条目数size要显示的页数 page</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例1:有奖金的员工信息，并且工资较高的前十名显示出来</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employees <span class="token number">e</span><span class="token keyword">where</span> comission_pct <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span><span class="token keyword">limit</span> <span class="token number">10</span></code></pre><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>引入：<br>    union 联合、合并</p><p>应用场景：</p><p>​    多表查询，表之间没有关系，且查询的信息一致</p><p>语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 字段<span class="token operator">|</span>常量<span class="token operator">|</span>表达式<span class="token operator">|</span>函数 【<span class="token keyword">from</span> 表】 【<span class="token keyword">where</span> 条件】 <span class="token keyword">union</span> 【<span class="token keyword">all</span>】<span class="token keyword">select</span> 字段<span class="token operator">|</span>常量<span class="token operator">|</span>表达式<span class="token operator">|</span>函数 【<span class="token keyword">from</span> 表】 【<span class="token keyword">where</span> 条件】 <span class="token keyword">union</span> 【<span class="token keyword">all</span>】<span class="token keyword">select</span> 字段<span class="token operator">|</span>常量<span class="token operator">|</span>表达式<span class="token operator">|</span>函数 【<span class="token keyword">from</span> 表】 【<span class="token keyword">where</span> 条件】 <span class="token keyword">union</span>  【<span class="token keyword">all</span>】<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">select</span> 字段<span class="token operator">|</span>常量<span class="token operator">|</span>表达式<span class="token operator">|</span>函数 【<span class="token keyword">from</span> 表】 【<span class="token keyword">where</span> 条件】</code></pre><p>特点：</p><pre><code>1、多条查询语句的查询的列数必须是一致的2、多条查询语句的查询的列的类型和顺序几乎相同3、union代表去重，union all代表不去重</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例1：查询中国用户男性的信息以及外国用户男性的信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_ca <span class="token keyword">where</span> sex<span class="token operator">=</span> <span class="token string">'男'</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_ua <span class="token keyword">where</span> gender<span class="token operator">=</span> <span class="token string">'male'</span> </code></pre><hr><h2 id="DML数据操作语言"><a href="#DML数据操作语言" class="headerlink" title="DML数据操作语言"></a>DML数据操作语言</h2><p>###插入</p><p>语法： </p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#方式1：</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段名，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#方式2：</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> 表名    <span class="token keyword">set</span> 列名<span class="token operator">=</span>值，列名<span class="token operator">=</span>值<span class="token comment" spellcheck="true">#两种方式的区别</span>    方式<span class="token number">1</span>支持插入多行，<span class="token number">2</span>不支持    方式<span class="token number">1</span>支持子查询，<span class="token number">2</span>不支持        <span class="token keyword">insert</span> <span class="token keyword">into</span> beauty<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>phone<span class="token punctuation">)</span>        <span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>phone <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span></code></pre><p>特点：</p><pre><code>1、字段类型和值类型一致或兼容，而且一一对应2、可以为空的字段，可以不用插入值，或用null填充3、不可以为空的字段，必须插入值4、字段个数和值的个数必须一致5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</code></pre><p>###修改</p><p>修改单表语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段<span class="token operator">=</span>新值<span class="token punctuation">,</span>字段<span class="token operator">=</span>新值【<span class="token keyword">where</span> 条件】</code></pre><p>修改多表语法：</p><pre class=" language-sql"><code class="language-sql">sql92语法：<span class="token keyword">update</span> 表<span class="token number">1</span> 别名<span class="token number">1</span><span class="token punctuation">,</span>表<span class="token number">2</span> 别名<span class="token number">2</span><span class="token keyword">set</span> 字段<span class="token operator">=</span>新值，字段<span class="token operator">=</span>新值<span class="token keyword">where</span> 连接条件<span class="token operator">and</span> 筛选条件sql99语法：<span class="token keyword">update</span> 表<span class="token number">1</span> 别名<span class="token keyword">inner</span><span class="token operator">|</span><span class="token keyword">left</span><span class="token operator">|</span><span class="token keyword">right</span> <span class="token keyword">join</span> 表<span class="token number">2</span> 别名<span class="token keyword">on</span> 连接条件<span class="token keyword">set</span> 列名 <span class="token operator">=</span> 值<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span> 筛选条件</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#修改多表记录</span><span class="token comment" spellcheck="true">#案例1：修改张无忌的女朋友的手机号为114</span><span class="token keyword">update</span> boys <span class="token number">b</span><span class="token keyword">inner</span> <span class="token keyword">join</span> beauty <span class="token number">be</span><span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">be</span><span class="token punctuation">.</span>boyfriend<span class="token punctuation">.</span>id<span class="token keyword">set</span> <span class="token number">be</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">'114'</span><span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张无忌'</span><span class="token comment" spellcheck="true">#案例2：修改没有男朋友的女神的男朋友的编号都为2号</span><span class="token keyword">update</span> beauty <span class="token number">be</span><span class="token keyword">left</span> <span class="token keyword">join</span> boys <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">be</span><span class="token punctuation">.</span>boyfriend<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id<span class="token keyword">set</span> <span class="token number">be</span><span class="token punctuation">.</span>boyfriend<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'2'</span><span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token comment" spellcheck="true">#注意这里是从表是null，不是主表的be.boyfried_id</span></code></pre><p>###删除</p><p>方式1：delete语句 </p><pre class=" language-sql"><code class="language-sql">单表的删除： ★    <span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 【<span class="token keyword">where</span> 筛选条件】</code></pre><pre class=" language-sql"><code class="language-sql">sql92多表的删除：    <span class="token keyword">delete</span> 别名<span class="token number">1</span>，别名<span class="token number">2</span>    <span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token number">1</span>，表<span class="token number">2</span> 别名<span class="token number">2</span>    <span class="token keyword">where</span> 连接条件    <span class="token operator">and</span> 筛选条件<span class="token punctuation">;</span>sql99:    <span class="token keyword">delete</span> 别名<span class="token number">1</span>，别名<span class="token number">2</span>    <span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token number">1</span>     <span class="token keyword">inner</span><span class="token operator">|</span><span class="token keyword">left</span><span class="token operator">|</span><span class="token keyword">right</span> <span class="token keyword">join</span> 表<span class="token number">2</span> 别名<span class="token number">2</span>     <span class="token keyword">on</span> 连接条件    <span class="token keyword">where</span> 筛选条件</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#多表删除案例</span><span class="token comment" spellcheck="true">#案例1：删除张无忌的女朋友的信息</span><span class="token keyword">delete</span> <span class="token number">be</span><span class="token keyword">from</span> boys <span class="token number">b</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> beauty <span class="token number">be</span><span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">be</span><span class="token punctuation">.</span>boyfriend_id<span class="token keyword">where</span> <span class="token number">be</span><span class="token punctuation">.</span>boyName<span class="token operator">=</span><span class="token string">'张无忌'</span></code></pre><p>方式2：truncate语句（清空表数据）</p><pre><code>truncate table 表名</code></pre><p>两种方式的区别【面试题】</p><pre><code>1.    Delete可以加where条件，truncate不能加2.    Truncate删除，效率高一点3.    如果用delete删除后，再插入数据，自增长列的值从断点开始而truncate删除后，再插入数据，自增长列的值从1开始4.    Truncate删除没有返回值，delete删除有返回值5.    Truncate删除不能回滚，delete删除可以回滚</code></pre><hr><h2 id="DDL数据库操作语言"><a href="#DDL数据库操作语言" class="headerlink" title="DDL数据库操作语言"></a>DDL数据库操作语言</h2><h3 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h3><pre class=" language-sql"><code class="language-sql">创建:    <span class="token keyword">create</span> <span class="token keyword">database</span> 【<span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span>如果已创建则不执行】 库名修改：    <span class="token keyword">alter</span> <span class="token keyword">database</span> 库名 <span class="token keyword">character set</span> 字符集删除：    <span class="token keyword">drop</span> <span class="token keyword">database</span> 【<span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span>如果已创建则不执行】 库名</code></pre><h3 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h3><pre class=" language-sql"><code class="language-sql">创建、修改、删除创：    <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>        列名 列的类型【（长度） 约束】        列名 列的类型【（长度） 约束】        …     <span class="token punctuation">)</span>修改：    <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span><span class="token operator">|</span><span class="token keyword">drop</span><span class="token operator">|</span><span class="token keyword">modify</span><span class="token operator">|</span>change <span class="token keyword">column</span> 列名 【列类型 约束】    <span class="token number">1</span><span class="token punctuation">.</span>    修改列名         <span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 change <span class="token keyword">column</span> 旧列名 新列名 新类型    <span class="token number">2</span><span class="token punctuation">.</span>    修改列的类型或约束        <span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 列名 新类型    <span class="token number">3</span><span class="token punctuation">.</span>    增加新列        <span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">column</span> 列名 类型    <span class="token number">4</span><span class="token punctuation">.</span>    删除列        <span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">column</span> 列名    <span class="token number">5</span><span class="token punctuation">.</span>    修改表名        <span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">rename</span> <span class="token keyword">to</span> 新表名删除：<span class="token keyword">drop</span> <span class="token keyword">table</span> 表名通用写法：    <span class="token keyword">Drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 旧库名    <span class="token keyword">Create</span> <span class="token keyword">database</span> 新库名    <span class="token keyword">Drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 旧表名    <span class="token keyword">Create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span><span class="token punctuation">)</span> 表的复制：    <span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token operator">like</span> 被复制的表名    <span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> author</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例1：将表departments中的数据插入新表dept2中</span><span class="token keyword">Create</span> <span class="token keyword">table</span> dept2<span class="token keyword">Select</span> department_id <span class="token punctuation">,</span>department_name<span class="token keyword">From</span> myemployees<span class="token punctuation">.</span>departments<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#跨库查询 </span></code></pre><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><pre><code>数值型：    整型：        Tinyint(字节1，有符号-128-127，无符号0-255),设置无符号： int unsigned        Smallint(2)        Mediumint(3)        Int、integer(4)        Bitint(8)        特点：            1. 不设置有无符号，默认为有符号，如果设置无符号： int unsigned            2. 插入超过整形范围，报out of range异常，并插入临界值            3. 不设置长度，会默认长度            4. 长度代表最大宽度，如果不够会用0在左边填充，必须搭配zerofill使用        小数：        浮点型            float(4字节)            double(8字节)        定点型(精度更高)            dec、decimal        特点：            1. 两个参数Float(M,D)                M：整数部位+小数部位                D：小数部位            2. 参数可以省略                如果是decimal，M默认为10，D为0                如果是float、double，插入什么数值就是什么精度字符型：    较短的文本:char、varchar        特点：            1. 1个参数char(M)                M:最大字符数                char 默认1，varchar不可以省略            2. 两个区别：char固定长度、效率高，varchar可变长度、效率低（根据传入多少字符开辟多少空间）    较长的文本:text、blob(较长的二进制数据)    其他：        binary和varbinary用于保存较短的二进制        enum用于保存枚举        set用于保存集合日期型：    date ：2000-01-01    datetime：2000-01-01 00：00：00    timestamp：某个时刻的    time：00：00：00    year：2000    特点：        1.datetime和timstamp的区别            datetime范围大，1000-9999，8字节，不受时期影响            timestamp范围小，1970-2038，4字节，受时期影响</code></pre><h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><p>含义：</p><pre><code>一种限制，用于限定表中的数据，为了保证表中的数据的准确性和可靠性</code></pre><p>语法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名（    字段名 字段类型 约束）</code></pre><p>类型</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">NOT</span> <span class="token boolean">NULL</span>：非空，用于保证字段的值不能为空<span class="token keyword">DEFAULT</span>：默认，用于保证该字段有默认值<span class="token keyword">UNIQUE</span>：唯一约束，用于保证该字段的值具有唯一性，可以为空，但只能保留一个<span class="token boolean">Null</span>值<span class="token keyword">CHECK</span>：检查约束【mysql不支持】<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span>：主键，用于保证该字段的值具有唯一性，并且非空<span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span>：外键，用于限定两个表的关系，用于保证该字段的值必须来自主表的关联列的值    在<span class="token operator">*</span><span class="token operator">*</span>从表添加外键约束，用于引用主表中的某列的值<span class="token operator">*</span><span class="token operator">*</span></code></pre><p>添加约束的时机：</p><ol><li><p>创建表时</p><ol><li>语法：<ol><li>直接在字段名和类型后面追加 约束类型即可</li><li>只支持：默认、非空、主键、唯一</li></ol></li></ol></li><li><p>修改表时</p><ol><li>语法</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#增加列级约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 字段名 字段类型 新约束<span class="token comment" spellcheck="true">#增加表级约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 【<span class="token keyword">constraint</span> 约束名】 约束（字段名） 【外键引用】</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> stuinfo <span class="token keyword">modify</span> <span class="token keyword">column</span> stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#增加约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stuinfo <span class="token keyword">modify</span> <span class="token keyword">column</span> stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#删除非空约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stuinfo <span class="token keyword">modify</span> <span class="token keyword">column</span> age <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#删除默认约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stuinfo <span class="token keyword">drop</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#删除主键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stuinfo <span class="token keyword">drop</span> <span class="token keyword">index</span> seat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#删除唯一</span><span class="token comment" spellcheck="true">#增加外键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stuinfo <span class="token keyword">add</span> 【<span class="token keyword">constraint</span> fk_stuinfo_major】 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span> 【<span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span>】<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#on delete cascade 级联删除，删除主表，从表相关数据也会删除</span><span class="token comment" spellcheck="true">#删除外键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stuinfo <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> fk_stuinfo_major</code></pre><ol start="2"><li><p>级联操作</p><pre><code>#在添加外键时增加级联操作#级联删除（删除主表，从表相关数据也会删除）alter table stuinfo add 【constraint fk_stuinfo_major】 foreign key(majorid) references major(id) 【on delete cascade】#级联置空（删除主表，从表相关数据变为null）alter table stuinfo add 【constraint fk_stuinfo_major】 foreign key(majorid) references major(id) 【on delete set null】</code></pre></li></ol></li></ol><p>约束的添加分类：</p><ol><li><p>列级约束</p><ol><li>六大约束语法都支持，外键没效果</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#列级约束举例</span><span class="token keyword">create</span> <span class="token keyword">table</span> stuinfo<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#主键</span>    stuName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#非空</span>    gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">check</span><span class="token punctuation">(</span>gender<span class="token operator">=</span><span class="token string">'男'</span> <span class="token operator">or</span> gender<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#检查，只是示例，mysql不支持</span>    seat <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#唯一</span>    age <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#默认</span>    majorId <span class="token keyword">int</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#外键,只是示例，因为外键不支持列级约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> major<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    marjorName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>表级约束</p><ol><li>除了非空、默认，其他的都支持</li><li>语法：</li></ol><pre class=" language-sql"><code class="language-sql">【<span class="token keyword">constraint</span> 约束名】 约束类型 <span class="token punctuation">(</span>字段名<span class="token punctuation">)</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#表级约束举例</span><span class="token keyword">create</span> <span class="token keyword">table</span> stuinfo<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>    stuName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    seat <span class="token keyword">int</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    majorId <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#增加标记约束</span>    <span class="token keyword">constraint</span> pk <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#主键</span>    <span class="token keyword">constraint</span> uq <span class="token keyword">unique</span><span class="token punctuation">(</span>seat<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#唯一键</span>    contraint ck <span class="token keyword">check</span><span class="token punctuation">(</span>gender<span class="token operator">=</span><span class="token string">'男'</span> <span class="token operator">or</span> gender<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#检查</span>    contraint fk_stuinfo_major <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#外键</span><span class="token punctuation">)</span><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> stuinfo <span class="token comment" spellcheck="true">#查看索引</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#通用写法</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> stuinfo<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    stuName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    seat <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">18</span><span class="token punctuation">,</span>    majorId <span class="token keyword">int</span><span class="token punctuation">,</span>    contraint fk_stuinfo_major <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#外键</span><span class="token punctuation">)</span></code></pre></li></ol><p><strong>主键和唯一的区别</strong></p><pre><code>唯一性：    都能保证为空：    主键不允许，唯一允许（但只能保留1个Null）一个表可以有多少个：    主键至多有一个，唯一可以有多个是否允许组合（多个列组成主键/唯一）：    组合主键的含义：比如两个列组成的主键，只有两个列都相同才等于重复    都可以，但不推荐，数据不稳定</code></pre><p><strong>外键特点</strong></p><ol><li>要求在从表设置外键关系，引用主表的数据</li><li>从表的外键列的类型和主表的关联列的类型要求一致或兼容，名字无要求</li><li>主表的关联列必须时一个key（一般时主键或唯一）</li><li>插入数据时，<strong>先插入主表，再插入从表</strong></li><li>删除数据时，<strong>先删除从表，再删除主表</strong></li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#向表emp2的Id列中添加primary key约束（my_emp_id_pk）</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp2 <span class="token keyword">modify</span> <span class="token keyword">column</span> id <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp2 <span class="token keyword">add</span> <span class="token keyword">constraint</span> my_emp_id_pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#向表emp2中添加列dept_id，并在其中定义foreign key约束，与之相关的列是dept2表中的id列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp2 <span class="token keyword">add</span> <span class="token keyword">column</span> dept_id<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp2 <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_emp2_dept2 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">references</span> dept2<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h3><p>又称自增长列</p><p>含义：可以不用手动的插入值，系统提供默认的序列值</p><ol><li>创建表时设置标识列（约束地方后写标识列：AUTO_INCREMENT）</li><li>修改表时设置标识列<code>alter table 表名 modify column 列名 类名 约束 标识列</code></li><li>修改表时删除标识列<code>alter table 表名 modify column 列名 类名 约束</code></li></ol><p>特点：</p><pre><code>1. 标识列必须与key搭配（主键、唯一键、外键）2. 一个表最多有一个标识列3. 标识列的类型只能是数值型4. 更改步长：set auto_increment_increment = 3</code></pre><hr><h2 id="TCL事务控制语言"><a href="#TCL事务控制语言" class="headerlink" title="TCL事务控制语言"></a>TCL事务控制语言</h2><p><strong>含义</strong></p><pre><code>通过一组逻辑操作单元（一组dml语言），将数据从一种状态切换到另外一种状态</code></pre><p><strong>特点</strong></p><pre><code>（ACID）原子性：要么都执行，要么都回滚一致性：保证数据的状态操作前和操作后保持一致隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</code></pre><p><strong>事务的分类</strong></p><p>隐式事务，没有明显的开启和结束事务的标志</p><pre><code>比如insert、update、delete语句本身就是一个事务</code></pre><p>显式事务，具有明显的开启和结束事务的标志</p><pre><code>查看mysql支持的存储引擎show engines设置字符集set names gbk1、开启事务取消自动提交事务的功能set autocommit=0;start transaction; 可选的（执行完set autocommit就会自动执行该语句）2、编写事务的一组逻辑操作单元（多条sql语句）insertupdatedelete3、提交事务或回滚事务commit；提交事务rollback；回滚事务savepoint  保存点rollback to 回滚到</code></pre><blockquote><p>注意：delete支持事务回滚，truncate不支持</p></blockquote><p><strong>事务的隔离级别</strong></p><p>事务并发问题如何发生？</p><pre><code>当多个事务同时操作同一个数据库的相同数据时</code></pre><p>事务的并发问题有哪些？</p><pre><code>脏读：t1,t2，t1读取到t2插入或更新但没有提交的数据不可重复读：t1,t2，t1读取了一个字段，然后t2更新了该字段并提交，t1再读该字段，值不相同幻读：t1,t2，t1从表中读取到一个字段，t2在该表插入了新的行并提交，之后，t1再操作同一张表，多了一行</code></pre><p>如何避免事务的并发问题？</p><pre><code>通过设置事务的隔离级别1、READ UNCOMMITTED（读未提交）2、READ COMMITTED（读已提交） 可以避免脏读（oracle默认隔离级别）3、REPEATABLE READ（可重复读） 可以避免脏读、不可重复读和一部分幻读（mysql默认隔离级别）4、SERIALIZABLE（串行化） 可以避免脏读、不可重复读和幻读。但性能低下（阻塞操作）</code></pre><p>设置隔离级别：</p><pre><code>set session|global  transaction isolation level 隔离级别名;</code></pre><p>查看隔离级别：</p><pre><code>select @@tx_isolation;</code></pre><hr><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>含义：理解成一张虚拟的表，就是和方法一样，将一些查询语句封装进视图当中</p><p><strong>视图和表的区别：</strong></p><pre><code>    使用方式    占用物理空间                    增删改查视图    完全相同    不占用，仅仅保存的是sql逻辑        可以，一般不能增删改表    完全相同    占用，保存的是数据                可以</code></pre><p><strong>视图的好处：</strong></p><pre><code>1、sql语句提高重用性，效率高2、和表实现了分离，提高了安全性</code></pre><p><strong>视图的创建</strong></p><pre><code>语法：CREATE or replace VIEW  视图名 #or replace #无则创建，有则修改AS查询语句;修改语法2：alter view 视图名as查询语句;</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例1：查询姓名中包含a字符的员工名、部门名、工种信息</span><span class="token keyword">create</span> <span class="token keyword">view</span> v1 <span class="token keyword">as</span><span class="token keyword">select</span> last_name<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>job_title<span class="token keyword">from</span> employees <span class="token number">e</span><span class="token keyword">join</span> departments <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id<span class="token keyword">join</span> job j <span class="token keyword">on</span> j<span class="token punctuation">.</span>job_id <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span>job_id<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> v1 <span class="token keyword">where</span> last_name <span class="token operator">like</span> <span class="token string">'%a%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#案例2：查询平均工资最低的部门信息</span><span class="token comment" spellcheck="true">#创建每个部门平均工资的视图</span><span class="token keyword">create</span> <span class="token keyword">view</span> v1<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span>department_id<span class="token keyword">from</span> employees <span class="token number">e</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id<span class="token comment" spellcheck="true">#创建平均工资最低的视图</span><span class="token keyword">create</span> <span class="token keyword">view</span> v2 <span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> v1<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">asc</span><span class="token keyword">limit</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#查询平均工资最低的部门信息</span><span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>v2<span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">from</span> v2 <span class="token keyword">inner</span> <span class="token keyword">join</span> departments <span class="token number">d</span><span class="token keyword">on</span> v2<span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id</code></pre><p><strong>视图的操作</strong></p><pre class=" language-sql"><code class="language-sql">修改    <span class="token comment" spellcheck="true">#方式1语法</span>    <span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> 视图名 <span class="token comment" spellcheck="true">#or replace：有则修改，无则创建</span>    <span class="token keyword">as</span>    查询语句    <span class="token comment" spellcheck="true">#方式2语法</span>    <span class="token keyword">alter</span> <span class="token keyword">view</span> 视图名    <span class="token keyword">as</span>    查询语句删除    <span class="token keyword">drop</span> <span class="token keyword">view</span> 视图名，视图名<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>查看视图    <span class="token keyword">desc</span> 视图名</code></pre><p><strong>视图数据的增删改查</strong></p><p>也会更新表中的数据</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>、查看视图的数据 ★<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> my_v4<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> my_v1 <span class="token keyword">WHERE</span> last_name<span class="token operator">=</span><span class="token string">'Partners'</span><span class="token punctuation">;</span><span class="token number">2</span>、插入视图的数据<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> my_v4<span class="token punctuation">(</span>last_name<span class="token punctuation">,</span>department_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'虚竹'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>、修改视图的数据<span class="token keyword">UPDATE</span> my_v4 <span class="token keyword">SET</span> last_name <span class="token operator">=</span><span class="token string">'梦姑'</span> <span class="token keyword">WHERE</span> last_name<span class="token operator">=</span><span class="token string">'虚竹'</span><span class="token punctuation">;</span><span class="token number">4</span>、删除视图的数据<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> my_v4<span class="token punctuation">;</span></code></pre><p><strong>某些视图不能数据修改</strong></p><pre class=" language-sql"><code class="language-sql">包含以下关键字的sql语句：分组函数、<span class="token keyword">distinct</span>、<span class="token keyword">group</span>  <span class="token keyword">by</span>、<span class="token keyword">having</span>、<span class="token keyword">union</span>或者<span class="token keyword">union</span> <span class="token keyword">all</span>常量视图<span class="token keyword">Select</span>中包含子查询<span class="token keyword">join</span><span class="token keyword">from</span>一个不能更新的视图<span class="token keyword">where</span>子句的子查询引用了<span class="token keyword">from</span>子句中的表</code></pre><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>分类</strong></p><pre><code>系统变量：    全局变量（系统提供，不是用户定义，服务器层面）    会话变量    自定义变量：    用户变量    局部变量</code></pre><p><strong>语法</strong></p><p>系统变量</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#系统变量语法</span><span class="token comment" spellcheck="true">#注意：如果是全局级别，需要加global，如果是会话级别，则需要加session，如果不写，则默认session</span><span class="token comment" spellcheck="true">#作用域：全局性的，可以跨链接有效，但是重启服务器后会初始化</span><span class="token number">1</span><span class="token punctuation">.</span>查看所有系统变量    <span class="token keyword">show</span> <span class="token keyword">global</span><span class="token operator">|</span>【<span class="token keyword">session</span>】 variables<span class="token number">2</span><span class="token punctuation">.</span>查看满足条件的部分系统变量    <span class="token keyword">show</span> <span class="token keyword">global</span><span class="token operator">|</span>【<span class="token keyword">session</span>】 variables <span class="token operator">like</span> <span class="token string">'%char%'</span><span class="token number">3</span><span class="token punctuation">.</span>查看指定的某个系统变量的值    <span class="token keyword">select</span> @<span class="token variable">@global</span><span class="token operator">|</span>【<span class="token keyword">session</span>】<span class="token punctuation">.</span>系统变量名<span class="token number">4</span><span class="token punctuation">.</span>为某个系统变量赋值    方式一:    <span class="token keyword">set</span> <span class="token keyword">global</span><span class="token operator">|</span>【<span class="token keyword">session</span>】 系统变量名 <span class="token operator">=</span> 值    方式二：    <span class="token keyword">set</span> @<span class="token variable">@global</span><span class="token operator">|</span>【<span class="token keyword">session</span>】<span class="token punctuation">.</span>系统变量名 <span class="token operator">=</span> 值</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#会话变量</span><span class="token comment" spellcheck="true">#作用域：仅仅针对当前会话有效</span></code></pre><p>自定义变量</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#变量是用户自定义的，不是由系统的</span><span class="token comment" spellcheck="true">#使用步骤：</span>    声明        <span class="token keyword">set</span> @用户变量名<span class="token operator">=</span>值        <span class="token keyword">set</span> @用户变量名：<span class="token operator">=</span>值        <span class="token keyword">select</span> @用户变量名：<span class="token operator">=</span>值    赋值        方式一：通过<span class="token keyword">set</span>或<span class="token keyword">Select</span>            <span class="token keyword">set</span> @用户变量名<span class="token operator">=</span>值            <span class="token keyword">set</span> @用户变量名：<span class="token operator">=</span>值            <span class="token keyword">select</span> @用户变量名：<span class="token operator">=</span>值         方式二：通过<span class="token keyword">Select</span> <span class="token keyword">into</span>             <span class="token keyword">select</span> 字段 <span class="token keyword">into</span> @变量名             <span class="token keyword">from</span> 表    使用（查看、比较、运算等）        <span class="token keyword">select</span> @变量名<span class="token comment" spellcheck="true">#1.用户变量</span>    作用域：针对于当前会话（连接）有效 </code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例</span><span class="token comment" spellcheck="true">#声明并初始化</span><span class="token keyword">set</span> <span class="token variable">@name</span> <span class="token operator">=</span> <span class="token string">'john'</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@name</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#赋值</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token variable">@count</span><span class="token keyword">from</span> student<span class="token comment" spellcheck="true">#查看</span><span class="token keyword">select</span> <span class="token variable">@count</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#局部变量</span>作用域：仅仅在定义它的<span class="token keyword">begin</span> <span class="token keyword">end</span>中有效，且必须是第一句话步骤：    <span class="token number">1</span><span class="token punctuation">.</span>声明        <span class="token keyword">declare</span> 变量名 类型；        <span class="token keyword">declare</span> 变量名 类型 <span class="token keyword">default</span> 值；    <span class="token number">2</span><span class="token punctuation">.</span>赋值        方式一：通过<span class="token keyword">set</span>或<span class="token keyword">select</span>            <span class="token keyword">set</span> 局部变量名 <span class="token operator">=</span> 值            <span class="token keyword">set</span> 局部变量名 ：<span class="token operator">=</span>值            <span class="token keyword">select</span> @局部变量名：<span class="token operator">=</span>值        方式二:通过<span class="token keyword">select</span> <span class="token keyword">into</span>            <span class="token keyword">select</span> 字段 <span class="token keyword">into</span> 局部变量名            <span class="token keyword">from</span> 表    <span class="token number">3</span><span class="token punctuation">.</span>使用        <span class="token keyword">select</span> 局部变量名</code></pre><p>对比用户变量和局部变量：</p><pre><code>1.作用域：    用户变量是当前会话，局部变量是begin end中2.定义和使用的位置    会话中的任何地方，只能在begin end中，且为第一句话3.语法：用户变量必须加上@符号，局部变量一般不加@符号，需要限定类型</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例,注意需要在begin end中使用，否则会报错，这里只是演示</span><span class="token keyword">declare</span> m <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">declare</span> n <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">declare</span> sum <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token keyword">set</span> sum <span class="token operator">=</span> m<span class="token operator">+</span>n<span class="token punctuation">;</span><span class="token keyword">select</span> sum<span class="token punctuation">;</span></code></pre><hr><p>##存储过程</p><p>含义：一组经过<strong>预先编译</strong>的sql语句的集合<br>好处：</p><pre><code>1、提高了sql语句的重用性，减少了开发程序员的压力2、提高了效率3、减少了编译次数，并减少了与数据库的连接次数</code></pre><p>参数分类：</p><pre><code>1、无返回无参2、仅仅带in类型，无返回有参3、仅仅带out类型，有返回无参 4、既带in又带out，有返回有参5、带inout，有返回有参注意：in、out、inout都可以在一个存储过程中带多个</code></pre><p><strong>创建存储过程</strong></p><p>语法：</p><pre><code>create procedure 存储过程名(in|out|inout 参数名  参数类型,...)begin    存储过程体end</code></pre><p>类似于方法</p><p>注意</p><pre><code>1、需要设置新的结束标记(在dos命令行中才有效，可视化sqlyog无效)delimiter 新的结束标记示例：delimiter $CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)BEGIN    sql语句1;    sql语句2;END $2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end3、参数前面的符号的意思in:该参数只能作为输入 （该参数不能做返回值）out：该参数只能作为输出（该参数只能做返回值）inout：既能做输入又能做输出</code></pre><p><strong>调用语法</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">call</span> 存储过程名<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span> 结束标记</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例(有参无返回)：创建存储过程实现，用户是否登录成功</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp1<span class="token punctuation">(</span><span class="token operator">in</span> username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">in</span> password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> result <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#声明变量并初始化</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#赋值</span>    <span class="token keyword">from</span> admin    <span class="token keyword">where</span> admin<span class="token punctuation">.</span>username <span class="token operator">=</span> username    <span class="token operator">and</span> admin<span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>        <span class="token keyword">select</span> <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'成功'</span><span class="token punctuation">,</span><span class="token string">'失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#使用</span><span class="token keyword">END</span> $<span class="token comment" spellcheck="true">#调用存储过程</span><span class="token keyword">call</span> myp1<span class="token punctuation">(</span><span class="token string">'张飞'</span><span class="token punctuation">,</span><span class="token string">'8888'</span><span class="token punctuation">)</span>$</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例（有参由返回）：根据女神名，返回对应男神名和魅力值</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp2<span class="token punctuation">(</span><span class="token operator">in</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> boyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> userCP <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> bo<span class="token punctuation">.</span>boyName<span class="token punctuation">,</span>bo<span class="token punctuation">.</span>userCP <span class="token keyword">into</span> boyName<span class="token punctuation">,</span>userCP <span class="token comment" spellcheck="true"># 赋值</span>    <span class="token keyword">from</span> boys bo    <span class="token keyword">inner</span> <span class="token keyword">join</span> beauty <span class="token number">b</span> <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>boyfriend_id    <span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>name <span class="token operator">=</span> beautyName<span class="token punctuation">;</span> <span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#调用存储过程</span><span class="token keyword">call</span> myp2<span class="token punctuation">(</span><span class="token string">'小昭'</span><span class="token punctuation">,</span><span class="token variable">@bName</span><span class="token punctuation">,</span><span class="token variable">@userCP</span><span class="token punctuation">)</span>$<span class="token keyword">select</span> <span class="token variable">@bName</span><span class="token punctuation">,</span><span class="token variable">@userCP$</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例（input）：传入a,b两个值，最终a,b都翻倍并返回</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp3（input <span class="token number">a</span> <span class="token keyword">int</span><span class="token punctuation">,</span>input <span class="token number">b</span> <span class="token keyword">int</span>）<span class="token keyword">begin</span>    <span class="token keyword">set</span> <span class="token number">a</span> <span class="token operator">=</span> <span class="token number">a</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> <span class="token number">b</span> <span class="token operator">=</span> <span class="token number">b</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#调用存储过程(注意：input需要传入两个带参的变量，用于传入和接收值)</span><span class="token keyword">set</span> <span class="token variable">@m</span> <span class="token operator">=</span> <span class="token number">10</span>$<span class="token keyword">set</span> <span class="token variable">@n</span> <span class="token operator">=</span> <span class="token number">20</span>$<span class="token keyword">call</span> myp3<span class="token punctuation">(</span><span class="token variable">@m</span><span class="token punctuation">,</span><span class="token variable">@n</span><span class="token punctuation">)</span>$<span class="token keyword">select</span> <span class="token variable">@m</span><span class="token punctuation">,</span><span class="token variable">@n$</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#创建存储过程实现传入用户名和密码，插入到admin表中</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp4<span class="token punctuation">(</span><span class="token operator">in</span> username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">in</span> password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>admin<span class="token punctuation">.</span>username<span class="token punctuation">,</span>admin<span class="token punctuation">.</span>password<span class="token punctuation">)</span>    <span class="token keyword">values</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#创建存储过程或函数实现传入女神编号，返回女神名称和女神电话</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp5<span class="token punctuation">(</span><span class="token operator">in</span> id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> phone <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> <span class="token number">b</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>phone <span class="token keyword">into</span> name<span class="token punctuation">,</span>phone    <span class="token keyword">from</span> beauty <span class="token number">b</span>    <span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#创建存储过程或函数实现传入两个女神生日，返回大小</span><span class="token comment" spellcheck="true">#创建存储过程实现传入一个日期，格式化成xx年xx月xx日并返回</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp6<span class="token punctuation">(</span><span class="token operator">in</span> mydate <span class="token keyword">datetime</span> <span class="token punctuation">,</span><span class="token keyword">out</span> strdate <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> date_format<span class="token punctuation">(</span>mydate<span class="token punctuation">,</span><span class="token string">'%y年%m月%d日'</span><span class="token punctuation">)</span> <span class="token keyword">into</span> strdate<span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">call</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@str</span><span class="token punctuation">)</span>$<span class="token keyword">select</span> <span class="token variable">@str</span> $</code></pre><p><strong>删除存储过程</strong></p><p>注意：不能同时删除多个存储过程</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span> 存储过程名 </code></pre><p><strong>查看存储过程信息</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> 存储过程名</code></pre><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>函数和存储过程的区别</strong></p><pre><code>存储过程：    关键字 procedure    可以有0个返回，也可以由多个返回，适合批量插入，批量更新（适合增删改）函数：    关键字 function    有且仅有1个返回，适合做处理数据后返回一个结果（适合查询）</code></pre><p>###创建函数</p><p>学过的函数：LENGTH、SUBSTR、CONCAT等<br>语法：</p><pre><code>CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型BEGIN    函数体END</code></pre><p>注意：</p><pre><code>1.函数体：必须要由return语句2.函数体就一句话，可以省略begin end3.使用delimiter语句设置结束标记</code></pre><p>###调用函数</p><pre><code>SELECT 函数名（实参列表）</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例（无参有返回）：返回公司的员工个数</span><span class="token keyword">create</span> <span class="token keyword">function</span> myf1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">int</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> result <span class="token keyword">default</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#声明变量</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> result <span class="token comment" spellcheck="true">#赋值</span>    <span class="token keyword">from</span> employees<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#返回</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#调用函数</span><span class="token keyword">select</span> myf1<span class="token punctuation">(</span><span class="token punctuation">)</span> $<span class="token comment" spellcheck="true">#案例（有参有返回）：根据部门名，返回该部门的平均工资</span><span class="token keyword">create</span> <span class="token keyword">function</span> myf2<span class="token punctuation">(</span>dept_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">double</span><span class="token keyword">begin</span>    <span class="token keyword">set</span> <span class="token variable">@result</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#声明变量</span>    <span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token variable">@result</span><span class="token comment" spellcheck="true">#赋值</span>    <span class="token keyword">from</span> employees <span class="token number">e</span>    <span class="token keyword">inner</span> <span class="token keyword">join</span> departments <span class="token number">d</span>    <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id    <span class="token keyword">where</span> <span class="token number">d</span><span class="token punctuation">.</span>department_name <span class="token operator">=</span> dept_name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#根据条件筛选</span>    <span class="token keyword">return</span> <span class="token variable">@result</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#返回</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#调用函数</span><span class="token keyword">select</span> myf2<span class="token punctuation">(</span><span class="token string">'IT'</span><span class="token punctuation">)</span>$</code></pre><p><strong>查看函数</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">function</span> 函数名</code></pre><p><strong>删除函数</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">function</span> 函数名</code></pre><hr><h2 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h2><p><strong>分支</strong></p><p>一、if函数<br>    语法：if(条件，值1，值2)<br>    特点：可以用在任何位置</p><p>二、case语句</p><p>语法：</p><pre><code>情况一：类似于switchcase 表达式 when 值1 then 值when 值2 then 值...else 值end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）情况二：类似于多重ifcase when 条件1 then 结果1或语句1(如果是语句，需要加分号) when 条件2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</code></pre><p>特点：</p><ol><li>可以作为表达式，嵌套在其他语句中使用，可以放在任何地方</li><li>可以作为独立的语句去使用，只能放在begin end中</li><li>在begin end中，如果没有else，when都不满足，返回null</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例：创建存储过程，传入成绩，显示等级</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> test<span class="token punctuation">(</span><span class="token operator">in</span> score <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>     <span class="token keyword">case</span>    <span class="token keyword">when</span> score<span class="token operator">>=</span><span class="token number">90</span> <span class="token operator">and</span> socre <span class="token operator">&lt;=</span><span class="token number">100</span> <span class="token keyword">then</span> <span class="token keyword">select</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    <span class="token keyword">when</span> score<span class="token operator">>=</span><span class="token number">80</span> <span class="token keyword">then</span> <span class="token keyword">select</span> <span class="token string">'B'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">select</span> <span class="token string">'D'</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#调用</span><span class="token keyword">call</span> test_case<span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span>$</code></pre><p>三、if 结构（非if函数）</p><p>语法：</p><pre><code>if 情况1 then 语句1;elseif 情况2 then 语句2;  #elseif中间没有空格...else 语句n;end if;</code></pre><p>特点：<br>    只能用在begin end中！</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例：传入成绩，显示等级</span><span class="token keyword">create</span> <span class="token keyword">function</span> test<span class="token punctuation">(</span>score <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> char<span class="token keyword">begin</span>    <span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">90</span> <span class="token operator">and</span> score <span class="token operator">&lt;=</span><span class="token number">100</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">'A'</span>    elseif score<span class="token operator">>=</span><span class="token number">80</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">'B'</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">'C'</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#调用</span><span class="token keyword">select</span> test<span class="token punctuation">(</span><span class="token number">85</span><span class="token punctuation">)</span>$</code></pre><p>三者比较：<br>            应用场合<br>    if函数        简单双分支<br>    case结构    等值判断 的多分支<br>    if结构        区间判断 的多分支</p><p><strong>循环</strong></p><p>分类：</p><p>都需要在begin end中执行</p><pre><code>while:先判断再执行loop：没有条件的死循环repeat：先执行后判断这三种循环都可以省略名称，但如果循环中添加了循环控制语句（leave或iterate）则必须添加名称</code></pre><p>循环控制：</p><pre><code>iterate类似于 continue ，跳出本次循环，语法： iterate 标签名leave类似于 break，跳出所在循环，语法： leave 标签名</code></pre><p>语法：</p><pre><code>#while语句【标签：】WHILE 循环条件  DO    循环体END WHILE 【标签】;#loop语句（可以用来模拟死循环，可以用leave跳出循环）【标签：】loop    循环体；end loop 【标签】；#repeat语句（类似于do while）【标签：】 repeat    循环体；until 结束循环的条件；end repeat 【标签】；</code></pre><p>特点：</p><pre><code>只能放在BEGIN END里面如果要搭配leave跳转语句，需要使用标签，否则可以不用标签leave类似于java中的break语句，跳出所在循环！！！</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#案例1：批量插入，根据次数插入到admin表中多条数据</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_while1<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#调用</span><span class="token keyword">call</span> pro_while1<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>$<span class="token comment" spellcheck="true">#案例2(加入leave语句)：批量插入，根据次数插入admin表中多条记录，如果次数>20则停止</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_while2<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token number">a</span>:<span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span>        <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">20</span> <span class="token keyword">then</span> leave <span class="token number">a</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">while</span> <span class="token number">a</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#案例3（加入iterate语句）：批量插入，根据次数插入admin表中多条记录，只插入偶数数据</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_while3<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> i <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token number">a</span>:<span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span>        <span class="token keyword">set</span> i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> mod<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">then</span> iterate        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">while</span> <span class="token number">a</span> <span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">#向表中插入指定个数的，随机的字符串</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> test_randstr<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#循环次数</span>    <span class="token keyword">declare</span> str <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#字符串</span>    <span class="token keyword">declare</span> startIndex <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#起始位置</span>    <span class="token keyword">declare</span> len <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#截取长度</span>    <span class="token number">a</span>:<span class="token keyword">while</span> i<span class="token operator">&lt;</span>insertCount <span class="token keyword">do</span>        <span class="token keyword">set</span> startIndex <span class="token operator">=</span> floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">26</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> len <span class="token operator">=</span> floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token operator">-</span>startIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">insert</span> <span class="token keyword">into</span> test<span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>substr<span class="token punctuation">(</span>str<span class="token punctuation">,</span>startIndex<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">while</span> <span class="token number">a</span><span class="token punctuation">;</span><span class="token keyword">end</span>$</code></pre><h2 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h2><blockquote><p>在linux环境下进行</p></blockquote><p>全量备份：<code>mysqldump -uroot -p1234 -A &gt; 备份文件路径</code>，路径：<code>/root/1.sql</code></p><p>指定库备份：<code>mysqldump -uroot -p1234 库名 &gt; 备份文件路径</code></p><p>多个库备份：<code>mysqldump -uroot -p1234 --databases db1 db2 &gt; 备份文件路径</code></p><pre><code>计划任务的脚本：每一分钟进行备份一次数据库#!/bin/bashfilename="test_"`date +'%Y%m%d%H%M%S'`".sql"mysqldump -uroot -p1234 &gt; /root/$filenamecrontab -e * * * * * /root/test.sh</code></pre><p><strong>还原</strong></p><p>mysql命令行中：<code>source 备份文件路径</code></p><p>还原单个数据库：</p><ol><li>use 库名</li><li>source 备份文件路径</li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="/2020/11/01/xue-xi/java8-xin-te-xing/"/>
      <url>/2020/11/01/xue-xi/java8-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1><p>特点：</p><p>速度更快：hashMap红黑树</p><p>代码更少：lambda表达式</p><p>强大的Stream API</p><p>便于并行：提高了程序的执行效率</p><p>最大化减少空指针异常：Optional</p><p>Nashorn引擎，允许在JVM上运行JS应用 </p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><blockquote><p>可以给函数式接口赋值</p></blockquote><p>使用：</p><ol><li><p>举例： <code>(o1,o2) -&gt; Integer.compare(o1,o2)</code></p></li><li><p>格式：</p><ol><li><code>-&gt;</code> :lambda操作符 或 箭头操作符</li><li><code>-&gt;</code>左边 ： lambda形参列表（其实就是接口中抽象方法的形参列表）</li><li><code>-&gt;</code>右边 ： lambda体（其实就是重写的抽象方法的方法体）</li></ol></li><li><p>Lambda表达式的使用：（分为6种情况介绍）</p><ol><li><p>无参，无返回值</p><pre class=" language-java"><code class="language-java">Runnable run <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"gogogo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>run<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********lambda************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Runnable run1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"runrunrun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>run1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>有参，无返回值</p><pre class=" language-java"><code class="language-java">Consumer<span class="token operator">&lt;</span>Integer<span class="token operator">></span> con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********lambda************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Consumer<span class="token operator">&lt;</span>Integer<span class="token operator">></span> con1 <span class="token operator">=</span> <span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>con1<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>类型推断</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********类型推断************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Consumer<span class="token operator">&lt;</span>Integer<span class="token operator">></span> con2 <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>con2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>只有1个参数，参数小括号可以省略</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********1个参数************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Consumer<span class="token operator">&lt;</span>Integer<span class="token operator">></span> con2 <span class="token operator">=</span> i<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>con2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>有2个或以上参数，多条执行语句，并且有返回值</p><pre class=" language-java"><code class="language-java">Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***有2个或以上参数，多条执行语句，并且有返回值***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator1 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>当lambda体只有一条语句时，return与大括号都可以省略</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***只有一条语句时，return与大括号都可以省略***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator2 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p><strong>语法总结</strong></p><p><code>-&gt;</code>左边：lambda形参列表的参数类型可以省略（类型推断）；形参只有1个，()省略</p><p><code>-&gt;</code>右边：lambda体应该用{}包裹，如果只有一条执行语句，{}省略，return也需要省略</p></li><li><p><strong>Lambda表达式的本质：作为函数式接口的实例</strong></p></li><li><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口</p></li></ol><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p><code>@FunctionalInterface</code></p><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。如：Runable、compartor</p><p>可以通过Lambda表达式来创建该接口的对象，即以前用匿名是西安类表示的现在都可以用Lambda表达式来写</p><p><code>java.util.function</code>提供了大量的函数式接口</p><table><thead><tr><th></th><th>接口名</th><th>返回值  方法</th></tr></thead><tbody><tr><td>消费型接口</td><td>Consumer<t></t></td><td>void  accept(T t)</td></tr><tr><td>供给型接口</td><td>Supplier<t></t></td><td>T get()</td></tr><tr><td>函数型接口</td><td>Function&lt;T,R&gt;</td><td>R apply(T t)</td></tr><tr><td>断定型接口</td><td>Predicate<t></t></td><td>boolean test(T t)</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">consume</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一共消费"</span><span class="token operator">+</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******lambda*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">consume</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span>i <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一共消费"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span>Integer money<span class="token punctuation">,</span> Consumer<span class="token operator">&lt;</span>Integer<span class="token operator">></span> consumer<span class="token punctuation">)</span><span class="token punctuation">{</span>    consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"东京"</span><span class="token punctuation">,</span><span class="token string">"西京"</span><span class="token punctuation">,</span><span class="token string">"普京"</span><span class="token punctuation">,</span><span class="token string">"北极"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> l <span class="token operator">=</span> <span class="token function">filterString</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//制定规则，如果字符串中包含京则返回为true</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********lambda**********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> l2 <span class="token operator">=</span> <span class="token function">filterString</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filterString</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">,</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> pre<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> l<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遍历集合，按照某种规则进行判断，为true则添加进集合</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h2><blockquote><p>在一些特殊情况下，我们可以使用方法引用来替换lambda表达式</p></blockquote><ol><li>使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用</li><li>方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数时接口的实例，所以<strong>方法引用，也是函数式接口的实例</strong></li><li>使用格式：  类（或对象） ：： 方法名</li><li>具体有三种情况<ol><li>对象 ：：非静态方法</li><li>类 ：：静态方法</li><li>类：：非静态方法</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对象：：非静态方法</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer1 <span class="token operator">=</span> s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//lambda体中已经有实现的方法println()，参数和返回值一样，就可以使用方法引用</span>    consumer1<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******方法引用******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PrintStream print <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象</span>    Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer2 <span class="token operator">=</span> print <span class="token operator">:</span><span class="token operator">:</span> println<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象：：方法</span>    consumer2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//类：：静态方法</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator1 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******方法引用*********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator2 <span class="token operator">=</span> Integer<span class="token operator">:</span><span class="token operator">:</span>compare<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//类：：非静态方法</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//compareTo是非静态方法</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******方法引用*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//compareTo是通过参数Integer o1调用的，：：左边使用调用所属的类，右边为方法</span>    Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator1 <span class="token operator">=</span> Integer<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>方法引用使用的要求：</p><p>函数式接口中的<strong>抽象方法</strong>的形参列表和返回值类型与<strong>方法引用的方法</strong>的形参列表和返回值类型相同</p><p>（此要求适用于1，2两种情况）</p><p><strong>构造器引用</strong></p><p>抽象方法的返回值类型即为构造器所属的类的类型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造器引用</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Supplier<span class="token operator">&lt;</span>Student<span class="token operator">></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****方法引用*****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Supplier<span class="token operator">&lt;</span>Student<span class="token operator">></span> supplier1 <span class="token operator">=</span> Student<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//有参构造器引用</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Student<span class="token operator">></span> function <span class="token operator">=</span> i <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******方法引用*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Student<span class="token operator">></span> function1 <span class="token operator">=</span> Student<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******二元构造器*********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BiFunction<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Student<span class="token operator">></span> biFunction <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>biFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****方法引用*****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BiFunction<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Student<span class="token operator">></span> biFunction1 <span class="token operator">=</span> Student<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>biFunction1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"xiaohong"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>数组引用</strong></p><p>可以看作一个特殊的类，写法和构造器一样</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数组引用</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> function1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">apply</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>integer<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****lambda******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> function2 <span class="token operator">=</span> length <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> function2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******方法引用**********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> function3 <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span><span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> str3 <span class="token operator">=</span> function3<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><p><code>java.util.stream</code></p><p><strong>为什么要使用streamAPI：</strong></p><p>我们在处理数据时，会设置一些过滤条件，我们可以通过在数据库层面进行过滤操作。如果是redis等Nosql数据库，我们就需要在java层面进行过滤，StreamAPI可以实现这一点。</p><p><strong>Stream和Collection集合的区别：</strong></p><p>Collection是静态的内存数据结构，用于存储数据，主要面向内存</p><p>Stream是有关计算的（不存储数据，和迭代器类似），主要面向CPU</p><p>注意：</p><ol><li>Stream不存储数据</li><li>Stream不会改变源对象，相反，它们会返回一个持有结果的新Stream</li><li>Stream操作是延迟执行的。只有进行终止操作，才会执行前面的中间操作</li></ol><p><strong>Stream 执行流程</strong></p><ol><li>Stream的实例化</li><li>一系列的中间操作（过滤、映射）</li><li>终止操作</li></ol><p>说明：</p><ol><li>一个中间操作链，对数据源的数据进行处理</li><li>（创建、中间操作、中止操作），一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用。</li></ol><h3 id="Stream的实例化"><a href="#Stream的实例化" class="headerlink" title="Stream的实例化"></a>Stream的实例化</h3><ol><li><p>通过集合</p><table><thead><tr><th>default Stream<e> stream()</e></th><th>返回一个顺序流</th><th>顺序流在操作是会按照顺序操作</th></tr></thead><tbody><tr><td>default Stream<e> parallelStream()</e></td><td>返回一个并行流</td><td>并行流在操作是会多个一起操作</td></tr></tbody></table><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> StudentData<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> stream <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//顺序流</span>Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> parallelStream <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//并行流</span></code></pre></li><li><p>通过数组</p><table><thead><tr><th>调用Arrays类的静态方法</th><th></th></tr></thead><tbody><tr><td>Stream<t> stream(T[] array)</t></td><td>返回一个流</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>IntStream stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>Student<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>stu1<span class="token punctuation">,</span>stu2<span class="token punctuation">}</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> stream1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>通过Stream类本身</p><table><thead><tr><th>通过Stream类本身的静态方法</th><th></th></tr></thead><tbody><tr><td>public static<t> Stream<t> of(T… values)</t></t></td><td>返回一个流</td></tr></tbody></table><pre class=" language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>创建无限流</p><p>作用：生成一些东西</p></li></ol><table><thead><tr><th>public static<t> Stream<t> iterate(final T seed,final UnaryOperator<t> f)</t></t></t></th><th>参数：UnaryOperator，一个特殊的function，传入一个类型返回相同类型</th><th>迭代</th></tr></thead><tbody><tr><td>public static<t> Stream<t> generate(Supplier<t> s)</t></t></t></td><td>参数：Supplier，供给型接口，不传值生产值</td><td>生成</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//迭代</span><span class="token comment" spellcheck="true">//遍历前10个偶数</span>Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>t <span class="token operator">-</span><span class="token operator">></span> t<span class="token operator">+</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建流：从0开始，传入一个数就加2</span>    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//中间操作：限制数为10</span>    <span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中止操作：遍历（参数：消费者接口）</span><span class="token comment" spellcheck="true">//生成</span>Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token operator">:</span><span class="token operator">:</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><h4 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h4><table><thead><tr><th>filter(Predicate p)</th><th>从流中排除某些数据</th></tr></thead><tbody><tr><td>limit(n)</td><td>截断流，使其元素不超过元素不超过给定数量</td></tr><tr><td>skip(n)</td><td>跳过元素，返回一个扔掉了前n个元素的流，若流中元素不足N个，则返回一个空流</td></tr><tr><td>distinct()</td><td>筛选，通过流所生成元素的hashCode()和equals()去除重复元素</td></tr></tbody></table><pre class=" language-java"><code class="language-java">stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><table><thead><tr><th>map(Function f)</th><th>将元素转换为其他形式或提取信息，该函数会被应用到每个元素，并将其映射成新的元素，返回值仍然是一个流</th></tr></thead><tbody><tr><td>flatMap(Function f)</td><td>将流中的每个值都换成另一个流，然后把所有的流连成一个流。如集合中的addAll()方法，List.add(list)导致结果中list中有list，addAll就会将内层List拆散再加到list中。flatMap也是相同的道理，将流拆散加到总流里</td></tr></tbody></table><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>t<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将集合映射成大写</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取学生姓名长度大于3的员工姓名</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> StudentData<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> nameStream <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">map</span><span class="token punctuation">(</span>stu<span class="token operator">-</span><span class="token operator">></span>stu<span class="token punctuation">.</span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nameStream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><table><thead><tr><th>sorted()</th><th>自然排序</th></tr></thead><tbody><tr><td>sorted(Compartor com)</td><td>定制排序</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自然排序</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定制排序</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">int</span> compare <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当id不相等时，进行排序</span>        <span class="token keyword">return</span> compare<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当id相等，根据name进行排序</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><h4 id="匹配与查找"><a href="#匹配与查找" class="headerlink" title="匹配与查找"></a>匹配与查找</h4><table><thead><tr><th>allMatch(Predicate p)</th><th>检查是否所有元素都符合条件</th></tr></thead><tbody><tr><td>anyMatch(Predicate p)</td><td>检查是否至少一个元素符合条件</td></tr><tr><td>nonMatch(Predicate p)</td><td>检查是否没有元素符合条件</td></tr><tr><td>findFirst</td><td>返回第一个元素</td></tr><tr><td>findAny</td><td>返回当前流的任意元素</td></tr><tr><td>count</td><td>返回流的元素总个数</td></tr><tr><td>max(Comparator c)</td><td>返回流中最大值</td></tr><tr><td>min(Comparator c)</td><td>返回流中最小值</td></tr><tr><td>forEach(Consumer c)</td><td>内部迭代</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//检查所有元素id都大于1</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回id最大的元素</span>Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> max <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内部迭代</span><span class="token comment" spellcheck="true">//students.stream().forEach(s -> System.out.println(s));</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h4><table><thead><tr><th>reduce(T seed,BinaryOperator b)</th><th>可以将流中元素反复结合起来，得到一个值，返回T</th><th>参数：seed：初始值，BinaryOperator 二元函数</th></tr></thead><tbody><tr><td>reduce(BinaryOperator b)</td><td>可以将流中元素反复结合起来，得到一个值，返回Optional<t></t></td><td></td></tr></tbody></table><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> sum <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Optional&lt;Integer> sum = list.stream().reduce((i1, i2) -> i1 + i2);</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> idStream <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得id流</span><span class="token comment" spellcheck="true">//idStream.reduce(Integer::sum);</span>Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> sum1 <span class="token operator">=</span> idStream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> i1 <span class="token operator">+</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>一般情况下，归约会和map映射一起使用</p></blockquote><h4 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h4><table><thead><tr><th>Collector：通常用静态方法来调用</th><th>Collectors.toList(),toSet()</th></tr></thead><tbody><tr><td>collect(Collector c)</td><td>将流转换为其他形式（List,Set）</td></tr></tbody></table><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        for (Integer i:list1) {</span><span class="token comment" spellcheck="true">//            System.out.println(i);</span><span class="token comment" spellcheck="true">//        }</span>list1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h2><p>作用：有效的解决空指针异常</p><p>它是一个容器类，保存类型为T的值，代表这个值存在。或者保存一个Null，表示值不存在。就是将一个对象<code>boy</code>，把它的值放在optional类中，我们操作boy其实就是在操作optional，如果boy是Null,则optional类的value值就是Null</p><h3 id="创建Optional类对象的方法"><a href="#创建Optional类对象的方法" class="headerlink" title="创建Optional类对象的方法"></a>创建Optional类对象的方法</h3><table><thead><tr><th>Optional.of(T t)</th><th>创建一个实例，t必须非空</th></tr></thead><tbody><tr><td>Optional.empty()</td><td>创建一个空的Optional实例</td></tr><tr><td>Optional.ofNullable(T t)</td><td><strong>t可以为Null</strong></td></tr></tbody></table><h3 id="判断Optional容器中是否包含对象"><a href="#判断Optional容器中是否包含对象" class="headerlink" title="判断Optional容器中是否包含对象"></a>判断Optional容器中是否包含对象</h3><p><code>boolean isPresent()</code>：判断是否包含对象</p><h3 id="获取Optional容器的对象"><a href="#获取Optional容器的对象" class="headerlink" title="获取Optional容器的对象"></a>获取Optional容器的对象</h3><table><thead><tr><th>T get()</th><th>获取optional的值，如果值为空则会抛异常</th></tr></thead><tbody><tr><td>T orElse(T other)</td><td>有值将其返回，没有则返回参数other对象</td></tr></tbody></table><blockquote><p>通常</p><p>Optional.orf(T t)和get()一起使用，在保证非空的情况下再获取数据</p><p>Optional.ofNullable(T t)和orElse(T other)一起使用，在不确定空不空的情况下获取数据，other有兜底对象</p></blockquote><pre class=" language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"正宫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student <span class="token operator">=</span> null<span class="token punctuation">;</span>Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//student2一定非空</span>Student student2 <span class="token operator">=</span> studentOptional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"备选对象"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//备选对象</span></code></pre><h2 id="接口默认方法、静态方法"><a href="#接口默认方法、静态方法" class="headerlink" title="接口默认方法、静态方法"></a>接口默认方法、静态方法</h2><p>除了定义全局常量和抽象方法意外，还可以定义静态方法、默认方法</p><ol><li>静态方法只能通过接口调用</li><li>通过实现类的对象，可以调用接口中默认方法</li><li>类优先原则，如果接口的方法和子类方法同名，先调用的是extends子类的方法</li><li>如果实现了两个接口，其中有同名方法，实现类重写哪个默认方法，就调用的是重写后的方法</li></ol><h2 id="可重复注解、新类型注解"><a href="#可重复注解、新类型注解" class="headerlink" title="可重复注解、新类型注解"></a>可重复注解、新类型注解</h2><ol><li><p>可重复注解：</p><ol><li>在注解类上声明@Repeatable，成员值为MyAnnotations.class</li><li>在MyAnnotation的元注解和MyAnnotations相同</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>MyAnnotations<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可重复注解，参数：注解类的数组</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span>FIELD<span class="token punctuation">,</span>METHOD<span class="token punctuation">,</span>PARAMETER<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//能用于修饰哪些程序元素</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//修饰的注解生命周期</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span>FIELD<span class="token punctuation">,</span>METHOD<span class="token punctuation">,</span>PARAMETER<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//必须和上个注解保持一致</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//必须和上个注解保持一致</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotations</span><span class="token punctuation">{</span>    MyAnnotation<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//通过反射获取注解</span>        Class<span class="token operator">&lt;</span>TestAnnotation<span class="token operator">></span> clazz <span class="token operator">=</span> Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Method m1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyAnnotation<span class="token punctuation">[</span><span class="token punctuation">]</span> mas <span class="token operator">=</span> m1<span class="token punctuation">.</span><span class="token function">getAnnotationsByType</span><span class="token punctuation">(</span>MyAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取注解数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>MyAnnotation myAnnotation <span class="token operator">:</span> mas<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hello world</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>新类型注解（Target）</p><ol><li>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中</li><li>ElementType.TYPE_USE 标识该注解能写在使用类型的任何语句中</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea连接mysql</title>
      <link href="/2020/10/23/mysql/idea-lian-jie-mysql/"/>
      <url>/2020/10/23/mysql/idea-lian-jie-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Idea连接mysql"><a href="#Idea连接mysql" class="headerlink" title="Idea连接mysql"></a>Idea连接mysql</h1><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>点击datasource，+，mysql，输入信息</p><blockquote><p>错误问题： Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezone’ property manually. </p><p>解决：</p><p>如果你是8.x则选择mysql即可，第一次需要下载驱动信息</p><p>如果你是5.x，则选择5.1</p></blockquote><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201023110156.png"></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="增-删-修改-查询表"><a href="#增-删-修改-查询表" class="headerlink" title="增/删/修改/查询表"></a>增/删/修改/查询表</h3><p>修改：双击表，双击表数据，进行操作</p><p>增删：右键表数据，add/delete row</p><p>提交：右键表数据，submit，<strong>提交之后才会生效</strong></p><p>查询：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201023111053.png"></p><h3 id="控制台操作"><a href="#控制台操作" class="headerlink" title="控制台操作"></a>控制台操作</h3><p>如果需要输入语句查询，打开控制台输入sql语句，ctrl+enter执行</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201023111155.png"></p><h3 id="生成数据库或表的SQL语句"><a href="#生成数据库或表的SQL语句" class="headerlink" title="生成数据库或表的SQL语句"></a>生成数据库或表的SQL语句</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201023111514.png"></p><h3 id="导入或导出数据库或表"><a href="#导入或导出数据库或表" class="headerlink" title="导入或导出数据库或表"></a>导入或导出数据库或表</h3><p><strong>导出</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201023111643.png"></p><p><strong>导入</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201023111820.png"></p><h3 id="根据表生成实体类"><a href="#根据表生成实体类" class="headerlink" title="根据表生成实体类"></a>根据表生成实体类</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201023111914.png"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客优化篇(matery)(一)</title>
      <link href="/2020/10/22/hexo/hexo-bo-ke-you-hua-pian-matery-yi/"/>
      <url>/2020/10/22/hexo/hexo-bo-ke-you-hua-pian-matery-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本次是对matery主题的再次优化，对原有功能的增删，绑定域名，cdn加速……</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>六月份搭建起来的博客，小苏只是当时进行了简单的优化和一些魔改，由于学习的原因，一直没有机会对博客进一步的优化。这次更加深入的了解一下，发现了本站有不小的漏洞，在此查漏补缺，对原有的功能进行增删，包括一直想要实现的域名绑定和全站加速，这一次全部实现。</p><h1 id="魔改记录"><a href="#魔改记录" class="headerlink" title="魔改记录"></a>魔改记录</h1><h2 id="❌删除"><a href="#❌删除" class="headerlink" title="❌删除"></a>❌删除</h2><ul><li><input disabled="" type="checkbox"> 自定义鼠标样式（由于cdn和配置不同步，总是无法加载）</li><li><input disabled="" type="checkbox"> 音乐播放器（加载速度过慢，影响页面加载）</li></ul><h2 id="✅新增功能"><a href="#✅新增功能" class="headerlink" title="✅新增功能"></a>✅新增功能</h2><ul><li><input checked="" disabled="" type="checkbox"> 增加，美化artitalk说说页面</li></ul><h2 id="✅新增美化"><a href="#✅新增美化" class="headerlink" title="✅新增美化"></a>✅新增美化</h2><ul><li><input checked="" disabled="" type="checkbox"> 主页背景api随机轮换</li><li><input checked="" disabled="" type="checkbox"> 整体背景修改</li><li><input checked="" disabled="" type="checkbox"> 导航条颜色</li><li><input checked="" disabled="" type="checkbox"> 目录透明化</li><li><input checked="" disabled="" type="checkbox"> sakura樱花修改</li><li><input checked="" disabled="" type="checkbox"> 滚动条美化</li><li><input checked="" disabled="" type="checkbox"> 更换文章特色图片</li></ul><h2 id="🆗内容修改"><a href="#🆗内容修改" class="headerlink" title="🆗内容修改"></a>🆗内容修改</h2><ul><li><input checked="" disabled="" type="checkbox"> 增加留言须知</li><li><input checked="" disabled="" type="checkbox"> 增加友链说明</li><li><input checked="" disabled="" type="checkbox"> 增加友链</li><li><input checked="" disabled="" type="checkbox"> 修改个人简介</li><li><input checked="" disabled="" type="checkbox"> 增加首页视频</li><li><input checked="" disabled="" type="checkbox"> 增加图库内容</li></ul><h2 id="🔱博客优化"><a href="#🔱博客优化" class="headerlink" title="🔱博客优化"></a>🔱博客优化</h2><ul><li><input checked="" disabled="" type="checkbox"> CDN加速</li><li><input checked="" disabled="" type="checkbox"> 绑定域名(github、coding双绑定)</li><li><input checked="" disabled="" type="checkbox"> 证书认证</li></ul><h2 id="附页（学到的知识）"><a href="#附页（学到的知识）" class="headerlink" title="附页（学到的知识）"></a>附页（学到的知识）</h2><ul><li>cdn缓存刷新问题，ctrl+f5</li><li>什么是cdn，怎么实现的</li><li>图床的作用，图床+cdn怎么实现的</li><li>图片旋转副本保存</li><li>get到的网站：<a href="https://www.heytoolman.com/rmwatermark">视频下载</a>，<a href="http://www.fhdq.net/emoji/emojifuhao.html">emoji</a>，接口api，<a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">颜色码进制转换</a></li></ul><blockquote><p>本次魔改难度较大，遇坑较多，前提已经看了我之前的两期，再回头看这个会有很大的帮助：<a href="https://sulog.top/2020/06/18/hexo/hexo-github-da-jian-matery-bo-ke-er-zhu-ti-pei-zhi-pian/">Hexo+github搭建matery博客</a></p></blockquote><h1 id="正片开始"><a href="#正片开始" class="headerlink" title="正片开始"></a>正片开始</h1><h2 id="1-❌删除功能"><a href="#1-❌删除功能" class="headerlink" title="1. ❌删除功能"></a>1. ❌删除功能</h2><h3 id="1-1自定义鼠标样式"><a href="#1-1自定义鼠标样式" class="headerlink" title="1.1自定义鼠标样式"></a>1.1自定义鼠标样式</h3><p>错误：总是出现404找不到图片，多次修改无果</p><p>原因：由于cdn和配置不同步，总是无法加载</p><h3 id="1-2-音乐播放器"><a href="#1-2-音乐播放器" class="headerlink" title="1.2 音乐播放器"></a>1.2 音乐播放器</h3><p>原因：最主要还是加载速度过慢，影响页面加载，舍弃</p><hr><h2 id="2-✅新增功能"><a href="#2-✅新增功能" class="headerlink" title="2.  ✅新增功能"></a>2.  ✅新增功能</h2><h3 id="2-1-增加artitalk说说页面"><a href="#2-1-增加artitalk说说页面" class="headerlink" title="2.1 增加artitalk说说页面"></a>2.1 增加artitalk说说页面</h3><blockquote><p>参考<a href="https://artitalk.js.org/">官方文档</a></p></blockquote><p>先展示一张效果图：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201022131814.png"></p><p>传送门：<a href="https://sulog.top/artitalk/">小苏的说说页面</a></p><hr><h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><p>搭建artitalk需要有两大步骤：</p><ol><li><p>准备leanCloud环境，用于存储说说信息（类似于数据库）</p></li><li><p>matery配置</p></li></ol><p><strong>leanCloud环境步骤：</strong></p><ol><li>需要准备一个leanCloud<strong>国际版</strong>账号（国内版和国际版不互通）</li><li>前往 <a href="https://leancloud.app/">LeanCloud 国际版</a>，注册账号。</li><li>注册完成之后根据 LeanCloud 的提示绑定手机号和邮箱。</li><li>绑定完成之后点击<code>创建应用</code>，应用名称随意，接着在<code>结构化数据</code>中创建 <code>class</code>，命名为 <code>shuoshuo</code>。（这里命名必须是shuoshuo）</li><li>在你新建的应用中找到<code>结构化数据</code>下的<code>用户</code>。点击<code>添加用户</code>，输入想用的用户名及密码。</li><li>回到<code>结构化数据</code>中，点击 <code>class</code> 下的 <code>shuoshuo</code>。找到权限，在 <code>Class 访问权限</code>中将 <code>add_fields</code> 以及 <code>create</code> 权限设置为指定用户，输入你刚才输入的用户名会自动匹配。为了安全起见，将 <code>delete</code> 和 <code>update</code> 也设置为跟它们一样的权限。</li><li>然后新建一个名为<code>atComment</code>的class，权限什么的使用默认的即可。</li><li>点击 <code>class</code> 下的 <code>_User</code> 添加列，列名称为 <code>img</code>，默认值填上你这个账号想要用的发布说说的头像url，这一项不进行配置，说说头像会显示为默认头像 —— Artitalk 的 logo。</li><li>在最菜单栏中找到设置-&gt; 应用 keys，记下来 <code>AppID</code> 和 <code>AppKey</code> ，一会需要用。</li><li>最后将 <code>_User</code> 中的权限全部调为指定用户，或者数据创建者，为了保证不被篡改用户数据已达到强制发布说说。</li></ol><p><strong>matery配置步骤</strong></p><ol><li><p>新建<code>source\artitalk\index.md</code></p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: artitalktype: artitalklayout: 'artitalk'<span class="token title important">noDate: 'true'<span class="token punctuation">---</span></span></code></pre></li><li><p>新建样式<code>themes\Matery\layout\artitalk.ejs</code></p><pre><code>&lt;%- partial('_partial/bg-cover') %&gt;&lt;main class="content"&gt;    &lt;div class="container friends-container"&gt;        &lt;div class="card"&gt;            &lt;div class="card-content"&gt;                &lt;!-- artitalk --&gt;                &lt;script type="text/javascript" src="https://unpkg.com/artitalk"&gt;</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">div</span> id<span class="token operator">=</span><span class="token string">"artitalk_main"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">div</span><span class="token operator">></span>                <span class="token operator">&lt;</span>script<span class="token operator">></span>                    new Artitalk<span class="token punctuation">(</span>{                        <span class="token comment" spellcheck="true">//这里是具体配置，需要看官网的参数进行配置</span>                        appId: <span class="token string">'L0DQwgoqrBI3t8azuI5sjVuU-MdYXbMMI'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//你的leanCloud的appid</span>                        appKey: <span class="token string">'wqky9qmnyUhaHprw5WCgH1s1'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//你的leanCloud的appkey</span>                        pagesize: <span class="token string">'5'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//一页显示的说说个数</span>                        color1: '<span class="token comment" spellcheck="true">#6DD0F2',//背景颜色1</span>                        color2: '<span class="token comment" spellcheck="true">#F59ABE',//背景颜色2，双色</span>                        color3: <span class="token string">'white'</span><span class="token comment" spellcheck="true">//字体颜色</span>                    }<span class="token punctuation">)</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment" spellcheck="true">-- artitalk.end --></span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">div</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">div</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">div</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span></code></pre><blockquote><p>这两个代码块是连起来的</p></blockquote><p>具体配置项见<a href="https://artitalk.js.org/settings.html">官网</a></p></li><li><p>主题目录添加导航栏<code>themes\Matery\_config.yml</code></p><p>注意缩进</p><pre class=" language-yml"><code class="language-yml">Artitalk:url: /artitalkicon: fas fa-comment</code></pre></li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>登录<ol><li>右下角的按钮，在身份验证的输入框中填入Leancloud设置的用户密码</li></ol></li><li>输入内容<ol><li>支持markdown格式</li><li>支持html格式</li></ol></li><li>删除<ol><li>点击右上角的x</li><li>也可以登录leancloud，找到shuoshuo删除内容即可</li></ol></li></ol><hr><h2 id="3-✅新增美化"><a href="#3-✅新增美化" class="headerlink" title="3.  ✅新增美化"></a>3.  ✅新增美化</h2><p>这是我的背景图效果</p><p><code>如果你觉得有参考意义，不妨看看我的优化笔记</code></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201022134118.png"></p><h3 id="3-1-主页背景api随机轮换"><a href="#3-1-主页背景api随机轮换" class="headerlink" title="3.1 主页背景api随机轮换"></a>3.1 主页背景api随机轮换</h3><p>在以下文件<code>themes\Matery\layout\_partial\bg-cover-content.ejs</code>位置。</p><pre class=" language-ejs"><code class="language-ejs"><% if (theme.banner.enable) { %><script>    // 每天切换 banner 图.  Switch banner image every day.    $('.bg-cover').css('background-image', 'url(<%- theme.jsDelivr.url %><%- url_for('/medias/banner/' + new Date().getDay() + '.jpg') %>)');</script><% } else { %><script>    $('.bg-cover').css('background-image', 'url(<%- theme.jsDelivr.url %><%- url_for('/medias/banner/0.jpg') %>)');</script><% } %></code></pre><p>修改为api接口</p><pre class=" language-ejs"><code class="language-ejs"><% if (theme.banner.enable) { %>    <script>        $('.bg-cover').css('background-image', 'url(https://api.ixiaowai.cn/api/api.php)');    </script><% } %></code></pre><blockquote><p><code>url</code>就是接口</p><p>这是我找到的几个好看，加载速度快的接口：</p><p><code>https://api.ixiaowai.cn/api/api.php</code>（二次元动漫）</p><p><code>https://api.ixiaowai.cn/gqapi/gqapi.php</code>（高清壁纸）</p><p>比较好玩的文字API<br><code>https://api.ixiaowai.cn/ylapi/index.php</code>（一言语录）</p><p><code>https://api.ixiaowai.cn/tgrj/index.php</code>（舔狗日记）</p></blockquote><p><font color="red">特别注意：</font></p><p>如果你开启了matery的cdn加速，将很有可能在修改之后，刷新并没有出现效果。（当时我甚至把css全部删掉，仍然可以运行，以为css都没有产生效果）</p><p>原因：</p><ol><li>因为浏览器缓存了你以前的css静态文件，需要清除缓存再进行访问</li><li>因为cdn会缓存你以前的css静态文件，而且cdn的缓存文件是24小时内才刷新，这才导致你短时间不能查看效果</li></ol><p>解决方法：<a href="https://fastly.jsdelivr.net/npm/typed.js@2.0.11">https://fastly.jsdelivr.net/npm/typed.js@2.0.11</a></p><ol><li>清除浏览器缓存：部署之后，尝试ctrl+f5页面（ctrl+f5的作用：把浏览器中的临时文件夹的文件删除再重新从服务器下载）</li><li>刷新cdn：这个并不知道管不管用，可以尝试访问<code>https://purge.jsdelivr.net/gh/你的github账号/你的仓库名/css/matery.css</code>，如我的：<code>https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io/css/matery.css</code>，访问之后再ctrl+f5查看页面</li></ol><blockquote><p>这里建议看一看hexo的原理，看看hexo引擎是如何渲染css的：<a href="https://segmentfault.com/a/1190000008784436">浅析hexo</a></p></blockquote><h3 id="3-2-整体背景修改"><a href="#3-2-整体背景修改" class="headerlink" title="3.2 整体背景修改"></a>3.2 整体背景修改</h3><p>在<code>themes\Matery\source\css\matery.css</code>，ctrl+F快捷键查找<code>body</code><br>修改样式如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* background-color: #eaeaea; */</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token number">60</span>deg, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">165</span>, <span class="token number">150</span>, <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token number">5%</span>, <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">228</span>, <span class="token number">255</span>, <span class="token number">0.35</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">0%</span> <span class="token number">0%</span> / cover, <span class="token url">url("https://sulog.oss-cn-hangzhou.aliyuncs.com/beijing2.jpg")</span>, <span class="token url">url("https://sulog.oss-cn-hangzhou.aliyuncs.com/beijing2.jpg")</span> <span class="token number">0</span>px <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#7F95D1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-导航条颜色"><a href="#3-3-导航条颜色" class="headerlink" title="3.3 导航条颜色"></a>3.3 导航条颜色</h3><p>修改<code>themes\Matery\source\css\matery.css</code>样式</p><p>快捷键ctrl+F查找定位到<code>#4cbf30</code>（浅绿色）和<code>#0f9d58</code>（深绿色）还有首页字体颜色，</p><p>然后将其修改为你喜欢的颜色</p><blockquote><p>注意：不知有一处需要替换，建议将所有的都浅绿色和深绿色都替换成你的颜色</p><p>遇到的坑：</p><p>忘记修改这个，导致导航条颜色没有修改成功</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#6DD0F2</span> <span class="token number">0%</span>, <span class="token hexcode">#F59ABE</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*透明效果 值范围 0~1，看情况自己修改*/</span><span class="token punctuation">}</span></code></pre></blockquote><h3 id="3-4-滚动条美化"><a href="#3-4-滚动条美化" class="headerlink" title="3.4 滚动条美化"></a>3.4 滚动条美化</h3><p>在<code>themes\Matery\source\css\matery.css</code></p><p>样式添加如下：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 滚动条 */</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-thumb</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF2A68</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span><span class="token number">45</span>deg,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">25%</span>,transparent <span class="token number">25%</span>,transparent <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">50%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">.4</span><span class="token punctuation">)</span> <span class="token number">75%</span>,transparent <span class="token number">75%</span>,transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar-track</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffcaca</span>ff<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-目录透明化"><a href="#3-5-目录透明化" class="headerlink" title="3.5 目录透明化"></a>3.5 目录透明化</h3><p>增加样式在<code>themes\Matery\layout\_partial\post-detail-toc.ejs</code></p><p><strong>修改</strong>内容如下：</p><pre class=" language-ejs"><code class="language-ejs">.toc-widget {width: 345px;padding-left: 20px;background-color: rgb(255, 255, 255,0.7);border-radius: 10px;box-shadow: 0 10px 35px 2px rgba(0, 0, 0, .15), 0 5px 15px rgba(0, 0, 0, .07), 0 2px 5px -5px rgba(0, 0, 0, .1) !important;}</code></pre><h3 id="3-6-sakura樱花修改"><a href="#3-6-sakura樱花修改" class="headerlink" title="3.6 sakura樱花修改"></a>3.6 sakura樱花修改</h3><blockquote><p>之前的樱花效果并没有成功显示，于是换了一个思路，成功！</p></blockquote><ol><li><p>找到<code>themes\hexo-theme-matery\source\libs\others</code>文件夹</p></li><li><p>在里面新建一个文本文件，打开这个网址<a href="https://sulog.oss-cn-hangzhou.aliyuncs.com/Yafine/cdn@2.5/source/js/sakura.js">传送门</a>，将内容复制粘贴到文本文件中，再将其命名为<code>sakura.js</code></p></li><li><p>接着来到主题配置文件里找到<code>libs.js</code>，在js最后一行添加 <code>sakura: /libs/others/sakura.js</code></p></li><li><p>然后再到<code>themes\hexo-theme-matery\layout\layout.ejs</code>里添加如下代码：</p><pre class=" language-ejs"><code class="language-ejs"><% if (theme.sakura.enable) { %><script type="text/javascript" src="<%- theme.libs.js.sakura %>"></script><% } %></code></pre></li><li><p>最后再到matery<strong>主题</strong>配置文件添加：</p><p>注意缩进</p><pre class=" language-yml"><code class="language-yml">sakura:  enable: true</code></pre><p>到这里就大功告成了！以后你想开就开，觉得不好看了还可以换特效。</p></li></ol><p><strong>修改花瓣的数量</strong></p><p>因为普遍在使用的樱花背景效果花瓣数太多了，一些人不太喜欢。</p><p>于是按不同花瓣数量做了几个新的 <code>js</code> ，并提供如下 <code>cdn</code> 形式的引用：</p><pre><code>https://cdn.jsdelivr.net/gh/fz6m/Private-web@1.2/js/sakura/sakura-small.js</code></pre><p>以上为少量樱花效果，另提供几个不同数量的文件引用名：</p><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>sakura-small.js</td><td>少量樱花</td></tr><tr><td>sakura-half.js</td><td>樱花相对原效果数量减半</td></tr><tr><td>sakura-reduce.js</td><td>樱花相对原效果减少1/4</td></tr><tr><td>sakura-original.js</td><td>樱花数量不变（原效果）</td></tr></tbody></table><h3 id="3-7-更换文章特色图片"><a href="#3-7-更换文章特色图片" class="headerlink" title="3.7  更换文章特色图片"></a>3.7  更换文章特色图片</h3><ol><li><p>将图片放在<code>\themes\matery\source\medias\featureimages</code></p><ol><li>图片选择容量小的</li><li>图片选择横屏的，如果需要旋转，win10系统旋转方法：<ol><li>点开图片，旋转，ctrl+s另存为</li><li><strong>如果只是旋转没有另存为，其实并没有旋转过来，上传之后仍然是竖屏的！</strong></li></ol></li></ol></li><li><p>找到<strong>主题</strong>配置文件<code>\themes\matery\</code></p></li><li><p>搜索<code>featureImages</code>，增加图床的文件路径</p><ol><li>这里如果开启了matery的cdn加速，则加载时会自动在图片链接前加上cdn的链接，故这里只需要写文件路径即可</li></ol></li></ol><blockquote><p>可以看到图片是和博客放在一起的，为了加快博客的加载速度，尽量选择<strong>容量小的图片！</strong></p></blockquote><pre class=" language-yml"><code class="language-yml">featureImages:- /medias/featureimages/f2.jpg- /medias/featureimages/f1.jpg- /medias/featureimages/fe3.jpg- /medias/featureimages/f4.jpg- /medias/featureimages/fe5.jpg- /medias/featureimages/fe6.jpg- /medias/featureimages/fe7.jpg</code></pre><hr><h2 id="4-🔱内容修改"><a href="#4-🔱内容修改" class="headerlink" title="4. 🔱内容修改"></a>4. 🔱内容修改</h2><h3 id="4-1-留言须知-友链说明-个人简介"><a href="#4-1-留言须知-友链说明-个人简介" class="headerlink" title="4.1 留言须知/友链说明/个人简介"></a>4.1 留言须知/友链说明/个人简介</h3><p>均在<code>\source\</code>对应的文件夹下的<code>index.md</code>中添加内容即可</p><h3 id="4-2-友链"><a href="#4-2-友链" class="headerlink" title="4.2 友链"></a>4.2 友链</h3><p>在<code>\source\_data\friends.json</code>添加json字符串</p><p><font color="pink">欢迎小伙伴分享友链呀~</font></p><p><strong>Matery版：</strong></p><p>交换友链还请评论此格式哦~🌿</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io/medias/logo.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"小苏の万事屋"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"一个不是只会写业务代码的后端攻城狮！"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://sulog.top/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去关照"</span><span class="token punctuation">}</span></code></pre><p><strong>非Matery版：</strong></p><pre><code>博客名称: 小苏の万事屋博客地址: https://sulog.top/博客头像: https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io/medias/logo.png博客简介: 一个不是只会写业务代码的后端攻城狮！可选标题: 访问主页</code></pre><h3 id="4-3-首页视频"><a href="#4-3-首页视频" class="headerlink" title="4.3 首页视频"></a>4.3 首页视频</h3><p>在<code>matery</code><strong>主题</strong>配置文件中搜索<code>video</code>，</p><p>配置并开启即可</p><pre class=" language-yml"><code class="language-yml">video:  enable: true  showTitle: true  title: 永不放弃  url: https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/images/wudi2.mp4 # 必填  pic:  thumbnails:  height: # 如：400  autoplay: false # 是否自动播放  theme: '#42b983'  loop: false # 是否循环播放  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7</code></pre><blockquote><p>注意：</p><p><code>url</code>：最好是将视频下载下来，并上传到图床，使用cdn链接加速</p><p>使用图床目的为了让大文件和部署的博客分离，加快博客加载速度：<a href="https://yafine-blog.cn/posts/eb3a.html">搭建图床教程</a></p><p>这里最好学习一下cdn的原理，更好的理解为什么换个链接就可以加速：<a href="https://juejin.im/post/6844903890706661389#heading-0">什么是CDN，怎么实现加速</a></p></blockquote><h3 id="4-4-增加图库内容"><a href="#4-4-增加图库内容" class="headerlink" title="4.4 增加图库内容"></a>4.4 增加图库内容</h3><blockquote><p>前提：</p><ol><li>有自定义相册：<a href="https://sulog.top/2020/06/18/hexo/hexo-github-da-jian-matery-bo-ke-er-zhu-ti-pei-zhi-pian/#toc-heading-5">搭建自定义相册教程</a></li></ol></blockquote><ol><li><p>首先需要有图片，将图片上传到图床。</p><p>图床目的为了让大文件和部署的博客分离，加快博客加载速度：<a href="https://yafine-blog.cn/posts/eb3a.html">搭建图床教程</a></p></li><li><p>这时你的图床已经有了图片，找到<code>source\_data\galleries.json </code></p><p>增加图床中图片的名字，如果没有添加则不会显示</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"相册名字"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"images/p0.png"</span><span class="token punctuation">,</span>      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"相册的描述"</span><span class="token punctuation">,</span>      <span class="token property">"photos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"images/node-1.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-2.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-3.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-4.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-5.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-6.png"</span><span class="token punctuation">,</span>        <span class="token string">"images/node-7.png"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li></ol><hr><h2 id="5-博客优化"><a href="#5-博客优化" class="headerlink" title="5. 博客优化"></a>5. 博客优化</h2><h3 id="5-1-CDN加速"><a href="#5-1-CDN加速" class="headerlink" title="5.1 CDN加速"></a>5.1 CDN加速</h3><p>需要先了解什么是CDN，它是怎么加速的：<a href="https://juejin.im/post/6844903890706661389#heading-0">CDN的理解</a></p><p>在matery<strong>主题</strong>配置文件中，搜索<code>jsDelivr</code></p><pre class=" language-yml"><code class="language-yml">jsDelivr:  url: https://cdn.jsdelivr.net/gh/github用户名/博客仓库名我的：jsDelivr:  url: https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io</code></pre><p>jsdelivr是一个CDN服务提供商，优点在于免费且全球通用。它可以加载github上的文件。</p><p>而且matery就是使用的jsDelivr作为cdn加速引擎，matery通过配置文件的配置，将大部分静态文件前都加上了这一串cdn链接，实现加速</p><p><font color="red">特别注意：</font></p><p>如果你开启了matery的cdn加速，将很有可能在修改之后，刷新并没有出现效果。（当时我甚至把css全部删掉，仍然可以运行，以为css都没有产生效果）</p><p>原因：</p><ol><li>因为浏览器缓存了你以前的css静态文件，需要清除缓存再进行访问</li><li>因为cdn会缓存你以前的css静态文件，而且cdn的缓存文件是24小时内才刷新，这才导致你短时间不能查看效果</li></ol><p>解决方法：</p><ol><li>清除浏览器缓存：部署之后，尝试ctrl+f5页面（ctrl+f5的作用：把浏览器中的临时文件夹的文件删除再重新从服务器下载）</li><li>刷新cdn：这个并不知道管不管用，可以尝试访问<code>https://purge.jsdelivr.net/gh/你的github账号/你的仓库名/css/matery.css</code>，如我的：<code>https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io/css/matery.css</code>，访问之后再ctrl+f5查看页面</li></ol><h3 id="5-2-域名绑定"><a href="#5-2-域名绑定" class="headerlink" title="5.2 域名绑定"></a>5.2 域名绑定</h3><ol><li><p>首先购买个域名：我购买的是阿里云的域名</p><ol><li>阿里云需要邮箱认证，信息模板要身份证认证（这个时间久一点，我大概2天才认证完成）</li><li>只有认证通过之后，域名才会生效，之后的操作才会生效</li></ol></li><li><p>在绑定域名之前首先需要将访问地址添加到 DNS 域名（你买的域名）解析之中。</p><blockquote><p>因为我实现的是github和coding双部署，所以设置了两组</p></blockquote><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201022182931.png"></p></li></ol><table><thead><tr><th>主机记录</th><th>说明</th></tr></thead><tbody><tr><td>www</td><td>指www.开头才能访问该域名<code>www.sulog.top</code></td></tr><tr><td>@</td><td>指直接解析主域名sulog.top</td></tr></tbody></table><table><thead><tr><th>记录类型</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>用来指定域名的 IPv4 地址（如 8.8.8.8），如果需要将域名指向一个 IP 地址（就是你ping你网站的ip），就需要添加 A 记录。</td></tr><tr><td>CNAME</td><td>需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。</td></tr></tbody></table><h4 id="5-2-1-Github绑定域名操作"><a href="#5-2-1-Github绑定域名操作" class="headerlink" title="5.2.1 Github绑定域名操作"></a>5.2.1 Github绑定域名操作</h4><ol><li><p>完成上述步骤    </p></li><li><p>在站点根目录的 source 目录下新建一个 CNAME 文件（没有后缀，就叫大写的CNAME），里面写入自己的域名，然后保存，在进行如下的步骤。这样到最后当你在地址栏输入 xxx.github.io 时，才会自动跳转到你的域名。</p></li><li><p>在你的 GitHub 博客仓库里，点击中间的setting，进入下面的页面，将你的域名填到 Custom domain 选项下</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201022183934.png"></p></li><li><p>强制开启 https，即当你在地址栏输入域名，会自动识别域名为 https 开头。然后进行保存。</p></li><li><p>成功啦，测试一下</p><blockquote><p>现在github改版，保存域名后，github会自动申请证书，在我们域名解析访问github的博客地址时，会有证书。当然需要我们自己重新打开浏览器才会生效噢~</p></blockquote></li></ol><h4 id="5-2-2-coding绑定域名操作"><a href="#5-2-2-coding绑定域名操作" class="headerlink" title="5.2.2 coding绑定域名操作"></a>5.2.2 coding绑定域名操作</h4><ol><li><p>完成上述操作</p></li><li><p>打开coding的博客仓库，点击静态网站，设置</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201022184131.png"></p></li><li><p>找到自定义域名，输入域名绑定，将不带www的设为首选，www的勾选跳转至首选，强制HTTPS</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201022184236.png"></p><blockquote><p>注意：</p><p>当出现证书认证失败的时候，将上述域名解析的github两个暂停，再次认证，先认证首选的，多试几次即可成功！</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue前端框架</title>
      <link href="/2020/10/19/qian-duan/vue/"/>
      <url>/2020/10/19/qian-duan/vue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p><a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p><p>作用：</p><ol><li>JavaScript框架</li><li>简化Dom操作(不需要获取元素再操作元素)</li><li>响应式数据驱动（页面随数据同步更新）</li></ol><p><strong>准备环境</strong>：VSCode+自动刷新插件live server</p><blockquote><p>live server安装和使用：</p><ol><li><p>打开VSCode，安装插件</p><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20201019203249.png" style="zoom:67%;"></li><li><p>将html文件拖拽进VSCode</p><p>右键</p><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20201019203450.png" style="zoom: 67%;"></li></ol></blockquote><h2 id="Vue-基础"><a href="#Vue-基础" class="headerlink" title="Vue 基础"></a>Vue 基础</h2><h3 id="第一个Vue程序"><a href="#第一个Vue程序" class="headerlink" title="第一个Vue程序"></a>第一个Vue程序</h3><ol><li>导入开发版本的Vue.js</li><li>创建Vue实例对象，设置el属性和data属性</li><li>使用简介的模板语法把数据渲染到页面上</li></ol><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="EL挂载点"><a href="#EL挂载点" class="headerlink" title="EL挂载点"></a>EL挂载点</h3><p>作用：用于设置vue实例挂载的元素</p><p>作用范围：会管理el选项<strong>命中的元素</strong>及其内部的<strong>后代元素</strong></p><p>选择器：可以使用其他选择器，建议使用<strong>ID选择器</strong></p><p>标签：可以使用在双标签，但不能使用在<strong>HTML和BODY</strong>上</p><h3 id="data数据对象"><a href="#data数据对象" class="headerlink" title="data数据对象"></a>data数据对象</h3><p>作用：数据定义在data中</p><p>显示复杂数据：对象、数组</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      {{ message }}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{school.name}}{{school.mobile}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{campus[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{campus[1]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>        school<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>            mobile<span class="token punctuation">:</span><span class="token string">"123456"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        campus<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"a小区"</span><span class="token punctuation">,</span><span class="token string">"b小区"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="本地应用"><a href="#本地应用" class="headerlink" title="本地应用"></a>本地应用</h2><h3 id="Vue指令-元素内部的属性"><a href="#Vue指令-元素内部的属性" class="headerlink" title="Vue指令(元素内部的属性)"></a>Vue指令(元素内部的属性)</h3><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>作用：设置标签的文本值（会将文本中的值替换掉）</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>郑州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Hello Vue!--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{message}}郑州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Hello Vue!郑州--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#text1'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>作用：解析标签中的文本和html标签，innerHTML（会将文本中的值替换掉）</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--百度--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#html1'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            content<span class="token punctuation">:</span><span class="token string">"&lt;a href='http://baidu.com'>百度&lt;/a>"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>作用：绑定事件</p><p>可以传参，定义方法时定义形参来接收传入的实参</p><p>事件后跟上<code>.修饰符</code>可以对事件进行限制：如<code>.enter</code>限制触发的按键为回车</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>v-on指令<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doIt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>v-on简化<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doIt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--@简写方式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeFood<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{food}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>传值<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chuanZhi(666)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keyup<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#on'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            food<span class="token punctuation">:</span><span class="token string">"西兰花"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            doIt<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"做It"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            changeFood<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"好吃！"</span><span class="token comment" spellcheck="true">//这里通过this可以拿到data元素的值，因为vue是响应式的，我们只需要操作data数据就可以实现页面的变化</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            chuanZhi<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            keyup<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"测试事件限制修饰符"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>作用：根据表达式真假切换元素的显示状态</p><p>原理：修改元素的idsplay值，实现显示隐藏</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试v-show指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//只有加上这些js，v-属性才会生效</span>        el<span class="token punctuation">:</span> <span class="token string">'#show1'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试v-show指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">></span><span class="token punctuation">=</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试v-show指令2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeShow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>改变show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addAge<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>增加年龄<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#show1'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            isShow<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span><span class="token number">17</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            changeShow<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            addAge<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>作用：根据表达式真假切换元素的显示状态，和v-show效果一样</p><p>原理：本质是操作dom元素来切换显示状态（如果条件不满足这个标签就不会出现，而v-show是元素还在，只是display属性隐藏了）</p><p>频繁操作使用v-show，反之使用v-if，前者切换消耗小</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>作用：为元素绑定属性</p><p>语法：    <code>v-bind:属性名</code>，简写： <code>:属性名</code></p><p>需要动态的增删class建议使用对象的方法</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.active</span></span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bind1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baidu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baidu<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baiduTitile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下啊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baidu<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isActive?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下class1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>  <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{active:isActive}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeIsActive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下class2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--推荐使用，如果isActive为true，则class值为active--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#bind1'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            baidu<span class="token punctuation">:</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span>            baiduTitile<span class="token punctuation">:</span><span class="token string">"百度一下，你就知道"</span><span class="token punctuation">,</span>            isActive<span class="token punctuation">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            changeIsActive<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>isActive <span class="token operator">=</span> <span class="token operator">!</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isActive<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>案例：图片切换</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--图片切换--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeImg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgs[index]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pre<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index!<span class="token punctuation">=</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一张<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index&lt;imgs.length-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一张<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#changeImg'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            imgs<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"./1/311.png"</span><span class="token punctuation">,</span>                  <span class="token string">"./1/604.jpg"</span><span class="token punctuation">,</span>                  <span class="token string">"./1/605.jpg"</span><span class="token punctuation">,</span>                  <span class="token string">"./1/606.jpg"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            index<span class="token punctuation">:</span><span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            pre<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            next<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>作用：根据数据生成列表结构</p><p>v-for经常与数组结合使用</p><p>语法：<code>(item,index) in 数据</code></p><p>item和index可以结合其他指令一起使用</p><p>响应式，数组长度的更新同步会到页面上</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--v-for--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>for1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in food<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>食物：{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in objs<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.obj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>对象：{{item.obj}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#for1'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            food<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token string">"鱼香肉丝"</span><span class="token punctuation">,</span>                <span class="token string">"麻婆豆腐"</span><span class="token punctuation">,</span>                <span class="token string">"水煮肉片"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            objs<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>obj<span class="token punctuation">:</span><span class="token string">"川菜"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>obj<span class="token punctuation">:</span><span class="token string">"粤菜"</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>作用：便捷的设置和获取<strong>表单</strong>元素的值</p><p>绑定的数据会和表单元素的<strong>值</strong>相关联</p><p>绑定的数据和表单元素的值是<strong>双向绑定</strong>的</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--v-model--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--修改上面的值，实时会改变data元素中的message--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#model1'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>案例：记事本</strong></p><p>功能：</p><ol><li>新增：<ol><li>v-for：遍历数组中元素生成标签</li><li>v-model：双向绑定输入框内容</li><li>v-on：事件修饰符，回车触发事件，将输入框绑定内容添加进数组中</li></ol></li><li>删除：<ol><li>事件自定义参数，点击触发事件，传入索引</li><li>splice方法删除数组中的元素<code>this.arr.splice(index,1)</code>：从索引数删除1个</li></ol></li><li>统计：<ol><li>基于数据的开发方式，找到对应元素，修改成数组的长度即可</li></ol></li><li>清空：<ol><li>v-on：绑定事件，点击触发事件，将数组设置为[ ]空</li></ol></li><li>隐藏：<ol><li>v-show/v-if 数组非空：没有数据时，隐藏元素</li></ol></li></ol><h2 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a>网络应用</h2><h3 id="axios网络库"><a href="#axios网络库" class="headerlink" title="axios网络库"></a>axios网络库</h3><ol><li>axios必须先导入才可以使用</li><li>使用get/post方法即可发送对应的请求</li><li>then方法中的回调函数会在请求成功或失败时触发</li><li>通过回调函数的形参可以获取相应内容或错误信息</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--axios--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get请求<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post请求<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".get"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里没有使用vue，使用的是普通dom获取对象</span>        axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"https://autumnfish.cn/api/joke/list?num=6"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//url</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//回调函数，获取响应的值</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//回调函数，响应错误时的方法</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".post"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"https://autumnfish.cn/api/user/reg"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>username<span class="token punctuation">:</span><span class="token string">"大西瓜"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//post需要传参</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="axios-Vue"><a href="#axios-Vue" class="headerlink" title="axios+Vue"></a>axios+Vue</h3><p>vue的data中的数据，一部分时通过网络axios获取到的，我们需要在axios响应回数据之后，将值设置到对应的data当中</p><blockquote><p>注意：</p><p>因为axios的回调函数中this和vue中的this不同，所以不能使用this</p><p>需要把this保存起来，使用回调函数直接使用保存的this即可</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--axios+vue--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>axios1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>切换笑话<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeJoke<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{joke}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el <span class="token punctuation">:</span> <span class="token string">'#axios1'</span><span class="token punctuation">,</span>        data <span class="token punctuation">:</span> <span class="token punctuation">{</span>            joke <span class="token punctuation">:</span> <span class="token string">"搞笑的笑话"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">changeJoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里将this保存在that中</span>                axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"https://autumnfish.cn/api/joke"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>                    that<span class="token punctuation">.</span>joke <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token comment" spellcheck="true">//这里that指的就是data中的元素，response是响应的数据，其中data是我们想要的</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>案例：天气查询</strong></p><p>功能：</p><ol><li>回车查询：<ol><li>js代码最好与页面分离，单独的Js文件编写，html通过script标签引入js文件</li><li>点击回车（v-on绑定事件）</li><li>查询数据（axios网络查询）</li><li>渲染数据（将响应的数据设置进data数组中，将html值修改成data中的值）</li></ol></li><li>点击查询<ol><li>点击城市，绑定事件，传入参数：自定义参数可以让代码灵活性更高</li><li>事件中将参数（注意层级结构）绑定到data中，并调用查询上述查询函数：methods中定义的方法内部，可以通过this关键子点出其他的方法</li></ol></li></ol><h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><h3 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h3><blockquote><p>通过审查元素快读定位到需要操作的元素</p><p>vue的data中的数据，一部分时通过网络axios获取到的，我们需要在axios响应回数据之后，将值设置到对应的data当中，再将data中的数据设置到html元素中</p><p>响应式的页面要替换成vue数据</p></blockquote><p>功能：</p><ol><li>歌曲搜索<ol><li>通过审查元素快读定位到需要操作的元素</li><li>回车查询（v-on v-model绑定数据）</li><li>查询数据：axios通过data值查询数据</li><li>渲染数据：v-for遍历，将值设置到data的数组元素中(that)，替换原html属性</li></ol></li><li>歌曲播放<ol><li>点击播放（v-on 自定义参数(歌曲Id)），id通过遍历的item中获取</li><li>歌曲地址获取（接口 歌曲Id）：在上述绑定的事件中，axios传参获取，将获取的值设置到data的url中</li><li>歌曲地址设置（v-bind 设置src）</li></ol></li><li>歌曲封面<ol><li>点击播放（在上述的点击播放函数增加逻辑即可）</li><li>歌曲封面获取(接口 歌曲id)：在点击播放的方法中，加上一个axios接口调用，获取详情信息，并将imgUrl地址设置到data的imgUrl中</li><li>歌曲封面设置（v-bind 设置src）</li></ol></li><li>歌曲评论<ol><li>点击播放（增加逻辑）</li><li>歌曲评论获取（接口 歌曲Id）：在点击播放的方法中，加上一个axios接口调用，获取评论信息，并将热门评论设置到data的hotComments的数组中</li><li>评论渲染（v-for）：v-for遍历，再将data值设置在html中</li></ol></li><li>播放动画<ol><li>图片是否暂停旋转，取决于class属性是否有playing</li><li>audio标签的play/pause事件会在音频播放/暂停的时候触发，故使用两个事件来切换data中isPlaying的值</li><li>通过对象的方式设置类名<code>{playing:isPlaying}</code>，类名是否生效取决于后者的真假</li></ol></li><li>mv播放<ol><li>mv图标显示（v-if）：在mv图标的标签添加<code>v-if</code>判断mvid是否等于0，为0则不显示</li><li>mv地址获取（接口 mvid）：在mv按钮中绑定事件（v-on），加上一个axios接口调用，获取mv地址信息，并将热门评论设置到data的mvUrl中，并将遮罩层isShow设置为true</li><li>遮罩层（v-show v-on）：在mv的div中增加<code>v-show:"isShow"</code>，在遮罩层的div绑定事件，修改isShow实现退出</li><li>mv地址设置（v-bind）：将mvUrl值设置上去</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原理文章</title>
      <link href="/2020/10/15/xue-xi/yuan-li-wen-zhang/"/>
      <url>/2020/10/15/xue-xi/yuan-li-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="原理文章"><a href="#原理文章" class="headerlink" title="原理文章"></a>原理文章</h1><p><strong>博客</strong></p><p><a href="https://juejin.im/post/6844903890706661389#heading-0">什么是CDN，怎么实现加速</a>，jsdelivr是一个CDN服务提供商，优点在于全球通用。</p><p><a href="https://mp.weixin.qq.com/s/uGyGldbwmShDDPDau5pAPw">架构：三地五中心</a></p><p><strong>后端</strong></p><p> <a href="https://www.cnblogs.com/chongaizhen/p/11151892.html">深入springboot原理——一步步分析springboot启动机制（starter机制）</a></p><p><a href="https://blog.csdn.net/ziyonghong/article/details/83472867">IOC的实现原理–工厂模式中的反射机制</a></p><p><a href="https://blog.csdn.net/h2604396739/article/details/104506186/">Mybatis工作原理与流程</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二刷Java基础</title>
      <link href="/2020/10/01/xue-xi/er-shua-java-ji-chu/"/>
      <url>/2020/10/01/xue-xi/er-shua-java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="二刷Java基础"><a href="#二刷Java基础" class="headerlink" title="二刷Java基础"></a>二刷Java基础</h1><h2 id="java概述"><a href="#java概述" class="headerlink" title="java概述"></a>java概述</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>JDK（开发工具包）：是提供开发人员是hi用的，java开发工具、包括JRE</p><p>JRE（运行环境）：包括java虚拟机和所需要的核心类库，可以运行java程序</p><p>JVM：虚拟机</p><p>关键字：被java赋予了特殊的含义，所有字母都是小写</p><p>保留字：java尚未使用，但之后可能会作为关键字使用，命名时避开</p><p>标识符：给变量、方法、类等元素命名的字符</p><h3 id="Java特点"><a href="#Java特点" class="headerlink" title="Java特点"></a>Java特点</h3><ol><li>纯粹的面向对象<ol><li>类，对象</li><li>封装、集成、多态</li></ol></li><li>健壮性<ol><li>去掉了c中的指针</li><li>增加了垃圾回收机制</li></ol></li><li>跨平台性<ol><li>JVM虚拟机</li><li>Java代码–字节码文件–JVM虚拟机–操作系统–硬件</li></ol></li></ol><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ol><li>26英文字符、0-9，_或$</li><li>数字不能开头</li><li>不能使用关键字和保留字</li><li>严格区分大小写，长度无限制</li><li>不能有空格</li></ol><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><ol><li><p>包名：多单词组成全小写</p></li><li><p>类、接口名：多单词首字母大写</p></li><li><p>变量、方法名：第一个首字母小写，其他驼峰命名</p></li><li><p>常量名：全大写，多单词用下划线连接</p></li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200925095549.png"></p><h5 id="整数类型（byte-short-int-long）"><a href="#整数类型（byte-short-int-long）" class="headerlink" title="整数类型（byte,short,int,long）"></a>整数类型（byte,short,int,long）</h5><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200925100001.png"></p><h5 id="浮点型（float-double）"><a href="#浮点型（float-double）" class="headerlink" title="浮点型（float,double）"></a>浮点型（float,double）</h5><p>E表示10的多少次方，如E38就是10的38次方</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200925100131.png"></p><h5 id="字符类型（char）"><a href="#字符类型（char）" class="headerlink" title="字符类型（char）"></a>字符类型（char）</h5><p>2字节，用单引号括起来</p><ol><li>声明一个字符</li><li>转义字符<code>'\n'</code></li><li>Unicode值表示值</li></ol><h5 id="String引用数据类型"><a href="#String引用数据类型" class="headerlink" title="String引用数据类型"></a>String引用数据类型</h5><p>可以与8中基本数据类型做运算，运算只能是+</p><pre><code>3+4+"hello" ----&gt;  7hello"hello"+3+4 ----&gt;  hello34String a = 4;//错String a = 4+"";//对</code></pre><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><h5 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h5><p>(char、byte、short)–int–long–float–double</p><pre><code>short s = 5;s = s-2;//编译不通过，因为2是int，所以结果是Ints = (short)(s-2);//通过，强制类型转换</code></pre><h5 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h5><p>强转符（）</p><p>如：<code>double d1 = 12.9;    int i2=12</code></p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h4 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h4><p>10101，从右往左：2^0^x1+2^1^x0+2^2^x1+2^3^x0+2^4^x1=21</p><h4 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h4><p>21，除2取余的逆：商10余1，商5余0，商2余1，商1余0，商0余1</p><p>取逆：10101</p><h4 id="二进制转八进制、十六进制"><a href="#二进制转八进制、十六进制" class="headerlink" title="二进制转八进制、十六进制"></a>二进制转八进制、十六进制</h4><p>八进制：3个一位</p><p>十六进制：4个一位</p><p>原码、反码、补码：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210402153548.png"></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><h5 id="取余运算"><a href="#取余运算" class="headerlink" title="取余运算%"></a>取余运算%</h5><p>结果的符号与被模数符号相同</p><h5 id="，–"><a href="#，–" class="headerlink" title="++，–"></a>++，–</h5><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><h5 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h5><p>检查是否是类的对象</p><p>如：<code>Hello</code> instanceof String 结果：true</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h5 id="amp-amp-，-短路与-或"><a href="#amp-amp-，-短路与-或" class="headerlink" title="&amp;&amp;，|| 短路与/或"></a>&amp;&amp;，|| 短路与/或</h5><h5 id="异或"><a href="#异或" class="headerlink" title="^异或"></a>^异或</h5><p>判断两个是否不同，不同为true，同为false</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>&lt;&lt;：左移，如：<code>int i = 21;    i&lt;&lt;2</code>，结果：i=84,过程：21*2^2^</p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>格式：(条件表达式)？表达式1：表达式2</p><p>如果条件为true，结果为表达式1，否则为2</p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h4 id="1-switch-case"><a href="#1-switch-case" class="headerlink" title="1.switch case"></a>1.switch case</h4><p>表达式中只能有6种数据类型：</p><p>byte、short、char、int、枚举、String</p><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">case</span> 常量<span class="token number">1</span>：          语句；          <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不加的话，会按顺下往下执行</span>      <span class="token keyword">case</span> 常量<span class="token number">2</span>：          语句；          <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>最终兜底，可写可不写        语句<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-for"><a href="#2-for" class="headerlink" title="2.for"></a>2.for</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化条件<span class="token punctuation">;</span>循环条件<span class="token punctuation">(</span><span class="token keyword">boolean</span>类型<span class="token punctuation">)</span><span class="token punctuation">;</span>迭代条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-while-先判断后执行"><a href="#3-while-先判断后执行" class="headerlink" title="3.while(先判断后执行)"></a>3.while(先判断后执行)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体    迭代条件<span class="token punctuation">}</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>while(true)无限循环：使用break来跳出</p><h4 id="4-do-while-先执行后判断"><a href="#4-do-while-先执行后判断" class="headerlink" title="4.do-while(先执行后判断)"></a>4.do-while(先执行后判断)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">{</span>  循环体  迭代条件<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>是引用数据类型，元素可以是任何数据类型</li><li>在内存种开辟一整块内存空间</li><li>数组长度一旦确定，不能修改</li><li>角标从0开始</li></ol><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><ol><li><p>初始化</p><p>必须指定长度，内存才会分配空间</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1<span class="token punctuation">;</span>array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态初始化</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认初始化值：</span>整型<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>浮点型<span class="token operator">:</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">boolean</span><span class="token operator">:</span><span class="token boolean">false</span>，引用数据类型<span class="token operator">:</span>null</code></pre></li><li><p>调用</p><pre class=" language-java"><code class="language-java">array1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取长度</span>array1<span class="token punctuation">.</span>length<span class="token comment" spellcheck="true">//遍历，条件表达式没有等号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>内存解析</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200925151309.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200925151400.png"></p></li></ol><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><ol><li><p>初始化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>调用</p><pre class=" language-java"><code class="language-java">arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//获取长度</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span>arr4<span class="token punctuation">.</span>length<span class="token comment" spellcheck="true">//3</span>arr4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token comment" spellcheck="true">//3</span><span class="token comment" spellcheck="true">//遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr4<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>默认初始化值</p><p><code>int[][] arr = new int[4][3]</code></p><p>外层元素：arr[0]，地址值</p><p>内层元素：arr[0] [0],0</p><p><code>int[][] arr = new int[4][]</code></p><p>外层元素：地址值</p><p>内层元素：空指针，因为没有指定内存空间</p></li><li><p>内存解析</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200925153444.png"></p></li><li><p>二维数组算法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***杨辉三角*要求：1.打印一个10行杨辉三角2.第一行有1个元素，第n行有n个元素3.每一行的第一个元素和最后一个元素是14.从第三行开始，对于非第一个元素和最后一个元素，yanghui[i][j]=yanghui[i-1][j-1]+yanghui[i-1][j]**/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//声明并初始化数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> yangHui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给数组赋值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>yangHui<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给首位元素赋值</span>        yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给中间赋值,这个判断语句可以省略，因为当i为0或1时，for判断语句也进不去</span>       <span class="token comment" spellcheck="true">// if(i>1){</span>            <span class="token comment" spellcheck="true">//从第二个数组开始，到倒数第二个数组结束</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>yangHui<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>yangHui<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>yangHui<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">多维数组的使用    声明：<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token punctuation">]</span>，以下允许通过编译的是    <span class="token comment" spellcheck="true">//首先，int[] x，是一个一维数组，y是一个二维数组</span>    x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不可以，int=二维数组</span>    y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以，一维=一维</span>    y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不可以，int = 一维</span>    y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以，int = int</span></code></pre><pre class=" language-java"><code class="language-java">定义一个<span class="token keyword">int</span>型一维数组，包含<span class="token number">10</span>个元素，分别赋予随机整数，求所有元素的最大值最小值，和，平均值要求：所有随机数都是两位数    公式：<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span>的整数，<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//(int)(Math.random()*(99-10+1)+10)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//最大值</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            max<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//最小值</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">></span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            min<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//和</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//平均值</span>    <span class="token keyword">int</span> avg <span class="token operator">=</span> sum<span class="token operator">/</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数组复制</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数组反转</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr1<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr1<span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr1<span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="数组查找"><a href="#数组查找" class="headerlink" title="数组查找"></a>数组查找</h3><h5 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">}</span>    String dest <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有找到"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//前提：要查找的数组必须是有序的</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dest <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要查找的数</span>    <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//起始索引</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//末索引</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中间索引</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dest<span class="token operator">==</span>arr1<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了，位置在"</span><span class="token operator">+</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>            ifFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dest<span class="token operator">></span>arr1<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            head <span class="token operator">=</span> middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//dest&lt;arr1[middle]</span>            end <span class="token operator">=</span> middle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><h5 id="算法的5大特征"><a href="#算法的5大特征" class="headerlink" title="算法的5大特征"></a>算法的5大特征</h5><ol><li>有输入</li><li>有输出</li><li>有穷性：能结束，不是死循环</li><li>确定性：有确定含义，没有二义性</li><li>可行性：清楚可行</li></ol><p>选择排序：<strong>堆排序</strong></p><p>交换排序：==<strong>冒泡排序（n^2^）、快速排序（nlog2n）</strong>==，平均时间上：快速排序最佳</p><p><strong>归并排序</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//冒泡排序</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//负责控制几轮，8个元素，i&lt;7，共7轮，第8轮就自己不需要排序</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//负责控制对比的次数，第一轮对比7次，第二轮对比6次</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快速排序</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span>left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先备份，保证ij变动，传入的参数不变</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">int</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">=</span>null<span class="token operator">||</span>arr<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">>=</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;=</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>；    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h3><table><thead><tr><th>1</th><th>boolean equals(int[] a,int[] b)</th><th>判断两个数组是否相等</th></tr></thead><tbody><tr><td>2</td><td>String toString(int[] a)</td><td>输出数组信息</td></tr><tr><td>3</td><td>void fill(int[] a,int val)</td><td>将只等值填充到数组之中</td></tr><tr><td>4</td><td>void sort(int[] a)</td><td>对数组进行排序</td></tr><tr><td>5</td><td>int binarySearch(int[] a,int key)</td><td>对排序后的数组进行二分法检索指定的值</td></tr></tbody></table><h3 id="数组常见异常"><a href="#数组常见异常" class="headerlink" title="数组常见异常"></a>数组常见异常</h3><ol><li>数组角标越界异常：<code>ArrayIndexOutOfBoundsException</code></li><li>空指针异常：<code>NullPointerException</code></li></ol><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="对象的内存分析"><a href="#对象的内存分析" class="headerlink" title="对象的内存分析"></a>对象的内存分析</h3><ol><li>堆：存放对象实例（包括对象中的属性(成员变量)）</li><li>栈：存放局部变量（保存在方法种的变量）</li><li>方法区：存放类信息、常量、静态变量</li></ol><h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><p>成员变量与局部变量：</p><ol><li>成员变量：类中的属性，加载到堆空间</li><li>局部变量：方法中的属性，加载到栈空间</li><li>成员变量有初始化值</li><li>局部变量没有初始化值，引用时需要显式赋值</li></ol><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol><li><p>格式：权限修饰符 返回值类型 方法名（形参列表）{方法体}</p></li><li><p>关键字[可选]:static、final、abstract</p></li><li><p>权限修饰符：private、缺省、protected、public（类内部，同一个包，不同包的子类，同一个工程）</p></li></ol><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p><strong>两同一不同：</strong></p><p>同一个类，相同方法名，</p><p>参数列表不同：参数个数不同，参数类型不同</p><h5 id="可变个数形参"><a href="#可变个数形参" class="headerlink" title="可变个数形参"></a>可变个数形参</h5><p>允许直接定义能和多个实参类型相匹配的形参</p><p><code>public void show(String ... strs)</code></p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ol><li>如果没有显式定义类的构造器的话，系统默认提供一个空参的构造器</li><li>一旦显示定义了类的构造器之后，系统就不会再提供空参的构造器</li><li>一个类至少会有一个构造器</li></ol><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>在类中，this指的是这个类的对象，通过<code>this.属性</code>来调用对象的成员变量。一般情况下属性和形参重名才会使用。</p><p>也可以调用构造器，如this(),就是调用的空参，也可以写有参的this(id,age)，一般都放在方法的首行</p><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><ol><li>在子类的方法或构造器中，通过super.属性或super.方法，显式调用父类中声明的属性或方法</li><li>当子类和父类定义了同名的属性/方法，我们需要用<code>super.属性</code>表示调用的是父类中声明的属性</li></ol><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><ol><li>静态的</li><li>static可以用来修饰：属性（类变量）、方法、代码块、内部类</li><li>静态变量（类变量）：<ol><li>随着类加载而加载，早于对象的创建。</li><li>可以通过“类.静态变量”来调用</li><li>类不能调用实例变量<code>Student.name</code>是不行的，如果是类变量可以</li></ol></li><li>静态方法<ol><li>随着类加载而加载，可以通过“类.静态方法”的方式进行调用</li><li>类不能调用非静态方法或属性</li><li>非静态方法可以调用静态方法和属性，也可以调用非静态</li><li>在静态方法内，不能使用this关键字，super关键字</li><li>什么时候声明static：属性被多个对象共享的，不会随对象而不同。操作静态属性的方法。工具类</li></ol></li></ol><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><ol><li><p>可以用来修饰的结构：类、方法、变量</p></li><li><p>类：此类不能被继承</p></li><li><p>方法：此类不能被重写</p></li><li><p>变量：让其变为一个常量，不能再修改</p><ol><li><p>修饰属性：显示初始化、代码块中初始化、构造器中初始化(用于值不一样的时候)</p></li><li><p>修饰局部变量：修饰形参时，表明形参是一个常量，当我们调用此方法，给常量形参赋予一个实参，以后调用以后就只能再方法体内使用该形参，不能进行重新赋值</p></li></ol></li></ol><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><ol><li>作用：用于初始化类、对象</li><li>代码块只能用static修饰</li><li>静态代码块：<ol><li>内部可以有输出语句</li><li><strong>随着类的加载而执行，且只执行一次</strong></li><li>类中可以定义多个静态代码块</li><li>静态代码块执行优先于非静态代码块</li><li>静态代码块内只能调用静态属性，静态方法，不能调用非静态结构</li></ol></li><li>非静态代码块<ol><li>内部可以有输出语句</li><li><strong>随着对象的创建而执行</strong></li><li>每创建一次就会被执行一次</li><li>作用：可以在创建对象时，对对象的属性进行初始化</li></ol></li></ol><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>属性私有，get，set</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol><li>只支持单继承和多层继承<ol><li>1个子类只能有1个父类</li><li>1个父类可以有多个子类</li></ol></li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li><p>父类的引用指向子类的对象<code>Person p1 = new Man();</code></p></li><li><p>虚拟方法调用：当调用方法时，编译期，只能调用父类声明的方法。但在运行期，我们实际执行的时子类重写父类的方法。</p><p>总结：编译，看左边；运行，看右边（<strong>运行时行为</strong>）</p></li><li><p>作用：在方法上的形参使用父类，当调用方法时传入子类对象，就会是子类调用方法。</p></li><li><p>注意：对象的多态性只适用于方法，不适用于属性</p></li><li><p>向下转型：父类想转型为子类，需要加上强制转换（子类）,但如果已经多态使用了向上转型，再转其他类型就会报错，如：<code>Person p2 = new Man();  Woman woman =(Woman)p2;</code>就会报错ClassCastException</p></li><li><p>instanceof：为了避免在向下转型时出现异常，我们在向下转型之前，先进行instanceof的判断，一旦为true，就进行向下转型，flase就不转型。</p></li></ol><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><ol><li>子类不能重写父类声明为private权限的方法</li></ol><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><code>public abstract class test{}</code></p><ol start="0"><li><p>抽象类是继承重写</p></li><li><p>抽象类不能实例化</p></li><li><p>abstract不能用来修饰：属性、构造器</p></li><li><p>不能用来修饰私有方法、静态方法、final方法</p></li></ol><h4 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h4><ol><li>在软件开发实现一个算法时，整体步骤很固定通用，这些步骤已经在父类写好了。某些部分易变，易变的部分可以抽象出来，给子类实现。</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol start="0"><li><p>先写extends，后写implements</p></li><li><p>和类是相同级别，如果父类和接口定义了相同<strong>变量</strong>（非方法，方法是谁重写用谁的，都没重写类优先），需要加前缀，<code>super/接口名.变量</code></p></li><li><p>如果同时实现两个接口中的同名方法，则都重写，调用时<code>接口名.super.方法</code>，没有重写就报错。</p></li><li><p>接口中的对象也是final的不能修改。</p></li><li><p>jdk7及之前：只能定义全局常量和抽象方法</p><ol><li>全局常量：<code>public static final</code> ，书写时可以省略</li><li>抽象方法：<code>public abstract</code></li></ol></li><li><p>jdk8：除了定义全局常量和抽象方法意外，还可以定义静态方法、默认方法</p><ol><li>静态方法只能通过接口调用</li><li>通过实现类的对象，可以调用接口中默认方法</li><li>如果实现类重写了接口中的默认方法，仍然调用的是重写后的方法（类优先原则）</li></ol></li><li><p>接口中不能定义构造器，意味着接口不可以实例化</p></li><li><p>接口与接口间是继承，而且可以多继承</p></li><li><p><strong>抽象类和接口有哪些异同</strong></p><pre><code>1.都不能实例化2.实现的方式都体现了多态</code></pre></li><li><p>接口的应用：<strong>代理模式</strong></p><p>创建代理对象，构造器中传入被代理对象，调用代理对象的方法，则会执行被代理对象方法和代理对象自带的方法</p></li></ol><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p><strong>分类</strong>：成员内部类（静态、非静态） vs 局部内部类（方法内、代码块内、构造器内）</p><ol><li>成员内部类：<ol><li>作为外部类的成员<ol><li>调用外部类的结构</li><li>可以被static修饰</li><li>可以被4种不同的权限修饰</li></ol></li><li>作为一个类<ol><li>类内可以定义属性方法构造器</li><li>可以被final修饰，表示此类不可被继承</li><li>可被abstract修饰</li></ol></li></ol></li><li>创建静态成员内部类<code>Person.Dog dog = new Person.Dog();</code></li><li>创建非静态成员内部类<code>Person p = new Person(); Person.Bird bird = p.new Bird();</code></li><li>调用属性：<ol><li>内部类属性：this.name</li><li>形参：name</li><li>外部类变量：外部类名.this.name</li><li>属性名不同可直接调用</li></ol></li></ol><h2 id="常用类的使用"><a href="#常用类的使用" class="headerlink" title="常用类的使用"></a>常用类的使用</h2><h3 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h3><ol><li><p>final、finally、finalize的区别</p><pre><code>final是关键字，标记在属性上，该属性就不会被改变；标记在方法上，该方法不会被重写，标记在类上，该类不会被继承finally是在异常中，最后一定执行的语句块finalize是垃圾回收的方法</code></pre></li><li><p>== 和 equals（）的区别</p><pre><code>==运算符如果比较的是基本数据类型：比较两个变量保存数据是否相等如果比较的是引用数据类型：比较两个变量的地址值是否相等，即引用的是不是同一个实体equals()方法只适用于引用数据类型：Object类中的equals方法：和==的作用是相同的，一样是比较地址值其他类可以重写equals方法，来进行比较两个对象的实体内容是否相同</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//重写equals方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果两个都指向一个对象，肯定相等</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果是一个类型，进行比较，不是直接返回false</span>        Person p1 <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> p1<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里name是字符串，需要使用字符串重写的equals方法，否则还是比较的地址</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：使用equals方法时，最好先判断x.equals(y)的x是不是Null，如果是null会报空指针异常</p></blockquote></li><li><p>toString()</p><pre><code>在没有重写时，obj类中输出的是地址值，name@哈希值重写之后，返回的是实体内容信息</code></pre></li></ol><h3 id="单元测试方法的使用"><a href="#单元测试方法的使用" class="headerlink" title="单元测试方法的使用"></a>单元测试方法的使用</h3><ol><li>此类中是public，此类提供公共的无参构造器</li><li>方法上@Test</li></ol><h3 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h3><ol><li><p>java提供8种基本数据类型对应的包装类，使得基本数据类型变量具有类的特征</p></li><li><p>基本数据类型—&gt;包装类：<code>new Integer()</code></p></li><li><p>包装类—&gt;基本数据类型：<code>.xxxvalue()</code></p></li><li><p>自动装箱：<code>int num1 = 1; Integer a1 = num1;</code>，不需要new了</p></li><li><p>自动拆箱：<code>Integer b1 = new Integer(); int num = b1;</code>，不需要xxxvalue()了</p></li><li><p>基本数据类型/包装类 —&gt;String类型</p><ol><li><p>方式1：连接运算：<code>String str1 = num1+"";</code></p></li><li><p>方式2：调用String的valueOf(xxx)的方法：<code>String str2 = String.valueOf(num2);</code></p></li><li><p>方式3：调用包装类的parseXXX()方法，<code>Integer.paseInt(str1);</code></p><blockquote><p>注意：这里如果转换不正确，会出现NumberFormatException，检查数据是否正确</p></blockquote></li></ol></li></ol><h3 id="main-方法的使用"><a href="#main-方法的使用" class="headerlink" title="main()方法的使用"></a>main()方法的使用</h3><ol><li>main()方法作为程序的入口</li><li>main()方法也是一个普通的静态方法</li><li>main()方法可以作为我们与控制台交互的方式 run configurations–arguments–program arguments–输入参数</li></ol><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><ol><li>是一个final类，代表不可变的字符序列<ol><li>当对字符串重新赋值时，会在内存区重新开辟一个空间进行赋值</li><li>当对现有的字符串进行连接操作时，也会在内存区重新开辟一个空间进行赋值</li><li>当调用String的repalce（）方法修改指定内存或字符串时，也会在内存区重新开辟一个空间进行赋值</li></ol></li><li>底层是数组</li><li>String实现了Serializable接口：表示字符串是支持序列化的</li><li>String实现了Comparable接口：表示String可以比较大小</li><li>每个字面量在内存中只会存在一个，如果<code>a = "123",b = "123"</code>，则这两个指向的是同一个地址</li></ol><h4 id="String对象的创建"><a href="#String对象的创建" class="headerlink" title="String对象的创建"></a>String对象的创建</h4><ol><li><code>String s1 = "123"</code></li><li><code>String s2 = new String("123")</code>；</li></ol><blockquote><p>这两种情况有什么区别？</p><ol><li>第一种情况，s1的数据声明在方法区的常量池中</li><li>第二种情况，s2保存的是地址值，数据在堆空间中开辟空间以后对应的地址值</li><li>两者不相等</li><li>第二种情况在内存中有两个对象：1个是堆空间中new结构，另外一个是char[]对应的常量池中的数据”123”</li></ol></blockquote><h4 id="String对象之间的对比"><a href="#String对象之间的对比" class="headerlink" title="String对象之间的对比"></a>String对象之间的对比</h4><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>String s3 <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span>String s4 <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>String s5 <span class="token operator">=</span>  s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>String s6 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span>String <span class="token keyword">final</span> s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为final之后是常量，在内存中是在常量池的位置</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><blockquote><p>结论：</p><ul><li>常量与常量之间的拼接，结果仍然在常量池，常量池中不会存在任何相同内容的常量</li><li>只要其中有一个是变量，结果都是在堆中</li><li>如果拼接的结果调用intern()方法，返回值就是在常量池中</li></ul></blockquote><h4 id="String对象的值传递"><a href="#String对象的值传递" class="headerlink" title="String对象的值传递"></a>String对象的值传递</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span><span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'t'</span><span class="token punctuation">.</span><span class="token string">'e'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//因为这里的形参是另一个对象，它指向了另一个字面量，并不会影响到原对象</span>        str<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//形参是另一个对象，两个指向的都是同一个数组，改变数组就改变原值</span>    <span class="token punctuation">}</span>    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        StringTest ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">,</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span>str<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//good</span>        ex<span class="token punctuation">.</span>ch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//be</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h4><table><thead><tr><th>int length()</th><th>返回字符串长度</th></tr></thead><tbody><tr><td>char charAt(int index)</td><td>返回某索引处的字符（从0开始）</td></tr><tr><td>boolean isEmpty()</td><td>判断是否为空字符串</td></tr><tr><td>String toLowerCase()</td><td>将所有字符转换为小写（不会影响原字符串）</td></tr><tr><td>String toUpperCase()</td><td>将所有字符转换为大写</td></tr><tr><td>String trim()</td><td>取出首位空白</td></tr><tr><td>boolean equals（Object obj）</td><td>比较字符串内容是否相同</td></tr><tr><td>boolean equalsIgnoreCase(String anotherString)</td><td>忽略大小写比较内容</td></tr><tr><td>int copareTo(String anotherString)</td><td>比较两个字符串大小</td></tr><tr><td>String substring(int beginIndex)</td><td>将字符串从开始索引截取到最后，从0开始</td></tr><tr><td>String substring(int beginIndex,int endIndex)</td><td>左闭右开区间[）截取，从0开始</td></tr><tr><td><strong>前后缀</strong></td><td></td></tr><tr><td>boolean endsWith(String suffix)</td><td>测试此字符串是否以指定后缀结束</td></tr><tr><td>boolean startsWith(String prefix)</td><td>测试此字符串是否以指定前缀开始</td></tr><tr><td>boolean startsWith(String prefix,int toffset)</td><td>测试此字符串从指定索引开始有指定字符串</td></tr><tr><td><strong>查找</strong></td><td></td></tr><tr><td>boolean contains(String str)</td><td>判断是否包含字符串</td></tr><tr><td>int indexOf(String str)</td><td>返回指定字符串在此字符串第一次出现的索引</td></tr><tr><td>int indexOf(String str,int fromIndex)</td><td>返回指定字符串在此字符串第一次出现的索引，从索引处开始查找</td></tr><tr><td>int lastIndexOf(String str)</td><td>从右边返回指定字符串在此字符串第一次出现的索引</td></tr><tr><td>int lastIndexOf(String str,int fromIndex)</td><td>从右边返回指定字符串在此字符串第一次出现的索引，从索引处开始查找</td></tr><tr><td>注意</td><td>indexOf和lastIndexOf没有找到返回的都是-1</td></tr><tr><td><strong>替换</strong></td><td></td></tr><tr><td>String replace(char old,char new)</td><td>返回新字符串,将新字符替换旧字符</td></tr><tr><td>String replace(String old,String new)</td><td>返回新字符串,将新字符串替换旧字符串</td></tr><tr><td>String replaceAll(regex正则,String new)</td><td>返回新字符串,将新字符串替换全部的匹配正则的字符串</td></tr><tr><td>String replaceFirst(regex正则,String new)</td><td>返回新字符串,将新字符串替换第一个的匹配正则的字符串</td></tr><tr><td><strong>匹配</strong></td><td></td></tr><tr><td>boolean matches(String regex)</td><td>告知此字符串是否匹配给定的正则表达式</td></tr><tr><td><strong>切片</strong></td><td></td></tr><tr><td>String[] split(String regex)</td><td>根据给定正则表达式的匹配拆分此字符串</td></tr><tr><td>String[] split(String regex,int limit)</td><td>根据匹配给定的正则表达式来拆分此字符串，最多不超过限制的个数</td></tr></tbody></table><h4 id="String的类型转换"><a href="#String的类型转换" class="headerlink" title="String的类型转换"></a>String的类型转换</h4><h5 id="与基本类型转换"><a href="#与基本类型转换" class="headerlink" title="与基本类型转换"></a>与基本类型转换</h5><p>基本数据类型/包装类 —&gt;String类型</p><ol><li>方式1：连接运算：<code>String str1 = num1+"";</code></li><li>方式2：调用String的calueOf(xxx)的方法：<code>String str2 = String.valueOf(num2);</code></li></ol><p>String类型 —&gt;基本数据类型/包装类</p><ol><li>调用包装类的parseXXX()方法，<code>Integer.paseInt(str1);</code></li></ol><h5 id="与char类型转换"><a href="#与char类型转换" class="headerlink" title="与char类型转换"></a>与char类型转换</h5><p>String —&gt; char[]</p><ol><li>调用String的toCharArray()</li></ol><p>char[] —&gt; String</p><ol><li>调用String的构造器</li></ol><h5 id="与byte类型转换"><a href="#与byte类型转换" class="headerlink" title="与byte类型转换"></a>与byte类型转换</h5><p>String —&gt; byte[]</p><ol><li>调用String的getBytes[]</li><li>也可以指定编码的字符集：getBytes[指定字符集”gbk”]</li></ol><p>char[] —&gt; String</p><ol><li>调用String的构造器（默认使用默认的解码）</li><li>出现乱码是因为编码和解码不一致</li></ol><h3 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h3><p><strong>String、StringBuffer、StringBuilder三者的异同</strong></p><p>String：不可变的字符序列；底层使用char[]数组进行保存</p><p>StringBuffer：可变的字符序列：线程安全的，效率低；底层使用char[]数组进行保存</p><p>StringBuilder：可变的字符序列：线程不安全的，效率高；底层使用char[]数组进行保存</p><p>效率对比：StringBuilder &gt; StringBuffer &gt; String</p><blockquote><p>源码分析：</p><p>问题1：<code>System.out.println(sb.length())</code>长度为0</p><p>原因1：虽然StringBuffer在底层为我们创建了一个长度为16的char数组，但在没有给StringBuffer赋值时，输出的长度自然是0，是按赋值的长度输出的</p><p>问题2：扩容问题，如果在添加数据到底层数组装不下，即超过16时，底层为我们自动扩容。</p><p>原因2：默认情况下，扩容为原来容量的2倍+2，同时将数组的元素复制到新数组中</p><p>指导意见：开发时最好使用StringBuffer(int capacity)或StringBuilder(int capacity)。参数就是我们指定的长度，避免经常扩容</p></blockquote><p>小问题：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String str <span class="token operator">=</span> null<span class="token punctuation">;</span>    StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层调用的是拼接字符串</span>    sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//4</span>    sb<span class="token comment" spellcheck="true">//"null"</span>            StringBuffer sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抛异常，NullPointerException。底层调用的是str.length(),空指针</span><span class="token punctuation">}</span></code></pre><h4 id="StringBuffer常用的方法"><a href="#StringBuffer常用的方法" class="headerlink" title="StringBuffer常用的方法"></a>StringBuffer常用的方法</h4><table><thead><tr><th>StringBuffer append(xxx)</th><th>增：提供了很多append方法，用于进行字符串拼接</th></tr></thead><tbody><tr><td>StringBuffer delete(int start,int end)</td><td>删：删除指定位置的内容</td></tr><tr><td>StringBuffer replace(int start,int end,String str)</td><td>改：把[start,end)位置替换为tr</td></tr><tr><td>StringBuffer insert(int offset,xxx)</td><td>插：在指定位置插入xxx</td></tr><tr><td>StringBuffer reverse()</td><td>把当前字符序列逆转</td></tr><tr><td>int indexOf(String str)</td><td>返回指定字符串在此字符串第一次出现的索引</td></tr><tr><td>String substring(int start,int end)</td><td>将字符串从开始索引截取到结束，从0开始</td></tr><tr><td>int length()</td><td>长度：返回长度</td></tr><tr><td>char charAt(int n)</td><td>查：返回某索引处的字符（从0开始）</td></tr><tr><td>void setCharAt(int n,char ch)</td><td>设置某索引处的字符</td></tr></tbody></table><p>遍历：for(sb.length())+charAt() / toString()</p><h4 id="String算法题"><a href="#String算法题" class="headerlink" title="String算法题"></a>String算法题</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将字符串中指定位置进行反转</span><span class="token keyword">public</span> String <span class="token function">reverse</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第一部分</span>        String reverseStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第二部分</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>i <span class="token operator">>=</span> startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            reverseStr <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//第三部分</span>        reverseStr <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reverseStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式2：使用StringBuffer/StringBuilder替换String</span><span class="token keyword">public</span> String <span class="token function">reverse2</span> <span class="token punctuation">(</span>String str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第1部分</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第2部分</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>i<span class="token operator">>=</span>startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//第3部分</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取一个字符串在另一个字符串中出现的次数</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span>String mainStr<span class="token punctuation">,</span>String subStr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mainLength <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> subLength <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mainLength <span class="token operator">>=</span> subLength<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>subStr<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从index处开始查找，返回索引，第一次为0，之后依次从索引+sublength处开始继续查找</span>            count <span class="token operator">++</span> <span class="token punctuation">;</span>            index <span class="token operator">+=</span> subLength<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="时间类"><a href="#时间类" class="headerlink" title="时间类"></a>时间类</h3><p><strong>时间戳</strong></p><p><code>System.currentTimeMillis()</code>：1970年1月1日0点到现在的毫秒值</p><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><h5 id="Util-Date"><a href="#Util-Date" class="headerlink" title="Util.Date"></a>Util.Date</h5><table><thead><tr><th>Date()空参构造器</th><th></th></tr></thead><tbody><tr><td>toString()</td><td>显示当前年月日时分秒</td></tr><tr><td>getTime()</td><td>获取当前Date对象对电影的毫秒数</td></tr><tr><td><strong>Date(创建指定毫秒数的Date对象)</strong></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p><strong>Util.Date与Sql.Date转换</strong></p><p><code>Date date = new Date();</code></p><p><code>java.sql.Date date2 = new java.sql.Date(date.getTime());</code></p><h4 id="SimpleDateFormat日期格式化类"><a href="#SimpleDateFormat日期格式化类" class="headerlink" title="SimpleDateFormat日期格式化类"></a>SimpleDateFormat日期格式化类</h4><p>因为是非静态的类，需要实例化对象才能使用<code>SimpleDateFormat sdf = new SimpleDateFormat();</code></p><ol start="0"><li><p>实例化</p><pre class=" language-java"><code class="language-java">SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数可以是:yyyy-MM-dd hh:mm:ss</span></code></pre></li><li><p>格式化：日期 —&gt; 字符串</p><pre class=" language-java"><code class="language-java">Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>解析：字符串 —&gt; 日期</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"20-10-04 上午11:11"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解析的格式必须和实例化的格式一样</span>Date date1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="Calendar日历类"><a href="#Calendar日历类" class="headerlink" title="Calendar日历类"></a>Calendar日历类</h4><p>因为是非静态的类，需要实例化对象才能使用</p><ol start="0"><li><p>实例化</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方式1：创建其子类（GregorianCalendar）的对象</span><span class="token comment" spellcheck="true">//方式2：带哦用其静态方法getInstance()</span>Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p><strong>常用方法</strong></p><p>get()：获取相关信息，<code>calendar.get(Calendar.DAY_OF_MONTH)</code>；</p><p>set()：改变相关信息，将calendar对象的值修改，可变性。<code>calendar.set(Calendar.DAY_OF_MONTH,22);</code></p><p>add()：修改信息，<code>calendar.add(Calendar.DAY_OF_MONTH,-3)</code></p><p>getTime()：日历类 —&gt; Date，<code>Date date = calendar.getTime()</code>;</p><p>setTime()：Date —&gt; 日历类，<code>calendar.setTime(date);</code></p><blockquote><p>注意：月份是从0开始</p></blockquote><h4 id="JDK8新时间类"><a href="#JDK8新时间类" class="headerlink" title="JDK8新时间类"></a>JDK8新时间类</h4><p><strong>LocalDate,LocalTime,LocalDateTime(使用频率较高)</strong></p><table><thead><tr><th>now（）</th><th>获取当前日期/时间/日期+时间</th><th>LocalDate.now()</th></tr></thead><tbody><tr><td>of()</td><td>设置指定年月日，时分秒</td><td>LocalDate.of(2020.10.4)</td></tr><tr><td>getxxx()</td><td>获取时间</td><td>LocalDate.getMonth()</td></tr><tr><td>withxxx()</td><td>设置相关属性，有返回值，体现不可变性</td><td>localDate.withDayOfMonth(22)</td></tr><tr><td>plusxxx()</td><td>增加相关属性，有返回值，体现不可变性</td><td>localDate.plusMonths(3)</td></tr><tr><td>minusxxx()</td><td>减少相关属性，有返回值，体现不可变性</td><td>localDate.minusMonths(3)</td></tr></tbody></table><h3 id="Java比较器"><a href="#Java比较器" class="headerlink" title="Java比较器"></a>Java比较器</h3><p>Comparable接口的使用举例：</p><ol><li>String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较对象的逻辑，他们是进行了从小到大的排列</li><li>重写compareTo(obj)的规则<ol><li>如果当前对象this大于形参对象obj，则返回正整数</li><li>如果当前对象this小于形参对象obj，则返回负整数</li><li>如果当前对象this等于形参对象obj，则返回零</li></ol></li></ol><blockquote><p>总结：Comparable接口与Comparator的使用的对比</p><ol><li>Comparable接口的方式一旦指定，保证Comparable接口实现类的对象在任何位置都可以比较大小</li><li>Comparator接口属于临时性的比较，什么时候需要就创建一个实现类。</li></ol></blockquote><h4 id="自定义实现Comparable自然排序"><a href="#自定义实现Comparable自然排序" class="headerlink" title="自定义实现Comparable自然排序"></a>自定义实现Comparable自然排序</h4><ol><li><p>自定义类（bean）实现Comparable接口</p></li><li><p>重写里面的compareTo（）方法，就是排序的逻辑</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">foods</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Foods foods <span class="token operator">=</span> <span class="token punctuation">(</span>Foods<span class="token punctuation">)</span>o<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">></span> foods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果当前对象this大于形参对象obj，则返回正整数</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&lt;</span> foods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//return this.name.compareTo(foos.name) 二级排序（实现的方式和上述效果一样）</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传输的数据类型不一致"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>调用</p><pre class=" language-java"><code class="language-java">Foods<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foods</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foods</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foods</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="实现Comparator定制排序"><a href="#实现Comparator定制排序" class="headerlink" title="实现Comparator定制排序"></a>实现Comparator定制排序</h4><ol><li><p>使用匿名实现类Comparator</p><pre class=" language-java"><code class="language-java">Foods<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foods</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foods</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foods</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String s1 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> o1<span class="token punctuation">;</span>            String s2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> o2<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用compareble实现的方法从小到大排列的反义词，即从大到小排列</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//return 0;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的数据类型不一样"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><ul><li><p>构造器是私有的</p></li><li><p>内部成员变量、方法都是stsatic的</p></li><li><p>成员变量：in,out,err</p></li><li><p>成员方法</p><table><thead><tr><th>long currentTimeMillis()</th><th>返回当前计算机时间：1970.1.1毫秒数</th></tr></thead><tbody><tr><td>void exit(int status)</td><td>0：退出，非0：异常退出。用于图形化界面退出</td></tr><tr><td>void gc()</td><td>请求系统进行垃圾回收，并不一定立即回收</td></tr><tr><td>String getProperty(String key)</td><td>获取系统属性值</td></tr></tbody></table></li></ul><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><ul><li><p>都是静态方法</p></li><li><p>方法参数和返回值一般都是double类型</p><table><thead><tr><th>abs</th><th>绝对值</th></tr></thead><tbody><tr><td>sqrt</td><td>平方根</td></tr><tr><td>pow(double a,double b)</td><td>a的b次幂</td></tr><tr><td>log</td><td>自然对数</td></tr><tr><td>exp</td><td>e为底的值数</td></tr><tr><td>max/min(double a,double b)</td><td></td></tr><tr><td>random()</td><td>返回【0.0-1.0）的随机数</td></tr><tr><td>公式：取规定[a,b]的整数</td><td>(int)(Math.random()*(b-a+1)+a)</td></tr><tr><td>long round(double a)</td><td>double类型数据a转换为Long型（四舍五入）</td></tr></tbody></table></li></ul><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><ul><li>类的对象只有有限个，确定的</li><li>当需要定义一组常量，建议使用枚举类</li><li>如果枚举类中只有一个对象，可以作为单例模式的实现方式</li><li>调用：类.枚举属性</li></ul><h3 id="使用enum关键词创建枚举类"><a href="#使用enum关键词创建枚举类" class="headerlink" title="使用enum关键词创建枚举类"></a>使用enum关键词创建枚举类</h3><ul><li>规则<ul><li>使用enum关键字</li><li>先提供当前枚举类对象，再声明属性</li><li>多个对象之间用,隔开 末尾对象用；结束</li><li>不需要重写toString方法</li><li>没有Set方法</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season1<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//提供当前枚举类对象，多个对象之间用,隔开 末尾对象用；结束</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//声明Season对象的属性：private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有化构造器，并给对象属性赋值</span>    <span class="token keyword">private</span> <span class="token function">Srason1</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//get方法</span><span class="token punctuation">}</span></code></pre><table><thead><tr><th>values()</th><th>返回枚举类的对象数组，方便遍历所有枚举值</th></tr></thead><tbody><tr><td>valueOf(String str)</td><td>返回枚举类中对应对象名是objName的对象，没有找到会报IllegalArgumentException</td></tr><tr><td>toString()</td><td>返回当前枚举类对象的名称</td></tr></tbody></table><h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><p>方式一：调用任何枚举类型都会调用该方法</p><ol><li>实现接口，重写方法</li></ol><p>方式二：不同枚举类型调用不同方法</p><pre class=" language-java"><code class="language-java">    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天你好"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏天你好"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>jdk5.0新增功能</p><ol><li>生成文档相关注解</li><li>在编译时进行格式检查（重写、过时、抑制警告）</li><li>跟踪代码依赖性，实现代替配置文件功能</li></ol><table><thead><tr><th>@SuppressWarnings</th><th>抑制编译器警告</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h3 id="自定义Annotation"><a href="#自定义Annotation" class="headerlink" title="自定义Annotation"></a>自定义Annotation</h3><ul><li>规则<ul><li>使用@interface关键字</li><li>内部定义成员，通常使用value表示</li><li>可以指定成员的默认值，使用defalut定义</li><li>如果自定义注解没有成员，表明是一个标识作用</li><li>如果有成员，在使用时需要指定value值</li></ul></li></ul><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>对现有的注解进行解释说明的注解</p><ol><li>Retention：指定所修饰的注解生命周期：SOURCE编译前\CLASS编译后（默认行为）\RUNTIME运行后<ol><li>只有声明为RUNTIME生命周期的注解，才能通过反射来获取</li></ol></li><li>Target：用于指定被修饰的注解能用于修饰哪些程序元素</li><li>Documented：所修饰的注解在被javadoc解析时，保留下来</li><li>Inherited：被其修饰的注解将具有继承性</li></ol><h3 id="JDK8新特性"><a href="#JDK8新特性" class="headerlink" title="JDK8新特性"></a>JDK8新特性</h3><ol><li>可重复注解：<ol><li>在注解类上声明@Repeatable，成员值为MyAnnotation.class</li><li>在MyAnnotation的Target和Retention和MyAnnotations，Inherited相同</li></ol></li><li>新类型注解（Target）<ol><li>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中</li><li>ElementType.TYPE_USE 标识该注解能写在使用类型的任何语句中</li></ol></li></ol><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><strong>数组在存储多个数据的特点</strong></p><ol><li>一旦初始化之后，长度和元素的类型都已经确定</li></ol><p><strong>数组在存储多个数据的缺点</strong></p><ol><li>初始化之后，长度不能修改</li><li>数组提供的方法有限，对增删插操作非常不便，效率不高</li><li>获取数组中元素的个数，数组没有现成的方法和属性可用</li><li>数组存储的特点：有序、可重复。对无序，不可重复的需求不能满足</li></ol><p><strong>体系</strong></p><ul><li>Collection接口：单列数据<ul><li>List：元素有序、可重复（“动态”数组）    </li><li>Set：元素无序，不可重复</li></ul></li><li>Map接口：双列数据</li></ul><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201005150638.png"></p><blockquote><p>实线：继承关系，虚线：实现关系</p></blockquote><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>因为是接口，需要创建其实现类调用这些方法api</p><p>注意：对实现类对象中添加数据obj时，要求对obj所在类重写equals()方法</p><table><thead><tr><th>add(Object obj)</th><th>增加元素到集合中</th></tr></thead><tbody><tr><td>addAll(List l)</td><td>将集合中的元素添加到当前集合中</td></tr><tr><td>size()</td><td>获取增减的元素个数</td></tr><tr><td>boolean isEmpty()</td><td>判断当前集合是否为空</td></tr><tr><td>clear()</td><td>清空集合元素，并不是空指针</td></tr><tr><td>boolean contains(Object obj)</td><td>判断集合中是否存在该元素（查的是内容，判断时会调用obj对象的equals()方法）</td></tr><tr><td>boolean containsAll(Collection c)</td><td>判断形参集合中所有元素是否都存在于当前集合中</td></tr><tr><td>remove(Object obj)</td><td>移除数据，（同样底层调用obj对象的equals()方法）</td></tr><tr><td>removeAll(Collection c)</td><td>从当前集合中移除c集合中的元素</td></tr><tr><td>Collection retainAll(Collection c)</td><td>获取当前集合和c集合的交集，并返回集合</td></tr><tr><td>equals(Object o)</td><td>比较两个集合中每个对象是否相同</td></tr><tr><td>hashCode()</td><td>返回当前对象的哈希值</td></tr><tr><td>Object[] toArray()</td><td>集合 —&gt; 数组</td></tr><tr><td>Arrays.asList(Array a[])</td><td>数组 —&gt; 集合，注意：<code>Arrays.asList(new int[]{1,2})</code>返回的是一个地址，数组个数也是1，需要将int换成Integer</td></tr><tr><td>iterator iterator()</td><td>迭代器，返回一个iteractor接口的实例，用于遍历集合元素</td></tr></tbody></table><h4 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h4><p>是一个接口，需要集合调用<code>iterator（）</code>方法来获得迭代器接口实例。</p><p>它只是一个迭代器，并不是容器，类似指针，不会创建新的集合</p><p>每次调用<code>iterator()</code>方法都会得到一个全新的迭代器对象</p><p>next()方法做了两件事:1.指针下移，2.将下移之后指向的元素返回</p><table><thead><tr><th>Object next()</th><th>获取集合中的一个元素(1.指针下移，2.将下移之后指向的元素返回)</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>判断是否还有下一个元素</td></tr><tr><td>remove()</td><td>移除迭代器指针指向的元素</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//遍历集合</span>Collection col1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator it <span class="token operator">=</span>col1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得迭代器实例</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果还有元素，则进入循环</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//错误方式1：跳着输出</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//下移了一次</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//又下移一次，当最后一次会出现没有找到数据情况</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//错误方式2：新迭代器，死循环</span><span class="token keyword">while</span><span class="token punctuation">(</span>col1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>col1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建新的迭代器对象，只会读出第一行数据</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//remove()</span>Collection col1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator it <span class="token operator">=</span>col1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得迭代器实例</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断该值是否为tom，小细节：把字符串放在前面，不用对象放前边可以防止空指针异常，代码健壮性更好</span>        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：在还没有next()之前，不要调用remove()，会报IllegalStateException异常</p></blockquote><h4 id="增强for循环-for-each"><a href="#增强for循环-for-each" class="headerlink" title="增强for循环(for each)"></a>增强for循环(for each)</h4><p>格式：<code>for(集合元素的类型 局部变量：集合对象)</code></p><p>本质也是迭代器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>Object obj <span class="token operator">:</span> col1<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：使用for each循环给数组赋值时，不会将原数组的值相等</p></blockquote><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>元素有序、可重复</li></ul><p><strong>ArrayList、LinkedList、Vector三者的异同</strong></p><ol><li>同：三个类都实现了List接口，存储数据的特点相同：存储有序、可重复</li></ol><p>不同：</p><ol><li>ArrayList：作为List接口主要实现类；线程不安全的，效率高；底层使用Object[]<strong>数组</strong>存储</li><li>LinkedList：对于频繁插入、删除操作，使用此类效率比Arraylist高；底层使用<strong>双向链表</strong>存储</li><li>Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] <strong>数组</strong>存储（扩容2倍）</li></ol><h4 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h4><h5 id="jdk7情况下"><a href="#jdk7情况下" class="headerlink" title="jdk7情况下"></a>jdk7情况下</h5><pre class=" language-java"><code class="language-java">ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层创建了长度为10的Object[]数组</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//elementData[0] = new Integer(1);</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//如果此次添加导致底层数组容量不够，则扩容</span>    <span class="token comment" spellcheck="true">//默认情况下，扩容为原来的容量1.5倍，同时需要将原来的数组复制到新数组中</span></code></pre><blockquote><p>结论</p><ol><li>初始化长度为10，容量不够则扩容1.5倍</li><li>开发中建议使用带参构造器，将长度直接写上去，避免扩容，<code>ArrayList list = new ArrayList(int xxx)</code></li></ol></blockquote><h5 id="jdk8之后"><a href="#jdk8之后" class="headerlink" title="jdk8之后"></a>jdk8之后</h5><pre class=" language-java"><code class="language-java">ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层Object[] 初始化为{}，并没有创建长度</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//第一次调用add（）时，底层才创建了长度为10的数组，并将数据添加到数组当中</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//后续扩容问题跟jdk7无异</span></code></pre><blockquote><p>结论：</p><ol><li>初始化长度为0，只有在第一次增加操作时，数组才初始化为10</li></ol></blockquote><h4 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a>LinkedList源码分析</h4><pre class=" language-java"><code class="language-java">LinkedList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内部声明了Node类型的first和last属性，默认值为null</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将123封装进node中，创建了Node对象</span><span class="token comment" spellcheck="true">//其中，Node定义为：体现了LinkedList的双向链表的说法</span></code></pre><h4 id="List常用方法"><a href="#List常用方法" class="headerlink" title="List常用方法"></a>List常用方法</h4><table><thead><tr><th>void add(int index,Object obj)</th><th>在index位置插入元素</th></tr></thead><tbody><tr><td>boolean addAll(int index,Collection c)</td><td>从Index位置开始将c中所有元素添加进来</td></tr><tr><td>Object get(int index)</td><td>获取指定Index位置的元素（从0开始）</td></tr><tr><td>int indexOf(Object obj)</td><td>返回Obj在集合中首次出现的位置</td></tr><tr><td>int lastIndexOf(Object obj)</td><td>返回Obj在集合中最后一次出现的位置</td></tr><tr><td>Object remove(int index)</td><td>移除指定Index位置的元素，并返回此元素</td></tr><tr><td>Object set(int index,Object obj)</td><td>设置指定index位置的元素为obj</td></tr><tr><td>List subList(int fromIndex,int toIndex)</td><td>返回从fromIndex到toIndex位置的子集合</td></tr></tbody></table><blockquote><p>总结：</p><p>增：add(Object obj)</p><p>删：remove(int index)/remove(Object)，默认是索引，如果想删元素需要装箱new Integer(value)</p><p>改：set(int index,Object o)</p><p>查：get(int index)</p><p>插：add(int index,Object o)</p><p>遍历：</p><ol><li>Iterator 迭代器</li><li>增强for</li><li>普通循环</li></ol></blockquote><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li>无序的，不可重复的<ul><li>无序性：<strong>不等于随机性</strong>。存储的数据在底层数组中，并非按照数组索引的顺序增加，而是通过数据的哈希值决定的</li><li>不可重复性：保证添加的元素按照equals()判断时，不能返回true。即：相同的元素只能添加一个</li></ul></li><li>Set没有额外的方法，都是用的Collection中的方法</li></ul><p><strong>HashSet、LinkedHashSet、TreeSet之间的异同</strong></p><ol><li>HashSet：作为Set接口的主要实现类；线程不安全的；可以存储Null值<ol><li>LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照插入的顺序进行排序，对于频繁遍历的操作，它的效率比HashSet高一些</li></ol></li><li>TreeSet：可以按照指定属性，进行排序</li></ol><h4 id="HashSet底层分析"><a href="#HashSet底层分析" class="headerlink" title="HashSet底层分析"></a>HashSet底层分析</h4><p>底层：数组+单向链表</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201005210810.png"></p><p>增加元素的过程：以HashSet为例</p><p>我们向HashSet中添加元素a，首先会调用元素a所在类的**hashCode()**方法，计算出元素a的哈希值</p><p>此哈希值接着通过某种算法计算出在hashSet底层<strong>数组中的存放位置</strong>（索引位置），</p><p>判断数组此位置上<strong>是否有元素</strong></p><p>如果<strong>没有元素</strong>，则添加成功—-情况1</p><p>如果位置上<strong>有其他元素</strong>（或以链表存在多个元素），则<strong>比较元素a和所在位置元素的哈希值</strong>：</p><p>如果<strong>哈希值不相等</strong>，则添加<strong>成功</strong>—-情况2</p><p>如果<strong>哈希相等</strong>，则进一步调用元素a所在类的<strong>equals（）</strong>方法：</p><p>equals()返回为<strong>true</strong>，证明两个值相同，则<strong>添加失败</strong></p><p>equals()返回为<strong>false</strong>，则元素a添加<strong>成功</strong>—-情况3</p><ul><li>对于情况2，3：元素a于该索引位置上的其他元素是以<strong>单向链表</strong>的形式存储的</li><li>jdk7：新元素放在数组中，指向旧元素</li><li>jdk8：旧元素仍然在数组中，指向新元素</li><li>总结：七上八下</li></ul><blockquote><p>要求：</p><ol><li>向Set中添加的数据，其所在类一定要重写hashCode()和equals()方法</li><li>重写的hashCode()和equals()尽可能保持一致性：相同内容的对象，哈希值也相同<ul><li>一般直接用系统生成的就可以保证一致性</li></ul></li></ol></blockquote><h4 id="LinkedHashSet底层分析"><a href="#LinkedHashSet底层分析" class="headerlink" title="LinkedHashSet底层分析"></a>LinkedHashSet底层分析</h4><p>作为HashSet的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据    </p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201006143751.png"></p><p>优点：对于频繁的遍历操作，LinkedHashSet效率高于HashSet</p><h4 id="TreeSet底层分析"><a href="#TreeSet底层分析" class="headerlink" title="TreeSet底层分析"></a>TreeSet底层分析</h4><ul><li><p>插入数据，要求是相同类的对象</p></li><li><p>两种排序方式：自然排序（数据对应类实现Comparable接口）和定制排序</p></li><li><p>自然排序中，比较两个对象是否相同的标准:compareTo()返回0（实现自然排序必须重写该方法），不再是equals()，即只按规则进行排序，不按内容（插入时规则相同，就不能插入）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>o<span class="token punctuation">;</span>        <span class="token keyword">int</span> compare <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//内容不相同</span>            <span class="token keyword">return</span> compare<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回正负值，来进行排序</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//内容相同，按下一个内容进行排序</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>定制排序</p><pre class=" language-java"><code class="language-java">Comparator com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            User u1 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> o1<span class="token punctuation">;</span>            User u2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> o2<span class="token punctuation">;</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的数据类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>TreeSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入参则使用定制排序，否则使用自然排序</span></code></pre></li></ul><h3 id="集合面试题"><a href="#集合面试题" class="headerlink" title="集合面试题"></a>集合面试题</h3><ol><li><p>集合Collection中存储的如果是自定义类的对象，需要自定义类重写哪些方法？为什么？</p><pre><code>equals()方法。 在调用contains()/remove()等方法时，都会调用equals方法List：equals()方法Set：（HashSet、LinkedHashSet为例）：equals()、hashCode()    （TreeSet为例）：Comparable：compareTo(Object obj)                    Comparator：compare(Object o1,Object o2)</code></pre></li><li><p>ArrayList，LinkedList，Vector三者的相同点与不同点</p><pre><code>相同：都实现于List接口，数据结构的特点相同：有序、可重复不同：ArrayList：是最主要的实现类，底层是数组存储，线程不安全，效率高，底层数组扩容是以前的1.5倍Vector：是比较古老的实现类，底层是数组存储，线程安全，效率较低，底层数组扩容是以前的2倍LinkedList：底层是双向链表，插入、删除的效率高。源码:ArrayList底层源码在jdk8之后有所改动，在jdk8之前，new一个ArrayList会创建一个长度为10的数组，之后的版本new只会创建一个空的数组，当第一次调用add（）时，才会创建长度10的数组，并且库容都是1.5倍LinkedList：内部声明的都是Node类型，不仅存有数据，还存有上一个node和下一个Node的数据。Vector：底层也是数组，长度为10没有变动，扩容是2倍</code></pre></li><li><p>List和Set的区别</p><pre><code>相同：都实现于Collection接口不同：List：有序可重复Set：无序不可重复</code></pre></li><li><p>List接口有哪些常用方法？</p><pre class=" language-java"><code class="language-java">增：<span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>删<span class="token operator">:</span><span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>改<span class="token operator">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>Object obj<span class="token punctuation">)</span>查：<span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>插：<span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>Object obj<span class="token punctuation">)</span>长度：<span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//元素的个数</span>遍历：iterator<span class="token punctuation">,</span>foreach<span class="token punctuation">,</span>普通<span class="token keyword">for</span>（有索引，Set和Colleciton不可以使用）</code></pre></li><li><p>如何使用Iterator和增强for循环遍历list</p><pre class=" language-java"><code class="language-java">Iterator it <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object obj <span class="token operator">:</span> list1<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>Set存储数据的特点是什么？常见的实现类有什么？说明一下彼此的特点</p><pre><code>特点：无序不可重复实现类：HashSet、LinkedHashSet、TreeSetHashSet：是Set的主要实现类，线程不安全，可以存储Null值LinkedHashSet：是HashSet的主要实现类，在内部存储时会记录插入的顺序，遍历时可以按照插入顺序进行排序，遍历时效率高一些TreeSet：可以按照指定的属性进行排序</code></pre></li><li><p>判断结果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2个</span>    p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"cc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时1001cc仍然保存在1001aa的位置</span>    set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时找的是1001cc的哈希值，但更改后的cc仍然在aa的位置，故没有删除</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2个</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时找的是1001cc的哈希值，故插入成功</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3个，bb,cc,cc</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时找的是1001aa的哈希值，虽然位置上有cc，但是equals()方法比较两个不一样，故用链表存储成功</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4个,bb, cc,aa ,cc</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201005150742.png"></p><p>双列数据，存储Key-value对的数据</p><p> <strong>不同实现类的区别</strong></p><p>HashMap：作为Map的主要实现类；线程不安全的，效率高；存储Null</p><p>–LinkedHashMap：保证在添加Map元素时，可以按照添加的顺序实现遍历（在原有HashMap结构上，增加了一对指针，指向前一个和后一个元素），对于频繁的遍历操作，此类效率高</p><p>TreeMap：保证按照添加的Key-value进行排序，按照（key）来排序。此时考虑key的自然排序和定制排序 。底层使用的红黑树</p><p>Hashtable：作为古老的实现类；线程安全的，效率低；不能存储null</p><p>–Properties：常用来处理配置文件，key-value都是String类型</p><p>HashMap的底层：数组+链表（jdk7及以前）。数组+链表+红黑树（jdk8）</p><p><strong>面试题</strong>：</p><ol><li>HashMap的底层实现原理？</li><li>HashMap和Hashtable的异同？</li><li>CurrentHashMap与Hashtable的异同？</li></ol><p><strong>Map结构的理解</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201006202544.png"></p><p>key：无序的、不可重复的，使用Set存储所有的Key —&gt; key 所在类要重写equals()和hashCode()</p><p>value：无序的、可重复的，使用Collection存储所有的value —&gt;value所在的类药重写equals()</p><p>entry：就是一个键值对，无序的、不可重复的，使用Set存储所有的entry</p><h4 id="HashMap的底层实现原理？"><a href="#HashMap的底层实现原理？" class="headerlink" title="HashMap的底层实现原理？"></a>HashMap的底层实现原理？</h4><p><strong>JDK7为例</strong></p><p><code>HashMap map = new HashMap();</code></p><p>在实例化以后，底层创建了<strong>长度为16</strong>的一维数组Entry[] table</p><p><code>map.put(key1,value1);</code></p><p>首先，调用key1所在类的<strong>hashCode()计算key1的哈希值</strong>，此哈希值经过某种算法之后，<strong>得到Entry数组所在的位置</strong></p><p>如果<strong>该位置数据为空</strong>，则key1-value1<strong>添加成功</strong>。—情况1</p><p>如果<strong>该位置数据不为空</strong>（意味着此位置上存在一个或多个数据（以链表的形式存在）），<strong>比较</strong>Key1和一个或多个数据的<strong>哈希值</strong>：</p><p>如果key1的哈希值和其他数据<strong>哈希值不相同</strong>，则key1-value1<strong>添加成功</strong>。—情况2</p><p>如果key1的哈希值和其他数据哈希值<strong>相同</strong>，则继续**比较equals(key)**，</p><p>如果equals返回为<strong>false（不相同）</strong>：<strong>则添加成功</strong>。—情况3</p><p>如果equals返回为<strong>true</strong>：使用value1<strong>替换</strong>原有value值（修改的作用）。</p><p><strong>补充</strong>：情况2，3存储的数据是以链表的形式存储。</p><p>如果涉及到扩容问题，当超出临界值（且要存放的位置有值）时，扩容为<strong>原来容量的2倍</strong>，则并将原有数据复制过来。如果到临界值，要存放的位置无值，则继续往后加值。</p><p><strong>JDK8相较于7在底层实现方面的不同</strong></p><ol><li><p>new HashMap()：底层<strong>没有创建</strong>一个长度为16的数组</p></li><li><p>Jdk8 底层的数组是：Node[]，而非Entry[]</p></li><li><p>首次调用put()方法时，底层创建<strong>长度为16</strong>的数组</p></li><li><p>jdk7底层结构只有：数组+链表。Jdk8中底层结构：<strong>数组+链表+红黑树</strong></p><p>当数组某个索引位置上的元素<strong>以链表形式存在的数据个数&gt;8，且数组长度&gt;64时</strong>，</p><p>此时该索引位置上的所有数据改为使用<strong>红黑树</strong>存储</p></li></ol><p>DEFAULT_INITIA_CAPACITY：HashMap的默认容量：16</p><p>DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75（小会导致数据碰撞小，数组空间经常会扩容，链表短；大会导致数据碰撞高，链表长，影响查询和插入）决定了HashMap的数据密度</p><p>threshold：扩容的临界值，容量 * 加载因子：16*0.75=12（达到该临界值（且后续有值）就会扩容）</p><p>TREEIFY_THRESHOLD：链表长度大于该默认值，转化为红黑树：8</p><p>MIN_TREEIFY_CAPACITY：Node被树化时最小的hash表容量：64</p><h4 id="LinkedHashMap底层实现原理（了解）"><a href="#LinkedHashMap底层实现原理（了解）" class="headerlink" title="LinkedHashMap底层实现原理（了解）"></a>LinkedHashMap底层实现原理（了解）</h4><p>多了before和after来记录存储顺序</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201007143637.png"></p><h4 id="Map接口的方法"><a href="#Map接口的方法" class="headerlink" title="Map接口的方法"></a>Map接口的方法</h4><table><thead><tr><th>增加、删除、修改</th><th></th></tr></thead><tbody><tr><td>Object put(Object key,Object value)</td><td><strong>添/改：</strong>将指定Key-value增加（或修改）到map中</td></tr><tr><td>void putAll(Map m)</td><td>将m中的所有key-value存放到当前Map中</td></tr><tr><td>Object remove(Object key)</td><td><strong>删：</strong>移除指定key的Key-value,并返回value</td></tr><tr><td>void clear()</td><td>清空当前Map中的所有数据</td></tr><tr><td><strong>元素查询</strong></td><td></td></tr><tr><td>Object get(Object key)</td><td><strong>查：</strong>获取指定key对应的value</td></tr><tr><td>boolean containsKey(Object key)</td><td>是否包含指定的key</td></tr><tr><td>boolean containsValue(Object value)</td><td>是否包含指定的value</td></tr><tr><td>int size()</td><td><strong>长度：</strong>返回map中Key-value的个数</td></tr><tr><td>boolean isEmpty()</td><td>判断当前Map是否为空</td></tr><tr><td>boolean equals(Object obj)</td><td>判断当前map和参数对象obj是否相等（也得是Map）</td></tr><tr><td><strong>元视图操作</strong></td><td><strong>遍历：</strong></td></tr><tr><td>Set keySet()</td><td>返回所有Key构成的Set集合</td></tr><tr><td>Collection values()</td><td>返回所有value构成的collection集合</td></tr><tr><td>Set entrySet()</td><td>返回所有key-value构成的Set集合</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//遍历entry的set集合，方式1</span>Set entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator it <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object obj <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//entrySet集合中的的元素都是entry</span>    Map<span class="token punctuation">.</span>Entry entry <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式2</span>Set set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="TreeMap的使用"><a href="#TreeMap的使用" class="headerlink" title="TreeMap的使用"></a>TreeMap的使用</h4><ul><li><p>向TreeMap中添加key-value，要求key必须是由同一类创建的对象</p></li><li><p>因为要<strong>按照key</strong>进行排序：自然排序、定制排序</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自然排序,key所在类必须实现comparable接口</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TreeMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u2<span class="token number">.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历</span>    Set entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator it <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//entrySet集合中的的元素都是entry</span>        Map<span class="token punctuation">.</span>Entry entry <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定制排序</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Tree map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                User u1 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> o1<span class="token punctuation">;</span>                User u2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> o2<span class="token punctuation">;</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按照年龄从小到大排序</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后面都一样  </span><span class="token punctuation">}</span></code></pre></li></ul><p><strong>面试题</strong></p><ol><li><p>Map存储数据的特点是什么?并指明key、value、entry存储数据的特点</p><pre><code>双列数据，存储key-value数据key：无序的、不可重复的---Setvalue：无序的、可重复的---collectionkey-value：无序、不可重复---Set</code></pre></li><li><p>描述HashMap的底层实现原理</p><pre><code>在第一次初始化时，并不会常见出长度为16的node数组，只有在第一次调用Put方法，才会真正创建出长度为16的数组。调用put方法存key-value时，会将key调用hashCode()方法计算出哈希值，再经过某种算法计算出存储在node数组中的位置。如果该位置没有值，则添加成功----情况1如果该位置有值（有可能是一个或多个数据组成的链表），则比较哈希值如果哈希值不同，则添加成功，通过链表的方式存储在数组中----情况2 如果哈希值相同，则调用key所在类的equals()方法进行比较如果返回为false，则添加成功----情况3如果返回为true，则将新的value值替换为旧value值HashMap的底层存储结构是：数组+链表+红黑树当数组上的某个位置上的链表长度超过8且数组的总长度大于64，则将该链表变为红黑树存储当涉及到数组扩容问题时，HashMap底层有临界值，当要存储的数据超过临界值（且存储的位置有值时），会将数组扩容为原来的2倍，并将原来的数据复制进新的数组当中。</code></pre></li><li><p>Map中常用实现类有哪些？各自有什么特点？</p><pre><code>HashMap：是Map的主要实现类，线程不安全的，效率高，可以存储Null值LinkedHashMap：保证在存储key-value时，可以根据添加的顺序进行遍历，在HashMap的基础上，增加了两个指针，分别指向前后数据，在频繁遍历时效率更高。TreeMap：保证在存储key-value时，根据key进行排序，具体排序规则根据Key的自然排序和定制排序 。底层使用的是红黑树Hashtable：是Map的古老实现类，线程安全，效率低，不能存储Null值Properties：存储方式也是key-value，键值对都是String类型，用于配置文件</code></pre></li><li><p>LinkedHashMap的底层实现原理</p><pre><code>底层和HashMap的机构相同，因为LinkedHashMap继承了HashMap，区别在于LinkedHashMap内部提供了Entry，替换了Node类型，其中增加了before和after用于存储上一个和下一个数据，更有利于遍历。</code></pre></li><li><p>如何遍历map，代码实现</p><pre class=" language-java"><code class="language-java">Set set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator it <span class="token operator">=</span>set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>Collection和Collections的区别？</p><pre><code>Collection是一个存储单列数据的接口，内部包括List和SetCollections是操作Collection和Map的常用工具类</code></pre></li><li><p>TreeMap的使用？</p><pre><code>向TreeMap中添加数据，要求key的类型保持一致因为要按照key进行排序：自然排序、定制排序</code></pre></li></ol><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p><strong>面试题：Collection和Collections的区别？</strong></p><p>Collection是一个存放单列数据的接口，而Collections是操作Collection、Map的工具类</p><p><strong>常用方法</strong></p><table><thead><tr><th>排序</th><th></th></tr></thead><tbody><tr><td>reverse(List)</td><td>反转List中元素的顺序</td></tr><tr><td>shuffle(List)</td><td>对List集合元素进行随机排序</td></tr><tr><td>sort（List）</td><td>根据元素的自然顺序对指定List集合元素按升序排序</td></tr><tr><td>sort(List,Comparator)</td><td>根据指定Comparator产生的顺序对List集合元素进行排序</td></tr><tr><td>swap(List,int index1,index2)</td><td>将指定List集合中的两个元素进行交换</td></tr><tr><td><strong>查找、替换</strong></td><td></td></tr><tr><td>Object max(Collection)</td><td>根据元素自然排序，返回最大元素</td></tr><tr><td>Object max(Collection,Comparator)</td><td>根据Comparator指定的顺序，返回给定集合的最大元素</td></tr><tr><td>Object min(Collection)</td><td>最小</td></tr><tr><td>Object min(Collection,Comparator)</td><td>最小</td></tr><tr><td>int frequency(Collection,Object)</td><td>返回指定集合指定元素的出现次数</td></tr><tr><td>void copy(List dest,List src)</td><td>将src中的内容赋值到dest中</td></tr><tr><td>boolean replaceAll(List,Object old,Object new)</td><td>把list中的旧值换成新值</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//copy（）方法的问题</span><span class="token comment" spellcheck="true">//错误示范：</span>List dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确操作</span>List dest <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>同步控制</strong></p><p>Collections类中提供了多个**synchronizedXxx()**方法，可以让指定集合包装成线程同步的集合。</p><p><code>ArrayList list = new ArrayList();  List list=Collections.synchronizedList(list);</code></p><h3 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h3><p><strong>顺序表（Array,ArrayList）</strong></p><p>特点：</p><ol><li>使用连续分配的内存空间</li><li>一次申请一大段连续的空间，需要实现声明最大可能要占用的固定内存空间</li></ol><p>优点：</p><p>设计简单，读取与修改表中任意一个元素的时间都是固定的</p><p>缺点：</p><ol><li>容易造成内存浪费</li><li>删除或插入需要移动大量数据</li></ol><p><strong>链表（LinkedList）</strong></p><p>特点：</p><ol><li>使用不连续的内存空间</li><li>不需要提前声明好指定大小的内存空间</li></ol><p>优点:</p><ol><li>充分节省内存空间</li><li>数据的插入与删除方便，不需要移动大量数据</li></ol><p>缺点：</p><ol><li>设计麻烦</li><li>查找数据必须按照顺序找到该数据为止</li></ol><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li><p>泛型不能是基本数据类型，需要使用其包装类</p></li><li><p>在jdk5.0时，集合接口和集合类都修改为带泛型结构</p></li><li><p>在实例化集合时，可以指明具体泛型结构</p></li><li><p>指明之后，集合类或接口中凡是定义类或接口时，内部结构使用到泛型都和定义的相同</p></li><li><p>如果实例化时，没有指明泛型的类型，默认为Object类型</p></li><li><p>jdk7：类型推断<code>HashMap&lt;User&gt; map = new HashMap&lt;&gt;();</code></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指明泛型的comparable接口</span><span class="token keyword">public</span> User <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//指定泛型</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>User u<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//因为指明了泛型，形参直接改变，不需要判断类型了</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>自定义泛型类</strong></p><ol><li><p>定义泛型类，建议在实例化时指明类的泛型</p><p>如果没有指明，则认为泛型类型为Object类型</p><p>构造器不需要加&lt;&gt;，但是实例化需要加</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Order<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//定义泛型类</span>    T orderT<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>T orderT<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderT <span class="token operator">=</span> orderT<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Order<span class="token operator">&lt;</span>String<span class="token operator">></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指明泛型类型，则参数就是什么类型</span><span class="token punctuation">}</span></code></pre></li><li><p>子类继承父类时声明泛型，则泛型就是什么类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderChildren</span> <span class="token keyword">extends</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    OrderChildren child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderChildren</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为继承父类指定泛型，则参数就是什么类型</span>    <span class="token comment" spellcheck="true">//注意：子类只是一个普通类，不需要加&lt;></span><span class="token punctuation">}</span></code></pre></li><li><p>定义泛型类，子类继承父类时也没有声明泛型，建议在实例化时指明类的泛型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderChildren</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    OrderChildren<span class="token operator">&lt;</span>String<span class="token operator">></span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderChildren</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//泛型类指明类型，则参数就是什么类型</span><span class="token punctuation">}</span></code></pre></li></ol><ul><li><p>泛型在继承方面的体现：</p><ul><li><p>类A是类B的父类，G<a>和G<b>二者不具备子父类关系：</b></a></p><ul><li><code>List&lt;Object&gt; list1; List&lt;String&gt; list2</code>，list2不能赋值给List1</li></ul></li><li><p>类A是类B的符类，A<g>,B<g>可以赋值</g></g></p><ul><li><code>List&lt;String&gt; list1; ArrayList&lt;String&gt; list2</code>，可以赋值</li></ul></li><li><p><strong>通配符</strong>：类A是类B的父类，G<a>和G<b>二者不具备子父类关系，G&lt;?&gt;是其父类，可以赋值</b></a></p><ul><li><p>添加：对于List&lt;?&gt;不能向其内部添加数据</p></li><li><p>获取：允许读取数据，读取的数据类型为Object</p></li><li><p><strong>有限制的通配符</strong>：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token operator">></span> list1 <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//泛型是person子类</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Person<span class="token operator">></span> list2 <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//泛型是person父类</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list3 <span class="token operator">=</span> null<span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list4 <span class="token operator">=</span> null<span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list5 <span class="token operator">=</span> null<span class="token punctuation">;</span>list1 <span class="token operator">=</span> list3<span class="token punctuation">;</span>list1 <span class="token operator">=</span> list4<span class="token punctuation">;</span>list1 <span class="token operator">=</span> list5<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错，extend表示是其子类</span>list2 <span class="token operator">=</span> list3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错，super表示是其父类</span><span class="token comment" spellcheck="true">//获取值</span>Student s <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错，最小为Person</span>Object o <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确，最小为object</span></code></pre></li></ul></li></ul></li></ul><p><strong>自定义泛型方法</strong></p><p>泛型方法的泛型和泛型类的泛型没有关系，换句话说泛型方法还可以在普通类中声明</p><ul><li>静态方法不能使用类的泛型</li><li>泛型方法，可以声明为静态。原因：泛型参数是在调用方法时确定的，并非实例化时确定</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//泛型类是T，泛型方法是E，没有任何关系</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">copy</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>E e<span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Order<span class="token operator">&lt;</span>String<span class="token operator">></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//泛型方法的泛型取决于传入的参数，与实例化无关</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>面试题</strong></p><ol><li><p>如何遍历带泛型的key,value,map</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//遍历key</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>String key<span class="token operator">:</span>keys<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历value</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collection<span class="token operator">&lt;</span>Integer<span class="token operator">></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator it <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历key-value</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> entrys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> entry<span class="token operator">:</span>entrys<span class="token punctuation">)</span><span class="token punctuation">{</span>    String key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>提供一个方法，用于遍历HashMap&lt;String,String&gt;中的所有value，并放在list集合中，用上泛型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>    Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Stirng value<span class="token operator">:</span>values<span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><ul><li>java.io.File：一个对象，文件和文件目录路径的抽象表达形式</li><li>只涉及到关于文件的操作，并没有涉及到内容的操作。如果需要读写内容，就需要IO流来完成</li></ul><h4 id="创建File类的实例"><a href="#创建File类的实例" class="headerlink" title="创建File类的实例"></a>创建File类的实例</h4><p>并不会创建出真正的文件，只是将对象加载进内存中</p><ul><li>IDEA中，Junit单元测试方法中，相对路径指的是当前模块下；main()测试中，指的是总工程下</li></ul><table><thead><tr><th>File(String filePath)绝对路径/相对路径</th><th>File file1 = new File(“hello.txt”),File file2 = new File(“d:\hello.txt”)</th></tr></thead><tbody><tr><td>File(String parentPath,String childPath)父，子目录</td><td>File file3 = new File(“D:\ “,”workspace”)</td></tr><tr><td>File(File paretPath,String childPath)</td><td>File file4 = new File(file3,”hello.txt”);</td></tr></tbody></table><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><table><thead><tr><th>String getAbsolutePath()</th><th>获取绝对路径</th></tr></thead><tbody><tr><td>String getPath()</td><td>获取路径</td></tr><tr><td>String getName()</td><td>获取名称</td></tr><tr><td>String getParent()</td><td>获取上层文件目录路径，若无，返回null</td></tr><tr><td>long length()</td><td>获取文件长度（字节），不能获取目录长度</td></tr><tr><td>long lastModified()</td><td>获取最后一次修改时间，毫秒值</td></tr><tr><td>String[] list()</td><td>获取指定目录下的所有文件或文件目录的名称数组</td></tr><tr><td>File[] listFiles()</td><td>获取指定目录下的所有文件或文件目录的File数组</td></tr><tr><td>boolean renameTo(File dest)</td><td>把文件重命名为指定的文件路径（要想保证返回true，需要file1在硬盘中存在的，且file2不能在硬盘中存在）</td></tr></tbody></table><p><strong>判断功能</strong></p><table><thead><tr><th>boolean isDirectory()</th><th>判断是否是文件目录</th></tr></thead><tbody><tr><td>boolean isFile()</td><td>判断是否是文件</td></tr><tr><td>boolean exists()</td><td>判断是否存在</td></tr></tbody></table><p><strong>创建、删除功能</strong></p><table><thead><tr><th>boolean createNewFile()</th><th>创建文件，若文件存在则不创建</th></tr></thead><tbody><tr><td>boolean mkdirs()</td><td>创建文件目录，如果上层文件目录不存在，一并创建</td></tr><tr><td>boolean delete()</td><td>删除文件</td></tr></tbody></table><p><strong>站位</strong>：（我们是站在程序（内存）的角度）</p><ul><li><p>输入：将文件写入的内存当中</p></li><li><p>输出：将内存中的数据存入磁盘</p></li></ul><p><strong>流的分类</strong>：</p><ul><li><p>数据单位:字节流（8bit）、字符流（16bit）</p></li><li><p>流向：输入流、输出流</p></li><li><p>角色：节点流（File）、处理流（缓冲流是其中的一种）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201009141222.png"></p></li></ul><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20201009142055.png"></p><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><h4 id="读入数据"><a href="#读入数据" class="headerlink" title="读入数据"></a>读入数据</h4><p>从硬盘文件中读取数据到内存中</p><h5 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.实例化File类的对象，指明要操作的对象</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.提供具体的流</span>FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.数据的读入</span><span class="token comment" spellcheck="true">//read():返回读入的一个字符，如果达到文件末尾，返回-1</span><span class="token keyword">int</span> data <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取的是char转码后的int</span><span class="token keyword">while</span><span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取下一个数据</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//流的关闭操作</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>说明：</p><ol><li>read()的理解：返回读入的一个字符，如果到达末尾，返回-1</li><li><strong>异常处理</strong>：为了保证流资源一定可以执行关闭操作，需要使用try-catch-finally（并且判断一下流是否为null）</li><li>读入的文件一定要存在，否则就会报FileNotFoundException</li></ol><p><strong>read(char[ ] cbuf)一次读入多个数据</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.实例化File类的对象，指明要操作的对象</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.提供具体的流</span>FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.数据的读入</span><span class="token comment" spellcheck="true">//read(char[ ] cbuf)一次读入数组长度的数据，如果达到文件末尾，不足长度则返回-1</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存放数据的地方</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录数据长度</span><span class="token comment" spellcheck="true">//方式1</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式2</span><span class="token comment" spellcheck="true">//String str = new String(cbuf,0,len);</span><span class="token comment" spellcheck="true">//System.out.println(str);</span></code></pre><h5 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h5><p><code>FileInputStream</code></p><ul><li><p>操作也是四步骤，1.造文件，2.造流，3.读方法，4.关流</p></li><li><p>多数据读用byte[]数组</p></li><li><p>使用字节流处理文本文件可能（在内存中读时）出现乱码：中文</p></li></ul><h4 id="写出数据"><a href="#写出数据" class="headerlink" title="写出数据"></a>写出数据</h4><p>从内存中写出数据到硬盘文件里</p><ol><li>输出操作，对应的File可以不存在<ol><li>如果不存在，回自动创建此文件</li><li>如果存在：<ol><li>如果使用流构造器为：FileWriter(file/false)/FileWriter(file)对原有的文件覆盖</li><li>如果流使用构造器为：FileWriter(file/true)：不会对原有文件覆盖，而是在原有文件中追加内容</li></ol></li></ol></li></ol><h5 id="字符流-1"><a href="#字符流-1" class="headerlink" title="字符流"></a>字符流</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.实例化File类的对象，指明要操作的对象</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.提供具体的流</span>FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认为false</span><span class="token comment" spellcheck="true">//3.写出的操作</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"nihao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.流资源的关闭</span>fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>练习</strong>：读写数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.实例化File类的对象，指明要操作的对象</span>File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.提供具体的流</span>FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.数据的读入和写出操作</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读操作</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写入操作</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次读取len个数据</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//4.流的关闭</span>fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="字节流-1"><a href="#字节流-1" class="headerlink" title="字节流"></a>字节流</h5><p><code>FileOutputStream</code></p><ul><li><p>操作也是四步骤，1.造文件，2.造流，3.写方法，4.关流</p></li><li><p>写可以用字节流，因为不涉及到在内存中读</p></li></ul><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><p>作用：用来提高读写的速度</p><ul><li><code>BufferedInputStream</code></li><li><code>BufferedOutputStream</code></li><li><code>BufferedReader</code></li><li><code>BufferedWriter</code></li><li>在具体流嵌套一层缓冲流</li><li>关流：先关外层再关内层，外层关了内层就会自动关闭</li></ul><p><strong>读写操作</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.实例化File类的对象，指明要操作的对象</span>File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.提供具体的流</span>FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.提供缓冲流</span>BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入具体的流</span>BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据的读入和写出操作</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写入操作</span>    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次读取len个数据</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关流：先关外层再关内层，外层关了内层就会自动关闭</span>br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>readLine()读写一行的操作</strong></p><p>将一行数据读取到字符串中，如果没有值则为null</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.实例化File类的对象，指明要操作的对象</span>File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.提供具体的流</span>FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.提供缓冲流</span>BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入具体的流</span>BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.读写操作</span>String data <span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式1换行</span>    <span class="token comment" spellcheck="true">//方式2换行</span>    <span class="token comment" spellcheck="true">//bw.write(data);</span>    <span class="token comment" spellcheck="true">//bw.newLine();</span><span class="token punctuation">}</span></code></pre><p><strong>练习题</strong></p><ol><li><p>实现文件的复制，使用缓冲流</p></li><li><p>实现文件的加密操作：<code>for(i = 0;i&lt;len ;i++){cubf[i] =(byte) (cubf[i]^5);}</code></p><ol><li>解密只需要对加密对象再异或5就可以实现解密</li></ol></li><li><p>统计一个文件中所有字符出现的次数</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BufferedReader br <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedWriter bw <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建文件对象</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\1234.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//存放字符和出现的次数</span>            Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建具体流</span>            FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建缓冲流</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>            bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读操作</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将len还原成char</span>                <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>len<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//字符第一次出现</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//字符出现过，增加1次</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//遍历map集合</span>            Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Integer<span class="token operator">>></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Integer<span class="token operator">></span> entry<span class="token operator">:</span>set<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">' '</span><span class="token operator">:</span>                        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"空格="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'\t'</span><span class="token operator">:</span>                        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"tab键="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'\n'</span><span class="token operator">:</span>                        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"换行="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'\r'</span><span class="token operator">:</span>                        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"回车="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换行</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ol><h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><ul><li>属于字符流<ul><li><code>InputStreamReader</code>：将一个字节输入流转换为字符输入流，父类Reader（看后缀）</li><li><code>OutputStreanWriter</code>：将一个字符的输出流转换为字节输出流，父类Writer</li></ul></li><li>作用：字节与字符之间的转换</li><li>解码：字节—&gt;字符：InputStreamReader</li><li>编码：字符—&gt;字节：OutputStramWriter</li></ul><p><strong>InputStreamReader</strong></p><blockquote><p>注意：具体用哪个字符集去读，取决于原来的文件编码是什么</p></blockquote><pre class=" language-java"><code class="language-java">FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字节流</span><span class="token comment" spellcheck="true">//InputStreamReader isr = new InputStreamReader(fis);//使用系统默认字符集</span>InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用UTF-8去读</span><span class="token comment" spellcheck="true">//读操作</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    for(int i=0;i&lt;len;i++){</span><span class="token comment" spellcheck="true">//        System.out.println(cbuf[i]);</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span>isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>转换流实现文件读写</strong></p><ul><li>utf-8—-&gt;gbk</li></ul><pre class=" language-java"><code class="language-java">FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字节输入流</span>FileOutpuStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutStream</span><span class="token punctuation">(</span><span class="token string">"1234.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字节输出流</span>InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用UTF-8去读</span>OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fos<span class="token punctuation">,</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用gbk去写</span></code></pre><p><strong>字符编码集</strong></p><p>ASCII：美国标准，1个字节7位</p><p>ISO8859-1：拉丁语表，1个字节8位</p><p>GB2312、GBK：中国标准，最多2个字节</p><p>Unicode：全世界语言编码集，2个字节，但因为要表示用1个还是2个不能很好界定，没有落地</p><p>UTF-8：变长编码方式，1-6个字节，可以根据开头的1 *0来界定用几个字节进行识别</p><p><strong>标准流</strong></p><p>注意：属于字节流</p><ul><li><code>System.in</code></li><li><code>System.out</code></li></ul><p>练习：使用System.in来输入字符串，将其变为大写</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入要转换的字符串："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String data <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">"exit"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>注意：</p><ol><li>IDEA使用单元测试不能在控制台进行输入，需要使用main主程序</li><li>这里应该使用try-catch-finally，偷懒只实现了主要代码</li></ol></blockquote><p><strong>打印流</strong></p><p><code>PrintStream</code></p><p><code>PrintWriter</code></p><p>作用：将输出的信息输出在磁盘中</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建输出流，指定保存的位置</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建打印流，flush为true，表示换行就会自动刷新</span>        PrintStream ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ps<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//把标准输出流改为打印流的方式输出（即将控制台输出改为文件输出）</span>            System<span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//输出逻辑</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">255</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">50</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//每50个字符换行</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭流</span>        ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>数据流</strong></p><p><code>DataInputStream</code>读数据</p><p><code>DataOutputStream</code>写数据</p><ul><li>作用：用于读取或写出<strong>基本数据类型的变量或字符串</strong></li></ul><p>练习：将内存中的字符串、基本数据类型写出到文件中和读取</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写数据</span> <span class="token comment" spellcheck="true">//创建具体输出流，数据流</span>DataOutputStream dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写数据</span>dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关流</span>dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意：读数据的时候，<strong>读的顺序一定要和写入时一样</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//读数据</span>DataInputStream dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h4><ul><li>作用：用于存储和读取基本数据类型或对象的处理流</li></ul><p><code>ObjectInputStream</code>：读到内存，反序列化</p><p><code>ObjectOutputStream</code>：写到磁盘或进行网络传输，序列化</p><ul><li><strong>自定义类（User）序列化的方法：</strong><ol><li>需要自定义类实现接口：<code>Serializable</code></li><li>当前类提供一个全局常量：<code>public static final long serialVersionUID = xxxxxxL;</code><ol><li>算是一个唯一标识，如果没有，再序列化之后，自定义类发生了修改，那么系统将无法识别</li></ol></li><li>除了当前自定义类需要实现<code>Serializable</code>接口，其内部所有属性也必须可序列化（默认情况下，基本数据类型是可序列化的）</li><li>补充：<code>static</code>/<code>transient</code>修饰的成员变量不能序列化</li></ol></li></ul><p><strong>对象序列化机制</strong>：允许把Java对象转换为平台无关的二进制流，从而允许把这种二进制流持久化保存在磁盘上，或通过网络这种二进制流传输到另一个网络节点。当其他程序获取到这种二进制流，就可以恢复成原来的java对象。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//序列化，写到磁盘</span>ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\obj.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hahaha"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反序列化，读到内存</span>ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\obj.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String o <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>随机存储文件流</strong></p><p><code>RandomAccessFile</code></p><ol><li><p>直接继承于java.lang.Object，实现了DataInput和DataOutput接口</p></li><li><p>既可以作为一个输入流，又可以作为一个输出流</p></li><li><p>如果作为输出流，写出到的文件不存在时，会自动创建</p><p>如果写出到的文件存在，则会对原有文件内容进行覆盖（默认情况下是从头开始覆盖）</p></li><li><p>RandomAccessFile（File,mode），</p><ol><li>mode：<ol><li>r：以只读方式打开</li><li>rw：以读、写</li><li>rwd：读，写，同步</li><li>rws：读写，同步内容+元数据</li></ol></li></ol></li></ol><pre class=" language-java"><code class="language-java">RandomAccessFile raf <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\random.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>RandomAccessFile raf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\random1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    raf2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>raf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>raf2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">RandomAccessFile raf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\random1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>raf2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hahaha"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果写出到的文件存在，则会对原有文件内容进行覆盖</span>raf2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li><p>字节流与字符流的区别与使用情景</p><pre class=" language-java"><code class="language-java">字节流： <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 非文本文件，如果只是复制文件，不在控制台输出，字节流也可以实现字符流： <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 文本文件</code></pre></li><li><p>使用缓冲流实现a.jpg复制到b.jpg</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建具体流</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\1234.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建缓冲流</span>BufferInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>BufferOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读写操作</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写操作</span>    bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>转换流是哪两个类，分别的作用是什么？</p><pre class=" language-java"><code class="language-java">InputStreamReader<span class="token operator">:</span>将输入的字节流转换为输入的字符流，解码OutputStreamWriter：将输出的字符流转换为输出的字节流，编码InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据文件的编码来读</span>OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要转换什么编码就写什么</span></code></pre></li><li><p><strong>总结遍历方式</strong></p><pre class=" language-java"><code class="language-java">字节流： <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式1：数组写</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式2：逐个字节写</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式3：字符串读行</span>String data<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>    bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//bos.newLine();//换行</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式4：数组转字符串</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>字符流： <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>网络通信三要素</p><ol><li><p>IP：电子设备(计算机)在网络中的唯一标识。对应的类：InetAddress</p><ol><li>IPv4</li><li>IPv6</li></ol></li><li><p>端口：应用程序在计算机中的唯一标识。 0~65536</p><ol><li>公认端口：0~1023</li><li>注册端口：1023~49151</li></ol><ul><li>端口号与IP地址组合得到一个网络套接字：Socket</li></ul></li><li><p>传输协议：规定了数据传输的规则</p><ol><li>基础协议：<ol><li>tcp:安全协议，三次握手，进行大数据量传输。 速度稍慢</li><li>udp：不安全协议。 速度快，以数据包的形式发送。只负责发，不管对方是否接收到</li></ol></li></ol></li><li><p>网络通信落地分为4层：应用层、传输层、网络层、物理+数据链路层</p></li></ol><p><strong>InetAddress实例化</strong></p><p>IP对象实例化（没有构造方法，可以静态创造）</p><p><code>getByName(String host),getLocalhost()</code></p><pre class=" language-java"><code class="language-java">InetAddress inet1 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.10.14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InetAddress inet2 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InetAddress inet3 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalhost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>方法</strong></p><ul><li><code>getHostName()</code>：获取域名</li><li><code>getHostAddress()</code>：获取主机地址</li></ul><p><strong>实现客户端-服务器交互</strong></p><blockquote><p>注意：</p><ol><li>客户端创建的Socket是服务器端的套接字（ip+port）</li><li>服务器端需要先获取客户端的socket，才能获取流</li></ol></blockquote><p><strong>实现消息交互</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>    OutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建套接字，指明服务器IP和端口</span>        InetAddress inetAddress <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>inetAddress<span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取输出流</span>        os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.发送数据</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//4.关闭流和套接字</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>socket<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//服务器端</span><span class="token comment" spellcheck="true">//这里偷懒将异常抛出，应该使用try-catch</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.创建ServerSocket，指明端口</span>    ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.获取客户端的socket，表示接收来自客户端的消息</span>    Socket socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.获取输入流</span>    InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.读取操作</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//socket.getInetAddress()获取ip对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到来自"</span><span class="token operator">+</span>socket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//5.关闭流、socket、服务器</span>    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>服务器端保存客户端发送的图片</strong></p><p><strong>服务器端接收完成后反馈消息，客户端接收消息</strong></p><ul><li>需要的流<ul><li>客户端<ul><li>socket</li><li>文件输入流（读图片）</li><li>输出流（发送用）通过socket获取</li><li>输入流（读服务器端反馈的消息）通过socket获得</li></ul></li><li>服务端<ul><li>客户端的socket</li><li>输入流（读客户端的图片）通过socket获取</li><li>文件输出流（保存用）</li><li>输出流（发送反馈消息）通过Socket获取</li></ul></li></ul></li></ul><blockquote><p>注意：</p><ol><li><p>异常需要用try-catch，这里偷懒</p></li><li><p>客户端的输出流和服务器端的输入流都是从Socket获取的</p></li><li><p>只有从本地读取 和保存是自己创建的</p></li><li><p> 中断传输：socket.shutdownOutput();</p></li></ol></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">client1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.获取Ip对象</span>    InetAddress inetAddress <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.获取socket</span>    Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>inetAddress<span class="token punctuation">,</span><span class="token number">6667</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.获取输出流（用于发送图片）</span>    OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.获取输入流（用于读取本地图片）</span>    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5.读写操作</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//中断传输，表示自己已经传输完成，不再继续传输</span>    socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//6.获取服务器端反馈的消息</span>    <span class="token comment" spellcheck="true">//6.1.获取输入流（读服务器端反馈的消息）</span>    InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//7.关闭流、socket</span>    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//服务器端</span>    <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.获取ServerSocket对象</span>    ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6667</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.获取客户端的socket</span>    Socket socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.获取输入流（用于从客户端获取图片）</span>    InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.获取输出流（保存本地）</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\321.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5.读写操作</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//6.服务器端发送反馈信息</span>    <span class="token comment" spellcheck="true">//6.1获取输出流</span>    OutputStream os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">socket<span class="token punctuation">.</span>getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"收到文件，谢谢！"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//7.关闭流、socket、服务器</span>    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>URL的实例化及常用方法</strong></p><p>统一资源定位符</p><p><code>URL url = new URL("http://localhost:8080/examples/123.txt?username=tom")</code></p><table><thead><tr><th>getProtocol()</th><th>获取协议名</th></tr></thead><tbody><tr><td>getHost()</td><td>获取主机名</td></tr><tr><td>getPort()</td><td>获取端口号</td></tr><tr><td>getPath()</td><td>获取文件路径</td></tr><tr><td>getFile()</td><td>获取文件名</td></tr><tr><td>getQuery()</td><td>获取查询名</td></tr></tbody></table><p><strong>使用tomcat复制文件</strong></p><blockquote><p>中断连接：urlConnection.disconnect();</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建url对象</span>    URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/examples/123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取 获取连接的对象</span>    HttpURLConnection urlConnection <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取连接</span>    urlConnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取输入流(用于读连接中的数据)</span>    InputStream is <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取输出流（用于存入硬盘）</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\1234.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//关闭流,中断连接</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    urlConnection<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务pom依赖</title>
      <link href="/2020/09/25/springcloud/pom-yi-lai/"/>
      <url>/2020/09/25/springcloud/pom-yi-lai/</url>
      
        <content type="html"><![CDATA[<h1 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h1><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>统一管理jar包版本<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">></span><span class="token number">12</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">></span>        <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">></span><span class="token number">12</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">></span>        <span class="token operator">&lt;</span>junit<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">4.12</span><span class="token operator">&lt;</span><span class="token operator">/</span>junit<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>lombok<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>lombok<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>log4j<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">17</span><span class="token operator">&lt;</span><span class="token operator">/</span>log4j<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>mysql<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">8.0</span><span class="token punctuation">.</span><span class="token number">18</span><span class="token operator">&lt;</span><span class="token operator">/</span>mysql<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>druid<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">16</span><span class="token operator">&lt;</span><span class="token operator">/</span>druid<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencyManagement<span class="token operator">></span>        <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>maven<span class="token operator">-</span>project<span class="token operator">-</span>info<span class="token operator">-</span>reports<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>spring boot <span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>spring cloud Hoxton<span class="token punctuation">.</span>SR1<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>Hoxton<span class="token punctuation">.</span>SR1<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>spring cloud 阿里巴巴<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>alibaba<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mysql<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>mysql<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> druid<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>druid<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            Masics丶<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mybatis<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>junit<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>junit<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>log4j<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>log4j<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencyManagement<span class="token operator">></span>      </code></pre><p><img src="/2020/09/25/springcloud/pom-yi-lai/Users\陈超\Desktop\Linux\springboot+cloud\springcloud\sc的1.png"></p><p><img src="/2020/09/25/springcloud/pom-yi-lai/Users\陈超\Desktop\Linux\springboot+cloud\springcloud\sc的2.png"></p><h1 id="cloud-pay-8001依赖"><a href="#cloud-pay-8001依赖" class="headerlink" title="cloud_pay_8001依赖:"></a>cloud_pay_8001依赖:</h1><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 包含了sleuth zipkin 数据链路追踪<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>zipkin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引用自己定义的api通用包，可以使用Payment支付Entity <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>eiletxie<span class="token punctuation">.</span>springcloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>project<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监控<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>eureka client<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>如果没写版本<span class="token punctuation">,</span>从父层面找<span class="token punctuation">,</span>找到了就直接用<span class="token punctuation">,</span>全局统一<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>jdbc<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h1 id="Order-80"><a href="#Order-80" class="headerlink" title="Order-80"></a>Order-80</h1><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 包含了sleuth zipkin 数据链路追踪<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>zipkin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引用自己定义的api通用包，可以使用Payment支付Entity <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>eiletxie<span class="token punctuation">.</span>springcloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>project<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监控<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>eureka client<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka:"></a>Eureka:</h1><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- eureka-server --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.eiletxie.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--监控--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 一般通用配置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h1 id="8004"><a href="#8004" class="headerlink" title="8004"></a>8004</h1><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.eiletxie.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--监控--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--SpringBoot整合Zookeeper客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--先排除自带的zookeeper3.5.3--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--添加zookeeper3.4.14版本--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--热部署--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h1 id="zk-order-80"><a href="#zk-order-80" class="headerlink" title="zk_order_80:"></a>zk_order_80:</h1><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引用自己定义的api通用包，可以使用Payment支付Entity <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>eiletxie<span class="token punctuation">.</span>springcloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>project<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监控<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>SpringBoot整合Zookeeper客户端<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>zookeeper<span class="token operator">-</span>discovery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>先排除自带的zookeeper3<span class="token number">.5</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>                    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>zookeeper<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>添加zookeeper3<span class="token number">.4</span><span class="token punctuation">.</span><span class="token number">14</span>版本<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>zookeeper<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.4</span><span class="token punctuation">.</span><span class="token number">14</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h1 id="Consule"><a href="#Consule" class="headerlink" title="Consule:"></a>Consule:</h1><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引用自己定义的api通用包，可以使用Payment支付Entity <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>eiletxie<span class="token punctuation">.</span>springcloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>project<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监控<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>SpringCloud consul<span class="token operator">-</span>server<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>consul<span class="token operator">-</span>discovery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h1 id="Consule-order"><a href="#Consule-order" class="headerlink" title="Consule-order"></a>Consule-order</h1><pre class=" language-pom"><code class="language-pom">    <dependencies>        <dependency><!-- 引用自己定义的api通用包，可以使用Payment支付Entity -->            <groupId>com.eiletxie.springcloud</groupId>            <artifactId>cloud-api-commons</artifactId>            <version>${project.version}</version>        </dependency>        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-starter-web</artifactId>        </dependency>        <!--监控-->        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-starter-actuator</artifactId>        </dependency>        <!--SpringCloud consul-server-->        <dependency>            <groupId>org.springframework.cloud</groupId>            <artifactId>spring-cloud-starter-consul-discovery</artifactId>        </dependency>        <!--热部署-->        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-devtools</artifactId>            <scope>runtime</scope>            <optional>true</optional>        </dependency>        <dependency>            <groupId>org.projectlombok</groupId>            <artifactId>lombok</artifactId>            <optional>true</optional>        </dependency>        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-starter-test</artifactId>            <scope>test</scope>        </dependency>    </dependencies></code></pre><h1 id="OpenFegin"><a href="#OpenFegin" class="headerlink" title="OpenFegin"></a>OpenFegin</h1><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引用自己定义的api通用包，可以使用Payment支付Entity <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>eiletxie<span class="token punctuation">.</span>springcloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>project<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> openfeign <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监控<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>eureka client<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix:"></a>Hystrix:</h1><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引用自己定义的api通用包，可以使用Payment支付Entity <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>eiletxie<span class="token punctuation">.</span>springcloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>project<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监控<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> hystrix<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>eureka client<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h1 id="Hystrx-order"><a href="#Hystrx-order" class="headerlink" title="Hystrx-order:"></a>Hystrx-order:</h1><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引用自己定义的api通用包，可以使用Payment支付Entity <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>eiletxie<span class="token punctuation">.</span>springcloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>project<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> openfeign <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监控<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>eureka client<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h1 id="HystrixDashboard"><a href="#HystrixDashboard" class="headerlink" title="HystrixDashboard"></a>HystrixDashboard</h1><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.eiletxie.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--监控--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--eureka client--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--热部署--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h1 id="cloud-gateway"><a href="#cloud-gateway" class="headerlink" title="cloud-gateway:"></a>cloud-gateway:</h1><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.eiletxie.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--gateway--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--eureka client--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--热部署--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h1 id="SpringConfig"><a href="#SpringConfig" class="headerlink" title="SpringConfig:"></a>SpringConfig:</h1><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>config server<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>config<span class="token operator">-</span>server<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加消息总线RabbitMQ支持 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>bus<span class="token operator">-</span>amqp<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引用自己定义的api通用包，可以使用Payment支付Entity <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>eiletxie<span class="token punctuation">.</span>springcloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>project<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监控<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>eureka client<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h1 id="springConfig-lient"><a href="#springConfig-lient" class="headerlink" title="springConfig-lient:"></a>springConfig-lient:</h1><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加消息总线RabbitMQ支持 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.eiletxie.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--监控--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--eureka client--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--热部署--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h1 id="SpringCloudStream-8801"><a href="#SpringCloudStream-8801" class="headerlink" title="SpringCloudStream-8801"></a>SpringCloudStream-8801</h1><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监控<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>eureka client<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>stream rabbit <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>stream<span class="token operator">-</span>rabbit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h1 id="SpringCloudStream-8802"><a href="#SpringCloudStream-8802" class="headerlink" title="SpringCloudStream-8802"></a>SpringCloudStream-8802</h1><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--监控--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--eureka client--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--stream rabbit --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--热部署--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h1 id="alibaba-Nacos-pay"><a href="#alibaba-Nacos-pay" class="headerlink" title="alibaba-Nacos-pay"></a>alibaba-Nacos-pay</h1><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SpringCloud ailibaba nacos--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--监控--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--热部署--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h1 id="alibaba-Nacos-order"><a href="#alibaba-Nacos-order" class="headerlink" title="alibaba-Nacos-order:"></a>alibaba-Nacos-order:</h1><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SpringCloud ailibaba nacos--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.eiletxie.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--监控--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--热部署--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h1 id="Nacos-Config-client"><a href="#Nacos-Config-client" class="headerlink" title="Nacos-Config-client"></a>Nacos-Config-client</h1><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- nacos config--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SpringCloud ailibaba nacos--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.eiletxie.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--监控--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--热部署--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h1 id="Sentinel-8401"><a href="#Sentinel-8401" class="headerlink" title="Sentinel-8401"></a>Sentinel-8401</h1><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> SpringCloud ailibaba nacos<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>nacos<span class="token operator">-</span>discovery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> SpringCloud ailibaba sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos 持久化需要用到<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> SpringCloud ailibaba sentinel<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>sentinel<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引用自己定义的api通用包，可以使用Payment支付Entity <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>eiletxie<span class="token punctuation">.</span>springcloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>project<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监控<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h1 id="sentinel-9003-9004的pom"><a href="#sentinel-9003-9004的pom" class="headerlink" title="sentinel-9003,9004的pom"></a>sentinel-9003,9004的pom</h1><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- SpringCloud ailibaba nacos--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- SpringCloud ailibaba sentinel--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.eiletxie.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--监控--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--热部署--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> </code></pre><h1 id="seta-order-2001"><a href="#seta-order-2001" class="headerlink" title="seta-order-2001"></a>seta-order-2001</h1><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- nacos --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- seata--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 因为兼容版本问题,所以需要剔除它自己的seata的包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   //引入我们使用的自己的seata对应的版本的依赖,而不是使用starter默认的版本    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jdbc--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--hutool 测试雪花算法--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-captcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> </code></pre><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务（SpringCloud、SpringCloudAlibaba）</title>
      <link href="/2020/09/24/springcloud/wei-fu-wu-springcloud-springcloudalibaba/"/>
      <url>/2020/09/24/springcloud/wei-fu-wu-springcloud-springcloudalibaba/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间相互协调，相互配合，为用户体现最终价值。每个服务运行在其独立的进程当中，服务与服务之间采用轻量级的通信机制互相协作（通常是基于http/restful API）。</p><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><p>分布式微服务架构的一站式解决方案，是多种微服务架构的技术集合体，俗称微服务全家桶。</p><h2 id="SpringCloud技术栈"><a href="#SpringCloud技术栈" class="headerlink" title="SpringCloud技术栈"></a>SpringCloud技术栈</h2><p>服务注册与发现：EUREKA、Zookeeper、consul、Nacos</p><p>服务负载与调用：RIBBON、OPEN FEIGN</p><p>服务熔断降级：HYSTRIX、Sentinel</p><p>服务网关：Zuul，GateWay</p><p>服务分布式配置：Spring Cloud Config、Nacos</p><p>服务消息总线：Spring Cloud Bus、Nacos</p><p>服务开发：Spring Boot</p><h2 id="Boot和Cloud技术选型"><a href="#Boot和Cloud技术选型" class="headerlink" title="Boot和Cloud技术选型"></a>Boot和Cloud技术选型</h2><p>SpringBoot2.X版和SpringCloud H版</p><p>SpringCloud Alibaba</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200917232433.png" alt="1"></p><h2 id="微服务架构编码构建"><a href="#微服务架构编码构建" class="headerlink" title="微服务架构编码构建"></a>微服务架构编码构建</h2><h3 id="微服务cloud整体聚合父工程Project"><a href="#微服务cloud整体聚合父工程Project" class="headerlink" title="微服务cloud整体聚合父工程Project"></a>微服务cloud整体聚合父工程Project</h3><ul><li><p>父工程步骤</p><ul><li>1.New Project</li><li>2.聚合总工程名字</li><li>3.Maven选版本</li><li>4.工程名字</li><li>5.字符编码</li><li>6.注解生效激活</li><li>7.java编译版本选8</li><li>8.File Type过滤</li></ul></li><li><p>Maven工程落地细节复习</p><ul><li>Maven中的dependencyManagement和dependencies<ul><li>dependencyManagement：只在父工程中出现，用于版本固定，不会引入Jar包</li></ul></li><li>maven中跳过单元测试</li></ul></li><li><p>父工程创建完成执行mvn:install将父工程发布到仓库方便子工程继承</p></li></ul><h3 id="创建子模块-pay模块"><a href="#创建子模块-pay模块" class="headerlink" title="创建子模块,pay模块"></a>创建子模块,pay模块</h3><ol><li>创建module</li><li>改pom</li><li>写yml</li><li>主启动</li><li>业务类</li></ol><h4 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h4><ol><li><p>sql</p></li><li><p>实体类</p><ol><li>CommonResult类</li><li>实体类</li></ol></li><li><p>dao</p><ol><li><p>接口</p></li><li><p>mabatis映射文件</p><p>在resource下,创建mapper/PayMapper.xml</p></li></ol></li><li><p>service</p><ol><li>service</li><li>impl</li></ol></li><li><p>controller</p></li></ol><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul><li><p><code>postman</code>模拟post请求</p></li><li><p>切换Run DashBoard运行窗口（分布式的运行窗口）</p><ul><li>在项目路径的.idea/workspace.xml</li></ul><pre><code>填入以下内容：&lt;option name="configurationTypes"&gt;      &lt;set&gt;        &lt;option value="SpringBootApplicationConfigurationType" /&gt;      &lt;/set&gt;    &lt;/option&gt;</code></pre></li></ul><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><h3 id="order模块"><a href="#order模块" class="headerlink" title="order模块"></a>order模块</h3><ol><li>创建module</li><li>改pom</li><li>写yml</li><li>主启动</li><li>业务类</li></ol><h4 id="业务类-1"><a href="#业务类-1" class="headerlink" title="业务类"></a>业务类</h4><ol><li><p>复制pay模块的实体类,entity类</p></li><li><p>写controller类</p><p>因为这里是消费者类,主要是消费,那么就没有service和dao,需要调用pay模块的方法</p><p>并且这里还没有微服务的远程调用,那么如果要调用另外一个模块,则需要使用基本的api调用</p><p>使用RestTemplate调用pay模块</p><p>RestTemplate(看脑图)：用于服务间的调用</p><blockquote><p>注意：使用RestTemplate调用服务传输的是json数据，springboot并不能直接封装进对象中。需要在转发过去的方法中（即8001）使用@RequestBody让json数据封装进对象中，才能加入到数据库里。之前成功是因为url提交的是表单数据，非json数据</p></blockquote></li></ol><h3 id="工程重构（解决entity重复）"><a href="#工程重构（解决entity重复）" class="headerlink" title="工程重构（解决entity重复）"></a>工程重构（解决entity重复）</h3><h2 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h2><p>当服务很多时,每个服务之间的依赖关系会比较复杂，管理起来更为复杂，需要服务管理服务间的依赖关系，实现负载均衡、服务调用等，实现服务注册与发现。</p><p>Eureka采用CS设计架构，server是服务器，也是注册中心，当eureka客户端连接到服务器，这样维护人员就可以在服务器监控各个服务的正常运行。</p><p>当服务器启动时，就会把自己的服务器信息以别名的方式注册在注册中心，消费者，服务提供者都以别名的方式获取该服务的通讯地址，实现本地的RPC调用思想：使用注册中心管理每个服务之间的依赖关系。</p><p><strong>Eureka的两个组件</strong>：</p><ol><li><p>客户端：在各个服务上，比如登录微服务，启动后会给服务器发送心跳，证明自己还存活</p></li><li><p>服务器：服务器端，用于接收心跳（类似工商管理局）</p></li></ol><h3 id="单机版Eureka"><a href="#单机版Eureka" class="headerlink" title="单机版Eureka"></a>单机版Eureka</h3><h4 id="服务器创建"><a href="#服务器创建" class="headerlink" title="服务器创建"></a>服务器创建</h4><ol><li><p>创建项目cloud_eureka_server_7001</p></li><li><p>引入pom依赖</p><p>Eureka新版本</p></li><li><p>写yml</p></li><li><p>主启动</p><p>加上@EnableEurekaServer，表示服务是server</p></li><li><p>测试</p></li></ol><h4 id="注册客户端8001进服务器成为服务提供者provider"><a href="#注册客户端8001进服务器成为服务提供者provider" class="headerlink" title="注册客户端8001进服务器成为服务提供者provider"></a>注册客户端8001进服务器成为服务提供者provider</h4><h4 id="其他服务注册进服务器"><a href="#其他服务注册进服务器" class="headerlink" title="其他服务注册进服务器"></a>其他服务注册进服务器</h4><p>8001、80都注册进去</p><ol><li><p>改pom依赖</p></li><li><p>写Yml</p></li><li><p>主启动</p><p>加上@EnableEurekaClient</p></li><li><p>服务模块重启</p></li></ol><h3 id="集群Eureka"><a href="#集群Eureka" class="headerlink" title="集群Eureka"></a>集群Eureka</h3><p><strong>集群原理</strong>：</p><p>服务注册：将服务信息注册进注册中心</p><p>服务发现：从注册中心获取服务信息</p><p>实质：key服务名，value调用地址</p><ul><li>先启动注册中心，再启动服务，服务启动时会将信息以别名的方式注册进注册中心，消费者可以通过使用服务的别名在注册中心获取RPC远程调用地址，底层使用的是HttpClient实现的远程调用。在消费者获取服务地址之后，就会将其缓存在jvm内存中，没30秒更新一次</li><li>RPC远程调用最核心的就是：高可用，一个瘫痪，全部升天。所以集群有多个组成，并且<strong>互相注册，相互守望</strong>，如：有3台服务器，则1注册12，2-13，3-12</li></ul><h4 id="构建新erueka服务器"><a href="#构建新erueka服务器" class="headerlink" title="构建新erueka服务器"></a>构建新erueka服务器</h4><ol><li>cloud_eureka_server_7002</li><li>pom文件：粘贴7001的</li><li>配置文件<ol><li>修改本地的host文件（看脑图，非yaml）</li><li>修改yml，进行相互注册（注意defautlZone），7001，7002都要修改</li></ol></li><li>主启动类</li><li>启动测试</li></ol><h4 id="将服务模块注册进集群中"><a href="#将服务模块注册进集群中" class="headerlink" title="将服务模块注册进集群中"></a>将服务模块注册进集群中</h4><ol><li>修改yml文件（defaultZone加一条即可，两个模块都要加）</li><li>启动模块，先启动服务器7001，7002，再启动8001，之后是80</li><li>测试</li></ol><h4 id="构建新的服务提供者8001集群"><a href="#构建新的服务提供者8001集群" class="headerlink" title="构建新的服务提供者8001集群"></a>构建新的服务提供者8001集群</h4><ol><li>创建新模块,8002（cloud_pay_8002）</li><li>pom文件,复制8001的</li><li>yml文件修改端口（服务名称不用改，用一样的，为的是为消费者暴露一样的别名）</li><li>主启动类,复制8001的</li><li>mapper,service,controller都复制一份</li><li>实现负载均衡<ol><li>controller的url不能写死，改成微服务名称，这样每次访问就会从eureka中拿地址，轮询</li><li>在注册bean的restTemplate方法上加上@LoadBalanced开启负载均衡</li></ol></li></ol><h3 id="修改服务主机名和ip在eureka的web上显示"><a href="#修改服务主机名和ip在eureka的web上显示" class="headerlink" title="修改服务主机名和ip在eureka的web上显示"></a>修改服务主机名和ip在eureka的web上显示</h3><p>作用：修改在eureka显示的默认主机名，鼠标移到主机名会显示ip</p><ol><li>修改yml文件</li></ol><h3 id="eureka服务发现"><a href="#eureka服务发现" class="headerlink" title="eureka服务发现:"></a>eureka服务发现:</h3><p>对于注册进eureka里面的微服务，可以通过服务发现来获取该服务的信息</p><ol><li>在controller自动注入DiscoveryClient</li><li>用方法获取各种信息（所有服务集群、服务集群中的服务名、IP、端口、URI）</li><li>主启动类加入注解：@EnableDiscoveryClient</li><li>重启测试</li></ol><h3 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h3><ul><li><p>某个微服务不可用时（客户端没有定时向服务器端发送心跳包），Eureka不会立刻将其清理，依旧会对该服务信息进行保存。</p></li><li><p>Eureka属于CAP中的AP分支（高可用）</p><ul><li>CAP：<ul><li>C：高一致性</li><li>A：高可用</li><li>P：高容错（因为分布式微服务架构都需要高容错，P必备）</li></ul></li><li>AP：Eureka</li><li>CP：Zookeeper/Consul</li></ul></li></ul><p><strong>如何禁止自我保护：</strong></p><p>此时启动erueka和pay.此时如果直接关闭了pay,那么erueka会直接删除其注册信息</p><p>修改yml文件</p><ol><li>注册中心server<ol><li>关闭自我保护</li><li>设置接收心跳时间（测试用）</li></ol></li><li>客户端client<ol><li>设置发送心跳时间</li><li>设置服务端在收到最后一次心跳等待上限</li></ol></li><li>测试</li></ol><h2 id="Zookeeper服务注册与发现"><a href="#Zookeeper服务注册与发现" class="headerlink" title="Zookeeper服务注册与发现"></a>Zookeeper服务注册与发现</h2><h3 id="注册中心服务器Zookeeper"><a href="#注册中心服务器Zookeeper" class="headerlink" title="注册中心服务器Zookeeper"></a>注册中心服务器Zookeeper</h3><ol><li>它是一个分布式协调工具，可以实现注册中心功能</li><li>关闭linux服务器防火墙，启动zookeeper服务器</li></ol><h3 id="服务提供者，客户端"><a href="#服务提供者，客户端" class="headerlink" title="服务提供者，客户端"></a>服务提供者，客户端</h3><ol><li><p>创建新的pay服务模块</p><p>cloud_pay_8003，单独用于注册到zk中  </p><ol><li><p>pom依赖</p></li><li><p>yml配置文件（端口号，服务别名，zookeeper服务器ip+端口号）</p></li><li><p>主启动</p></li><li><p>controller</p></li><li><p>修改zk版本和jar冲突</p><p>解决:</p><pre><code>    修改pom文件,改为与我们zk版本匹配的jar包</code></pre></li><li><p>启动，此时8003就注册到zk中了</p><ul><li><p>此时服务就会作为<strong>临时节点</strong>存入zk中，信息作为流水号存在临时节点中。</p></li><li><p>当我们的服务一定时间内没有发送心跳</p><pre><code>  那么zk就会将这个服务的node删除了</code></pre></li><li><p>这里是测试,就不写service与dao什么的了</p></li></ul></li></ol></li></ol><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><ol><li>cloud_order_zk_80</li><li>pom</li><li>yml配置文件</li><li>主启动</li><li>restTemplate</li><li>controller</li><li>启动注册</li></ol><h3 id="集群zk的注册"><a href="#集群zk的注册" class="headerlink" title="集群zk的注册"></a>集群zk的注册</h3><ol><li>zookeeper教学中的集群搭建</li><li>服务提供者和消费者在配置文件中connect-string指定多个zk地址即可 “，”隔开</li></ol><h2 id="Consul服务注册与发现"><a href="#Consul服务注册与发现" class="headerlink" title="Consul服务注册与发现"></a>Consul服务注册与发现</h2><p>它是一个服务发现、配置管理系统</p><p>作用：服务发现、健康检测、KV存储、可视化web界面</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ol><li>需要下载一个安装包，是个exe文件</li><li>启动是一个命令行界面,需要输入consul agen-dev启动</li><li>localhost:8500查看页面</li></ol><h3 id="创建服务提供者模块pay-8006"><a href="#创建服务提供者模块pay-8006" class="headerlink" title="创建服务提供者模块pay,8006"></a>创建服务提供者模块pay,8006</h3><ol><li>cloud_consule_pay_8006</li><li>pom依赖</li><li>yml配置文件（需要写服务的名字）</li><li>主启动类</li><li>controller</li><li>启动服务，观察是否注册进去</li></ol><h3 id="创建消费者模块order"><a href="#创建消费者模块order" class="headerlink" title="创建消费者模块order"></a>创建消费者模块order</h3><ol><li><p>cloud-consul-order-80</p></li><li><p>pom依赖</p></li><li><p>yml配置文件（需要写服务的名字）</p></li><li><p>主启动类</p></li><li><p>RestTemplate注册</p><p>配置类注册</p></li><li><p>controller</p></li><li><p>启动服务,测试是否注册进去，测试方法是否成功执行</p></li></ol><h2 id="三个注册中心的异同"><a href="#三个注册中心的异同" class="headerlink" title="三个注册中心的异同"></a>三个注册中心的异同</h2><p>Eureka：AP，以高可用为原则（如Eureka的自我保护机制：宕机依然保留数据）</p><p>Consul/Zookeeper：CP，以高一致性为原则，（如Zookeeper的临时节点：宕机直接踢出）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919144043.png" alt="zhuce1"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919144116.png" alt="zhuce2"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919144127.png" alt="zhuce3"></p><h2 id="Ribbon负载均衡服务调用"><a href="#Ribbon负载均衡服务调用" class="headerlink" title="Ribbon负载均衡服务调用"></a>Ribbon负载均衡服务调用</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>它是一个客户端，提供客户端（服务提供者）的软件负载均衡算法和服务调用。</p><p>作用：LB负载均衡（集中式负载均衡，进程内负载均衡）</p><ul><li>负载均衡：将用户的请求平摊在多个服务上，实现高可用</li></ul><p><strong>Ribbon本地负载均衡和Nginx服务端负载均衡的区别</strong></p><p>Nginx是服务器端的负载均衡，客户端将请求交给nginx，nginx实现转发请求</p><p>ribbon是客户端的负载均衡，会在注册中心拿到注册中心的信息服务列表加到缓存中，从而在本地实现RPC远程服务调用</p><p><strong>工作机制</strong></p><p>Ribbon就是负载均衡+RestTemplate，它就是一个软负载均衡的<strong>客户端</strong>组件，需要和其他<strong>客户端</strong>结合起来，如和eureka结合</p><ol><li>在选择EurekaServer，它优先选择在同一区域的负载较少的server</li><li>根据用户的指定策略（轮询、随机、加权），在server里取到信息，进行调用</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>引入jar包，但默认我们使用eureka的新版本时,它默认集成了ribbon，所以不需要引入</p><p>spring-cloud-starter-netflix-eureka-client集成了reibbon</p><p>也可以手动引入，放到order（消费者）模块中,因为只有order访问pay时需要负载均衡</p></li><li><p>RestTemplate类:</p><ol><li>getForObject（url,返回值.class）：返回的是响应体数据转化成的对象，即json</li><li>getForEntity（url,返回值.class）：返回的是重要信息（响应头、体、状态码），可以通过返回对象的get方法获得这些信息</li></ol></li></ol><h3 id="Ribbon常用负载均衡算法"><a href="#Ribbon常用负载均衡算法" class="headerlink" title="Ribbon常用负载均衡算法:"></a>Ribbon常用负载均衡算法:</h3><p><strong>核心组件</strong>：IRule接口,Riboon使用该接口,根据特定算法从所有服务中,选择一个服务</p><p><strong>Rule接口有7个实现类,每个实现类代表一个负载均衡算法</strong>：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919154159.png" alt="rule"></p><p><strong>替换</strong>：</p><ol><li><p>选择需要修改的消费者模块</p></li><li><p>需要自定义配置类，<strong>不能放在主启动类所在的包及子包下</strong></p></li><li><p>额外创建一个包：和启动器的父包是兄弟包</p></li><li><p>创建配置类,指定负载均衡算法</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919154543.png" alt="rule2"></p></li><li><p>在主启动类上加一个注解@RibbonClient</p><ul><li>name:要访问服务的名字</li><li>configuration：自定义配置类的class文件</li></ul></li></ol><h3 id="自定义负载均衡算法"><a href="#自定义负载均衡算法" class="headerlink" title="自定义负载均衡算法:"></a>自定义负载均衡算法:</h3><h4 id="轮询算法原理"><a href="#轮询算法原理" class="headerlink" title="轮询算法原理"></a>轮询算法原理</h4><p><strong>rest接口第几次请求 % 服务器集群总数量（集群中的机器数） = 实际调用服务器的下标</strong>，重启服务器后，计数从1开始</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919160044.png"></p><h4 id="自定义负载均衡算法（跳）"><a href="#自定义负载均衡算法（跳）" class="headerlink" title="自定义负载均衡算法（跳）"></a>自定义负载均衡算法（跳）</h4><h2 id="OpenFeign-服务接口调用"><a href="#OpenFeign-服务接口调用" class="headerlink" title="OpenFeign 服务接口调用"></a>OpenFeign 服务接口调用</h2><p>它是webService<strong>客户端</strong>（消费者端），使用方法是：<strong>定义一个服务接口，然后在上面添加注解，写上需要调用的方法，使用时调用这个接口中的方法，即可完成微服务之间的调用</strong>，实现接口间的远程调用，不再用Ribbon和restTemplate一样远程调用</p><p><strong>就是A要调用B,Feign就是在A中创建一个一模一样的B对外提供服务的的接口,我们调用这个接口,就可以服务到B</strong></p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ol><li><p>新建一个order项目,用于feign测试</p><p>cloud_order_feign-80</p></li><li><p>pom文件（引入openFeign的jar包）</p></li><li><p>yml配置文件（因为是客户端，不注册进注册中心也可以）</p></li><li><p>主启动类（@EnableFeignClients，启动feign）</p></li><li><p>需要调用的其他的服务的接口（这里本应该是8001 Service接口中的方法，但controller也是调用的service方法，所以是一样的）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919165041.png" alt="feign"></p></li><li><p>controller(自动注入接口，调用接口的方法，实现远程调用)</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919165539.png" alt="feign2"></p></li><li><p>测试</p><p>启动7001，7002</p><p>启动8001，8002</p><p>启动当前80模块</p><p><strong>Feign默认使用ribbon实现负载均衡</strong></p><p>测试方法是否成功调用</p></li></ol><h3 id="OpenFeign超时机制"><a href="#OpenFeign超时机制" class="headerlink" title="OpenFeign超时机制:"></a>OpenFeign超时机制:</h3><p>有时我们业务逻辑处理需要久一点，不能很快的让消费者远程调用到，我们需要改一下超时时间</p><p><strong>OpenFeign默认等待时间是1秒,超过1秒,直接报错</strong></p><ol><li><p>设置超时时间，修改yml配置文件</p><p>因为OpenFeign的底层是ribbon进行负载均衡,所以它的超时时间是由ribbon控制</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919171342.png" alt="feign3"></p></li></ol><h3 id="OpenFeign日志"><a href="#OpenFeign日志" class="headerlink" title="OpenFeign日志:"></a>OpenFeign日志:</h3><p>它提供了日志打印功能，可以通过配置日志级别，从而了解http请求的细节，就是对<strong>feign接口的调用情况的监控和输出</strong></p><p><strong>OpenFeign的日志级别有:</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919171937.png" alt="log"></p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><ol><li><p>实现在配置类中添加OpenFeign的日志类（指定http日志级别）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919172102.png" alt="log2"></p></li><li><p>修改yml配置文件（指定命令行日志级别、哪个接口实现日志监控）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200919172137.png" alt="log3"></p></li><li><p>启动服务测试</p></li></ol><h2 id="Hystrix服务降级"><a href="#Hystrix服务降级" class="headerlink" title="Hystrix服务降级"></a>Hystrix服务降级</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ol><li>服务雪崩：当多个微服务之间互相调用时，a-b-c-d……，这就是所谓的“扇出”，当某个微服务不管用，对a就会占用越来越多的资源，进而引起系统崩溃，雪崩</li><li>它是一个用于处理分布式的延迟和容错，当出现问题时不会导致级联故障，而是返回一个符合预期的备选响应，提高分布式弹性</li><li>服务降级：当服务繁忙时，不能一直等待，会返回客户端一个备选方案<ol><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池打满</li><li>宕机</li></ol></li><li>服务熔断：当服务出现问题，出现故障，先关闭对此服务的访问，防止级联故障，再调用服务降级，最后恢复</li><li>服务限流：当并发量增大，限制访问的请求数量</li></ol><h3 id="使用服务降级"><a href="#使用服务降级" class="headerlink" title="使用服务降级"></a>使用服务降级</h3><h4 id="创建服务提供者模块（测试服务降级用）"><a href="#创建服务提供者模块（测试服务降级用）" class="headerlink" title="创建服务提供者模块（测试服务降级用）"></a>创建服务提供者模块（测试服务降级用）</h4><ol><li>cloud-hystrix-pay-8007</li><li>pom</li><li>yml</li><li>主启动（@EnableEurekaClient）</li><li>service（正常访问方法、睡3秒方法）</li><li>controller</li><li>压力测试JMeter（还没有加入hystrix服务降级）</li></ol><h4 id="创建消费者模块（测试服务降级用）"><a href="#创建消费者模块（测试服务降级用）" class="headerlink" title="创建消费者模块（测试服务降级用）"></a>创建消费者模块（测试服务降级用）</h4><ol><li><p>cloud-hystrix-order-80</p></li><li><p>pom</p></li><li><p>yml</p></li><li><p>主启动（@EnableFeignClients）</p></li><li><p>远程调用接口（@FeignClient(value=”服务名”)）</p></li><li><p>controller（调用接口）</p></li><li><p>压力测试</p><p>出现问题：2W并发之后，消费者的访问速度变慢</p></li></ol><p><strong>解决方案</strong></p><ol><li>超时：不再等待</li><li>出错（宕机或运行出错）：兜底</li></ol><h4 id="配置服务降级"><a href="#配置服务降级" class="headerlink" title="配置服务降级"></a>配置服务降级</h4><p>==<strong>一般服务降级,都是放在客户端</strong>==</p><p>==<strong>热部署对@HystrixCommand注解不太敏感，建议修改完重启服务</strong>==</p><p><strong>修改服务提供者payment模块</strong></p><ol start="0"><li><p>创建一个用于兜底的方法</p></li><li><p>为service的指定方法(会延迟的方法)添加@HystrixCommand注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentTimeOutFallbackMethod"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"3000"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3秒钟以内就是正常的业务逻辑</span><span class="token comment" spellcheck="true">//设定超时时间</span></code></pre></li><li><p>主启动类上,添加激活hystrix的注解@EnableCircuitBreaker</p></li><li><p>测试：</p><ol><li>设置方法时间&gt;设定时间</li><li>设置异常</li></ol></li></ol><p><strong>修改消费者order模块</strong></p><ol><li><p>修改yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200920150237.png" alt="hystrix1"></p></li><li><p>主启动类添加注解,启用hystrix，@EnableHystrix</p></li><li><p>修改controller,添加要测试的降级方法和相关注解</p></li><li><p>测试</p><ol><li>设置方法时间&gt;设定时间</li><li>设置异常</li><li>这里pay模块和order模块都开启了服务降级，但服务提供者3秒，消费者设置为1.5秒，一定会被降级</li></ol></li></ol><p><strong>出现的问题</strong></p><ol><li>每个业务方法都写了一个降级方法,重复代码多</li><li>降级方法与业务方法写在了一块,耦合度高</li></ol><p>解决1：</p><p><strong>配置一个全局的降级方法,所有方法都可以走这个降级方法,至于某些特殊创建,如上述的一样再单独创建方法</strong></p><ol><li><p>消费者模块创建一个全局方法</p></li><li><p>在类上使用注解指定其为全局降级方法(默认降级方法)</p><p>@DefaultProperties(defaultFallback=”定义的全局方法”)</p></li><li><p>在方法上加注解@HystrixCommand，不用指定降级方法，使用默认全局</p></li><li><p>测试</p></li></ol><p>解决2：</p><p>修改消费者模块</p><ol><li><p>创建一个类实现远程接口,在实现类中统一处理异常</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200920154351.png" alt="h1"></p></li><li><p>修改配置文件:添加:</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200920150237.png" alt="hystrix1"></p></li><li><p>接口中注解增加fallback属性，让PayService的实现类生效:</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200920154225.png" alt="h2"></p></li></ol><p>它的运行逻辑是:<br>        当请求过来,首先还是通过Feign远程调用pay模块对应的方法，但是如果pay模块报错(宕机，无法调用),调用失败,那么就会调用PayMentFalbackService类的当前同名的方法,作为降级方法</p><ol start="4"><li><p>测试：</p><p>启动正常访问后，关闭服务提供者，消费者再次访问，转向fallback方法</p></li></ol><p><strong>这样虽然解决了代码耦合度问题,但是又出现了过多重复代码的问题,每个方法都有一个降级方法</strong></p><h3 id="使用服务熔断"><a href="#使用服务熔断" class="headerlink" title="使用服务熔断"></a>使用服务熔断</h3><p>当达到最大访问次数时,出现问题概率大，拒绝访问，拉闸，调用降级的方法</p><p>机制：当某个服务不可用或响应时间太长，熔断该微服务，快速返回错误响应信息，当检测到恢复正常，再恢复调用链路</p><p>如：当失败调用到一定阈值，5秒内20次调用失败，就会启动熔断机制，熔断机制是注解@HystrixCommand</p><p><strong>修改服务提供者模块</strong></p><ol><li><p>修改Payservice接口,添加服务熔断相关的方法:</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200920160927.png" alt="r1"></p><p>10秒之内(窗口,会移动),如果并发==超过==10个,或者10个并发中,失败了6个,就开启熔断器</p><p>IdUtil是Hutool包下的类,这个Hutool就是整合了所有的常用方法,比如UUID,反射,IO流等工具方法什么的都整合了</p><p>断路器的打开和关闭,是按照一下5步决定的</p><ol><li>并发此时是否达到我们指定的阈值（默认10秒20次请求），到了阈值才有资格熔断</li><li>错误百分比,比如我们配置了60%（默认10秒50%请求）,那么如果并发请求中,10次有6次是失败的,就开启断路器</li><li>上面的两个条件符合,断路器改变状态为open(<strong>开启</strong>)，拉闸</li><li>这个服务的断路器开启,所有请求无法访问</li><li>熔断之后，开启休眠时间窗（默认5秒），此时只会执行降级逻辑，休眠时间窗结束之后，尝试让一些请求通过(<strong>半开状态half Open</strong>),如果请求还是失败,证明断路器还是开启状态,服务没有恢复，如果请求成功了,证明服务已经恢复,断路器状态变为close<strong>关闭</strong>状态，恢复</li></ol></li></ol><p><strong>其他参数</strong>：见脑图</p><h3 id="服务限流（sentinel会详说）"><a href="#服务限流（sentinel会详说）" class="headerlink" title="服务限流（sentinel会详说）"></a>服务限流（sentinel会详说）</h3><h3 id="Hystrix服务监控"><a href="#Hystrix服务监控" class="headerlink" title="Hystrix服务监控:"></a>Hystrix服务监控:</h3><p>一个图形化界面的实时监控平台</p><p><strong>使用</strong>：</p><ol><li><p>创建监控平台模块（需要创建模块，比较麻烦，后面sentinel不需要）</p><p>cloud_hystrixdashboard_9001</p></li><li><p>pom文件（导入依赖dashboard）</p></li><li><p>配置文件</p><p>server: port:9001</p></li><li><p>主启动类@EnableHystrixDashboard</p></li><li><p>修改需要监控的模块（8001，8002）</p><ol><li><p>增加pom依赖（以前都增加有）</p><p>actuator，这个是springboot的监控组件</p></li></ol></li><li><p>启动</p><p>访问: <strong>localhost:9001/hystrix</strong></p><p>注意,此时仅仅是可以访问HystrixDashboard,并不代表已经监控了8001,8002</p></li><li><p>如果要监控,还需要配置:(8001为例)</p><ol><li><p>8001主启动类添加</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200920173822.png"></p><p><strong>其他8002,8003都是一样的</strong></p></li></ol></li><li><p>启动服务7001，8001，9001</p></li><li><p>然后在web界面,指定9001要监控8001:</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200920173933.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200920174000.png"></p></li></ol><h2 id="GateWay服务网关"><a href="#GateWay服务网关" class="headerlink" title="GateWay服务网关"></a>GateWay服务网关</h2><p>zuul停更了</p><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>GateWay是Spring生态系统上构建的API网关服务，替代了zuul，基于WebFlux框架，而WebFlux框架底层使用了高性能的Reactor模式通信框架Netty。</p><p><strong>gateway之所以性能好,因为底层使用WebFlux,而webFlux底层使用netty通信(NIO)</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921082820.png"></p><p><strong>特性</strong>：动态路由（能匹配任何请求），可对路由指定断言、过滤器，集成断路器、SpringCloud服务发现，请求限流</p><p><strong>GateWay与zuul的区别:</strong></p><ol><li>Zuul1是基于Sevlet2.5使用<strong>阻塞架构</strong>，每次IO操作都从工作线程中选一个执行，请求线程会阻塞到工作线程完成，性能较差</li><li>gateWay使用<strong>非阻塞API</strong>，建立在spring5， project Reactor和spring boot2之上</li></ol><p><strong>路由</strong>：构建网关的基本模块，它由ID，目标URI，一系列断言和过滤器组成，通过断言为true则匹配该路由</p><p>即根据某些规则，将请求转发给指定服务</p><p><strong>断言</strong>：开发人员可以通过http请求中的内容，与断言相匹配则可以进行路由</p><p><strong>过滤</strong>：在路由的前后对请求进行修改</p><p><strong>工作流程</strong>：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921084504.png"></p><p><strong>就是路由转发+执行过滤器链</strong></p><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><ol><li><p>新建网关模块GateWay</p><p>cloud_gateway_9527</p></li><li><p>pom（引入网关依赖gateWay）</p></li><li><p>yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921143943.png"></p></li><li><p>主启动</p></li><li><p>根据服务提供者模块，设置路由网关</p><p>我们不想暴露8001端口，所以在8001上套了一层9527</p><ol><li><p>修改网关的yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921143857.png"></p></li></ol><p>意思就是：</p><p>当访问localhost:9527/payment/get/1时,     </p><p>路由到localhost:8001/payment/get/1</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921144047.png"></p></li></ol><p><strong>以上是配置文件配置，也可以用硬编码配置，比较麻烦所以还是选择配置文件的方式</strong></p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>默认情况gateWay会根据服务中心的服务列表，以微服务名为路径创建动态路由进行转发</p><p><strong>使用</strong>：</p><ol><li><p>需要1个服务器、两个微服务提供者</p></li><li><p>修改网关yml文件（开启路由功能，修改路由地址）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921145814.png"></p></li><li><p>启动微服务，进行测试</p></li></ol><h3 id="Pridicate断言"><a href="#Pridicate断言" class="headerlink" title="Pridicate断言"></a>Pridicate断言</h3><p><strong>相当于网关的规则，满足了这些规则，找到对应的路由</strong></p><p>其中<code>predicates:path=/payment/get/**</code>就是一个断言</p><p>这个断言表示,如果外部访问路径是指定路径,就路由到指定微服务上</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921151640.png"></p><ol><li>After:只有在指定时间后,才可以路由到指定微服务</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921152144.png"></p><ol start="2"><li><p>before:在指定时间前访问</p></li><li><p>between:需要指定两个时间，在这之间的时间可以访问</p></li><li><p>cookie:只有包含某些指定cookie（key,value）的请求才可以路由</p><ul><li>需要由两个参数，key名，value值</li></ul></li><li><p>Header:只有包含指定请求头的请求,才可以路由</p><ul><li>需要两个参数，header名，正则表达式，如：x-Request-id，\d+ 正整数</li></ul></li><li><p>host:只有指定主机的才可以访问，如：Host=**.shangguigu.com</p><ol><li>测试：curl <a href="http://localhost:9527/paymentinfo">http://localhost:9527/paymentinfo</a> -H “host:<a href="http://www.shangguigu.com&quot;/">www.shangguigu.com"</a></li><li><strong>curl是命令行发送请求的方式，postman可视化图形界面的底层就是使用这个</strong></li></ol></li><li><p>method:只有指定请求才可以路由,比如get请求…</p><ol><li>Method=GET</li></ol></li><li><p>path:只有访问指定路径,才进行路由</p></li><li><p>Query:必须带有请求参数才可以访问，</p><ol><li>需要两个参数，参数名，正则表达式，如：Query=username,\d+</li><li>localhost:9527?username=123</li></ol></li></ol><h3 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h3><p><strong>种类</strong>：</p><p>GatewayFilter：单一的过滤器，与断言类似（怎么加看官网）</p><p>GlobalFilter：全局过滤器</p><p><strong>自定义过滤器</strong>（全局，常用）</p><ol><li><p>自己创建一个过滤器类，实现两个接口 GlobalFilter,Ordered</p><p><strong>必须加入容器，实现接口</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921154404.png"></p><p>意思：必须带有参数uname的，如果没有就过滤掉</p></li><li><p>启动测试</p></li></ol><h2 id="Config服务配置"><a href="#Config服务配置" class="headerlink" title="Config服务配置"></a>Config服务配置</h2><p>问题：每个微服务都需要一个配置文件,并且,如果有几个微服务都需要连接数据库，那么就需要配4次数据库相关配置,并且当数据库发生改动,那么需要同时修改4个微服务的配置文件才可以</p><p><strong>概念</strong>：为微服务架构中的微服务提供集中化外部配置支持，配置服务器为各个不同的微服务应用的所有环境提供了中心化的外部配置</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921155642.png"></p><p>分为服务端和客户端。</p><p>服务端就是分布式配置中心，是一个独立的微服务应用，默认采用git存储配置信息</p><p>客户端是启动时在配置中心获取加载配置信息</p><p><strong>作用</strong>：</p><ol><li>集中管理配置</li><li>动态化配置更新</li><li>不同环境不同配置</li><li>将配置信息以Rest接口的形式暴露（通过controller获取配置信息）</li></ol><h3 id="使用配置中心（服务端）"><a href="#使用配置中心（服务端）" class="headerlink" title="使用配置中心（服务端）"></a>使用配置中心（服务端）</h3><ol><li><p>使用github作为配置中心的仓库</p><p><strong>初始化git环境:</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921162559.png"></p></li><li><p>新建config服务端模块</p><ol><li>pom(引入config-server依赖)</li><li>yml配置文件</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921162617.png"></p><ol start="3"><li><p>主启动（@EnableConfigServer开启配置中心服务端）</p></li><li><p>修改本地hosts</p><p>为了输入url时localhost直接等于config-3344.com</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921162733.png"></p></li><li><p>测试</p><p>启动3344    (要先启动eureka)</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921162928.png"></p></li></ol></li></ol><p><strong>读取配置文件的规则</strong></p><ol><li></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921192655.png"></p><ol start="2"><li></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921192848.png"></p><h3 id="使用配置中心（客户端）"><a href="#使用配置中心（客户端）" class="headerlink" title="使用配置中心（客户端）"></a>使用配置中心（客户端）</h3><ol><li><p>创建config客户端项目</p><p>cloud-config-client-3355</p></li><li><p>pom(引入config依赖)</p></li><li><p>yml配置文件</p><p>注意：这个配置文件就不是application.yml，bootstrap.yml</p><p>这个配置文件的作用是,先到配置中心加载配置,然后加载到application.yml中</p><p>因为bootstrap具有高优先级，保证不会被本地配置覆盖，负责从外部源加载配置文件，两个上下文实现共享</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921195513.png"></p></li><li><p>主启动类（@EnableEurekaClient，这里没有配置客户端的注解）</p></li><li><p>controller</p><p>这就是上面提到的rest风格将配置对外暴露</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921195502.png"></p><p>如果客户端运行正常,就会读取到github上配置文件的属性<code>config.info</code>的值</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921195523.png"></p></li><li><p>测试：</p><p>启动3344，3355</p><p>访问3355的 /configInfo</p></li></ol><p>问题：如果配置修改，3344仍然能获得最新配置，但是3355却不能动态刷新</p><h3 id="实现动态刷新"><a href="#实现动态刷新" class="headerlink" title="实现动态刷新"></a>实现动态刷新</h3><ol><li><p>修改3355，增加pom依赖actuator监控</p></li><li><p>修改配置文件，增加一个配置</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921201235.png"></p></li><li><p>修改controller（@RefreshScope）</p></li><li><p>需要<strong>外部</strong>发送post请求通知3355</p><p><code>curl -X POST "http://localhost:3355/actuator/refresh"</code></p></li><li><p>刷新测试是否更换为最新配置</p></li></ol><p>问题：如果由多个客户端，每个都需要通知会很麻烦，所以需要广播，这就引出了Bus消息总线</p><h2 id="SpringCloud-Bus-消息总线"><a href="#SpringCloud-Bus-消息总线" class="headerlink" title="SpringCloud Bus 消息总线"></a>SpringCloud Bus 消息总线</h2><p>它是将分布式系统的节点与轻量级消息系统链接起来的框架</p><p>目前支持RabbitMQ和Kafka</p><p><strong>设计思想</strong>：</p><ol><li><p>消息发给客户端，它能让其在其它客户端间传播</p></li><li><p>也可以将消息发给config配置中心，一次性广播给其他客户端</p></li></ol><ul><li>发给配置中心更合理，第一种破坏了业务模块职责的单一性，破坏了服务个节点的对等性</li></ul><p><strong>概念</strong>：在微服务架构中，通常会使用消息代理构建一个共有的主题，让所有微服务实例都订阅，该主题产生的消息也会被监听和消费，所以它为消息总线。</p><p><strong>原理</strong>：configClient实例都监听同一个主题，当一个服务刷新数据，它会把消息放在主题中，其他实例就能得到通知，然后更新自身的配置</p><h3 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h3><ol><li><p><strong>配置RabbitMQ环境</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921210902.png"></p></li><li><p>为演示多个通知，多创建一个配置中心客户端</p><p>==<strong>复制3355即可,创建为3366</strong>==</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921205750.png"></p><p>全部复制3355的即可</p></li><li><p>使用Bus实现全局广播</p><ul><li>配置3344(配置中心服务端)</li></ul><ol><li><p>修改yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921205854.png"></p></li><li><p>添加pom</p><p>springboot的监控组件actuator,和消息总线整合rabbitmq:bus-amqp</p></li></ol><ul><li>修改3355（配置中心的客户端1）</li></ul><ol><li><p>增加pom</p><p>springboot的监控组件actuator,和消息总线整合rabbitmq:bus-amqp</p></li><li><p>修改yml文件（注意客户端的配置文件都交bootstrap）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921210757.png"></p></li></ol><ul><li>修改3366（配置中心的客户端2）</li></ul><ol><li>和上面的步骤一样</li></ol><ul><li><p>测试：</p><p>启动7001（注册中心），3344（配置中心服务器），3355，3366（配置中心客户端）</p><p>修改github的配置文件</p><p><strong>因为我们采用的是发送通知给服务器，再广播给客户端的方式，所以要给3344发消息</strong></p><p><code>curl -X POST "http://localhost:3344/actuator/bus-refresh"</code></p></li></ul><p><strong>原理</strong>：所有客户端都监听了一个rabbitMq的topic,我们将信息放入这个topic,所有客户端都可以送到,从而实时更新</p></li></ol><h3 id="配置定点通知"><a href="#配置定点通知" class="headerlink" title="配置定点通知"></a>配置定点通知</h3><p>只通知部分服务，其他服务不受影响</p><p><code>http://localhost:3344/actuator/bus-refresh/微服务名:端口号</code></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200921212048.png"></p><h2 id="Spring-Cloud-Stream消息驱动"><a href="#Spring-Cloud-Stream消息驱动" class="headerlink" title="Spring Cloud Stream消息驱动"></a>Spring Cloud Stream消息驱动</h2><p>问题：一个项目中可能有后端–&gt;大数据，如果后端用的是RabbitMq，大数据用的是kafka，就会导致经常切换，影响使用，学习负担重</p><p><strong>Spring Cloud Stream就类似jpa,屏蔽底层消息中间件的差异（比如kafka有topic，rabbitMq有exchange）,降低切换成本，统一消息编程模型，程序员主要操作Spring Cloud Stream即可</strong>，不需要管底层是kafka还是rabbitMq</p><p>应用程序通过**inputs(生产者)，outputs(消费者)**与stream中的binder对象交互，我们主要操作binder对象与底层mq交互即可。</p><ul><li><p>如何屏蔽底层差异？</p><p>由于不同的消息中间件实现细节有较大差异，定义的绑定器作为中间层，实现了应用程序与消息中间件之间的隔离，通过程序暴露统一的channel通道，让应用程序不再需要与消息中间件交互</p></li></ul><p><strong>业务流程</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922113702.png"></p><p>source用于获取数据(要发送到mq的数据)<br>channel类似SpringCloudStream中的中间件,用于存放source接收到的数据,或者是存放binder拉取的数据    </p><p><strong>常用api和注解</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922114245.png"></p><h3 id="使用SpringCloudStream"><a href="#使用SpringCloudStream" class="headerlink" title="使用SpringCloudStream"></a>使用SpringCloudStream</h3><p>创建3个模块，1个生产者，2个消费者</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922164520.png"></p><h4 id="生产者创建"><a href="#生产者创建" class="headerlink" title="生产者创建"></a>生产者创建</h4><ol><li><p>pom(stream-rabbit)</p></li><li><p>yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922164755.png"></p><p>设置stream中rabbitmq配置，之后绑定这个配置</p></li><li><p>主启动</p></li><li><p>service和实现类</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922165101.png"></p><p><strong>这里,就会调用send方法,将消息发送给channel,</strong></p><p><strong>然后channel通过上述的配置文件信息将消费发送给binder,然后发送到rabbitmq中</strong></p></li><li><p>controller</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922165246.png"></p></li><li><p>测试：</p><p><strong>启动rabbitmq</strong></p><p><strong>启动7001,8801</strong></p><p>打开rabbitmq的web界面，看到创建出来的管道Exchange（在kafka里叫做主题topic）,就是我们配置文件中配置的exchange</p><p><strong>访问8801的/sendMessage</strong></p><p>看到消息已经发送到mq中</p></li></ol><h4 id="消费者创建"><a href="#消费者创建" class="headerlink" title="消费者创建"></a>消费者创建</h4><ol><li><p>pom文件（stream-rabbit）</p></li><li><p>yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922170845.png"></p></li><li><p>主启动类</p></li><li><p>业务类（消费数据）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922170910.png"></p><p><strong>生产者发送消息时,使用send方法发送,send方法发送的是一个个Message,里面封装了数据</strong></p><p>所以接收时也要使用Message<string>来接收</string></p></li><li><p>测试</p><p>启动7001，8801，8802</p><p><strong>使用生产者生产消息</strong>，消费者已经接收到消息</p></li></ol><h4 id="创建消费者2"><a href="#创建消费者2" class="headerlink" title="创建消费者2"></a>创建消费者2</h4><p>创建8003，和8002一摸一样，只是端口号不同，为了演示重复消费等问题</p><p>问题：重复消费，当生产者生产一条消息，8002/8003都消费到了同一条数据</p><p>原因：<strong>没有分组，不同组是可以重复消费的，同一个组中的多个消费者是竞争关系，能保证消息只会被其中一个消费者消费一次</strong></p><h4 id="自定义分组（解决重复消费）"><a href="#自定义分组（解决重复消费）" class="headerlink" title="自定义分组（解决重复消费）"></a>自定义分组（解决重复消费）</h4><p><strong>修改8802,8803的配置文件</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922172928.png"></p><p>将8802，8803都分到A组</p><p>重启这两个消费者，生产消息，会发现没有重复消费</p><p><strong>持久化问题</strong>：</p><p>当服务（消费者）挂掉，怎么消费生产者生产还没有消费的数据？</p><p>结论：<strong>只要加上group分组，当下次重启之后，就会自动获取未消费的消息继续消费</strong></p><h2 id="Spring-Cloud-Sleuth链路追踪"><a href="#Spring-Cloud-Sleuth链路追踪" class="headerlink" title="Spring Cloud Sleuth链路追踪"></a>Spring Cloud Sleuth链路追踪</h2><p>问题：在微服务框架中，客户端发送的请求在后端系统可能会经过很多服务节点，我们可以通过链路追踪查看都调用了哪些服务</p><p>sleuth就是用于追踪每个请求的整体链路</p><p><strong>原理</strong>：</p><p>Trace ID：一条链路的唯一标识</p><p>Span ID：一次请求的唯一标识</p><p>Parent ID：上一次请求的唯一标识</p><p>在经过一次请求时，sleuth会记录下各种ID，最后连接起来</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922175112.png"></p><h3 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h3><ol><li><p>安装zipkin（图形化展示链路）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922174950.png"></p><ol><li>运行jar包 <code>java -jar xxxx.jar</code></li><li><strong>然后就可以访问web界面,  默认zipkin监听的端口是9411</strong><code>localhost:9411/zipkin/</code></li></ol></li><li><p>使用sleuth</p><ol><li><p>修改8001的pom（zipkin）</p><p>这个包虽然叫zipkin但是,里面包含了zpikin与sleuth</p></li><li><p>修改yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922195310.png"></p></li><li><p>修改80的pom（一样）</p></li><li><p>修改yml配置文件（一样）</p></li></ol></li><li><p>测试</p><p>启动7001,8001,80</p><p><code>localhost:9411/zipkin/</code></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922195438.png"></p></li></ol><h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><p><strong>支持的功能</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922201639.png"></p><h2 id="Nacos注册中心-配置中心"><a href="#Nacos注册中心-配置中心" class="headerlink" title="Nacos注册中心+配置中心"></a>Nacos注册中心+配置中心</h2><p>Nacos=Eureka+config+bus</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>需要java8  和 Maven</p><ol><li><p>到github上下载安装包</p><p>解压安装包</p></li><li><p>启动Nacos<strong>（注册中心服务器）</strong></p><p>在bin下,进入cod</p><p>./startup.cmd</p></li><li><p>访问Nacos</p><p>Nacos默认监听8848</p><p>localhost:8848/nacos</p><p>账号密码:默认都是nacos</p></li></ol><h3 id="使用注册中心"><a href="#使用注册中心" class="headerlink" title="使用注册中心"></a>使用注册中心</h3><h4 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h4><p>注册中心服务器已经不需要我们手写，Nacos启动就是服务器</p><ol><li><p>创建服务提供者模块cloudalibaba-pay-9001</p></li><li><p>改pom</p><ol><li>父工程alibaba-dependencies</li><li>alibaba-nacos-discovery</li></ol></li><li><p>yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922205153.png"></p></li><li><p>主启动类@EnableDiscoveryClient</p></li><li><p>controller</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922205220.png"></p></li><li><p>测试</p><p>启动nacos，9001服务提供者</p><p>查看web界面，看看9001是否注册成功</p></li></ol><h4 id="创建服务提供者2（测试负载均衡）"><a href="#创建服务提供者2（测试负载均衡）" class="headerlink" title="创建服务提供者2（测试负载均衡）"></a>创建服务提供者2（测试负载均衡）</h4><p>直接复制上面的9001即可</p><h4 id="创建消费者模块"><a href="#创建消费者模块" class="headerlink" title="创建消费者模块"></a>创建消费者模块</h4><ol><li><p>cloudalibaba-order-83</p></li><li><p>Pom（alibaba-nacos-discovery）</p><p>因为内部集成了Ribbon，所以自带负载均衡功能</p></li><li><p>yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922204802.png"></p></li><li><p>主启动类@EnableDiscoveryClient</p></li><li><p>配置类</p><p>因为Naocs要使用Ribbon进行负载均衡,那么就需要使用RestTemplate</p><p><strong>@LoadBalanced开启负载均衡</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922204932.png"></p></li><li><p>controller</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922205029.png"></p></li><li><p>测试</p><p>启动83消费者，访问9001,9002，负载均衡</p></li></ol><p><strong>Nacos与其他服务注册的对比</strong></p><p>Nacos它既可以支持CP,也可以支持AP,可以切换</p><p>一般来说，不需要存储服务级别的，用AP，高可用而削弱了一致性，临时实例</p><p>需要服务级别编辑或存储配置信息，CP是必须的，持久化实例</p><p>用于切换模式</p><p><code>curl -X PUT '$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP'</code></p><h3 id="使用配置中心"><a href="#使用配置中心" class="headerlink" title="使用配置中心"></a>使用配置中心</h3><p>在项目初始化后，要保证从配置中心进行配置拉取，拉取配置之后，才能保证下项目正常启用</p><h4 id="创建配置中心的客户端模块"><a href="#创建配置中心的客户端模块" class="headerlink" title="创建配置中心的客户端模块"></a>创建配置中心的客户端模块</h4><p>cloudalibaba-Nacos-config-client-3377</p><ol><li><p>pom</p><ol><li>alibaba-nacos-config</li><li>alibaba-nacos-discovery</li></ol></li><li><p>yaml配置文件</p><p>这里需要配置两个配置文件,application.yml和bootstrap.yml（通用配置）</p><p>主要是为了可以与spring clodu config无缝迁移</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922212217.png"></p></li><li><p>主启动类@EnableDiscoveryClient</p></li><li><p>controller</p><p>@RefreshScope支持动态刷新</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922230813.png"></p></li><li><p><strong>在Nacos添加配置信息</strong></p><p>Nacos的配置规则：</p><p>就是我们在客户端如何指定读取配置文件,配置文件的命名的规则</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922231143.png"></p><p>prefix:</p><p><strong>默认就是当前服务的服务名称</strong>,也可以通过spring.cloud.necos.config.prefix配置</p><p>spring.profile.active：</p><p>就是我们在application.yml中指定的,当前是开发环境还是测试等环境，这个可以不配置,如果不配置,那么前面的 -  也会没有</p><p>file-extension：</p><p>就是当前文件的格式(后缀),目前只支持yml/yaml和properties</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922231413.png"></p><p><strong>在web页面上创建配置文件</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922231601.png"></p><p>Data ID：就是按照命名规则配置的名字</p></li><li><p>测试</p><p>重启配置文件模块客户端</p><p>访问controller,<code>localhost:3377/config/info</code></p><p>拿到配置文件的值</p><p><strong>这时我们已经自动开启了动态刷新，只要修改配置文件，客户端就会立即刷新，因为Nacos支持Bus总线，会自动发送命令更新所有客户端</strong></p></li></ol><h4 id="Nacos配置中心之分类配置"><a href="#Nacos配置中心之分类配置" class="headerlink" title="Nacos配置中心之分类配置:"></a>Nacos配置中心之分类配置:</h4><p>问题：实际开发中会为一个系统准备多个开发环境，也会有多个配置文件，为了区分读取配置文件，可以将配置进行分类读取</p><p>配置文件可以归为：Namespace（命名空间）+Group（组）+Data ID（开发环境）</p><p>默认情况：Namespace=public，Group=DEFAULT_GROUP,环境=DEFAULT</p><ol><li><p><strong>按照不同的DataId划分</strong></p><ol><li><p>在配置中心新建两个配置文件，DataID分为两个，dev,test</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922234152.png"></p></li><li><p>通过application.yml配置文件，实现多环境读取</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922234007.png"></p><p>此时,改为dev,就会读取dev的配置文件,改为test,就会读取test的配置文件</p><p>重启服务</p></li></ol></li><li><p><strong>按照不同的GroupID划分</strong></p><ol><li><p>直接在配置中心新建配置文件时指定组</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922234314.png"></p></li><li><p>在客户端配置,使用指定组的配置文件</p><p>bootstrap+application</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922234425.png"></p><p>重启服务</p></li></ol></li><li><p><strong>按照不同的namespace划分</strong></p><ol><li><p>创建新命名空间，在新命名空间中创建配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922234645.png"></p></li><li><p>客户端配置使用不同名称空间:</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200922235238.png"></p><p>重启服务</p></li></ol></li></ol><h3 id="Nacos集群和持久化配置"><a href="#Nacos集群和持久化配置" class="headerlink" title="Nacos集群和持久化配置:"></a>Nacos集群和持久化配置:</h3><p>Nacos默认有自带嵌入式数据库,derby,但是如果做集群模式的话,就不能使用自己的数据库</p><p>​            不然每个节点一个数据库,那么数据就不统一了,需要使用外部的mysql</p><p>Nacos采用了集中式存储方式来支持集群化部署，目前只支持MySQL的存储</p><ol><li><p>切换mysql数据库:</p><p>将默认的derby数据库切换为mysql数据库，<strong>要求数据库（5.6+）</strong></p></li><li><p>找到Nacos安装目录下的sql脚本，在Mysql中使用该脚本nacos-mysql.sql</p></li><li><p>修改Nacos安装目录下的安排application.properties,添加:</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span> <span class="token attr-name">db.num</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><span class="token attr-name">db.user</span><span class="token punctuation">=</span><span class="token attr-value">root    #可变</span><span class="token attr-name">db.password</span><span class="token punctuation">=</span><span class="token attr-value">123456    #可变</span></code></pre></li><li><p>此时可以重启nacos,那么就会改为使用我们自己的mysql</p><p>数据消失，证明已经切换成功</p></li></ol><h3 id="Linux上配置Nacos集群-Mysql数据库"><a href="#Linux上配置Nacos集群-Mysql数据库" class="headerlink" title="Linux上配置Nacos集群+Mysql数据库"></a>Linux上配置Nacos集群+Mysql数据库</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923083139.png"></p><p><strong>需要1个nginx，3个Nacos,1个Mysql</strong></p><ol><li><p>下载安装Nacos的Linux版安装包</p></li><li><p>进入安装目录,现在执行自带的sql文件(<strong>配置Mysql</strong>)</p><p>进入mysql,执行sql文件</p></li><li><p>修改配置文件,切换为我们的mysql(<strong>配置Nacos</strong>)</p><p>就是上面windos版要修改的几个属性(application.properties)</p></li><li><p>修改cluster.conf,指定哪几个节点是Nacos集群</p><p>这里使用3333,4444,5555作为三个Nacos节点监听的端口</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923091248.png"></p></li><li><p>设置端口启动</p><p>既然要在一个节点上启动不同Nacos实例,就要修改startup.sh,使其根据不同端口启动不同Nacos实例</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923091317.png"></p><p>可以看到,这个脚本就是通过jvm启动nacos</p><p>​        所以我们最后修改的结果就是,nohup java -Dserver.port=3344</p></li><li><p>启动Nacos集群</p><p>./startup.sh -p 3333</p><p>./startup.sh -p 4444</p><p>./startup.sh -p 5555</p></li><li><p><strong>配置Nginx:</strong></p><ol><li><p>修改nginx配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923091703.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923091852.png"></p></li><li><p>按照指定启动</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923092958.png"></p></li><li><p>测试</p><p>访问，自己虚拟机ip：1111</p><p>如果进入了nacos的Web界面，证明成功</p></li><li><p>将微服务注册进Nacos集群中</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923092958.png"></p></li><li><p>进去web界面，看是否注册成功</p></li></ol></li></ol><h2 id="Sentinel服务熔断、限流"><a href="#Sentinel服务熔断、限流" class="headerlink" title="Sentinel服务熔断、限流:"></a>Sentinel服务熔断、限流:</h2><p>Hystrix与Sentinel对比</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923100125.png"></p><h3 id="使用Sentinel"><a href="#使用Sentinel" class="headerlink" title="使用Sentinel"></a>使用Sentinel</h3><ol><li><p>下载Sentinel的jar包</p></li><li><p>运行sentinel</p><p>java -jar</p><p>注意：sentinel的默认端口为8080</p></li><li><p>访问sentinel</p><p>localhost:8080</p></li></ol><h3 id="微服务整合sentinel"><a href="#微服务整合sentinel" class="headerlink" title="微服务整合sentinel:"></a>微服务整合sentinel:</h3><ol><li><p>启动sentinel</p></li><li><p>新建模块8401，主要用于配置sentinel</p><ol><li><p>pom</p><ol><li>alibaba-nacos-discovery（主要）</li><li>sentinel-datasource-nacos</li><li>alibaba-sentinel(主要)</li><li>openfeign</li></ol></li><li><p>yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923100105.png"></p></li><li><p>主启动@EnableDiscoveryClient</p></li><li><p>controller</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923100219.png"></p></li><li><p>启动测试</p><p>注意：</p><p>sentinel是懒加载,需要我们执行一次访问,才会有信息</p><p>访问localhost/8401/testA，刷新控制台，即可看到</p></li></ol></li></ol><h3 id="sentinel的流控规则"><a href="#sentinel的流控规则" class="headerlink" title="sentinel的流控规则"></a>sentinel的流控规则</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923103637.png"></p><p><strong>流控模式</strong></p><ol><li><p>QPS直接快速失败（每秒请求数量达到阈值，直接失败，都不给分配线程）<strong>请求进不去服务内</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923103820.png"></p></li><li><p>线程数（当线程数达到阈值，直接失败，即都放进来，线程占满就不失败）<strong>进去服务内，超过阈值再失败</strong></p></li><li><p>关联（服务A关联服务B，当A达到阈值，B也会失败）</p><p>==应用场景:  比如<strong>支付接口</strong>达到阈值,就要限流下<strong>订单的接口</strong>,防止一直有订单==</p></li><li><p>链路（多个请求都来自同一个服务）</p></li></ol><p><strong>流控效果</strong></p><ol><li><p>预热Warm up:冷启动方式，当系统长期处于低水位（并发量小）情况下，流量突然增加，拉升到高水位，冷启动可以再一定时间内主键增加到阈值的上限。</p><p>起始阈值：阈值/冷加载因子（默认为3），</p><p>预热时长：在几秒后达到阈值</p><p>==应用场景：秒杀==</p></li><li><p>排队等待：让请求匀速通过，阈值类型必须是qps</p><p>如每秒通过1次请求，超过阈值也不会失败，进行排队等待，如果等待时长超过超时时间，再失败</p><p>==应用场景：一会并发量高，一会并发量低==</p></li></ol><h3 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h3><p><strong>熔断降级</strong>：在调用链路中某个资源不稳定，就对其进行限制，让请求快速失败，避免级联错误</p><p><strong>Sentinel</strong>断路器没有半开状态</p><ol><li><strong>RT</strong>：秒级平均响应时间，表示请求处理要在规定时间内完成</li></ol><p>​        必须满足以下条件才能触发断路器：</p><p>​        1秒内超过5个请求（默认的）</p><p>​        响应时间&gt;平均响应时间（就是请求处理时间超过了规定的时间）</p><ol start="2"><li><strong>异常比例</strong>：每秒异常总数的比例超过异常比例阈值</li></ol><p>​        1秒内超过5个请求（默认的）</p><p>​        ==如果没有触发熔断条件，就会正常抛出异常==</p><ol start="3"><li><strong>异常数</strong>：1分钟内异常数大于阈值</li></ol><p>​        1秒内超过5个请求（默认的）</p><p>​        <strong>时间窗口要超过60秒</strong></p><h3 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h3><p>热点即经常访问的数据，很多时候某个热点数据访问频次很高，需要我们进行限制</p><p>如：商品ID作为参数，我们就要根据商品的ID进行限制</p><p><strong>如何自定义降级方法,而不是默认的抛出异常</strong></p><p>使用**@SentinelResource**直接实现降级方法,它等同Hystrix的@HystrixCommand</p><p>value：随意取，即热点的资源名</p><p>blockHandler：指定的降级方法，跳转自定义的页面</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923132107.png"></p><blockquote><p>注意：当没有设置blockHandler降级方法时，会向前台抛异常</p></blockquote><p><strong>定义热点规则</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923132242.png"></p><p>参数索引从0开始，0就是代表第一个参数</p><p>这个意思就是：当传递的参数每秒频次超过1，就会调用降级方法。但是我们访问<strong>其他参数</strong>没有问题</p><p><strong>设置参数例外项</strong></p><p>专门设定某个参数的值为几的，有专门的限流阈值处理</p><p>如：参数p1的值为5，限流阈值为200，即p1其他值受单机阈值1的影响，而5受200的影响</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923132736.png"></p><blockquote><p>注意：如果请求中有异常，就不会走降级的方法，它只会抛出异常，因为这个方法只是设置热点规则，没有对异常处理的机制。</p></blockquote><h3 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h3><p>系统自适应限流:从整体维度对应用入口进行限流</p><p>就是大门口，根据整个系统的情况来限流</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923133633.png"></p><h3 id="SentinelResource注解"><a href="#SentinelResource注解" class="headerlink" title="@SentinelResource注解:"></a>@SentinelResource注解:</h3><p><strong>用于配置降级</strong></p><ol><li><p>搭建环境</p></li><li><p>为8401添加依赖</p><p>添加我们自己的common包的依赖</p></li><li><p>额外创建一个controller类</p><p><strong>blockHandler如果不设置，就弹出系统默认的降级页面</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923135202.png"></p></li><li><p>设置限流</p><p><strong>==注意,我们这里配置规则,资源名指定的是@SentinelResource注解value的值,也可以时访问路径==</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923135501.png"></p></li><li><p>测试</p><p>问题：当8401服务被关闭后，定义的限流规则就没有了，因为是临时的</p></li></ol><p><strong>可以看到,上面配置的降级方法,又出现Hystrix遇到的问题了</strong></p><p>​            降级方法与业务方法耦合</p><p>​            每个业务方法都需要对应一个降级方法</p><h3 id="自定义限流处理逻辑"><a href="#自定义限流处理逻辑" class="headerlink" title="自定义限流处理逻辑"></a>自定义限流处理逻辑</h3><ol><li><p>单独创建一个类，用于处理限流兜底</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923135656.png"></p></li><li><p>在controller中,指定使用自定义类中的方法作为降级方法</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923135734.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923140129.png"></p></li><li><p>测试</p></li></ol><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><p><strong>一般服务熔断是用在消费者模块，对其进行降级、限流等操作</strong></p><ol><li><p>配置环境</p><ol><li><p><strong>启动nacos和sentinel</strong></p></li><li><p>新建两个服务提供者模块  9003和9004（配置一样）</p><p>cloudalibaba-provider-payment9003/9004</p><ol><li><p>pom</p></li><li><p>yml</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923150235.png"></p></li><li><p>主启动@EnableDiscoveryClient</p></li><li><p>controller</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923150307.png"></p><p>启动9003，9004</p></li></ol></li><li><p>新建消费者模块</p><p>cloudalibaba-consumer-payment-84</p><ol><li><p>pom</p></li><li><p>yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923145732.png"></p></li><li><p>主启动类@EnableDiscoveryClient</p></li><li><p>RestTemplate配置类</p></li><li><p>controller</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923150203.png"></p></li></ol></li></ol></li><li><p><strong>为业务方法(消费者)增加fallback来指定降级方法</strong>（处理java异常）</p><p>重启order（因为热部署对java代码敏感，对于注解不是很敏感，建议重启）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923150125.png"></p><p> ==所以,fallback是用于管理异常的,当业务方法发生异常,可以降级到指定方法==</p></li><li><p><strong>为业务方法添加blockHandler,看看是什么效果</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923151418.png"></p><p> 可以看到.,直接报错了,并没有降级</p><p>也就是说,==blockHandler只负责sentienl定义的规则降级==</p></li><li><p><strong>fallback和blockHandler都配置</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923150644.png"></p><p>测试：</p><p>设置限流，会发现当两个都同时生效时,==blockhandler优先生效==</p></li><li><p><strong>@SentinelResource还有一个属性,exceptionsToIgnore</strong></p><p>忽略异常，指定一个异常，如果出现了该异常不会走降级方法，直接向用户抛出异常</p></li></ol><h3 id="sentinel整合ribbon-openFeign-fallback"><a href="#sentinel整合ribbon-openFeign-fallback" class="headerlink" title="sentinel整合ribbon+openFeign+fallback"></a>sentinel整合ribbon+openFeign+fallback</h3><ol><li><p>修改消费者84模块,使其支持feign</p><ol><li><p>pom(openfeign)</p></li><li><p>yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923153459.png"></p></li><li><p>主配置类（@EnableFeignClients）</p></li><li><p>创建远程调用服务提供者模块的接口</p></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923153759.png"></p><ol start="8"><li><p>测试：</p><p>启动9003服务提供者，84消费者</p><p>当关闭9003时，如果没有排除异常，而是被调用了降级方法，则为成功</p></li></ol></li></ol><h3 id="sentinel持久化规则"><a href="#sentinel持久化规则" class="headerlink" title="sentinel持久化规则"></a>sentinel持久化规则</h3><p>默认规则是临时存储的,重启sentinel就会消失</p><p>将限流配置规则持久化进Nacos保存，只要刷新服务的某个rest地址，sentinel控制台的留空规则就能看到，只要Nacos里面的配置不删除，针对服务上的sentinel上的流控规则就持续有效</p><p><strong>这里以8401为例修改</strong></p><ol><li><p>pom（sentinel-datasource-nacos）</p></li><li><p>修改yml配置文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923155617.png"></p><p><strong>实际上就是指定,我们的规则要保证在哪个名称空间的哪个分组下，下次就在这个地方取出</strong></p><p>这里没有指定namespace, 但是是可以指定的</p><p>注意,这里的dataid要与8401的服务名一致</p><p>server-addr：nacos的地址</p><p>dataId：服务名</p><p>groupId：组名</p><p>data-type：数据类型</p><p>rule-type：flow(流控配置)</p></li><li><p>在nacos中创建一个配置文件</p><p><strong>dataId就是上面配置文件中指定的</strong>，这个就是持久化的配置</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200923160034.png"></p><p>==json中,这些属性的含义:==</p></li><li><p>启动8401，访问rest请求</p><p>可以看到sentinel已经读取到了规则</p><p>关闭8401后，规则就消失了，再次启动就会再读取到规则</p></li></ol><h2 id="Seata分布式事务"><a href="#Seata分布式事务" class="headerlink" title="Seata分布式事务"></a>Seata分布式事务</h2><p>是一个分布式事务的解决方案</p><p>一次业务操作需要多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</p><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924190513.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924190641.png"></p><h3 id="seata安装"><a href="#seata安装" class="headerlink" title="seata安装"></a>seata安装</h3><ol><li><p>下载安装seata的安装包，解压</p></li><li><p>修改file.conf（记得先备份）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924190826.png"></p></li><li><p>mysql建库建表</p><ol><li>上面指定了数据库名为seata，创建一个数据库名为seata</li><li>建表,在seata的安装目录下有一个db_store.sql,运行即可</li></ol></li><li><p>修改配置文件registry.conf</p><p>配置seata作为微服务,指定注册中心</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924201306.png"></p></li><li><p>启动</p><p>先启动nacos</p><p>再启动seata-server(运行安装目录下的,seata-server.bat)</p></li></ol><h3 id="搭建业务环境"><a href="#搭建业务环境" class="headerlink" title="搭建业务环境"></a>搭建业务环境</h3><blockquote><p>业务说明：</p><p>我们需要创建三个服务：订单服务，库存服务，账户服务</p><p>场景：</p><ol><li>当用户下单时，会再订单服务中创建一个订单，</li><li>然后通过远程调用库存服务扣减商品库存。</li><li>通过远程调用账户服务扣减账户余额，</li><li>最后在订单服务中修改订单状态为已完成</li></ol></blockquote><ol><li><p>创建三个数据库</p><ol><li>seata_order：存储订单数据库</li><li>seata_storage：存储库存数据库</li><li>seata_account：存储账户信息数据库</li></ol></li><li><p>创建对应的表</p><ol><li>t_order</li><li>t_storage</li><li>t_account</li></ol></li><li><p>创建回滚日志表,方便查看</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924201238.png"></p><p><strong>注意==每个库都要执行一次==这个sql,生成回滚日志表</strong></p></li><li><p>每个业务都创建一个微服务,也就是要有三个微服务,订单,库存,账户</p><p>==订单==,seta-order-2001</p><ol><li><p>pom</p><ol><li>alibaba-nacos-discovery</li><li>alibaba-seata(排除io.seata)</li><li>seata-all，用自己的Seata</li><li>openfeign</li></ol></li><li><p>yml配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>order<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 自定义事务组名称需要与seata-server中的对应,我们之前在seata的配置文件中配置的名字</span>        <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> fsp_tx_group    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 当前数据源操作类型</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment" spellcheck="true"># mysql驱动类</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/seata_order<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=GMT%2B8    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">io</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span> info<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath*<span class="token punctuation">:</span>mapper/*.xml</code></pre></li><li><p>创建配置文件file.conf</p><pre><code>transport {  # tcp udt unix-domain-socket  type = "TCP"  #NIO NATIVE  server = "NIO"  #enable heartbeat  heartbeat = true  #thread factory for netty  thread-factory {    boss-thread-prefix = "NettyBoss"    worker-thread-prefix = "NettyServerNIOWorker"    server-executor-thread-prefix = "NettyServerBizHandler"    share-boss-worker = false    client-selector-thread-prefix = "NettyClientSelector"    client-selector-thread-size = 1    client-worker-thread-prefix = "NettyClientWorkerThread"    # netty boss thread size,will not be used for UDT    boss-thread-size = 1    #auto default pin or 8    worker-thread-size = 8  }  shutdown {    # when destroy server, wait seconds    wait = 3  }  serialization = "seata"  compressor = "none"}service {  #vgroup-&gt;rgroup  # 事务组名称  vgroup_mapping.fsp_tx_group = "default"  #only support single node  default.grouplist = "127.0.0.1:8091"  #degrade current not support  enableDegrade = false  #disable  disable = false  #unit ms,s,m,h,d represents milliseconds, seconds, minutes, hours, days, default permanent  max.commit.retry.timeout = "-1"  max.rollback.retry.timeout = "-1"} client {  async.commit.buffer.limit = 10000  lock {    retry.internal = 10    retry.times = 30  }  report.retry.count = 5  tm.commit.retry.count = 1  tm.rollback.retry.count = 1} ## transaction log storestore {  ## store mode: file、db  #mode = "file"  mode = "db"   ## file store  file {    dir = "sessionStore"     # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions    max-branch-session-size = 16384    # globe session size , if exceeded throws exceptions    max-global-session-size = 512    # file buffer size , if exceeded allocate new buffer    file-write-buffer-cache-size = 16384    # when recover batch read size    session.reload.read_size = 100    # async, sync    flush-disk-mode = async  }   ## database store  db {    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.    datasource = "dbcp"    ## mysql/oracle/h2/oceanbase etc.    db-type = "mysql"    driver-class-name = "com.mysql.jdbc.Driver"    url = "jdbc:mysql://127.0.0.1:3306/seata"    user = "root"    password = "root"    min-conn = 1    max-conn = 3    global.table = "global_table"    branch.table = "branch_table"    lock-table = "lock_table"    query-limit = 100  }}lock {  ## the lock store mode: local、remote  mode = "remote"   local {    ## store locks in user's database  }   remote {    ## store locks in the seata's server  }}recovery {  #schedule committing retry period in milliseconds  committing-retry-period = 1000  #schedule asyn committing retry period in milliseconds  asyn-committing-retry-period = 1000  #schedule rollbacking retry period in milliseconds  rollbacking-retry-period = 1000  #schedule timeout retry period in milliseconds  timeout-retry-period = 1000} transaction {  undo.data.validation = true  undo.log.serialization = "jackson"  undo.log.save.days = 7  #schedule delete expired undo_log in milliseconds  undo.log.delete.period = 86400000  undo.log.table = "undo_log"} ## metrics settingsmetrics {  enabled = false  registry-type = "compact"  # multi exporters use comma divided  exporter-list = "prometheus"  exporter-prometheus-port = 9898} support {  ## spring  spring {    # auto proxy the DataSource bean    datasource.autoproxy = false  }}</code></pre></li><li><p>创建registry.conf</p><pre><code>registry {  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa  type = "nacos"   nacos {    #serverAddr = "localhost"    serverAddr = "localhost:8848"    namespace = ""    cluster = "default"  }  eureka {    serviceUrl = "http://localhost:8761/eureka"    application = "default"    weight = "1"  }  redis {    serverAddr = "localhost:6379"    db = "0"  }  zk {    cluster = "default"    serverAddr = "127.0.0.1:2181"    session.timeout = 6000    connect.timeout = 2000  }  consul {    cluster = "default"    serverAddr = "127.0.0.1:8500"  }  etcd3 {    cluster = "default"    serverAddr = "http://localhost:2379"  }  sofa {    serverAddr = "127.0.0.1:9603"    application = "default"    region = "DEFAULT_ZONE"    datacenter = "DefaultDataCenter"    cluster = "default"    group = "SEATA_GROUP"    addressWaitTime = "3000"  }  file {    name = "file.conf"  }} config {  # file、nacos 、apollo、zk、consul、etcd3  type = "file"   nacos {    serverAddr = "localhost"    namespace = ""  }  consul {    serverAddr = "127.0.0.1:8500"  }  apollo {    app.id = "seata-server"    apollo.meta = "http://192.168.1.204:8801"  }  zk {    serverAddr = "127.0.0.1:2181"    session.timeout = 6000    connect.timeout = 2000  }  etcd3 {    serverAddr = "http://localhost:2379"  }  file {    name = "file.conf"  }}</code></pre><p>实际上,就是要将seata中的我们之前修改的两个配置文件复制到这个项目下</p></li><li><p>主启动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> DataSourceAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//取消数据源的自动创建</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token comment" spellcheck="true">//使用openFeign的远程调用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeataOrderMain2001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SeataOrderMain2001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>entity类(也叫domain类)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用了lombok</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//状态码</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消息</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//json数据</span>    <span class="token keyword">public</span> <span class="token function">CommonResult</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long productId<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer count<span class="token punctuation">;</span>    <span class="token keyword">private</span> BigDecimal money<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//订单状态，0为创建中，1为已完结</span><span class="token punctuation">}</span></code></pre></li><li><p>service层</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建订单     */</span>    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"seata-storage-service"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里是远程调用的接口，真正方法在库存模块写，这个接口用来调用</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 减库存     * 这里是远程调用     */</span>    <span class="token comment" spellcheck="true">//传入产品id，商品的购买数量</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/storage/decrease"</span><span class="token punctuation">)</span>    CommonResult <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">)</span> Long productId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span> Integer count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"seata-account-service"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里是远程调用的接口，真正方法在账户模块写，这个接口用来调用</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 减余额     */</span>    <span class="token comment" spellcheck="true">//传入用户id，用户消费的金额</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/account/decrease"</span><span class="token punctuation">)</span>    CommonResult <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> Long userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> BigDecimal money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>ServiceImpl</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> OrderDao orderDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> AccountService accountService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> StorageService storageService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建订单->调用库存服务扣减库存->调用账户服务扣减账户余额->修改订单状态     * 简单说:     * 下订单->减库存->减余额->改状态     * GlobalTransactional seata开启分布式事务,异常时回滚,name保证唯一即可     * @param order 订单对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">///@GlobalTransactional(name = "fsp-create-order", rollbackFor = Exception.class)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1 新建订单</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->开始新建订单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDao<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2 扣减库存</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->订单微服务开始调用库存,做扣减Count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        storageService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->订单微服务开始调用库存,做扣减End"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3 扣减账户</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->订单微服务开始调用账户,做扣减Money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->订单微服务开始调用账户,做扣减End"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4 修改订单状态,从0到1,1代表已完成</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->修改订单状态开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->下订单结束了,O(∩_∩)O哈哈~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>dao层,也就是接口</p><blockquote><p>这里使用的是mapper映射，xml的方式</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 1 新建订单     */</span>    <span class="token keyword">int</span> <span class="token function">create</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 2 修改订单状态,从0改为1     */</span>    <span class="token comment" spellcheck="true">//传入用户id，状态为0</span>    <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> Long userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span> Integer status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> ==在resource下创建mapper文件夹,编写mapper.xml==</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--映射dao--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.eiletxie.springcloud.alibaba.dao.OrderDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--映射sql表和实例的属性，如果相同就不需要写--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.eiletxie.springcloud.alibaba.domain.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>product_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>productId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.eiletxie.springcloud.alibaba.domain.Order<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into t_order(user_id,product_id,count,money,status) values (#{userId},#{productId},#{count},#{money},0);    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--找到用户，并且他的状态为0，将状态修改为1--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update t_order set status =1 where user_id =#{userId} and status=#{status};   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>controller层</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> OrderService orderService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建订单     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/order/create"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回通用数据给前台</span>    <span class="token keyword">public</span> CommonResult <span class="token function">create</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"订单创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>config配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.eiletxie.springcloud.alibaba.dao"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定我们的接口的位置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 使用Seata对数据源进行代理 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProxyConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mybatis.mapperLocations}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String mapperLocations<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSourceProxy <span class="token function">dataSourceProxy</span><span class="token punctuation">(</span>DataSource druidDataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>druidDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span>DataSourceProxy dataSourceProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SqlSessionFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSourceProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        ResourcePatternResolver resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span>resolver<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>mapperLocations<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>==库存==,seta-storage-2002</p><p><strong>==看脑图==</strong></p><ol><li>   pom   </li><li>   配置文件</li><li>   主启动类</li><li>   file.conf</li><li>   registry.conf</li><li>   domain</li><li>   service层</li><li>   dao层</li><li>   controller层</li><li>   config</li></ol><p> ==账号==,seta-account-2003</p><p><strong>==看脑图==</strong></p><ol><li>   pom     </li><li>   配置文件</li><li>   主启动类</li><li>   file.conf</li><li>   registry.conf</li><li>   domain</li><li>   service层</li><li>   dao层</li><li>   controller层</li><li>   config</li></ol></li></ol><h3 id="seata原理"><a href="#seata原理" class="headerlink" title="seata原理:"></a>seata原理:</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924211903.png"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924212144.png"></p><p>第一阶段：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924212504.png"></p><p>第二阶段：</p><p><strong>提交</strong></p><p>一阶段已经提交，只需要保存即可</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924212539.png"></p><p>回滚</p><p>因为一阶段已经保存过了，二阶段回归需要反向sql进行补偿</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924212700.png"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库隔离级别</title>
      <link href="/2020/09/21/mysql/shu-ju-ku-ge-chi-ji-bie/"/>
      <url>/2020/09/21/mysql/shu-ju-ku-ge-chi-ji-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h2><h3 id="1-事务"><a href="#1-事务" class="headerlink" title="1  事务"></a>1  事务</h3><p>事务只是一个改变，是一些的操作集合；用专业的术语去解释，就是一个程序的执行单元；事务本身并不包含这四个特性，我们需要通过某些手段，尽可能让这个执行单元满足这四个特性，那么，我们就可以称它是一个事务，或者说是一个正确的，完美的事务。</p><h3 id="2-四特性"><a href="#2-四特性" class="headerlink" title="2  四特性"></a>2  四特性</h3><ul><li>原子性：满足原子操作单元，对数据的操作，要么全部执行，要么全部不执行。</li><li>一致性：事务开始和完成时，数据都必须保持一致。</li><li>隔离性：事务之间相互独立，中间状态对外部不可见。</li><li>持久性：数据的修改是永久性的，即使系统出现任何故障都能够保持。</li></ul><h3 id="3-隔离级别"><a href="#3-隔离级别" class="headerlink" title="3  隔离级别"></a>3  隔离级别</h3><h4 id="3-1-并发情况下事务引发的问题"><a href="#3-1-并发情况下事务引发的问题" class="headerlink" title="3.1  并发情况下事务引发的问题"></a>3.1  并发情况下事务引发的问题</h4><blockquote><p>一般情况下，多个单元操作（事务，这里的事务，并不是完美的事务）并发执行，会出现这么几个问题：</p></blockquote><ul><li>脏读：A事务还未提交，B事务就读到了A操作的结果。（破坏了隔离性）</li><li>不可重复读：A事务在本次事务中，对自己未操作过数据，进行多次读取，结果出现不一致或记录不存在的情况。（破坏了一致性，重点是update和delete）</li><li>幻读：A事务在本次事务中，先读取了一遍数据，发现数据不存在，过了一会，又读取了一遍，发现又有数据了。（破坏了一致性，重点是insert）</li></ul><h4 id="3-2-解决（制定标准）"><a href="#3-2-解决（制定标准）" class="headerlink" title="3.2  解决（制定标准）"></a>3.2  解决（制定标准）</h4><p>为了权衡『隔离』和『并发』的矛盾，ISO定义了4个事务隔离级别，每个级别隔离程度不同，允许出现的副作用也不同。</p><ul><li>未提交读（read-uncommitted）：最低级别，基本只保证持久性；会出现脏读，不可重复读，幻读的问题。</li><li>已提交读（read-committed）：语句级别；会出现不可重复读，幻读的问题。</li><li>可重复读（repeatable-read）：事务级别；只会出现幻读问题。</li><li>串行化（serializable）：最高级别，也就是事务与事务完全串行化执行，无并发可言，性能低；但不会出现任何问题。</li></ul><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>会</td><td>会</td><td>会</td></tr><tr><td>不可重复读（read-committed）</td><td>-</td><td>会</td><td>会</td></tr><tr><td>可重复读（repeatable-read）</td><td>-</td><td>-</td><td>会</td></tr><tr><td>串行化（serializable）</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>注意：这四个级别只是一个标准，各个数据库厂商，并不完全按照标准做的。</p><h4 id="3-2-实现（InnoDB）"><a href="#3-2-实现（InnoDB）" class="headerlink" title="3.2  实现（InnoDB）"></a>3.2  实现（InnoDB）</h4><ul><li><p>锁机制：阻止其他事务对数据进行操作， 各个隔离级别主要体现在读取数据时加的锁的释放时机。</p><ul><li><p>RU：事务读取时不加锁</p></li><li><p>RC：事务读取时加行级共享锁（读到才加锁），一旦读完，立刻释放（并不是事务结束）。</p></li><li><p>RR：事务读取时加行级共享锁，直到事务结束时，才会释放。</p></li><li><p>SE：事务读取时加表级共享锁，直到事务结束时，才会释放。</p></li></ul></li><li><p>MVCC机制：生成一个数据快照，并用这个快照来提供一定级别的一致性读取，也称为多版本数据控制。</p><ul><li>实际就是『版本控制』加『读写分离』思想，主要用作于RC和RR级别。</li></ul></li></ul><h3 id="4-结构图"><a href="#4-结构图" class="headerlink" title="4  结构图"></a>4  结构图</h3><p><img src="/2020/09/21/mysql/shu-ju-ku-ge-chi-ji-bie/.._img%5C02.png" alt="概念总结"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql面试题</title>
      <link href="/2020/09/20/mysql/mysql-mian-shi-ti/"/>
      <url>/2020/09/20/mysql/mysql-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql面试题"><a href="#Mysql面试题" class="headerlink" title="Mysql面试题"></a>Mysql面试题</h1><ol><li>  数据库索引介绍一下。介绍一下什么时候用Innodb什么时候用MyISAM这两种引擎。  </li></ol><pre><code>索引是帮助数据库高效获取数据的排好序的数据结构，使用索引可快速访问数据库表中的特定信息。InnoDB主要面向在线事务处理（OLTP）的应用。MyISAM主要面向一些OLAP的应用。InnoDB是聚集索引（叶子节点包含了完整的数据记录），支持事务，支持行级锁；MyISAM是非聚集索引（叶子节点只包含数据磁盘地址），不支持事务，只支持表级锁。InnoDB必须有主键：作为B+树的索引建议使用整型自增主键：整型是因为作为索引操作要多次进行比大小，整型比大小的效率更高，自增是因为b+树的叶子节点是有顺序的，插入索引的时候，自增会直接在b+树原有的叶子节点后面插入，而非自增在插入数据时，还需要B+树重新排序，影响性能，自增就减少了排序的步骤</code></pre><ol start="2"><li><p>Innodb和MyISAM引擎在磁盘存储是什么样子的</p><pre><code>MyISAM:存放3个文件，frm:建表信息，myd：数据信息，myi：索引信息Innodb:存放2个文件，frm:建表信息，ibd：数据信息、索引信息</code></pre></li><li><p>什么是聚集索引，什么是非聚集索引</p><pre><code>b+树的数据结构中，叶子节点会存放有data元素（MyISAM存的是数据磁盘地址，InnoDB存的是数据）索引中存放有其他列的数据就是聚集索引存放的是数据磁盘地址，即数据和索引分离，就是非聚集索引</code></pre></li><li><p>什么是联合索引</p><pre><code>联合索引是多个索引组成的，B+树会先按最左原则进行排序，当索引相同时，再按下一个索引排序。</code></pre></li><li><p>  索引了解嘛，底层怎么实现的，什么时候会失效  </p></li></ol><pre><code>Hash索引和B+ 树索引&gt;其实还有二叉树、红黑树，因为二叉树都往右叶子节点加的时候，就会成为链表，和全表查询一样。&gt;红黑树也叫平衡二叉树，虽然它可以平衡节点，让不成为链表，但是等数据多的时候，树会越来越高，导致读取会进行多次iO操作，一样效率会低&gt;Hash索引底层是哈希表，哈希表是一种以key-value存储数据的结构，所以多个数据在存储关系上是完全没有任何顺序关系的，所以，对于范围查询是无法直接通过索引查询的，所以，哈希索引只适用于等值查询的场景。而B+ 树是一种【多路】平衡查询树（它可以由多个根节点），可以降低树的高度，叶子节点包含所有索引字段，还将data元素（MyISAM存的是数据磁盘地址，InnoDB存的是数据）放在叶子节点，用于读取数据，并且叶子节点拥有双向指针，用于提高范围查找性能，他的节点是天然有序的（左子节点小于父节点、父节点小于右子节点），所以对于范围查询的时候不需要做全表扫描。建议自增变量，主要是在所有的叶子结点中增加了指向下一个叶子节点的指针。一些关键字会导致索引失效，例如or，！=，notin，isnull,isnotunll联合索引中，不使用第一部分作查询like查询是以%开头隐式转换会导致索引失效。or前后没有同时使用索引对索引应用内部函数，索引字段进行了运算。</code></pre><p>   <img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200924110929.png"></p><ol start="6"><li><p>索引对数据库系统的负面影响是什么？</p><pre><code>创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。</code></pre></li><li><p>为数据表建立索引的原则有哪些？</p><pre><code>在最频繁使用的、用以缩小查询范围的字段上建立索引。在频繁使用的、需要排序的字段上建立索引</code></pre></li><li><p>主键、外键和索引的区别？</p><pre><code>定义：主键–唯一标识一条记录，不能有重复的，不允许为空外键–表的外键是另一表的主键, 外键可以有重复的, 可以是空值索引–该字段没有重复值，但可以有一个空值作用：主键–用来保证数据完整性外键–用来和其他表建立联系用的索引–是提高查询排序的速度个数：主键–主键只能有一个外键–一个表可以有多个外键索引–一个表可以有多个唯一索引</code></pre></li><li><p>  sql优化</p></li></ol><pre><code>1.在表中建立索引，优先考虑where、group by使用到的字段2.尽量避免select *，返回无用字段会降低效率3.避免使用in和not in和or和模糊查询和null值判断和where表达式，会导致引擎放弃索引查询而进行全表查询</code></pre><ol start="10"><li>数据库的隔离级别</li></ol><pre><code>1.未提交读(ReadUncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据。2.提交读(ReadCommitted)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别(不重复读)。3.可重复读(RepeatedRead)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读。4.串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞。脏读:    指一个事务读取了另外一个事务未提交的数据不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同虚读（幻读）：指一个事务读取到了别的事务插入的数据，导致前后读取不一致</code></pre><ol start="11"><li><p>数据库乐观锁和悲观锁</p><pre><code>悲观锁（PessimisticLock），顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。synchronized就属于悲观锁的一种实现，每次线程要修改数据时都先获得锁，保证同一时刻只有一个线程能操作数据，其他线程则会被block。乐观锁:顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。乐观锁适用于读多写少的应用场景，这样可以提高吞吐量。乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。实现乐观锁的两种方式：数据版本（Version）记录机制实现时间戳（timestamp）</code></pre></li><li><p>数据库的三范式</p><pre><code>第一范式（1NF）：强调的是列的原子性，即列不能够再拆分。第二范式（2NF）：首先是 1NF，实体的每个非主键属性完全函数依赖于主键属性（**消除部分依赖**）第三范式（3NF）：首先是 2NF，另外非主键列必须**直接**依赖于主键，**不能存在传递依赖**</code></pre></li><li><p>ACID的特性</p><pre><code>1.原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。2.一致性指事务前后数据的完整性必须保持一致。3.隔离性指多个用户并发访问数据库时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之间数据要相互隔离。4.持久性是指一个事务一旦提交，它对数据库中数据的改变就是永久性的，即便数据库发生故障也不应该对其有任何影响。</code></pre></li><li><p>隔离性所造成的问题：</p><pre><code>脏读:    指一个事务读取了另外一个事务未提交的数据不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同虚读（幻读）：指一个事务读取到了别的事务插入的数据，导致前后读取不一致</code></pre></li><li><p>主从复制</p><pre><code>主从复制是指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库服务器，主服务器中的数据自动复制到从服务器之中。MySQL主从复制的基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新。MySQL主从复制的两种情况：同步复制和异步复制(使用偏多)</code></pre></li><li><p>leftjoin和rightjoin的区别？</p><pre><code>leftjoin(左联接)返回包括左表中的所有记录和右表中联结字段相等的记录</code></pre></li><li><p>数据库优化方法</p><pre><code>1.选取最适用的字段属性2.使用连接（JOIN）来代替子查询(Sub-Queries)3.事务</code></pre></li><li><p>谈一下你对继承映射的理解</p><pre><code>继承关系的映射策略有三种：①每个继承结构一张表（tableperclasshierarchy），不管多少个子类都用一张表。②每个子类一张表（tablepersubclass），公共信息放一张表，特有信息放单独的表。③每个具体类一张表（tableperconcreteclass），有多少个子类就有多少张表。</code></pre></li><li><p>数据连接池的工作机制</p><pre><code>服务器启动时会建立一定数量的池连接，并一直维持不少于此数目的池连接。客户端程序需要连接时，池驱动程序会返回一个未使用的池连接并将其表记为忙。如果当前没有空闲连接，池驱动程序就新建一定数量的连接当使用的池连接调用完成后，池驱动程序将此连接表记为空闲，其他调用就可以使用这个连接。</code></pre></li><li><p>JDBC中如何进行事务处理</p><pre><code>Connection提供了事务处理的方法，通过调用setAutoCommit(false)可以设置手动提交事务；当事务完成后用commit()显式提交事务；如果在事务处理过程中发生异常则通过rollback()进行事务回滚。</code></pre></li><li><p>JDBC的反射，反射都是什么</p><pre><code>通过反射com.mysql.jdbc.Driver类，实例化该类的时候会执行该类内部的静态代码块，该代码块会在Java实现的DriverManager类中注册自己DriverManager管理所有已经注册的驱动类，当调用DriverManager.getConnection方法时会遍历这些驱动类并尝试去连接数据库，只要有一个能连接成功，就返回Connection对象，否则则报异常</code></pre></li><li><p>Statement和PreparedStatement有什么区别？哪个性能更好？  </p><pre><code>PreparedStatement接口代表预编译的语句，它主要的优势在于可以减少SQL的编译错误并增加SQL的安全性（减少SQL注入攻击的可能性）PreparedStatement中的SQL语句是可以带参数的，避免了用字符串连接拼接SQL语句的麻烦和不安全；当批量处理SQL或频繁执行相同的查询时，PreparedStatement有明显的性能上的优势，由于数据库可以将编译优化后的SQL语句缓存起来，下次执行相同结构的语句时就会很快</code></pre></li><li><p>分页语句：取出sql表中第31到40的记录（以自动增长ID为主键）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token number">10</span>；</code></pre></li><li><p>根据部门号从高到低，工资从低到高列出每个员工的信息。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">order</span> <span class="token keyword">by</span> deptid <span class="token keyword">desc</span><span class="token punctuation">,</span>salary<span class="token punctuation">;</span></code></pre></li><li><p>用JDBC查询学生成绩单，写出主要代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加载驱动</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClassName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取连接</span>Connection cn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编写sql语句</span>String sql <span class="token operator">=</span> <span class="token string">"select score.* from score,student where score.stuId = student.id and student.name = ?"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行sql</span>PreparedStatement pstmt <span class="token operator">=</span> cn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置参数</span>pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取结果集</span>Resultset rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历结果</span><span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"socre"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关闭连接</span>rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>链表查询</p><pre class=" language-sql"><code class="language-sql">class:cid、captionstudent:sid、gender、class_id、snamescore:sid、student_id、course_id、numcourse：cid、cname、teacher_idteacher:tid、tname<span class="token number">1</span>、查询所有的课程的名称以及对应的任课老师姓名<span class="token number">2</span>、查询平均成绩大于八十分的同学的姓名和平均成绩<span class="token number">3</span>、 查询没有报李平老师课的学生姓名<span class="token number">4</span>、 查询选修物理课程和体育课程其中一门的学生姓名<span class="token number">5</span>、 查询挂科超过两门<span class="token punctuation">(</span>包括两门<span class="token punctuation">)</span>的学生姓名和班级<span class="token number">6</span>、找出同时选了李平老师所有课的学生班级和姓名<span class="token number">1</span><span class="token punctuation">.</span>    <span class="token keyword">select</span> course<span class="token punctuation">.</span>cname<span class="token punctuation">,</span>teacher<span class="token punctuation">.</span>tname     <span class="token keyword">from</span> course<span class="token punctuation">,</span>teacher     <span class="token keyword">where</span> course<span class="token punctuation">.</span>teacher_id<span class="token operator">=</span>teacher<span class="token punctuation">.</span>tid    <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token keyword">select</span> student<span class="token punctuation">.</span>sname<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>num<span class="token punctuation">)</span>     <span class="token keyword">from</span> student<span class="token punctuation">,</span>score     <span class="token keyword">where</span> student<span class="token punctuation">.</span>sid <span class="token operator">=</span> score<span class="token punctuation">.</span>student_id    <span class="token keyword">group</span> <span class="token keyword">by</span> score<span class="token punctuation">.</span>student_id    <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">80</span>class:cid、captionstudent:sid、gender、class_id、snamescore:sid、student_id、course_id、numcourse：cid、cname、teacher_idteacher:tid、tname<span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">select</span> student<span class="token punctuation">.</span>sname <span class="token keyword">from</span> student <span class="token keyword">where</span> sid <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span> student_id <span class="token keyword">from</span> score <span class="token keyword">where</span> course_id <span class="token operator">in</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span> course<span class="token punctuation">.</span>cid <span class="token keyword">from</span> course<span class="token punctuation">,</span>teacher <span class="token keyword">where</span> tacher<span class="token punctuation">.</span>tname <span class="token operator">=</span><span class="token string">"李平老师"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token number">4</span><span class="token punctuation">.</span>  <span class="token keyword">select</span> student<span class="token punctuation">.</span>sname     <span class="token keyword">from</span> student    <span class="token keyword">where</span> sid <span class="token operator">in</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span> score<span class="token punctuation">.</span>student_id <span class="token keyword">from</span> score <span class="token keyword">where</span> course_id <span class="token operator">in</span> <span class="token punctuation">(</span>            <span class="token keyword">select</span> cid <span class="token keyword">from</span> course <span class="token keyword">where</span> cname <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">"物理"</span><span class="token punctuation">,</span><span class="token string">"体育"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">group</span> <span class="token keyword">by</span> student_id <span class="token comment" spellcheck="true">--在没有聚合函数的情况下使用group by，表示该列的重复属性合并（去重效果）</span>        <span class="token keyword">having</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>student_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>     <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--方式2</span>    <span class="token keyword">select</span> sname     <span class="token keyword">from</span> student     <span class="token keyword">where</span> sid <span class="token operator">in</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span> student_id         <span class="token keyword">from</span> score <span class="token keyword">inner</span> <span class="token keyword">join</span> course         <span class="token keyword">on</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> course<span class="token punctuation">.</span>cid         <span class="token keyword">where</span> course<span class="token punctuation">.</span>cname <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">"物理"</span><span class="token punctuation">,</span><span class="token string">"体育"</span><span class="token punctuation">)</span>        <span class="token keyword">group</span> <span class="token keyword">by</span> student_id        <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>student_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">)</span>    <span class="token number">5</span><span class="token punctuation">.</span>  <span class="token keyword">select</span> caption<span class="token punctuation">,</span>sname     <span class="token keyword">from</span> class <span class="token keyword">inner</span> <span class="token keyword">join</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span> sname<span class="token punctuation">,</span>class_id         <span class="token keyword">from</span> student         <span class="token keyword">where</span> sid <span class="token operator">in</span> <span class="token punctuation">(</span>            <span class="token keyword">select</span> score<span class="token punctuation">.</span>student_id             <span class="token keyword">from</span> score             <span class="token keyword">where</span> num <span class="token operator">&lt;</span> <span class="token number">60</span>              <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>student_id<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">2</span>         <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token keyword">as</span> k <span class="token keyword">on</span> class<span class="token punctuation">.</span>cid <span class="token operator">=</span> k<span class="token punctuation">.</span>class_id </code></pre></li><li><p>  Inner join 和left join ,right join哪个效率高</p></li></ol><pre><code>```Inner join，它只查询出交集，left join查询除了交集还有左边没有返回的数据left join已经确定了拿左边表为参照表，Inner join会自动选择数据量最小的表作参照表连接查询为什么比子查询效率高？执行子查询时，MYSQL需要创建临时表，查询完毕后再删除这些临时表，所以，子查询的速度会受到一定的影响，这里多了一个创建和销毁临时表的过程。```</code></pre><ol start="28"><li>  联表查询JOIN介绍</li></ol><pre><code>```sql内连接：INNER JOINSELECT * FROM book INNER JOIN book_type ON book.type_id=book_type.type_id;等同于 ：如果两个字段名字相同，可以是使用using(column_name)来代替Onselect * from book inner join book_type using(type_id);自然连接：NATURAL JOIN:自然连接就是USING子句的简化版,它找出两个表中相同的列作为连接条件进行连接select * from book natural join book_type;```</code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程（面试）</title>
      <link href="/2020/09/19/xue-xi/duo-xian-cheng-mian-shi/"/>
      <url>/2020/09/19/xue-xi/duo-xian-cheng-mian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>程序：一段静态的代码</li><li>进程：进程作为资源分配的单位，系统在运行时为每个进程划分内存区域</li><li>线程：线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器</li><li>并行：多个cpu同时执行多个任务</li><li>并发：一个cpu同时执行多个任务，比如：秒杀</li></ul><h2 id="线程的创建方式"><a href="#线程的创建方式" class="headerlink" title="线程的创建方式"></a>线程的创建方式</h2><ol start="0"><li><p>继承Thread类的子类，重写run方法（和1的匿名子类的方式一样）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread创建方法0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用</span>MyThread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须是start</span></code></pre><blockquote><p>注意：每个线程对象只能启动一次，当需要多次调用该逻辑，可以创建多个线程对象，进行调用</p></blockquote></li><li><p>New线程，重写Thread的run方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread创建方法1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>New线程，实现Runnable接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread创建方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用</span>RThread mt1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt1<span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread创建方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>此方法创建多个线程时只需要将构造器中的参数更换即可，只需要创建一个runnable实现类对象</p><p>1，2种创建线程方式的比较：</p><ul><li>开发中，优先选择实现Runnable接口的方式</li><li>原因：<ul><li>实现的方式没有类的单继承性局限性</li><li>实现的方式更适合来处理多个线程有共享数据的情况（因为只创建一个runnable给相同构造器）</li></ul></li><li>相同点：两个方式都需要重写run()，将线程要执行的逻辑声明在run()中</li></ul></blockquote></li><li><p>New Callable接口，实现call方法，封装成任务，作为参数加入线程</p><p>callable可以返回结果值，需要在定义的时候指定返回值类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    Callable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> callable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread创建方法3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//封装成任务</span>    FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    task<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><p>3.1 实现Callable接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.创建Callable的实现类</span><span class="token keyword">class</span> <span class="token class-name">CallTest</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//重写call方法</span>        <span class="token keyword">public</span> Object <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread创建方法3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建实现类实例</span>    CallTest callTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CallTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将此实例作为参数传入FutureTask构造器中</span>    FutureTask task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>callTest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将FutureTask作为参数传入线程中，为了执行线程</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非必选步骤：获取返回值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>如何理解Callable接口的方式创建多线程比Runnable接口的方式强大？</p><ol><li>call（）有返回值</li><li>call()可以抛出异常，被外边的操作捕获，获取异常信息</li><li>Callables是支持泛型的</li></ol></blockquote><ol start="4"><li><p>使用线程池创建线程</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//提供指定线程数量的线程池</span>ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式1提交：用于runnable</span>FutureTask task <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式2提交：用于callable</span><span class="token comment" spellcheck="true">//非必选步骤：获取返回值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭线程池</span></code></pre></li></ol><h2 id="线程的六种状态"><a href="#线程的六种状态" class="headerlink" title="线程的六种状态"></a>线程的六种状态</h2><ol><li><p>NEW：初始态</p></li><li><p>RUNNABLE：运行态</p><p>a)    Ready：准备态（排队中，准备执行）</p><p>b)    Running：执行态</p></li><li><p>BLOCKED：阻塞态（执行锁方法，锁被其他线程拿走，自己成为阻塞态）</p></li><li><p>WAITING：等待态（执行锁方法，执行了其中的wait()方法，释放锁，当条件满足之后，得到锁就会立刻执行）</p></li><li><p>TIMED_WAITING:超时等待态（wait(传参2000)，进入等待态2秒后，不管条件是否满足，都执行）</p></li><li><p>TERMINEATED:结束态</p></li></ol><p> <img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200930191544.png"></p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>同步的方式解决了线程安全的问题。</p><p>操作同步代码块时，只要有一个线程参会，其他线程等待，相当于单线程过程，效率低</p><h3 id="方式一：同步代码块"><a href="#方式一：同步代码块" class="headerlink" title="方式一：同步代码块"></a>方式一：同步代码块</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要被同步的代码</span><span class="token punctuation">}</span></code></pre><p>说明：</p><ol><li><p>操作共享数据的代码，即为需要被同步的代码</p></li><li><p>共享数据：多个线程共同操作的变量。</p></li><li><p>同步监视器，俗称：锁。任何一个对象，都可以当作锁</p><p>要求：<strong>多个线程必须要公用同一把锁</strong>（static）</p><ol><li>在实现Runnable接口创建多线程的方式，我们可以考虑用this充当同步监视器</li><li>在继承Thread类创建多线程的方式，慎用this充当同步监视器（因为不是一个对象）,可以用类.class</li></ol></li></ol><h3 id="方式二：同步方法"><a href="#方式二：同步方法" class="headerlink" title="方式二：同步方法"></a>方式二：同步方法</h3><p>如果操作共享数据的代码都声明在一个方法中，不妨将此方法声明同步的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要同步的代码</span><span class="token punctuation">}</span></code></pre><p>总结：</p><ol><li>同步方法仍然涉及到同步监视器，只是不需要我们显式的声明</li><li>非静态的同步方法，同步方法是：this（不适用继承Thread类的多线程）</li><li>静态的同步方法，同步监视器是：当前类本身（适用于所有情况）</li></ol><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><pre class=" language-java"><code class="language-java">Private ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意，如果是继承Thread的方式，需要将Lock加上static</p></blockquote><h4 id="synchronized与Lock的异同"><a href="#synchronized与Lock的异同" class="headerlink" title="synchronized与Lock的异同"></a>synchronized与Lock的异同</h4><ul><li>相同：二者都可以解决线程安全问题</li><li>不同：<ul><li>synchronized机制在执行完相应的同步代码之后，自动的释放同步监视器</li><li>Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()）</li></ul></li></ul><p><strong>优先使用顺序：</strong></p><p> Lock–&gt;同步代码块（已经进入了方法体，分类了相应资源）–&gt;同步方法（在方法体之外）</p><h4 id="如何解决线程安全问题？有几种"><a href="#如何解决线程安全问题？有几种" class="headerlink" title="如何解决线程安全问题？有几种"></a>如何解决线程安全问题？有几种</h4><p> 3种，Lock锁方式，同步代码快，同步方法</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>不同线程分别占用了对方需要的同步资源不放弃，都在等待对方放弃自己需要的资源</p><h4 id="如何解决死锁"><a href="#如何解决死锁" class="headerlink" title="如何解决死锁"></a>如何解决死锁</h4><ol><li>A调B，B调A的情况注意同步问题</li><li>减少同步资源的定义</li><li>避免嵌套同步</li></ol><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2><ol><li>wait()：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器</li><li>notify()：一旦执行此方法，就会唤醒一个线程，如果有多个线程被wait,就唤醒优先级高</li><li>notifyAll()：一旦执行此方法，就会唤醒所有wait线程</li></ol><blockquote><p>注意：</p><ol><li>这三个方法必须使用在同步代码块或同步方法中</li><li>这三个方法的调用者，必须是同步监视器，否则会出现<code>IllegalMonitorStateException</code>（this）</li><li>这三个方法都是定义在object中</li></ol></blockquote><h2 id="Sleep和Wait的区别"><a href="#Sleep和Wait的区别" class="headerlink" title="Sleep和Wait的区别"></a>Sleep和Wait的区别</h2><p>a)    相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态</p><p>a)    不同点：</p><ol><li>声明的位置不同：Thread类中的声明sleep()，Object类中声明wait()</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用，wait()必须在同步代码快，同步方法中调用</li><li>关于是否释放同步监视器：如果两个方法都使用在同步代码快或同步方法中，sleep不会释放，wait会</li><li>唤醒时机不同：sleep()会在读秒之后自己唤醒，wait()不会自动唤醒，需要手动调用notify/notifyall来进行唤醒</li></ol><p><strong>Sleep</strong></p><ol><li><p>暂停当前线程执行，但是不释放锁（在厕所里睡着了，但厕所其他人使用不了）</p></li><li><p>它是Thread中的方法</p></li><li><p>可以在任何场景中使用</p></li><li><p>只有睡够时间之后才能醒来</p></li></ol><p><strong>Wait</strong></p><ol><li><p>暂停当前线程执行，但是释放锁</p></li><li><p>它是Object对象的方法，可以直接使用</p></li><li><p>只能在同步块，同步方法中使用</p></li><li><p>可以随时被唤醒，（notify()也可以在其他线程使用来唤醒该线程）</p></li></ol><h3 id="生产者消费者问题（线程通信应用）"><a href="#生产者消费者问题（线程通信应用）" class="headerlink" title="生产者消费者问题（线程通信应用）"></a>生产者消费者问题（线程通信应用）</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Clerk</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    此处用到同步，在生产时不能进行消费，消费时不能生产    解决线程安全问题    需要注意：    1.wait(),notify()方法必须放在同步代码块/同步方法中    2.唤醒的时机     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：开始生产第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在生产完提醒消费</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：开始消费第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先消费再减少</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在消费完产品提醒生产</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            clerk<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            clerk<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Clerk clerk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Producer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"1号生产者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"1号消费者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>线程资源必须通过线程池提供，不允许在应用中自行显示创建线程</p><p>好处：</p><ol><li>减少创建/销毁线程上的系统资源开销。</li><li>提高响应速度（减少创建线程的时间）</li><li>便于线程管理</li></ol><p>创建ExecutorService线程池：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//提供指定线程数量的线程池</span>ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置线程池属性：</p><pre class=" language-java"><code class="language-java">service<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//核心池的大小</span>maximumPoolSize<span class="token comment" spellcheck="true">//最大线程熟</span>keepAliveTime<span class="token comment" spellcheck="true">//线程没有任务时最多保持多长时间会终止</span></code></pre><p>ExecutorService：线程池接口</p><ul><li>void execute(Runnable command)：执行任务，没有返回值，一般用于执行runnable接</li><li><t> submit(Callable<t> task)：执行任务，有返回值（FutureTask），一般用于执行Callable</t></t></li><li>void shutdown()：关闭连接池</li></ul><p>Executors：线程池工具类，用于创建不同类型的线程池</p><h2 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h2><table><thead><tr><th>start()</th><th>启动当前线程，调用当前线程的run（）</th></tr></thead><tbody><tr><td>run()</td><td>通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</td></tr><tr><td>currentThread()</td><td>返回执行当前代码的线程</td></tr><tr><td>getName()</td><td>获取当前线程的名字</td></tr><tr><td>setName()</td><td>设置当前线程的名字</td></tr><tr><td>yield()</td><td>释放当前cpu的执行权</td></tr><tr><td>join()</td><td>在线程a中调用线程b的join()，线程a就会进入阻塞状态</td></tr><tr><td>sleep(long millitime)</td><td>睡眠，让当前线程“睡眠”指定毫秒值，让其在规定时间内是阻塞状态</td></tr><tr><td>isAlive()</td><td>判断当前线程是否存活</td></tr></tbody></table><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>优先级：</p><ol><li>MAX_PRIORITY:10</li><li>MIN_PRIORITY:1</li><li>NORM_PRIORITY:5</li></ol><p>涉及的方法</p><ol><li>getPriority()：返回当前线程优先值，<code>Thread.currentThread().getPriority()</code></li><li>setPriority(int newPriority)：改变线程的优先级</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka笔记</title>
      <link href="/2020/09/18/util/kafka/"/>
      <url>/2020/09/18/util/kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Kafka是一个<strong>分布式</strong>的<strong>发布/订阅模式</strong>的<strong>消息队列</strong>，主要应用于大数据实时处理领域。</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="使用消息队列的好处"><a href="#使用消息队列的好处" class="headerlink" title="使用消息队列的好处"></a>使用消息队列的好处</h4><ol><li>解耦</li><li>可恢复性：一部分组件失效后，不会影响整个系统，消息队列降低了进程之间的耦合性，加入消息队列的消息仍然可以在系统恢复后处理</li><li>缓冲：解决生产消息和消费消息的处理速度不一致</li><li>灵活性、峰值处理能力</li><li>异步通信</li></ol><h4 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a>消息队列的两种模式</h4><ol><li><p>点对点：一对一，消费者拉取数据，消息收到后消息删除</p></li><li><p>发布/订阅：一对多，消费者消费数据之后不会清除消息，消息可以给多个消费者使用，Kafka是主动拉取消息</p><p>优点：可以控制获取消息的速度</p><p>缺点：不断去问订阅是否有新消息</p></li></ol><h3 id="Kafka基础架构"><a href="#Kafka基础架构" class="headerlink" title="Kafka基础架构"></a>Kafka基础架构</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200916233423.png" alt="1"></p><p>Producer ：消息生产者，就是向 kafka broker 发消息的客户端； </p><p>Consumer ：消息消费者，向 kafka broker 取消息的客户端；</p><p>消息队列：主题Topic（用于分类）、分区Partition（用于负载均衡）、Leader主（用于备份）</p><p>消费者：消费者组（一个主题可以被一组组多人消费，一个分区只能被一个组中一人消费）</p><p>Broker ：一台 kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic。</p><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><h3 id="jar包下载"><a href="#jar包下载" class="headerlink" title="jar包下载"></a>jar包下载</h3><p><a href="http://kafka.apache.org/downloads.html">http://kafka.apache.org/downloads.html</a></p><h3 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h3><h3 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h3><p>1）查看当前服务器中的所有 topic</p><p> [atguigu@hadoop102 kafka]$ bin/kafka-topics.sh –zookeeper hadoop102:2181 –list</p><p> 2）创建 topic </p><p>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh –zookeeper hadoop102:2181 –create –replication-factor 3 –partitions 1 – topic first</p><p> 选项说明：</p><p> –topic 定义 topic 名</p><p> –replication-factor 定义副本数</p><p> –partitions 定义分区数</p><p>3）删除 topic </p><p>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh –zookeeper hadoop102:2181 –delete –topic first</p><p> 需要 server.properties 中设置 delete.topic.enable=true 否则只是标记删除。</p><p>4）发送消息 </p><p>[atguigu@hadoop102 kafka]$ bin/kafka-console-producer.sh –brokerlist hadoop102:9092 –topic first &gt;hello world </p><p>5）消费消息 </p><p>[atguigu@hadoop102 kafka]$ bin/kafka-console-consumer.sh \ –zookeeper hadoop102:2181 –topic first</p><h2 id="Kafka架构深入"><a href="#Kafka架构深入" class="headerlink" title="Kafka架构深入"></a>Kafka架构深入</h2><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200917003737.png" alt="2"></p><p>Kafka 中消息是以 topic 进行分类的，生产者生产消息，消费者消费消息，都是面向 topic 的。</p><p>每个 partition（分区） 对应于一个 log 文 件，该 log 文件中存储的就是 producer 生产的数据。Producer 生产的数据会被不断追加到该 log 文件末端，且每条数据都有自己的 offset（偏移量，就是第几条数据的编号）。消费者组中的每个消费者，都会实时记录自己 消费到了哪个 offset，以便出错恢复时，从上次的位置继续消费。</p><p>根据偏移量先找到该偏移量在哪个索引中，再在索引中找到偏移量，再获取偏移量对应真实数据的位置，再找到Log文件中数据。</p><h3 id="存储机制"><a href="#存储机制" class="headerlink" title="存储机制"></a>存储机制</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200917004107.png" alt="3"></p><p>由于生产者生产的消息会不断追加到 log 文件末尾，为防止 log 文件过大导致数据定位 效率低下，Kafka 采取了<strong>分片和索引</strong>机制，将每个 partition 分为多个 segment（分片）。每个 segment 对应两个文件——“.index”文件和“.log”文件。</p><p>index 和 log 文件以当前 segment 的第一条消息的 offset 命名。</p><pre><code>00000000000000000000.index00000000000000000000.log00000000000000170410.index00000000000000170410.log00000000000000239430.index00000000000000239430.log</code></pre><p>“.index”文件存储大量的索引信息(左边为偏移量（第几条数据），右边为数据的具体位置)，“.log”文件存储大量的数据，索引文件中的元 数据指向对应数据文件中 message 的物理偏移地址。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200917004432.png" alt="4"></p><p>这些文件位于一个文件夹下，该文件夹的命名 规则为：topic 名称+分区序号。例如，first 这个 topic 有三个分区，则其对应的文件夹为 first0,first-1,first-2。</p><h3 id="Kafka生产者"><a href="#Kafka生产者" class="headerlink" title="Kafka生产者"></a>Kafka生产者</h3><h4 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h4><h5 id="分区原因"><a href="#分区原因" class="headerlink" title="分区原因"></a>分区原因</h5><ol><li>方便在集群中扩展：提高负载能力</li><li>可提高并发：可以以partition为单位读写</li></ol><h5 id="分区的原则"><a href="#分区的原则" class="headerlink" title="分区的原则"></a>分区的原则</h5><p>我们需要将 producer 发送的数据封装成一个 ProducerRecord 对象</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200917102629.png" alt="5"></p><p>（1）指明 partition 的情况下，直接将指明的值直接作为 partiton 值； </p><p>（2）没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值； </p><p>（3）既没有 partition 值又没有 key 值的情况下，第一次调用时随机生成一个整数（后 面每次调用在这个整数上自增），将这个值与 topic 可用的 partition 总数取余得到 partition 值，也就是常说的 round-robin（轮询） 算法。</p><h4 id="数据可靠性保证（数据丢失、重复）"><a href="#数据可靠性保证（数据丢失、重复）" class="headerlink" title="数据可靠性保证（数据丢失、重复）"></a>数据可靠性保证（数据丢失、重复）</h4><p>为保证 producer 能可靠的发送数据到指定的 topic，topic 的每个 partition 收到 producer 发送的数据后，都需要向 producer 发送 ack（acknowledgement 确认收到），如果 producer 收到 ack，就会进行下一轮的发送，否则重新发送数据。    </p><p>问：何时发送ack？</p><ol><li>半数以上完成同步，就发 送 ack<ol><li>优点：延迟低</li><li>缺点：选举新leader时，需要2n+1台副本，确保n台故障仍可以超过半数</li></ol></li><li>全部完成同步，就发送ack<ol><li>优点：选举新leader时，需要n+1台副本，确保n台挂掉还有1个存活，也算全部完成</li><li>缺点：延迟高</li></ol></li></ol><h5 id="ISR（优秀的follower集合、副本同步队列）"><a href="#ISR（优秀的follower集合、副本同步队列）" class="headerlink" title="ISR（优秀的follower集合、副本同步队列）"></a>ISR（优秀的follower集合、副本同步队列）</h5><p>问题：采用全部完成同步的方案，如果所有follower开始同步数据，有一台因为故障，很长时间不能完成同步，leader需要一直等下去，为解决这个问题，就有了ISR。</p><ol><li><strong>原理</strong>：Leader维护了一个动态的 in-sync replica set (ISR)，意思是和leader保持紧密同步的leader。当ISR中的follower完成数据同步之后，leader就会发送ack。如果长时间没有同步完成，该follower就会被踢出ISR。这个时间阈值由replica.lag.time.max.ms 参数设定。Leader 发生故障之后，就会从 ISR 中选举新的 leader。</li><li>以前版本是按两个条件进入ISR：同步时间差，同步数据量差。但之后版本移除了同步数据量差，因为在同步时同步数据量没有达到被踢出，同步时间又快被加入，反复进出会影响性能。</li></ol><h5 id="ack-应答机制"><a href="#ack-应答机制" class="headerlink" title="ack 应答机制"></a>ack 应答机制</h5><p>对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失， 所以没必要等 ISR 中的 follower 全部接收成功。 </p><p>所以 Kafka 为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡， 选择以下的配置。</p><p><strong>acks参数配置</strong></p><p>0：生产者<strong>不等待</strong>Kafka集群的ack，这个操作延迟最小，Kafka刚接收还没有写入磁盘就已经返回，但如果集群故障，就有可能<strong>丢失数据</strong></p><p>1：生产者等待ack，分区中的leader写入成功之后就会返回ack。但如果follower同步完成之前，leader发生故障，就会<strong>丢失数据</strong></p><p>-1：生产者等待ack，分区中ISR中的leader和follower全部写入同步成功才返回ack。但如果follower同步完成后，leader在没有发送ack之前发生故障，推选出新的leader，生产者没有收到ack就会再次发送消息给刚推选出来的leader，因为新leader已经同步成功，所以会出现<strong>数据重复</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200917113714.png" alt="-1"></p><p>​    极端情况下：-1也是可能出现丢失数据。当partition中的follower效率都不高，ISR中只有一个leader，当自己写完之后也是满足了ISR全部完成的情况，直接返回ack，如果follower同步完成前leader发生故障，就会<strong>数据丢失</strong>，与1的情况相同。</p><h4 id="数据一致性（副本间数据一致）"><a href="#数据一致性（副本间数据一致）" class="headerlink" title="数据一致性（副本间数据一致）"></a>数据一致性（副本间数据一致）</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200917132406.png" alt="7"></p><p>LEO：每个副本的最大偏移量offset，最后的数据</p><p>HW：消费者能见到的最大偏移量，ISR中最小的LEO</p><ol><li><p>follower故障</p><p>会被临时踢出ISR，等恢复之后，先从磁盘中读取上次记录的LEO，再将高于HW的部分截取掉，从HW开始向leader同步，等LEO=该Partition的HW，追上leader之后，就重新加入ISR</p></li><li><p>leader故障</p><p>会在ISR中选举出一个新的leader，为保证多个副本数据之间的一致性，其他的follower会先将各个log文件中<strong>高于HW的部分截掉</strong>，再从新的leader中同步数据</p></li></ol><h4 id="Exactly-Once（精准一次）"><a href="#Exactly-Once（精准一次）" class="headerlink" title="Exactly Once（精准一次）"></a>Exactly Once（精准一次）</h4><p>将服务器的 ACK 级别设置为-1，可以保证 Producer 到 Server 之间不会丢失数据，即 **At Least Once **语义（最少发送一次请求）。相对的，将服务器 ACK 级别设置为 0，可以保证生产者每条消息只会被 发送一次，即 <strong>At Most Once</strong> 语义（最多发送一次请求）。</p><p>对于一些非常重要的信息，比如说 交易数据，下游数据消费者要求数据既<strong>不重复也不丢失</strong>，即 Exactly Once 语义（精准一次）。</p><p><code>At Least Once + 幂等性 = Exactly Once</code></p><p>所谓的    </p><p><strong>工作原理：</strong></p><p>要启用幂等性，只需要将 Producer 的参数中 enable.idompotence 设置为 true 即可。</p><p>开启幂等性的 Producer 在 初始化的时候会被分配一个 PID（生产者ID），发往同一 Partition 的消息会附带 Sequence Number（序列号）。而 Broker 端会对&lt;PID,Partition,SeqNumber&gt;消息的标识做缓存，当具有相同主键的消息提交时，Broker 只 会持久化一条。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>ack：可靠性{0（只发一次，不管确认），1（发一次，等写的确认），-1（发一次或多次，等写等同步的的确认）}</p><p>isr：HW（高水位，isr中最小的LEO，消费者可见的最大数据，保证一致性（消费、存储））、LEO（每个副本的最大偏移量）</p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><h4 id="消费方式"><a href="#消费方式" class="headerlink" title="消费方式"></a>消费方式</h4><ol><li><p>consumer 采用 pull（拉）模式从 broker 中读取数据。</p><ul><li>缺点：如果 kafka 没有数据，消费者可能会陷入循环中，一直返回空数据。</li><li>解决：消费时传入时间参数，如果没有数据可以消费，就等待一段时间再返回</li></ul></li><li><p>push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由 broker 决定的。</p></li></ol><h4 id="分区分配策略"><a href="#分区分配策略" class="headerlink" title="分区分配策略"></a>分区分配策略</h4><ol><li><p><strong>RoundRobin</strong>（轮询）按照组来分</p><p>将所有分区看作一个整体轮流分配给消费者</p><p>问题：如果消费者A订阅T1，B订阅T2，轮询会把T1,T2看成一个整体，然后分配，有可能将T1给了B，T2给了1</p><p>结论：轮询只能使用在消费者订阅相同主题</p><p>优点：分配均匀</p><p>缺点：当消费者组订阅的主题不一样时，会错分配</p></li><li><p><strong>Range</strong>，按照主题来分(先看订阅后看组)</p><p>比如AB消费者都订阅了T1(012)T2(012)，T1主题被拆成01，2分别给AB，T2也是如此</p><p>优点：不会错误分配</p><p>缺点：分配不均匀</p></li></ol><p>总结：当消费者组中每个消费者都订阅相同的topic时，推荐使用轮询，而如果一个消费者组中的消费者订阅不同的topic，那么使用range</p><p><strong>分配策略被调用的时机</strong>：消费者组中成员发生变化时，重新分配</p><h4 id="offset-的维护"><a href="#offset-的维护" class="headerlink" title="offset 的维护"></a>offset 的维护</h4><p>由于 consumer 在消费过程中可能会出现断电宕机等故障，consumer 恢复后，需要从故 障前的位置的继续消费，所以 consumer 需要实时记录自己消费到了哪个 offset，以便故障恢复后继续消费。</p><p>消费者是按组消费的，比如消费者组有消费者A，消息由3个分区，每个偏移量都是10，当B加入消费者组，重新分配时，B获得一个分区，<strong>继续在10之后消费</strong>。</p><p>offset=消费者组+主题+分区</p><h3 id="Kafka-高效读写数据"><a href="#Kafka-高效读写数据" class="headerlink" title="Kafka 高效读写数据"></a>Kafka 高效读写数据</h3><ol><li>顺序写磁盘</li><li>零复制技术：直接与操作系统交互，跳过用户空间</li><li>分布式（分区）：并发读写</li></ol><h4 id="Zookeeper-在-Kafka-中的作用"><a href="#Zookeeper-在-Kafka-中的作用" class="headerlink" title="Zookeeper 在 Kafka 中的作用"></a>Zookeeper 在 Kafka 中的作用</h4><p>Kafka 集群中有一个 broker 会被选举为 Controller，负责管理<strong>集群 broker 的上下线</strong>，<strong>所有 topic 的分区副本分配</strong>和 <strong>leader 选举等工作</strong>。</p><p>Controller 的管理工作都是依赖于 Zookeeper 的。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200917162636.png" alt="8"></p><h4 id="Kafka-事务"><a href="#Kafka-事务" class="headerlink" title="Kafka 事务"></a>Kafka 事务</h4><p>事务可以保证 Kafka 在 Exactly Once 语义的基 础上，生产和消费可以跨分区和会话的精准一次，要么全部成功，要么全部失败。</p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ol><li><p>什么是ISR、OSR、AR</p><p>副本同步队列、同步速度慢会被踢出到OSR列表、所有副本</p></li><li><p>HW、LEO代表什么</p><p>高水位，消费者可观察最大offset、分区中每个副本最大的offset</p></li><li><p>怎么体现消息顺序性</p><p>区内有序</p></li><li><p>拦截器、序列化器、分区器</p></li><li><p>生产者客户端整体结构是什么样子，由几个线程来处理，分别是什么</p><p>2个线程，main线程（发数据、拦截器、序列化器、分区器）， Sender 线程，一个线程共享变量——RecordAccumulator。</p><p>main 线程将消息发送给 RecordAccumulator，Sender 线程不断从 RecordAccumulator 中拉取 消息发送到 Kafka broker。</p></li><li><p>消费组中消费者个数不能超过topic的分区，因为会有消费者消费不到数据，导致资源浪费</p></li><li><p>消费者提交消费位移时提交的是当前消费到的最新消息的 offset 还是 offset+1？</p><p>+1</p></li><li><p>有哪些情形会造成重复消费？</p><p>先消费再提交</p></li><li><p>那些情景会造成消息漏消费？</p><p>先提交后消费</p></li><li><p>topic 的分区数可不可以增加/减少？如果可以怎么增加？如果不可以，那又是为什么？</p><p>增加可以，减少不行：数据无法处理</p></li><li><p>Kafka 有内部的 topic 吗？如果有是什么？有什么所用？</p><p>有，给普通的消费者存offset用</p></li><li><p>Kafka 分区分配的概念？</p><p>range（按主题分配，先看订阅后看组，不会分配错误，但分配不均匀），roundrobin:(按组分配，混合一起，分配均匀但没有订阅的可能也会得到消息)</p></li><li><p>日志目录结构？</p><p>.log 用于存放详细数据</p><p>.index 用于存放索引 </p><p>每个Partition有一个log存放数据，当log过大1G，就会分片索引</p></li><li><p>指定一个offset，如何查找对应的消息</p><p>先通过二分查找法定位到index文件，根据offset对应的值，值就是Log里数据的详细位置</p></li><li><p>Kafka Controller的作用</p><p>通过zk在Kafka集群中选了一个broker当老大，负责管理<strong>集群 broker 的上下线</strong>，<strong>所有 topic 的分区副本分配</strong>和 <strong>leader 选举等工作</strong>。</p></li><li><p>哪些地方需要选举？</p><p>controller（抢资源）、leader（ISR，看同步时间，看同步条数）</p></li><li><p>失效副本是指什么？有哪些应对措施？</p><p>失效的leader、follower，leader失效(在isr中重新选举出新leader，新leader发通知 给所有follower，让其数据截取到HW高水位，再同步新leader)，follower失效（先被踢出isr，恢复后同步之前保存的hw，再截取到现在hw,再同步leader，再回到isr）</p></li><li><p>哪些设计有如此高的性能？</p><p>分布式、分区、顺序写磁盘、零拷贝</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 消息中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="/2020/09/16/util/zookeeper/"/>
      <url>/2020/09/16/util/zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="Zookeeper-入门"><a href="#Zookeeper-入门" class="headerlink" title="Zookeeper 入门"></a>Zookeeper 入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Zookeeper 是一个开源的分布式的，为分布式应用提供协调服务的 Apache 项目。</p><p>Zookeeper =文件系统+通知机制</p><p><strong>工作机制</strong>：Zookeeper从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架，它负 责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化 ， Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出相应的反应。</p><h3 id="Zookeeper特点"><a href="#Zookeeper特点" class="headerlink" title="Zookeeper特点"></a>Zookeeper特点</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/YAN%LG~RK~8CY~X31~7OG%7BI.png" alt="1"></p><p>1）Zookeeper：一个领导者（Leader），多个跟随者（Follower）组成的集群。 </p><p>2）集群中只要有半数以上节点存活，Zookeeper集群就能正常服务。 </p><p>3）全局数据一致：每个Server保存一份相同的数据副本，Client无论连接到哪个Server，数据都是一致的。 </p><p>4）更新请求顺序进行，来自同一个Client的更新请求按其发送顺序依次执行。 </p><p>5）数据更新原子性，一次数据更新要么成功，要么失败。 </p><p>6）实时性，在一定时间范围内，Client能读到最新数据。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/I2~%7B1T[Q2@VDTA8~WRU[QC1.png" alt="2"></p><p>ZooKeeper数据模型的结构与Unix文件系统很类似，整体上可以看作是一棵树，每个节点称做一 个ZNode。每一个ZNode默认能够存储<strong>1M B</strong>的数据，每个ZNode都可以通过其<strong>路径唯一标识</strong>。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>提供的服务包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下 线、软负载均衡等。</p><h4 id="统一命名服务："><a href="#统一命名服务：" class="headerlink" title="统一命名服务："></a>统一命名服务：</h4><p>在分布式环境下，经常需要对应用/服务进行统一命名，便于识别。 </p><p>例如：IP不容易记住，而域名容易记住。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/2020091614051.png" alt="3"></p><h4 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h4><p>分布式化境下，配置文件同步非常常见，要求一个集群中所有节点的配置信息一致，对配置文件修改后也能快速同步到各个节点。</p><ol><li>可将配置信息写入ZooKeeper上的一个Znode。</li><li>各个客户端服务器监听这个Znode。</li><li>一 旦Znode中的数据被修改，ZooKeeper将通知 各个客户端服务器。</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200916140745.png" alt="4"></p><h4 id="统一集群管理"><a href="#统一集群管理" class="headerlink" title="统一集群管理"></a>统一集群管理</h4><p>分布式环境中，实时掌握每个节点的状态时必要的，可根据节点试试状态做一些调整。</p><p>ZooKeeper可以实时监控节点的状态变化，将节点信息写入到ZooKeeper上的一个ZNode，监控这个ZNode可获得它的实时状态变化。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200916172415.png" alt="5"></p><h4 id="服务器动态上下线"><a href="#服务器动态上下线" class="headerlink" title="服务器动态上下线"></a>服务器动态上下线</h4><p>客户端能实时观察到服务器的上下线变化</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200916172623.png" alt="6"></p><h4 id="软负载均衡"><a href="#软负载均衡" class="headerlink" title="软负载均衡"></a>软负载均衡</h4><p>在ZooKeeper中记录每台服务器的访问数，让访问数最少的服务器处理最新请求</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20200916172801.png" alt="7"></p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>1．官网首页： <a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a></p><h2 id="Zookeeper-安装"><a href="#Zookeeper-安装" class="headerlink" title="Zookeeper 安装"></a>Zookeeper 安装</h2><h3 id="本地模式安装部署"><a href="#本地模式安装部署" class="headerlink" title="本地模式安装部署"></a>本地模式安装部署</h3><h3 id="配置参数解读"><a href="#配置参数解读" class="headerlink" title="配置参数解读"></a>配置参数解读</h3><p>​    </p><h2 id="Zookeeper-内部原理"><a href="#Zookeeper-内部原理" class="headerlink" title="Zookeeper 内部原理"></a>Zookeeper 内部原理</h2><h3 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h3><ol><li>半数机制：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器</li><li>ZooKeeper虽然在配置文件中并没有指定主从，但是在工作的是时候，主已经通过内部的选举机制临时产生了。</li></ol><p>原理：</p><p>假设有5台服务器组成的集群，id为1-5，都是最新启动的。依序启动的话，服务器1启动会发起选举，投自己1票但是不过半数，选举不会完成。</p><p>服务器2启动再次发起选举，id比1大，服务器1就会投2号，2号投自己，2票不过半数，选举无法完成。</p><p>服务器3启动发起选举，12会投3，3投自己，3票过半数，服务器3当选leader，其他服务器变为slaver。</p><p>服务器4启动发起选举，因为服务器123已经不是Looking状态，不能更改投票信息，4投自己，3：1，4也会变为slaver</p><p>5同上。</p><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><p>持久：客户端与服务器断开连接，创建的节点不删除</p><p>短暂：节点删除</p><p>持久化节点：客户端和Zookeeper断开连接后，节点依旧存在</p><p>持久化顺序目录节点：节点依然存在，只是给节点名称进行顺序编号。被用于所有的事件进行排序。</p><p>临时目录节点：客户端和ZooKeeper断开连接后，节点就会被删除</p><p>临时顺序目录节点：节点被删除，只是给节点名称进行顺序编号。被用于所有的事件进行排序。</p><h3 id="监听器原理"><a href="#监听器原理" class="headerlink" title="监听器原理"></a>监听器原理</h3><ol><li><p>首先客户端有个main（）线程</p></li><li><p>在main线程创建一个ZooKeeper客户端，这时候就会创建出两个线程，一个负责网络连接通信（Connect），一个负责监听（Listener）</p></li><li><p>通过connect线程将注册的监听事件发送给ZooKeeper</p></li><li><p>ZooKeeper就会在注册监听列表中添加进监听事件</p></li><li><p>当监听到有数据变化（节点数据变化）或路径变化之后（节点增删），就会将消息发送给listener线程</p></li><li><p>listener线程内部就会调用业务方法。</p></li></ol><h3 id="写数据流程"><a href="#写数据流程" class="headerlink" title="写数据流程"></a>写数据流程</h3><ol><li>客户端向ZooKeeper的server1写数据，发送一个请求</li><li>server1不是leader，就会将请求转发给leader</li><li>leader就会将写的请求广播给其他follower，当写成功之后再通知leader</li><li>如果leader收到大多数的follower写数据成功，就会告诉server1写入成功</li><li>server1就会告诉客户端写入成功</li></ol><h2 id="API应用"><a href="#API应用" class="headerlink" title="API应用"></a>API应用</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li><p>ZooKeeper的部署方式有哪几种？集群中的角色有哪些？集群最少有几台机器？</p><p>部署方式为单机模式、集群模式</p><p>角色：主、从</p><p>集群最少有3个机器</p></li><li><p>常用命令</p><p>ls path [watch]：查看当前节点数据(有哪些子节点),watch代表增加监听事件，增删节点监听（1次有效）</p><p>ls2 path [watch]：查看当前节点数据和更新次数等数据</p><p>create <path></path> <value>：普通创建 -s <path></path>含有序列 -e 临时节点</value></p><p>get path [watch]：获取节点的值</p><p>set：设置节点具体值</p><p>stat：查看节点状态</p><p>delete：删除节点</p><p>rmr：递归删除节点</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式的8种实现方式</title>
      <link href="/2020/09/15/xue-xi/dan-li-mo-shi-de-8-chong-shi-xian-fang-shi/"/>
      <url>/2020/09/15/xue-xi/dan-li-mo-shi-de-8-chong-shi-xian-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式的8种实现方式"><a href="#单例模式的8种实现方式" class="headerlink" title="单例模式的8种实现方式"></a>单例模式的8种实现方式</h1><blockquote><p>饿汉式2种（静态常量饿汉式、静态代码块饿汉式）<br>懒汉式3种（线程不安全懒汉式、线程安全懒汉式、同步代码块懒汉式）<br>还有3种（双重检查、静态内部类、枚举方式）</p></blockquote><h2 id="1-饿汉式（静态常量）"><a href="#1-饿汉式（静态常量）" class="headerlink" title="1. 饿汉式（静态常量）"></a>1. 饿汉式（静态常量）</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：在类加载时将其实例化，避免了多线程同步的问题</p><p>缺点：如果不调用方法，该实例就会一直存在，导致资源浪费</p><h2 id="2-饿汉式（静态代码块）"><a href="#2-饿汉式（静态代码块）" class="headerlink" title="2.饿汉式（静态代码块）"></a>2.饿汉式（静态代码块）</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-懒汉式（懒加载，线程不安全）"><a href="#3-懒汉式（懒加载，线程不安全）" class="headerlink" title="3.懒汉式（懒加载，线程不安全）"></a>3.懒汉式（懒加载，线程不安全）</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>             singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：懒加载，在调用方法时再实例化</p><p>缺点：只适用于单线程，如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p><h2 id="4-懒汉式（线程安全，效率低）"><a href="#4-懒汉式（线程安全，效率低）" class="headerlink" title="4.懒汉式（线程安全，效率低）"></a>4.懒汉式（线程安全，效率低）</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：线程同步</p><p>缺点：效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低要改进。</p><h2 id="5-懒汉式（线程不安全，同步代码块）"><a href="#5-懒汉式（线程不安全，同步代码块）" class="headerlink" title="5.懒汉式（线程不安全，同步代码块）"></a>5.懒汉式（线程不安全，同步代码块）</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：效率提高了</p><p>缺点：放弃了同步方法来提高效率，采用同步代码块，但是仍然线程不安全，和第三种一样，如果多个线程同时判断进语句中，就会出现多个实例</p><h2 id="6-双重检查锁"><a href="#6-双重检查锁" class="headerlink" title="6.双重检查锁"></a>6.双重检查锁</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>singleton<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：我们进行了两次if (singleton == null)检查，这样就可以保证线程安全了。这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象。</p><h2 id="7-静态内部类"><a href="#7-静态内部类" class="headerlink" title="7.静态内部类"></a>7.静态内部类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> InnerClass<span class="token punctuation">.</span>singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：采用类加载机制保证初始化时只有一个进程，静态内部类只会在被调用方法的时候才会实例化；</p><h2 id="8-枚举"><a href="#8-枚举" class="headerlink" title="8. 枚举"></a>8. 枚举</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Singleton<span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> Singleton getInstance<span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：在jdk1.5中添加了枚举实现单例模式，不仅能解决多线程同步问题，也能防止反序列化。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</p><h2 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h2><ul><li>网站计数器；</li><li>应用程序日志应用；</li><li>数据库连接池；</li><li>读配置文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot简易笔记</title>
      <link href="/2020/09/13/springboot/spring-boot-jian-yi-bi-ji/"/>
      <url>/2020/09/13/springboot/spring-boot-jian-yi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot简易笔记"><a href="#Spring-Boot简易笔记" class="headerlink" title="Spring Boot简易笔记"></a>Spring Boot简易笔记</h1><h2 id="1-Spring-Boot概述"><a href="#1-Spring-Boot概述" class="headerlink" title="1. Spring Boot概述"></a>1. Spring Boot概述</h2><p><strong>目标</strong>：了解Spring Boot是什么，有什么作用</p><p><strong>小结</strong>：</p><p>Spring Boot是一个便捷搭建 基于spring工程的脚手架；作用是帮助开发人员快速搭建大型的spring 项目。简化工程的配置，依赖管理；实现开发人员把时间都集中在业务开发上。</p><h2 id="2-Spring-Boot入门"><a href="#2-Spring-Boot入门" class="headerlink" title="2. Spring Boot入门"></a>2. Spring Boot入门</h2><p><strong>目标</strong>：能够使用Spring Boot搭建项目</p><p><strong>分析</strong>：</p><p>需求：可以在浏览器中访问<a href="http://localhost:8080/hello%E8%BE%93%E5%87%BA%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6">http://localhost:8080/hello输出一串字符</a></p><p>实现步骤：</p><ol><li>创建工程；</li><li>添加依赖（启动器依赖，spring-boot-starter-web）；</li><li>创建启动类；</li><li>创建处理器Controller；</li><li>测试</li></ol><p><strong>小结</strong>：</p><p>Spring Boot工程可以通过添加启动器依赖和创建启动引导类实现快速创建web工程。</p><blockquote><p>spring-boot-starter-web默认的应用服务器端口是8080</p></blockquote><h2 id="3-Java代码方式配置"><a href="#3-Java代码方式配置" class="headerlink" title="3. Java代码方式配置"></a>3. Java代码方式配置</h2><p><strong>目标</strong>：可以使用@Value获取配置文件配置项并结合@Bean注册组件到Spring</p><p><strong>分析</strong>：</p><p>需求：使用Java代码配置数据库连接池，并可以在处理器中注入并使用</p><p>步骤：</p><ol><li>添加依赖；</li><li>创建数据库；</li><li>创建数据库连接参数的配置文件jdbc.properties；</li><li>创建配置类；</li><li>改造处理器类注入数据源并使用</li></ol><p><strong>小结</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertySource<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbc.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>    String url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driverClassName}"</span><span class="token punctuation">)</span>    String driverClassName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span>    String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span>    String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driverClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-Spring-Boot属性注入方式"><a href="#4-Spring-Boot属性注入方式" class="headerlink" title="4. Spring Boot属性注入方式"></a>4. Spring Boot属性注入方式</h2><p><strong>目标</strong>：能够使用@ConfigurationProperties实现Spring Boot配置文件配置项读取和应用</p><p><strong>分析</strong>：</p><p>需求：将配置文件中的配置项读取到一个对象中；</p><p>实现：可以使用Spring Boot提供的注解@ConfigurationProperties，该注解可以将Spring Boot的配置文件（默认必须为application.properties或application.yml）中的配置项读取到一个对象中。</p><p>实现步骤：</p><ol><li>创建配置项类JdbcProperties类，在该类名上面添加@ConfigurationProperties；</li><li>将jdbc.properties修改名称为application.properties；</li><li>将JdbcProperties对象注入到JdbcConfig；</li><li>测试</li></ol><p><strong>小结</strong>：</p><ul><li>使用@ConfigurationProperties编写配置项类将配置文件中的配置项设置到对象中</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> String driverClassName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUrl</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> driverClassName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDriverClassName</span><span class="token punctuation">(</span>String driverClassName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>driverClassName <span class="token operator">=</span> driverClassName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>使用@ConfigurationProperties在方法上面使用</li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"jdbc"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="5-多个yml文件配置"><a href="#5-多个yml文件配置" class="headerlink" title="5. 多个yml文件配置"></a>5. 多个yml文件配置</h2><p><strong>目标</strong>：可以将多个yml文件在application.yml文件中配置激活</p><p><strong>分析</strong>：</p><p>yaml与properties配置文件除了展示形式不相同以外，其它功能和作用都是一样的；在项目中原路的读取方式不需要改变。</p><p>1）yml配置文件的特征：</p><ol><li>树状层级结构展示配置项；</li><li>配置项之间如果有关系的话需要分行空两格；</li><li>配置项如果有值的话，那么需要在 <code>:</code>之后空一格再写配置项值；</li></ol><p>将application.properties配置文件修改为application.yml的话：</p><pre class=" language-yml"><code class="language-yml">jdbc:  driverClassName: com.mysql.jdbc.Driver  url: jdbc:mysql://127.0.0.1:3306/heima  username: root  password: rootkey:  abc: cba  def:    - g    - h    - j</code></pre><p>2）多个yml配置文件；在spring boot中是被允许的。这些配置文件的名称必须为application-***.yml，并且这些配置文件必须要在application.yml配置文件中激活之后才可以使用。</p><p>3）如果properties和yml配置文件同时存在在spring boot项目中；那么这两类配置文件都有效。在两个配置文件中如果存在同名的配置项的话会以<strong>properties文件的为主</strong>。</p><p><strong>小结</strong>：</p><p>在多个配置文件时，需要将这些文件在application.yml文件中进行激活：</p><pre class=" language-yml"><code class="language-yml">#激活配置文件;需要指定其它的配置文件名称spring:  profiles:    active: abc,def</code></pre><h2 id="6-自动配置原理"><a href="#6-自动配置原理" class="headerlink" title="6. 自动配置原理"></a>6. 自动配置原理</h2><p><strong>目标</strong>：了解Spring Boot项目的配置加载流程</p><p><strong>小结</strong>：</p><ul><li>在 <code>META-INF\spring.fatories</code>文件中定义了很多自动配置类；可以根据在pom.xml文件中添加的 启动器依赖自动配置组件</li><li>通过如下流程可以去修改application配置文件，改变自动配置的组件默认参数</li></ul><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/1560091228494.png" alt="1"></p><h2 id="7-lombok应用"><a href="#7-lombok应用" class="headerlink" title="7. lombok应用"></a>7. lombok应用</h2><p><strong>目标</strong>：使用lombok的注解实现pojo类的简化</p><p><strong>分析</strong>：</p><p>使用Spring Boot整合SSM工程；需要使用到数据库数据。</p><ul><li><p>将数据库表数据导入到数据库中（springboot_test）；</p></li><li><p>编写数据库表对应的实体类；一般情况下需要编写get/set/toString等这些方法会耗时并且会让实体类看起来比较臃肿。可以使用lombok插件对实体类进行简化。</p><p>lombok是一个插件工具类包；提供了一些注解@Data、@Getter等这些注解去简化实体类中的构造方法、get/set等方法的编写。</p><ol><li><p>在IDEA中安装lombok插件；settings-plugins-lombok</p></li><li><p>添加lombok对应的依赖到项目pom.xml文件；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>改造实体类使用lombok注解</p></li></ol></li></ul><p><strong>小结</strong>：</p><p>在Bean上使用：<br>@Data ：自动提供getter和setter、hashCode、equals、toString等方法<br>@Getter：自动提供getter方法<br>@Setter：自动提供setter方法<br>@Slf4j：自动在bean中提供log变量，其实用的是slf4j的日志功能。</p><p>@AllArgsConstrutor：有参</p><p>@NoArgsConstrutor：无参</p><h2 id="8-Spring-Boot整合-SpringMVC端口和静态资源"><a href="#8-Spring-Boot整合-SpringMVC端口和静态资源" class="headerlink" title="8. Spring Boot整合-SpringMVC端口和静态资源"></a>8. Spring Boot整合-SpringMVC端口和静态资源</h2><p><strong>目标</strong>：可以修改tomcat的端口和访问项目中的静态资源</p><p><strong>分析</strong>：</p><ul><li><p>修改tomcat端口</p><p>查询**Properties，设置配置项（前缀+类变量名）到application配置文件中</p></li><li><p>访问项目中的静态资源</p><p>静态资源放置的位置；放置静态资源并访问这些资源</p></li></ul><p><strong>小结</strong>：</p><ul><li>修改项目tomcat端口：</li></ul><pre class=" language-yml"><code class="language-yml">#tomcat端口server:  port: 80</code></pre><ul><li><p>在spring boot项目中静态资源可以放置在如下目录：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/1560096384799.png" alt="2"></p></li></ul><h2 id="9-Spring-Boot整合-SpringMVC拦截器"><a href="#9-Spring-Boot整合-SpringMVC拦截器" class="headerlink" title="9.Spring Boot整合-SpringMVC拦截器"></a>9.Spring Boot整合-SpringMVC拦截器</h2><p><strong>目标</strong>：可以在Spring Boot项目中配置自定义SpringMVC拦截器</p><p><strong>分析</strong>：</p><ol><li>编写拦截器（实现HandlerInterceptor）；</li><li>编写配置类实现 WebMvcConfigurer，在该类中添加各种组件；</li><li>测试</li></ol><p><strong>小结</strong>：</p><p>可以在spring boot项目中通过配置类添加各种组件；如果要添加拦截器的话：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>MyInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加拦截器到spring mvc拦截器链</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">myInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="10-Spring-Boot整合-事务和连接池"><a href="#10-Spring-Boot整合-事务和连接池" class="headerlink" title="10. Spring Boot整合-事务和连接池"></a>10. Spring Boot整合-事务和连接池</h2><p><strong>目标</strong>：配置Spring Boot自带默认的hikari数据库连接池和使用@Transactional注解进行事务配置</p><p><strong>分析</strong>：</p><ul><li><p>事务配置</p><ol><li><p>添加事务相关的启动器依赖，mysql相关依赖；</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写业务类UserService使用事务注解@Transactional</p></li></ol></li><li><p>数据库连接池hikari配置</p><p>只需要在application配置文件中指定数据库相关参数（因为springboot-jdbc启动器默认就是hikari的数据源）</p></li></ul><p><strong>小结</strong>：</p><ul><li>事务配置；只需要添加jdbc启动器依赖</li><li>数据库连接池使用默认的hikari，在配置文件中配置如下：</li></ul><pre class=" language-yml"><code class="language-yml">spring:  datasource:    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://127.0.0.1:3306/springboot_test    username: root    password: root</code></pre><h2 id="11-Spring-Boot整合-Mybatis"><a href="#11-Spring-Boot整合-Mybatis" class="headerlink" title="11. Spring Boot整合-Mybatis"></a>11. Spring Boot整合-Mybatis</h2><p><strong>目标</strong>：配置Mybatis在Spring Boot工程中的整合包，设置mybatis的实体类别名，输出执行sql语句配置项</p><p><strong>分析</strong>：</p><ol><li>添加启动器依赖；</li><li>配置Mybatis：实体类别名包，日志，映射文件等；</li><li>配置MapperScan</li></ol><p><strong>小结</strong>：</p><ul><li><p>添加mybatis官方对于spring boot的一个启动器</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--mybatis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置mybatis</p><pre class=" language-yml"><code class="language-yml">mybatis:  # 实体类别名包路径  type-aliases-package: com.itheima.pojo  # 映射文件路径  # mapper-locations: classpath:mappers/*.xml  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</code></pre></li><li><p>设置启动器类中的mapper扫描</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/1560176555136.png" alt="3"></p></li></ul><h2 id="12-Spring-Boot整合-通用Mapper"><a href="#12-Spring-Boot整合-通用Mapper" class="headerlink" title="12. Spring Boot整合-通用Mapper"></a>12. Spring Boot整合-通用Mapper</h2><p><strong>作用</strong>：省略了在mapper中编写sql语句的步骤，直接使用定制好的简单sql</p><p><strong>目标</strong>：配置通用Mapper组件到Spring Boot项目中并使用Mapper<t>接口</t></p><p><strong>分析</strong>：</p><p>通用Mapper：可以实现自动拼接sql语句；所有的mapper都不需要编写任何方法也就是不用编写sql语句。可以提高开发效率。</p><ol><li><p>添加启动器依赖；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>改造UserMapper继承Mapper<user>；</user></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>修改启动引导类Application中的Mapper扫描注解；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"cn.sgg.springbootquick.dao"</span><span class="token punctuation">)</span></code></pre></li><li><p>修改User实体类添加jpa注解；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token comment" spellcheck="true">//主键回填</span>    <span class="token annotation punctuation">@KeySql</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@column(name="userName")与数据表对应一个列</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>改造UserService实现业务功能；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> User <span class="token function">quickById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据主键查询</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果属性为空就不会出现在insert语句中</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p><strong>小结</strong>：</p><blockquote><p>在启动引导类上面的mapper扫描注解 一定要修改为 通用mapper的扫描注解</p></blockquote><h2 id="整合pringData-JPA"><a href="#整合pringData-JPA" class="headerlink" title="整合pringData JPA"></a>整合pringData JPA</h2><p><strong>1）、SpringData简介</strong></p><p>![](E:\百度云下载\Spring Boot 笔记+课件\images\搜狗截图20180306105412.png)</p><p><strong>2）、整合SpringData JPA</strong></p><p>JPA:ORM（Object Relational Mapping）；</p><p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用JPA注解配置映射关系</span><span class="token annotation punctuation">@Entity</span> <span class="token comment" spellcheck="true">//告诉JPA这是一个实体类（和数据表映射的类）</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tbl_user"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span> <span class="token comment" spellcheck="true">//这是一个主键</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//自增主键</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这是和数据表对应的一个列</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span> <span class="token comment" spellcheck="true">//省略默认列名就是属性名</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span></code></pre><p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//继承JpaRepository来完成对数据库的操作</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>3）、基本的配置JpaProperties</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#     更新或者创建数据表结构(当数据库没有该表时，会创建这个表)</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update<span class="token comment" spellcheck="true">#    控制台显示SQL</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h2 id="13-Spring-Boot整合测试"><a href="#13-Spring-Boot整合测试" class="headerlink" title="13. Spring Boot整合测试"></a>13. Spring Boot整合测试</h2><p><strong>目标</strong>：可以访问处理器对应路径将数据库中的数据根据id查询</p><p><strong>分析</strong>：</p><ol><li>改造HelloController，注入UserService利用其方法实现查询；</li><li>启动项目进行测试 <a href="http://localhost/user/%E7%94%A8%E6%88%B7id">http://localhost/user/用户id</a> –&gt; <a href="http://localhost/user/8">http://localhost/user/8</a></li></ol><p><strong>小结</strong>：</p><p>修改了HelloController：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据用户id查询用户     * @param id 用户id     * @return 用户     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="14-Spring-Boot整合-Junit"><a href="#14-Spring-Boot整合-Junit" class="headerlink" title="14. Spring Boot整合-Junit"></a>14. Spring Boot整合-Junit</h2><p><strong>目标</strong>：在Spring Boot项目中使用Junit进行单元测试UserService的方法</p><p><strong>分析</strong>：</p><ol><li>添加启动器依赖spring-boot-starter-test；</li><li>编写测试类：<ol><li>@RunWith(SpringRunner.class)</li><li>@SpringBootTest</li><li>@Test</li></ol></li></ol><p><strong>小结</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>8L<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user = "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>在Spring Boot项目中如果编写测试类则必须要在类上面添加@SpringBootTest</p></blockquote><h2 id="15-Spring-Boot整合-redis"><a href="#15-Spring-Boot整合-redis" class="headerlink" title="15. Spring Boot整合-redis"></a>15. Spring Boot整合-redis</h2><p><strong>目标</strong>：在Spring Boot项目中使用Junit测试RedisTemplate的使用</p><p><strong>分析</strong>：</p><ol><li><p>添加启动器依赖；spring-boot-starter-data-redis</p></li><li><p>配置application.yml中修改redis的连接参数；（redis需要启动）</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span></code></pre></li><li><p>编写测试类应用RedisTemplate操作redis中的5种数据类型（string/hash/list/set/sorted set）</p></li></ol><p><strong>小结</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//string 字符串</span>        <span class="token comment" spellcheck="true">//redisTemplate.opsForValue().set("str", "heima");</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundValueOps</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"heima"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str = "</span> <span class="token operator">+</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//hash 散列</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundHashOps</span><span class="token punctuation">(</span><span class="token string">"h_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"heima"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundHashOps</span><span class="token punctuation">(</span><span class="token string">"h_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有域</span>        Set set <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundHashOps</span><span class="token punctuation">(</span><span class="token string">"h_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" hash散列的所有域："</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有值</span>        List list <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundHashOps</span><span class="token punctuation">(</span><span class="token string">"h_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" hash散列的所有域的值："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//list 列表</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundListOps</span><span class="token punctuation">(</span><span class="token string">"l_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundListOps</span><span class="token punctuation">(</span><span class="token string">"l_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundListOps</span><span class="token punctuation">(</span><span class="token string">"l_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取全部元素</span>        list <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundListOps</span><span class="token punctuation">(</span><span class="token string">"l_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" list列表中的所有元素："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set 集合</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundSetOps</span><span class="token punctuation">(</span><span class="token string">"s_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundSetOps</span><span class="token punctuation">(</span><span class="token string">"s_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" set集合中的所有元素："</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// sorted set 有序集合</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundZSetOps</span><span class="token punctuation">(</span><span class="token string">"z_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundZSetOps</span><span class="token punctuation">(</span><span class="token string">"z_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundZSetOps</span><span class="token punctuation">(</span><span class="token string">"z_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundZSetOps</span><span class="token punctuation">(</span><span class="token string">"z_key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" zset有序集合中的所有元素："</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="16-Spring-Boot项目部署"><a href="#16-Spring-Boot项目部署" class="headerlink" title="16. Spring Boot项目部署"></a>16. Spring Boot项目部署</h2><p><strong>目标</strong>：将Spring Boot项目使用maven指令打成jar包并运行测试</p><p><strong>分析</strong>：</p><ol><li>需要添加打包组件将项目中的资源、配置、依赖包打到一个jar包中；可以使用maven的<code>package</code>；</li><li>部署：java -jar 包名</li></ol><p><strong>小结</strong>：</p><ul><li><p>添加打包组件</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!-- 打jar包时如果不配置该插件，打出来的jar包没有清单文件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li><li><p>部署运行</p><pre class=" language-sh"><code class="language-sh">java -jar 包名</code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbzj1.png" alt="总结1"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbzj2.png" alt="总结2"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> lombok </tag>
            
            <tag> 通用mapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot CRUD实验</title>
      <link href="/2020/09/11/springboot/springboot-crud-shi-yan/"/>
      <url>/2020/09/11/springboot/springboot-crud-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-CRUD实验"><a href="#Spring-Boot-CRUD实验" class="headerlink" title="Spring Boot CRUD实验"></a>Spring Boot CRUD实验</h1><blockquote><p>这是一个SpringBootCRUD的小项目，记录一下步骤</p></blockquote><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ol><li><p>创建springboot项目，选择starter</p><ol><li>thymeleaf</li><li>web</li></ol></li><li><p>导入webjar依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>引入静态文件</p><ol><li><p>引入html文件</p><p>需要导入到类路径的temlates文件夹中，这样才能被thymeleaf解析</p></li><li><p>引入静态css/js</p><p>需要导入static文件夹中，springboot静态资源的映射规则，去这些路径下找映射</p><pre><code>"classpath:/META-INF/resources/", "classpath:/resources/","classpath:/static/", "classpath:/public/" "/"：当前项目的根路径</code></pre></li></ol></li><li><p>修改html中的url</p><ol><li><p>引入thymeleaf</p><pre><code>&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;</code></pre></li><li><p>使用</p><pre><code>&lt;link th:href="@{/css/bootstrap.min.css}" rel="stylesheet"&gt;</code></pre><p>根据springboot静态资源的映射规则，/代表在类路径下查找</p></li></ol></li></ol><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>步骤：</p><p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbweb11.png" alt="image-20200627180810368"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbweb12.png" alt="image-20200627180856525"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbweb13.png" alt="image-20200627181119740"></p><p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p><p>只需要在主配置文件中设置配置文件的路径</p><pre><code>spring.messages.basename==i18n.login</code></pre><p>3）、去页面获取国际化的值</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Signin Template for Bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Bootstrap core CSS --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/webjars/bootstrap/4.0.0/css/bootstrap.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Custom styles for this template --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/signin.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/asserts/css/signin.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dashboard.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mb-4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/asserts/img/bootstrap-solid.svg}<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/img/bootstrap-solid.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h3 mb-3 font-weight-normal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.tip}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> [[#{login.remember}]]        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.btn}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-5 mb-3 text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>© 2017-2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>效果：根据浏览器语言设置的信息切换了国际化；</p><blockquote><p>遇到的坑:</p><p>错误：出现??login.tip_zh_CN??乱码</p><p>原因：在主配置文件中设置成了spring.messages.basename=i18n</p><p>改为：spring.messages.basename=i18n.login</p></blockquote><p>4）、点击链接切换国际化</p><p>在连接上携带区域信息</p><pre class=" language-html"><code class="language-html">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(l<span class="token punctuation">=</span><span class="token punctuation">'</span>zh_CN<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(l<span class="token punctuation">=</span><span class="token punctuation">'</span>en_US<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>自己写区域信息对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 可以在连接上携带区域信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String l <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Locale locale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> locale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在扩展mvc配置类中将自己写的区域信息对象交给spring容器</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><p>解决以下问题：</p><ol><li><p>实现登录，通过controller获取参数，判断值来实现跳转登录，正确用重定向防止表单重复提交</p></li><li><p>解决缓存问题：编写代码时经常修改代码，为保证页面及时更新，要处理页面缓存，在主配置文件中<code>spring.thymeleaf.cache=false</code>，在页面上ctrl+f9重新编译就可以更新页面</p></li><li><p>错误信息，错误就用Map来保存，在页面上p标签显示</p></li></ol><pre><code>&lt;p style="color: red" th:text="${msg}" th:if="${not #strings.isEmpty(msg)}"&gt;&lt;/p&gt;</code></pre><ol start="4"><li>解决重复提交表单：将controller登录改为重定向，</li><li>解决换浏览器还能跳过登录页面：设置拦截器</li></ol><p>拦截器：</p><p>在controller中登录存入一个Session,自己写一个拦截器，实现HandlerInterceptor，重写preHandle方法，进行判断是否有值，没有值证明没有登录，跳转到登录页面并将错误信息保存。登录成功就通过。</p><p>在mvcConfig中注册组件，addInterceptors方法</p><pre class=" language-java"><code class="language-java">registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/login.html"</span><span class="token punctuation">,</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="6"><li>修改首页姓名显示</li></ol><h2 id="员工列表页面"><a href="#员工列表页面" class="headerlink" title="员工列表页面"></a>员工列表页面</h2><ol><li><p>进入员工列表页面：点击导航，controller，查询方法查询所有员工，restful风格：emps get方法</p></li><li><p>抽取公共页面（将两个导航栏抽取出来）：</p><pre><code>th:fragment,&lt;div th:replace="~{commons/bars::topBar}"&gt;&lt;/div&gt;</code></pre></li><li><p>导航栏点击高亮：引用公共页面是传值</p><pre><code>~{fragmentname::name(uri='xxx')}</code></pre><p>，在高亮部分判断是否高亮th:class,三元运算符</p></li><li><p>显示真正员工信息：将假数据删除，用th:each遍历，th:text获取。</p></li><li><p>修改员工出生日期：</p><p>```<br>th:text=”$</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE配置环境</title>
      <link href="/2020/09/09/javaee/javaee-pei-zhi-huan-jing/"/>
      <url>/2020/09/09/javaee/javaee-pei-zhi-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaEE配置环境"><a href="#JavaEE配置环境" class="headerlink" title="JavaEE配置环境"></a>JavaEE配置环境</h1><blockquote><p>大学上的JavaEE课程，因为每次需要配置环境，这里总结一下</p></blockquote><h2 id="配置SqlServer"><a href="#配置SqlServer" class="headerlink" title="配置SqlServer"></a>配置SqlServer</h2><h3 id="登录、设置"><a href="#登录、设置" class="headerlink" title="登录、设置"></a>登录、设置</h3><ol><li>第一次设置，需要使用windows身份登录，服务器名称：localhost</li><li>登录之后，右键主数据库，修改验证模式为sqlServer，改密码，开启动</li><li>右键数据库，重新启动</li><li>退出sqlServer，选择sqlServer账号密码登录</li></ol><h3 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h3><ol><li><p>右键数据库，任务，分离，勾选两个</p></li><li><p>C:ProgramFiles/M…Server/MSSQL10.MSS/MSSQL/DATA/，找到分离的数据库文件</p></li></ol><h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><p>右键主数据库，附加，添加数据库文件（mdf）</p><h2 id="配置Myeclipse"><a href="#配置Myeclipse" class="headerlink" title="配置Myeclipse"></a>配置Myeclipse</h2><h3 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h3><ol><li>window，偏好设置，server，选择tomcat的安装目录</li></ol><h3 id="配置jre"><a href="#配置jre" class="headerlink" title="配置jre"></a>配置jre</h3><ol><li>window，偏好设置，jre，选择jre的安装目录</li></ol><h3 id="连接sqlServer"><a href="#连接sqlServer" class="headerlink" title="连接sqlServer"></a>连接sqlServer</h3><ol><li>window，open database</li><li>URL：<code>jdbc:sqlserver://localhost:1433</code></li><li>导入Jar包,jdbcsql4.jar</li><li>Test测试</li></ol><blockquote><p>测试失败：</p><p>右键我的电脑，管理，服务，SQLServer，网络配置，两个的TCP/IP启动，服务，SQLServer（MSS、SQLEX）重新启动，再测试</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2020/09/08/util/maven/"/>
      <url>/2020/09/08/util/maven/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="概念：Maven项目对象模型-POM-，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件"><a href="#概念：Maven项目对象模型-POM-，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件" class="headerlink" title="概念：Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件"></a>概念：Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件</h3><ul><li>是一个基于Java平台的 自动化构建工具  make-ant-maven-gradle</li><li>自动化构建工具maven：将 原材料（java、js、css、html、图片）-&gt;产品（可发布项目）</li><li>编译-打包-部署-测试   –&gt; 自动构建</li></ul><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ol><li>增加第三方Jar包</li><li>jar包之间的依赖关系 （自动关联下载所有依赖的Jar，并且不会冲突）<ul><li>依赖：A中的某些类 需要使用B中的某些类，则称为A依赖于B</li><li>在maven项目中，如果要使用 一个当时不存在的Jar或模块，则可以通过 依赖实现（去本地仓库、中央仓库去寻找）</li></ul></li><li>将项目拆分成若干个模块</li></ol><h3 id="实现的功能："><a href="#实现的功能：" class="headerlink" title="实现的功能："></a>实现的功能：</h3><ul><li>清理：删除编译的结果，为重新编译做准备。<br>编译：java-&gt;class<br>测试： 针对于 项目中的关键点进行测试，亦可用 项目中的测试代码 去测试开发代码；<br>报告：将测试的结果 进行显示<br>打包： 将项目中包含的多个文件 压缩成一个文件， 用于安装或部署。 （java项目-jar、web项目-war）<br>安装：将打成的包  放到  本地仓库，供其他项目使用。<br>部署：将打成的包  放到  服务器上准备运行。<pre><code>--将java、js、jsp等各个文件 进行筛选、组装，变成一个 可以直接运行的项目</code></pre><ul><li>手动部署方式：<ul><li>通过Eclipse中Add and Remove按钮进行部署</li><li>将Web项目打成一个war包，然后将该war包复制到tomcat/webapps中 即可执行运行</li></ul></li></ul></li></ul><h3 id="下载配置："><a href="#下载配置：" class="headerlink" title="下载配置："></a>下载配置：</h3><ol><li>下载maven： <a href="http://archive.apache.org/dist/maven/maven-3/">http://archive.apache.org/dist/maven/maven-3/</a> </li><li>配置JAVA_HOME（maven是基于java的工具）</li><li>配置MAVEN_HOME/M2_HOME    :    D:\apache-maven-3.5.3</li><li>配置path ：%MAVEN_HOME%\bin</li><li>验证 ：mvn -v</li><li>配置本地仓库  maven目录/conf/settings.xml<ul><li>默认本地仓库 ：C:/Users/YANQUN/.m2/repository</li><li>修改本地仓库：  <localrepository>D:/mvnrep</localrepository></li></ul></li></ol><h3 id="使用maven"><a href="#使用maven" class="headerlink" title="使用maven"></a>使用maven</h3><ul><li><p>约定 优于 配置（约定：使用默认值）</p></li><li><p>maven约定的目录结构：</p><ul><li>src<ul><li>main：程序功能代码<ul><li>java：java代码</li><li>resources：资源代码、配置代码</li></ul></li><li>test：测试代码<ul><li>java</li><li>resources</li></ul></li></ul></li><li>pom.xml</li></ul><pre><code>pom.xml:gav:用于在本地仓库中定位    &lt;groupId&gt;域名翻转.大项目名&lt;/groupId&gt;    &lt;groupId&gt;org.lanqiao.maven&lt;/groupId&gt;    &lt;artifactId&gt;子模块名&lt;/artifactId&gt;    &lt;artifactId&gt;HelloWorld&lt;/artifactId&gt;    &lt;version&gt;版本号&lt;/version&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</code></pre></li></ul><h3 id="maven常见命令（必须在pom-xml所在目录中执行）"><a href="#maven常见命令（必须在pom-xml所在目录中执行）" class="headerlink" title="maven常见命令（必须在pom.xml所在目录中执行）"></a>maven常见命令（必须在pom.xml所在目录中执行）</h3><p>（第一次执行命令时，因为需要下载执行该命令的基础环境，所以会从中央仓库下载该环境到本地仓库）</p><ol><li>mvn compile   编译–只编译main目录中的java文件</li><li>mvn test     测试</li><li>mvn package          打包jar/war</li><li>mvn install  将开发的模块 放入本地仓库，供其他模块使用 （放入的位置 是通过gav决定）</li><li>mvn clean  删除target目录（删除编译文件的目录）</li></ol><h3 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h3><p>jar包依赖：</p><pre><code>&lt;dependency&gt;            &lt;groupId&gt;junit&lt;/groupId&gt;            &lt;artifactId&gt;junit&lt;/artifactId&gt;            &lt;version&gt;4.0&lt;/version&gt;            &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;* version动态化(统一版本)：1.    &lt;properties&gt;        &lt;lanqiao.World.junit.version&gt;4.0&lt;/lanqiao.World.junit.version&gt;    &lt;/properties&gt;2.&lt;version&gt;${lanqiao.World.junit.version}&lt;/version&gt;</code></pre><p>工程依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven_dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><p><strong>scope：依赖范围，依赖的有效性</strong></p><ul><li>compile(默认) ：在编译、部署（运行）可以获得该依赖</li><li>test：在测试可以获得该依赖</li><li>provided：在编译、测试可以获得该依赖</li></ul></li><li><p><strong>依赖排除</strong></p><p>   A.jar -&gt;B.jar   当我们通过maven引入A.jar时，会自动引入B.jar，不引入：排除依赖</p><pre><code>        &lt;!-- 排除依赖 beans --&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;                        &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;</code></pre></li><li><p><strong>依赖的传递性</strong></p><p>​    A.jar-B.jar-&gt;C.jar</p><p>​    要使 A.jar -&gt;C.jar:当且仅当 B.jar 依赖于C.jar的范围是compile</p></li><li><p><strong>依赖原则：为了防止冲突</strong></p><ul><li><p>路径最短优先原则（手动声明&gt;间接引入）</p></li><li><p>路径长度相同：</p><ul><li>（一个模块）在同一个pom.xml文件中有2个相同的依赖（覆盖）：后面声明的依赖 会覆盖前面声明的依赖 （严禁使用本情况，严禁在同一个pom中声明2个版本不同的依赖）</li><li>（两个模块）如果是不同的 pom.xml中有2个相同的依赖（优先）：则先声明的依赖 ，会覆盖后声明的依赖</li></ul></li><li><p>版本锁定：使用dependencyManagement标签，将其包版本锁定，作用只是锁定，并不会引入jar包，如果需要直接引入Jar包依赖即可，不再需要版本号</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--版本锁定--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入坐标，不需要版本号--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p><strong>多个maven项目（模块）之间如何 依赖： p项目 依赖于 –&gt; q项目</strong></p><ol><li><p>q项    目 install 到本地仓库</p></li><li><p>p项目 依赖：</p><pre><code>        &lt;!-- 本项目  依赖于HelloWorld2项目 --&gt;          &lt;dependency&gt;               &lt;groupId&gt;org.lanqiao.maven&lt;/groupId&gt;              &lt;artifactId&gt;HelloWorld2&lt;/artifactId&gt;              &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;          &lt;/dependency&gt;</code></pre></li></ol></li></ul><h3 id="聚合："><a href="#聚合：" class="headerlink" title="聚合："></a><strong>聚合：</strong></h3><ul><li><p>使用：</p><ul><li><p>在一个总（父）工程中配置聚合（pom.xml）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--项目在本地仓库的根路径  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../Maven1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>（不分顺序，maven会自行判断）        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../Maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span></code></pre></li><li><p>以后只需要操作总工程即可操作聚合中的工程</p></li><li><p>Maven将一个大工程拆分成 若干个子工程（子模块）<br>聚合可以将拆分的多个子工程 合起来</p></li></ul></li></ul><hr><h3 id="在Eclipse中创建maven工程："><a href="#在Eclipse中创建maven工程：" class="headerlink" title="在Eclipse中创建maven工程："></a>在Eclipse中创建maven工程：</h3><ol start="0"><li><p>创建maven工程：new Maven Project –&gt; 第一个勾选上 –&gt; g大项目a项目名v版本填写（项目在本地仓库的定位）</p><ul><li>打包方式：<br>java工程——jar<br>web项目-war<br>父工程-pom</li></ul></li><li><p>在Eclipse中配置maven</p><ul><li>配置maven版本：Window –&gt; Preferences –&gt; Installations –&gt; add（找maven安装目录）</li><li>配置本地仓库  ：  设置settings.xml（Window –&gt; Preferences –&gt; User Settings –&gt;Browser（找settings.xml））</li><li>在pom.xml中编写依赖，编写后需要更新maven：maven-update project</li><li>执行命令：右键pom.xml –&gt;  Run As –&gt; Maven Build … —&gt;Goals:写命令（test/compile…）</li></ul></li><li><p>maven生命周期:</p><ul><li><p>生命周期和构建的关系：</p><pre><code>生命周期中的顺序：a b c d e   当我们执行c命令，则实际执行的是 a b c </code></pre></li><li><p>生命周期包含的阶段：3个阶段</p><ul><li><p>clean lifecycle ：清理</p><pre><code>pre-clean  clean  post-clearn</code></pre></li><li><p>default lifecycle ：默认(常用)</p></li><li><p>site lifecycle：站点</p><pre><code>pre-site   site   post-site site-deploy</code></pre></li></ul></li></ul></li><li><p>修改项目的jdk：</p><ul><li><p>build path:删除旧版本，增加新版本</p></li><li><p>右键项目-属性-Project Factors -java version 改版本  （之前存在要改的版本）</p></li><li><p><strong>通过maven统一jdk版本：</strong></p><pre class=" language-xml"><code class="language-xml">pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ol><hr><h3 id="在Idea中创建maven工程："><a href="#在Idea中创建maven工程：" class="headerlink" title="在Idea中创建maven工程："></a>在Idea中创建maven工程：</h3><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/maven1.png" alt="image-20200513175044486" style="zoom:80%;">    <h3 id="web项目部署到Tomcat服务器"><a href="#web项目部署到Tomcat服务器" class="headerlink" title="web项目部署到Tomcat服务器"></a>web项目部署到Tomcat服务器</h3><ul><li><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/maven2.png" alt="image-20200514231320783" style="zoom:50%;"></li><li><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/maven3.png" alt="image-20200514231539778" style="zoom:50%;"></li></ul><h3 id="maven项目结构"><a href="#maven项目结构" class="headerlink" title="maven项目结构"></a>maven项目结构</h3><ul><li><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/maven4.png" alt="image-20200514231942559"></li><li>创建子模块<img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/maven5.png" alt="image-20200514232323293" style="zoom: 67%;"></li><li><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/maven6.png" alt="image-20200514232617772" style="zoom:67%;"></li><li></li></ul><hr><h3 id="继承实现步骤：（用于统一jar包版本）"><a href="#继承实现步骤：（用于统一jar包版本）" class="headerlink" title="继承实现步骤：（用于统一jar包版本）"></a>继承实现步骤：（用于统一jar包版本）</h3><ol><li><p>.建立父工程： 父工程的打包方式必须为pom </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.lanqiao.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span></code></pre></li><li><p>在父工程的pom.xml中编写依赖：</p><p>通常父工程不导入Jar包，只进行版本锁定，子工程直接导入jar包即可</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>子类:</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 给当前工程 继承一个父工程：1.加入父工程坐标gav   2.当前工程的Pom.xml到父工程的Pom.xml之间的 相对路径  --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 1加入父工程坐标gav --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.lanqiao.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 2当前工程的Pom.xml到父工程的Pom.xml之间的 相对路径，该标签可省 --></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../B/pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre></li><li><p>在子类中 需要声明 ：使用父类的哪些依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 声明：需要使用到父类的junit （只需要ga） --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ol><hr><h3 id="部署Web工程：war"><a href="#部署Web工程：war" class="headerlink" title="部署Web工程：war"></a>部署Web工程：war</h3><ul><li><p>实际开发中，开发人员 将自己的项目开发完毕后  打成war包(package) 交给实施人员去部署</p></li><li><p>通过maven直接部署运行web项目（了解）：</p><ol><li>在pom.xml中配置cargo</li><li>maven命令发布：deploy</li></ol></li></ul><hr><h3 id="Maven工程创建web项目"><a href="#Maven工程创建web项目" class="headerlink" title="Maven工程创建web项目"></a>Maven工程创建web项目</h3><ol><li><p>不使用骨架创建普通项目</p></li><li><p>选择工程</p></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/7X0Q0U4~W14G6XASLJO%7D~XG.png" alt="img"></p><ol start="3"><li>增加webapp</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/L%60I%7DP%EPT4TJ475$OBSVEP5.png" alt="img"></p><p>4.打成War包</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/mavenwar1.png" alt="war"></p><h3 id="分模块开发maven工程"><a href="#分模块开发maven工程" class="headerlink" title="分模块开发maven工程"></a>分模块开发maven工程</h3><ol><li><p>构建工程</p><ol><li><p>创建父工程</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建子工程，继承于父工程</p><pre class=" language-xml"><code class="language-xml">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 1加入父工程坐标gav --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.lanqiao.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 2当前工程的Pom.xml到父工程的Pom.xml之间的 相对路径，该标签可省 --></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../B/pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre></li><li><p>在父工程中，聚合所有子工程</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--项目在本地仓库的根路径  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../Maven1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>（不分顺序，maven会自行判断）        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../Maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span></code></pre></li><li><p>在父工程中，进行版本锁定</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>子工程导入jar包，子工程相互依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven_dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p>完善代码</p><p>将每个部分的代码完善，需要引入Jar包的在子工程引入</p></li><li><p>部署到tomcat</p><p>如：SSM中，父工程中有子工程：pojo、dao、service、web</p><p>其中父工程是pom打包方式，web是war包方式，其他为jar包方式</p><p><strong>部署tomcat的是web子工程</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分布式版本控制工具</title>
      <link href="/2020/09/07/util/git-fen-bu-shi-ban-ben-kong-zhi-gong-ju/"/>
      <url>/2020/09/07/util/git-fen-bu-shi-ban-ben-kong-zhi-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="Git分布式版本控制工具"><a href="#Git分布式版本控制工具" class="headerlink" title="Git分布式版本控制工具"></a>Git分布式版本控制工具</h2><h2 id="1-Git概述"><a href="#1-Git概述" class="headerlink" title="1. Git概述"></a>1. Git概述</h2><h3 id="1-1-Git优势"><a href="#1-1-Git优势" class="headerlink" title="1.1 Git优势"></a>1.1 Git优势</h3><p> 速度</p><p> 简单的设计</p><p> 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</p><p> 完全分布式</p><p> 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</p><h3 id="1-2-Git与SVN对比"><a href="#1-2-Git与SVN对比" class="headerlink" title="1.2 Git与SVN对比"></a>1.2 Git与SVN对比</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而开发人员工作的时候，用的都是自己的电脑，所以首先要从中央服务器下载最新的版本，然后开发，开发完后，需要把自己开发的代码提交到中央服务器。</p><p>集中式版本控制工具缺点：</p><p>  服务器单点故障</p><p>  容错性差</p><p>Git是分布式版本控制系统（Distributed Version Control System，简称 DVCS） ，分为两种类型的仓库：</p><p>本地仓库和远程仓库</p><p>本地仓库：是在开发人员自己电脑上的Git仓库        </p><p>远程仓库：是在远程服务器上的Git仓库</p><p>Clone：克隆，就是将远程仓库复制到本地</p><p>Push：推送，就是将本地仓库代码上传到远程仓库</p><p>Pull：拉取，就是将远程仓库代码下载到本地仓库</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git2.png" alt="图片2"></p><h3 id="1-3-Git工作流程"><a href="#1-3-Git工作流程" class="headerlink" title="1.3 Git工作流程"></a>1.3 Git工作流程</h3><p>工作流程如下：</p><p>1．从远程仓库中克隆代码到本地仓库</p><p>2．从本地仓库中checkout代码然后进行代码修改</p><p>3．在提交前先将代码提交到暂存区</p><p>4．提交到本地仓库。本地仓库中保存修改的各个历史版本</p><p>5．修改完成后，需要和团队成员共享代码时，将代码push到远程仓库</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git3.png" alt="图片3"></p><h3 id="1-4-Git下载与安装"><a href="#1-4-Git下载与安装" class="headerlink" title="1.4 Git下载与安装"></a>1.4 Git下载与安装</h3><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git4.png" alt="图片4"></p><p>下载完成后可以得到如下安装文件：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git5.png" alt="图片5"></p><h2 id="2-Git代码托管服务"><a href="#2-Git代码托管服务" class="headerlink" title="2. Git代码托管服务"></a>2. Git代码托管服务</h2><h3 id="2-1-常用的Git代码托管服务"><a href="#2-1-常用的Git代码托管服务" class="headerlink" title="2.1 常用的Git代码托管服务"></a>2.1 常用的Git代码托管服务</h3><p>前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</p><p>gitHub（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub</p><p>码云（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快</p><p>GitLab （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务</p><h3 id="2-2-在码云注册账号"><a href="#2-2-在码云注册账号" class="headerlink" title="2.2 在码云注册账号"></a>2.2 在码云注册账号</h3><p>要想使用码云的相关服务，需要注册账号（地址： <a href="https://gitee.com/signup">https://gitee.com/signup</a> ）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git6.png" alt="图片6"></p><h3 id="2-3-登录码云并创建Git远程仓库"><a href="#2-3-登录码云并创建Git远程仓库" class="headerlink" title="2.3 登录码云并创建Git远程仓库"></a>2.3 登录码云并创建Git远程仓库</h3><p>注册完成后就可以使用刚刚注册的邮箱进行登录（地址： <a href="https://gitee.com/login">https://gitee.com/login</a> ）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git7.png" alt="图片7"></p><p>登录成功后就可以创建Git远程仓库</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git8.png" alt="图片8"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git9.png" alt="图片9"></p><p>创建完成后可以查看仓库信息</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git10.png" alt="图片10"></p><p>每个Git远程仓库都会对应一个网络地址，可以点击克隆/下载按钮弹出窗口并点击复制按钮获得这个网络地址</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git11.png" alt="图片11"></p><p>我们当前创建的Git远程仓库对应的地址为：<a href="https://gitee.com/ChuanZhiBoKe/myGitRepo.git">https://gitee.com/ChuanZhiBoKe/myGitRepo.git</a></p><h3 id="2-4-邀请其他用户成为仓库成员"><a href="#2-4-邀请其他用户成为仓库成员" class="headerlink" title="2.4 邀请其他用户成为仓库成员"></a>2.4 邀请其他用户成为仓库成员</h3><p>前面已经在码云上创建了自己的远程仓库，目前仓库成员只有自己一个人（身份为管理员）。在企业实际开发中，一个项目往往是由多个人共同开发完成的，为了使多个参与者都有权限操作远程仓库，就需要邀请其他项目参与者成为当前仓库的成员。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git12.png" alt="图片12"></p><h2 id="3-Git常用命令"><a href="#3-Git常用命令" class="headerlink" title="3. Git常用命令"></a>3. Git常用命令</h2><h3 id="3-1-环境配置"><a href="#3-1-环境配置" class="headerlink" title="3.1 环境配置"></a>3.1 环境配置</h3><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><p>设置用户信息 </p><p>   git config –global user.name “itcast”</p><p>   git config –global user.email “<a href="mailto:hello@itcast.cn">hello@itcast.cn</a>”</p><p>查看配置信息</p><p>   git config –list</p><p>   git config user.name</p><p>通过上面的命令设置的信息会保存在~/.gitconfig文件中</p><h3 id="3-2-获取Git仓库"><a href="#3-2-获取Git仓库" class="headerlink" title="3.2 获取Git仓库"></a>3.2 获取Git仓库</h3><p>要使用Git对我们的代码进行版本控制，首先需要获得Git仓库</p><p>获取Git仓库通常有两种方式：</p><p>  在本地初始化一个Git仓库</p><p>  从远程仓库克隆</p><h4 id="3-2-1在本地初始化一个Git仓库"><a href="#3-2-1在本地初始化一个Git仓库" class="headerlink" title="3.2.1在本地初始化一个Git仓库"></a>3.2.1在本地初始化一个Git仓库</h4><p>执行步骤如下：</p><ol><li><p>在电脑的任意位置创建一个空目录（例如repo1）作为我们的本地Git仓库</p></li><li><p>进入这个目录中，点击右键打开Git bash窗口</p></li><li><p>执行命令git init</p></li></ol><p>如果在当前目录中看到.git文件夹（此文件夹为隐藏文件夹）则说明Git仓库创建成功</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git13.png" alt="图片13"></p><h4 id="3-2-2从远程仓库克隆"><a href="#3-2-2从远程仓库克隆" class="headerlink" title="3.2.2从远程仓库克隆"></a>3.2.2从远程仓库克隆</h4><p>可以通过Git提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</p><p>命令形式为：git clone 远程Git仓库地址 </p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git14.png" alt="图片14"></p><h3 id="3-3工作目录、暂存区以及版本库概念"><a href="#3-3工作目录、暂存区以及版本库概念" class="headerlink" title="3.3工作目录、暂存区以及版本库概念"></a>3.3工作目录、暂存区以及版本库概念</h3><p>为了更好的学习Git，我们需要了解Git相关的一些概念，这些概念在后面的学习中会经常提到</p><p><strong>版本库</strong>：前面看到的.git隐藏文件夹就是版本库，版本库中存储了很多配置信息、日志信息和文件版本信息等</p><p><strong>工作目录（工作区）</strong>：包含.git文件夹的目录就是工作目录，主要用于存放开发的代码</p><p><strong>暂存区</strong>：.git文件夹中有很多文件，其中有一个index文件就是暂存区，也可以叫做stage。暂存区是一个临时保存修改文件的地方</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git15.png" alt="图片15"></p><h3 id="3-4-Git工作目录下文件的两种状态"><a href="#3-4-Git工作目录下文件的两种状态" class="headerlink" title="3.4 Git工作目录下文件的两种状态"></a>3.4 Git工作目录下文件的两种状态</h3><p>Git工作目录下的文件存在两种状态：</p><p>  untracked 未跟踪（未被纳入版本控制）</p><p>  tracked 已跟踪（被纳入版本控制）</p><p>​        Unmodified 未修改状态</p><p>​        Modified 已修改状态</p><p>​        Staged 已暂存状态</p><p>这些文件的状态会随着我们执行Git的命令发生变化</p><h3 id="3-5-本地仓库操作"><a href="#3-5-本地仓库操作" class="headerlink" title="3.5 本地仓库操作"></a>3.5 本地仓库操作</h3><p><strong>git status 查看文件状态</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git16.png" alt="图片16"></p><p>也可以使用git status –s 使输出信息更加简洁</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git17.png" alt="图片17"></p><p><strong>git add 文件名 将未跟踪的文件加入暂存区</strong></p><p>或<code>git add . </code>添加当前目录下的所有文件到暂存区</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git18.png" alt="图片18"></p><p>将新创建的文件加入暂存区后查看文件状态</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git19.png" alt="图片19"></p><p><strong>git reset 文件名 将暂存区的文件取消暂存</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git20.png" alt="图片20"></p><p>将文件取消暂存后查看文件状态</p><p>​    <img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git21.png" alt="图片21"></p><p><strong>版本回退</strong></p><ol><li><p>查看版本，确定回到的时刻点</p><p><code>git log --pretty=oneline</code></p></li><li><p>回退操作</p><p><code>git reset --hard 提交编号</code>（金黄色的编号）</p></li><li><p>如果想回到未来，查看时刻点</p><p><code>git reflog</code></p><p>再次回退操作即可</p></li></ol><p><strong>git commit 将暂存区的文件修改提交到本地仓库</strong></p><p>-m “日志信息” 增加日志信息，</p><p>不加-m 日志信息，就会弹出窗口让你输入日志信息</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git22.png" alt="图片22"></p><p><strong>git rm 删除文件</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git23.png" alt="图片23"></p><p>删除文件后查看文件状态</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git24.png" alt="图片24"></p><p>上面删除的只是工作区的文件，需要提交到本地仓库，直接commit即可</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git25.png" alt="图片25"></p><p>如果在文件夹中手动删除了文件，需要将删除的文件先add进暂存区，再commit提交</p><p><strong>将文件添加至忽略列表</strong></p><p>一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中<strong>创建一个名为 .gitignore 的文件</strong>（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><blockquote><p>因为windows不支持创建无文件名的文件，所以需要在git push命令行中使用touch .gitignore来创建该文件</p></blockquote><pre><code># 代表以.a结尾的文件被忽略*.a# !表示不被忽略的文件!lib.a# 当前目录下的todo文件被忽略/TODO# build文件夹下的文件被忽略build/# doc下的以.txt结尾的文件被忽略doc/*.txt# doc下及其子目录下的以pdf结尾的文件被忽略doc/**/*.pdf</code></pre><p><strong>git log 查看日志记录</strong></p><p>回车往下翻，q退出</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git26.png" alt="图片26"></p><h3 id="3-6-远程仓库操作"><a href="#3-6-远程仓库操作" class="headerlink" title="3.6 远程仓库操作"></a>3.6 远程仓库操作</h3><p>前面执行的命令操作都是针对的本地仓库，本章节我们会学习关于远程仓库的一些操作，具体包括：</p><h4 id="3-6-1查看远程仓库"><a href="#3-6-1查看远程仓库" class="headerlink" title="3.6.1查看远程仓库"></a>3.6.1查看远程仓库</h4><p>**git remote **</p><p><strong>git remote  -v</strong> 查看远程仓库地址</p><p>如果想查看已经配置的远程仓库服务器，可以运行 **git remote **命令。 它会列出指定的每一个远程服务器的简写。 如果已经克隆了远程仓库，那么至少应该能看到 origin ，这是 Git 克隆的仓库服务器的默认名字</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git27.png" alt="图片27"></p><h4 id="3-6-2-添加远程仓库（关系）"><a href="#3-6-2-添加远程仓库（关系）" class="headerlink" title="3.6.2 添加远程仓库（关系）"></a>3.6.2 添加远程仓库（关系）</h4><p>用于将本地仓库与远程仓库建立关系</p><p> **git remote add <shortname> <url> **</url></shortname></p><p>运行 **git remote add <shortname> <url> **添加一个新的远程 Git 仓库，同时指定一个可以引用的简写</url></shortname></p><p>shortname：给远程仓库起名，随意，建议origin</p><p>url：在码云/github上建的仓库地址</p><p>可以添加多个远程仓库</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git28.png" alt="图片28"></p><h4 id="3-6-3-从远程仓库克隆"><a href="#3-6-3-从远程仓库克隆" class="headerlink" title="3.6.3 从远程仓库克隆"></a>3.6.3 从远程仓库克隆</h4><p>如果你想获得一份已经存在了的 Git 仓库的拷贝，这时就要用到 git clone 命令。 Git 克隆的是该 Git 仓库服务器上的几乎所有数据（包括日志信息、历史记录等），而不仅仅是复制工作所需要的文件。 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p><p>克隆仓库的命令格式是 <strong>git clone <url></url></strong> </p><p>![图片29](E:\百度云下载\3-6 就业课(2.1)-Git\3-6 就业课(2.1)-Git\笔记\img\图片29.png)</p><h4 id="3-6-4-移除无效的远程仓库"><a href="#3-6-4-移除无效的远程仓库" class="headerlink" title="3.6.4 移除无效的远程仓库"></a>3.6.4 移除无效的远程仓库</h4><p><strong>git remote rm <shortname></shortname></strong> </p><p>如果因为一些原因想要移除一个远程仓库 ，可以使用 **git remote rm <shortname>**，删除远程仓库关系，远程仓库其实还是存在的</shortname></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git30.png" alt="图片30"></p><p>注意：此命令只是从本地移除远程仓库的记录，并不会真正影响到远程仓库</p><h4 id="3-6-5-从远程仓库中抓取与拉取"><a href="#3-6-5-从远程仓库中抓取与拉取" class="headerlink" title="3.6.5 从远程仓库中抓取与拉取"></a>3.6.5 从远程仓库中抓取与拉取</h4><p>前提本地与远程仓库之间要有关系（克隆下来的仓库就包含有联系）</p><p>**git fetch <shoutname> &lt;分支&gt;**是从远程仓库获取最新版本到本地仓库，不会自动merge(不合并)</shoutname></p><p>不合并：从远程仓库抓取下来，并没有在工作区中，需要执行**git merge orgin(名字)/master(分支)**，才抓取到工作区中</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git31.png" alt="图片31"></p><p>**git pull  <shoutname> &lt;分支&gt; **是从远程仓库获取最新版本并merge到本地仓库(合并)</shoutname></p><blockquote><p> 注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories</p></blockquote><h4 id="3-6-6-推送到远程仓库"><a href="#3-6-6-推送到远程仓库" class="headerlink" title="3.6.6 推送到远程仓库"></a>3.6.6 推送到远程仓库</h4><p>当你想分享你的代码 时，可以将其推送到远程仓库。 命令形式：<strong>git push <shoutname> &lt;分支&gt;</shoutname></strong></p><blockquote><p>如果出现403错误，需要在.git/cofig文件中修改</p><p><code>url = https://用户名:密码@github.com/用户名/仓库名.git</code></p></blockquote><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git32.png" alt="图片32"></p><blockquote><p>如果文件冲突：</p><p>例如：远程仓库文件已更新，自己没有pull就开始改代码，push时出现冲突。</p><p>解决方案</p><ol><li>先<code>git pull</code>拉取代码</li><li>将拉取的代码和自己修改的代码进行整理</li><li>再次<code>git push</code></li></ol></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>克隆远程仓库一般流程：</strong></p><ol><li>克隆仓库 <code>git clone &lt;url&gt;</code></li><li>进行本地操作<ol><li>修改代码</li><li>将修改代码加入暂存区<code>git add .</code></li><li>将暂存区代码提交到本地仓库<code>git commit -m "这里是备注信息"</code></li></ol></li><li>推送到远程仓库<code>git push</code></li><li>用的时候拉取最新代码<code>git pull</code></li></ol><p><strong>本地创建仓库一般流程：</strong></p><ol><li>与远程仓库建立关系<code>git remote add &lt;shortname&gt; &lt;url&gt;</code></li><li>用的时候拉取最新代码<code>git pull</code></li><li>进行本地操作</li><li>推送到远程仓库<code>git push</code></li></ol><h3 id="3-7-Git分支"><a href="#3-7-Git分支" class="headerlink" title="3.7 Git分支"></a>3.7 Git分支</h3><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。Git 的master分支并不是一个特殊分支。 它跟其它分支没有区别。 之所以几乎每一个仓库都有 master 分支，是因为git init 命令默认创建它，并且大多数人都懒得去改动它。</p><p>在本章节我们会学习到关于分支的相关命令，具体如下：</p><h4 id="3-7-1-查看分支"><a href="#3-7-1-查看分支" class="headerlink" title="3.7.1 查看分支"></a>3.7.1 查看分支</h4><p># 列出所有本地分支</p><p>$ <strong>git branch</strong></p><p># 列出所有远程分支</p><p>$ <strong>git branch -r</strong></p><p># 列出所有本地分支和远程分支</p><p>$ <strong>git branch -a</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git33.png" alt="图片33"></p><h4 id="3-7-2-创建分支"><a href="#3-7-2-创建分支" class="headerlink" title="3.7.2 创建分支"></a>3.7.2 创建分支</h4><p><strong>git branch &lt;分支名称&gt;</strong></p><p>创建分支会复制当前分支的文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git34.png" alt="图片34"></p><h4 id="3-7-3-切换分支"><a href="#3-7-3-切换分支" class="headerlink" title="3.7.3 切换分支"></a>3.7.3 切换分支</h4><p><strong>git checkout &lt;分支名称&gt;</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git35.png" alt="图片35"></p><p>​    </p><h4 id="3-7-4-推送至远程仓库分支"><a href="#3-7-4-推送至远程仓库分支" class="headerlink" title="3.7.4 推送至远程仓库分支"></a>3.7.4 推送至远程仓库分支</h4><p><strong>git push origin &lt;分支名称&gt;</strong></p><p>会在原分支的基础上，推送分支，两个文件是一样的</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git36.png" alt="图片36"></p><h4 id="3-7-5-合并分支"><a href="#3-7-5-合并分支" class="headerlink" title="3.7.5 合并分支"></a>3.7.5 合并分支</h4><p><strong>git merge  &lt;目标分支名称&gt;</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git37.png" alt="图片37"></p><p>有时候合并操作不会如此顺利。 如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没办法合并它们，同时会提示文件冲突。此时需要我们打开冲突的文件并修复冲突内容，最后执行git add命令来标识冲突已解决</p><p>解决：手动处理冲突的文件内容，之后<strong>git add &lt;文件名&gt;<strong>加入暂存区解决冲突，</strong>git commit</strong> ，</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git38.png" alt="图片38"></p><h4 id="3-7-5-删除分支"><a href="#3-7-5-删除分支" class="headerlink" title="3.7.5 删除分支"></a>3.7.5 删除分支</h4><p><strong>git branch -d &lt;分支名称&gt;</strong></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git39.png" alt="图片39"></p><p>如果要删除的分支中进行了一些开发动作，此时执行上面的删除命令并不会删除分支，如果坚持要删除此分支，可以将命令中的-d参数改为-D</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git40.png" alt="图片40"></p><p>注：如果要删除远程仓库中的分支，可以使用命令</p><p><strong>git push origin –d &lt;分支名称&gt;</strong></p><h4 id="3-7-6-综合应用"><a href="#3-7-6-综合应用" class="headerlink" title="3.7.6 综合应用"></a>3.7.6 综合应用</h4><p>需求：</p><p>为实现新需求，创建一个分支（dev），此时需要修复一个bug，切换线上分支(master)，创建一个新分支(fix)，测试通过之后，切换回线上分支(master)，合并修补分支，最后改动推送到master分钟中，切换回最初分支dex</p><p>操作命令如下：</p><pre><code>git branch devgit checkout devgit checkout mastergit branch fixgit checkout fix修改代码git checkout mastergit merge fixgit push origin mastergit checkout dev</code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ol><li>查看分支<code>git branch</code></li><li>创建分支<code>git branch 分支名</code></li><li>切换分支<code>git checkout 分支名</code></li><li>删除分支<code>git branch -d 分支名</code></li><li>合并分支<code>git merge 被合并的分支名</code></li></ol><h3 id="3-8-Git标签"><a href="#3-8-Git标签" class="headerlink" title="3.8 Git标签"></a>3.8 Git标签</h3><p>标签就像断点，表示此时的文件状态</p><h4 id="3-8-1-新建标签"><a href="#3-8-1-新建标签" class="headerlink" title="3.8.1 新建标签"></a>3.8.1 新建标签</h4><p><strong>git tag &lt;标签名&gt;</strong> :git tag v0.1</p><h4 id="3-8-2-查看标签"><a href="#3-8-2-查看标签" class="headerlink" title="3.8.2 查看标签"></a>3.8.2 查看标签</h4><p><strong>git tag</strong>：查看所有标签</p><p>**git show &lt;标签名&gt;**：查看标签</p><h4 id="3-8-3-推送标签"><a href="#3-8-3-推送标签" class="headerlink" title="3.8.3 推送标签"></a>3.8.3 推送标签</h4><p>**git push <shortname> &lt;标签名&gt;**：git push origin v0.1</shortname></p><h4 id="3-8-4-检出标签"><a href="#3-8-4-检出标签" class="headerlink" title="3.8.4 检出标签"></a>3.8.4 检出标签</h4><p>创建一个新分支，指向一个标签，将该标签的文件状态复制到新分支中</p><p><strong>git checkout -b &lt;分支名&gt; &lt;标签名&gt;</strong></p><h4 id="3-8-5-删除标签"><a href="#3-8-5-删除标签" class="headerlink" title="3.8.5 删除标签"></a>3.8.5 删除标签</h4><p>**git tag -d &lt;标签名&gt;**：删除本地标签</p><p>**git push origin:refs/tags/&lt;标签名&gt;**：删除远程标签</p><h3 id="3-9-SSH协议传输"><a href="#3-9-SSH协议传输" class="headerlink" title="3.9 SSH协议传输"></a>3.9 SSH协议传输</h3><p>Git支持4个传输方式：本地协议（Local）、HTTPS协议、SSH（Secure Shell安全外壳）协议、Git协议</p><p>我们可以使用SSH协议进行传输，在git命令行输入<strong>ssh-keygen -t rsa</strong>，一直回车之后，在<code>C:/Users/[username]</code> 目录下找到名为.ssh 的文件夹， 文件夹内会有两个文件，一个 id_rsa.pub（存放公钥的地方） 一个 id_rsa（存放私钥）</p><p>在远程仓库服务（码云/Github）上，设置公钥，因为本地存放着私钥，可以进行匹配传输了</p><h2 id="4-在IDEA中使用Git"><a href="#4-在IDEA中使用Git" class="headerlink" title="4. 在IDEA中使用Git"></a>4. 在IDEA中使用Git</h2><h3 id="4-1-在IDEA中配置Git"><a href="#4-1-在IDEA中配置Git" class="headerlink" title="4.1 在IDEA中配置Git"></a>4.1 在IDEA中配置Git</h3><p>安装好IntelliJ IDEA后，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安装位置则需要手动配置下Git的路径。</p><p>选择File→Settings打开设置窗口，找到Version Control下的git选项：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git41.png" alt="图片41"></p><p>选择git的安装目录后可以点击“Test”按钮测试是否正确配置</p><h3 id="4-2-在IDEA中使用Git"><a href="#4-2-在IDEA中使用Git" class="headerlink" title="4.2 在IDEA中使用Git"></a>4.2 在IDEA中使用Git</h3><h4 id="4-2-1在IDEA中创建工程并将工程添加至Git"><a href="#4-2-1在IDEA中创建工程并将工程添加至Git" class="headerlink" title="4.2.1在IDEA中创建工程并将工程添加至Git"></a>4.2.1在IDEA中创建工程并将工程添加至Git</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git44.png" alt="图片44"></p><p>将项目添加至Git管理后，可以从IDEA的工具栏上看到Git操作的按钮</p><h4 id="4-2-2-将文件添加到暂存区"><a href="#4-2-2-将文件添加到暂存区" class="headerlink" title="4.2.2 将文件添加到暂存区"></a>4.2.2 将文件添加到暂存区</h4><p>有一些文件不需要交给git管理，可以使用.gitignore来忽略：在仓库中创建该文件，编辑</p><pre><code>.idea/项目名.imitarget/</code></pre><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git45.png" alt="图片45"></p><h4 id="4-2-3-提交文件"><a href="#4-2-3-提交文件" class="headerlink" title="4.2.3 提交文件"></a>4.2.3 提交文件</h4><p>可以添加暂存区后提交，也可以自动暂存并直接提交</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git46.png" alt="图片46"></p><h4 id="4-2-4-将代码推送到远程仓库"><a href="#4-2-4-将代码推送到远程仓库" class="headerlink" title="4.2.4 将代码推送到远程仓库"></a>4.2.4 将代码推送到远程仓库</h4><p>自创本地仓库，需要Define remote设置推送的远程仓库</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git47.png" alt="图片47"></p><h4 id="4-2-5-从远程仓库克隆工程到本地"><a href="#4-2-5-从远程仓库克隆工程到本地" class="headerlink" title="4.2.5 从远程仓库克隆工程到本地"></a>4.2.5 从远程仓库克隆工程到本地</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git48.png" alt="图片48"></p><h4 id="4-2-6-从远程拉取代码"><a href="#4-2-6-从远程拉取代码" class="headerlink" title="4.2.6 从远程拉取代码"></a>4.2.6 从远程拉取代码</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git49.png" alt="图片49"></p><p>也可以点绿色对勾左边的蓝色对勾UpdateProject，直接拉取最新代码</p><h4 id="4-2-7-版本对比"><a href="#4-2-7-版本对比" class="headerlink" title="4.2.7 版本对比"></a>4.2.7 版本对比</h4><p>右键空白处</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git50.png" alt="图片50"></p><h4 id="4-2-8-创建分支"><a href="#4-2-8-创建分支" class="headerlink" title="4.2.8 创建分支"></a>4.2.8 创建分支</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git51.png" alt="图片51"></p><h4 id="4-2-9-切换分支"><a href="#4-2-9-切换分支" class="headerlink" title="4.2.9 切换分支"></a>4.2.9 切换分支</h4><p>查看当前在哪个分支，可以使用Git命令行，括号内即当前分支</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git52.png" alt="图片52"></p><h4 id="4-2-10-分支合并"><a href="#4-2-10-分支合并" class="headerlink" title="4.2.10 分支合并"></a>4.2.10 分支合并</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/git53.png" alt="图片53"></p><h2 id="5-图形化Git界面TortoiseGit"><a href="#5-图形化Git界面TortoiseGit" class="headerlink" title="5. 图形化Git界面TortoiseGit"></a>5. 图形化Git界面TortoiseGit</h2><p>下载地址：<a href="https://tortoisegit.org/download/">https://tortoisegit.org/download/</a></p><h3 id="5-1-创建git本地仓库"><a href="#5-1-创建git本地仓库" class="headerlink" title="5.1 创建git本地仓库"></a>5.1 创建git本地仓库</h3><p>进入创好的仓库文件夹，右键Git Create repository here，不勾选点确定</p><h3 id="5-2-Git克隆"><a href="#5-2-Git克隆" class="headerlink" title="5.2 Git克隆"></a>5.2 Git克隆</h3><p>右键需要克隆的地方，右键Git Clone，URL：需要克隆的远程仓库地址</p><h3 id="5-3-添加暂存区、提交文件"><a href="#5-3-添加暂存区、提交文件" class="headerlink" title="5.3 添加暂存区、提交文件"></a>5.3 添加暂存区、提交文件</h3><p>选中文件右键，Add，完成后再右键，Git Commit提交，Message为编写日志</p><p>也可以直接提交，右键Git Commit提交，勾选下面的文件，编写日志即可</p><h3 id="5-4-推送远程仓库"><a href="#5-4-推送远程仓库" class="headerlink" title="5.4 推送远程仓库"></a>5.4 推送远程仓库</h3><p>克隆的仓库：右键仓库空白处，TortoiseGit、Push，Local为本地分支，Remote为远程分支，下面的Remote为远程仓库关系，Manage可以查看远程仓库地址</p><p>本地自创的仓库：右键仓库空白处，TortoiseGit、Push，点击Manage，输入Remote：远程仓库关系名，URL为远程仓库地址，确定，输入remote：分支名master</p><h3 id="5-5-拉取代码"><a href="#5-5-拉取代码" class="headerlink" title="5.5 拉取代码"></a>5.5 拉取代码</h3><p>右键仓库空白处，TortoiseGit、Pull</p><h3 id="5-6-创建分支，切换分支，合并分支"><a href="#5-6-创建分支，切换分支，合并分支" class="headerlink" title="5.6 创建分支，切换分支，合并分支"></a>5.6 创建分支，切换分支，合并分支</h3><p>创建：右键仓库空白处，TortoiseGit、Create Branch，Branch：分支名，Base on：基于哪个分支。</p><p>切换：右键仓库空白处，TortoiseGit、Checkout，Branch：切换分支</p><p>合并：切换到主分支，右键仓库空白处，TortoiseGit、Merge，Branch：待合并分支</p><h3 id="5-7-推送到远程分支"><a href="#5-7-推送到远程分支" class="headerlink" title="5.7 推送到远程分支"></a>5.7 推送到远程分支</h3><p>右键仓库空白处，TortoiseGit、Push，Local：选待推送分支，Remote：写待推送分支</p>]]></content>
      
      
      <categories>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm框架配置文件</title>
      <link href="/2020/09/06/ssm-kuang-jia/ssm-zheng-he-pei-zhi-wen-jian/"/>
      <url>/2020/09/06/ssm-kuang-jia/ssm-zheng-he-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">></span></span>1.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- log start --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!-- log end --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="骨架搭建"><a href="#骨架搭建" class="headerlink" title="骨架搭建"></a>骨架搭建</h2><ol><li>类文件</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200906193619458.png" alt="image-20200906193619458"></p><ol start="2"><li>配置文件</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200906193454391.png" alt="image-20200906193454391"></p><ol start="3"><li>webapp</li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200906193815105.png" alt="image-20200906193815105"></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>配置文件：</p><ol><li><p>web.xml：    </p><ol><li>ContextLoaderListener监听器（加载Spring配置文件）、</li><li>DispatcherServlet前端控制器（加载SpringMVC配置文件）、</li><li>CharacterEncodingFilter（中文乱码问题）</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--配置applicationContext监听器，加载spring配置文件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--配置加载类路径下的配置文件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置前端控制器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--加载springmvc配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--配置处理中文乱码问题--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><p>springMVC.xml： </p><ol><li>context:component-scan 开启注解扫描（只扫描mvc部分）、</li><li>InternalResourceViewResolver 视图解析器</li><li><a href="mvc:default-servlet-handler">mvc:default-servlet-handler</a>排除静态资源过滤</li><li>mvc:annotation-driven 开启MVC注解支持</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启注解扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--排除静态资源过滤问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启Mvc注解支持--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>applicationContext.xml：</p><ol><li>context:component-scan 开启注解扫描（排除mvc部分）</li><li>配置Bean：数据源 ComboPooledDataSource/druid/</li><li>配置Bean：工厂类对象 sqlSessionFactory</li><li>配置Bean：映射的包 MapperScannerConfigurer</li><li>配置Bean：平台事务管理器 DataSourceTransactionManager</li><li>配置事务通知：transactionManager</li><li>配置事务Aop增强：aop:config</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/aop    http://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/tx     http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启注解扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据源c3p0--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置工厂对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--可以配置别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置映射的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperScanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory">&lt;/property> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务通知--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置aop增强--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* cn.hm.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>sqlMapConfig.xml</p><ol><li>配置别名</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token doctype">&lt;!DOCTYPE configuration    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种数据源的配置</title>
      <link href="/2020/09/03/ssm-kuang-jia/ji-chong-shu-ju-yuan-de-pei-zhi/"/>
      <url>/2020/09/03/ssm-kuang-jia/ji-chong-shu-ju-yuan-de-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>如果是框架整合，那么数据源要配置在spring容器中</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--jdbc--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/qn<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Admin<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- JNDI获取数据源(使用dbcp连接池) --></span>      <span class="token comment" spellcheck="true">&lt;!-- 因为我们使用的这个数据源是采用 dbcp连接池，对于连接池来说，整个应用中只有一个，               所以作用域需要设置成单例 因为获取数据源是非常消耗性能，所以我们也要采用单例模式--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span>   <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- JNDI获取数据源(使用c3p0连接池) --></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${uname}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdleTime<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- DruidDataSource数据库连接池 ，阿里巴巴的一个数据源--></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>&lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>destroy-method="close"><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> jdbc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2020/09/01/xue-xi/fan-she/"/>
      <url>/2020/09/01/xue-xi/fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p><strong>关于java.lang.Class类的理解</strong></p><p>类加载过程：</p><p><strong>程序经过javac.exe命令编译以后，会生成一个或多个字节码文件（.class结尾）。</strong></p><ol><li><p>加载:接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于<strong>将某个字节码文件加载到内存中</strong>。此过程就称为类的加载。<strong>加载到内存中的类，我们就成为运行时类，此运行时类，就作为Class的一个实例，我们可以通过这个实例获取相关信息</strong>（不需要new，直接赋值）。类缓存：一旦被加载，他就会缓存一段时间。</p></li><li><p>链接：设置类变量的默认初始化值</p></li><li><p>初始化：将属性进行赋值</p></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/fanshe1.png" alt="image-20200901163906013"></p><p><strong>反射</strong>：程序可以访问、检测和修改它本身状态或行为的一种能力。</p><p><strong>java.lang.reflect包</strong></p><p><strong>反射的动态性</strong>（作用）：反射机制允许程序在执行时借助API取得任何类的内部信息，从而直接操作任意对象的内部属性和方法。换句话说，当我们只有在程序运行时才知道该创 建哪个对象时（就是传参），才会创建哪个对象。在框架中大多使用反射，模板写好，只需要我们动态传入少量的参数，通过反射来调用参数对应的类创建对象，执行操作。</p><p>好处：</p><ol><li>可以在程序运行中，操作这些对象</li><li>可以解耦，提高程序的可扩展性</li></ol><p><strong>类加载器</strong></p><p>作用：用于将类加载到内存当中</p><ol><li>引导类加载器：主要负责加载Java核心类库，无法加载自定义类，无法获得</li><li>扩展类加载器：主要加载jre/ext目录下的jar包，可以通过<code>系统类加载器.getParent()</code>获得</li><li>系统类加载器：负责加载自定义类，可以通过<code>类名.class.getClassLoader()</code>获得</li></ol><p><strong>使用类加载器读取配置文件</strong></p><pre class=" language-java"><code class="language-java">Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式1：使用输入流的方式</span><span class="token comment" spellcheck="true">//此时文件默认在当前module下</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式2：使用类加载器读取</span><span class="token comment" spellcheck="true">//此时文件默认在当前module的src目录下</span>ClassLoader classLoader <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InputSteam is <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc1.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>==所有的类都属于Class类==</p><h3 id="获取Class对象的方式"><a href="#获取Class对象的方式" class="headerlink" title="获取Class对象的方式"></a>获取Class对象的方式</h3><ol><li><p>（常用）Class.forname(“全类名”)：调用Class的静态方法，将字节码文件加载进内存，返回Class对象</p><ul><li>多用于配置文件，将类名定义在配置文件中，读取文件加载类</li></ul><pre class=" language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jm.java.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>类名.class：通过类名的属性class获取</p><ul><li>多用于参数的传递</li></ul><pre class=" language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></code></pre></li><li><p>对象.getClass()：通过运行时类的对象，调用getClass()，方法在object类中定义着</p><ul><li>多用于对象的获取字节码方式</li></ul><pre class=" language-java"><code class="language-java">Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">clazz</span> <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>使用类的加载器：ClassLoader</p><pre class=" language-java"><code class="language-java">ClassLoader classLoader <span class="token operator">=</span> ReflectionTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">clazz4</span> <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.jm.java.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p><strong>结论</strong>：同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，不论通过哪种方式获取的Class对象都是同一个。</p><h3 id="Class对象功能："><a href="#Class对象功能：" class="headerlink" title="Class对象功能："></a>Class对象功能：</h3><ul><li><p><strong>获取</strong>功能：<code>Class对象.</code></p><ol><li><p>获取成员变量们</p><ul><li>Filed[] getFields() ：获取运行时类及其父类所有==public==修饰的成员变量</li><li>Filed[] getField(String org)</li><li>Filed[] getDeclaredFields()：不考虑修饰符，获取所有（不包含父类）的成员变量</li><li>Filed[] getDeclaredField()</li></ul></li><li><p>获取构造方法</p><ul><li>Constructor<t> getConstructor(xxx.class,xxx.class)：获取有参构造器，一般很少用得到，用的都是<code>clazz.newInstance()</code>使用空参构造器创建对象</t></li><li>Constuctor getDeclaredConstructor(xxx.class)</li></ul></li><li><p>获取运行时类的父类</p><ul><li>Class getSuperclass()</li><li>Class<t> getGenericSuperclass()：获取带泛型的父类</t></li></ul></li><li><p>获得成员方法</p><ul><li><p>Method[] getMethods():获取运行时类及其父类所有==public==修饰的方法</p></li><li><p>Method getMethod(String s,xxx.class……)</p></li><li><p>Method[] getDeclaredMethods（String name,String.class参数列表）：不考虑修饰符，获取所有（不包含父类）的方法</p></li></ul></li><li><p>获取类名 </p><ul><li>String getName()</li></ul></li></ol></li><li><p><strong>操作</strong>运行时类指定的属性：</p><ul><li>成员变量.get(Object o)：获取哪个对象的值</li><li>成员变量.set(Object o,String s)：给哪个对象设置值</li><li>成员变量.setAccessible(true)：<strong>暴力反射</strong>，忽略私有限制，同样可以获取成员变量</li></ul></li><li><p><strong>操作</strong>运行时类指定的构造方法：</p><ul><li>T newInstance(org) ：==创建对象==</li><li>要求：<ul><li>运行时类必须提供空参构造器</li><li>空参构造器的访问权限需要是public<ul><li>引申：在javaBean中要求提供一个Public的空参构造器，原因：<ul><li>便于通过反射，创建运行时类的对象</li><li>便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器</li></ul></li></ul></li></ul></li><li>简化：直接用类对象来创建对象：personClass.newInstance()</li></ul></li><li><p><strong>操作</strong>运行时类指定的方法：</p><ul><li><p>invoke(Object o,org) : 执行方法。</p><ul><li>参数1：方法的调用者 参数2：给方法形参赋值的实参</li><li>返回值就是方法的返回值</li><li>静态方法的调用者是：运行时类.class</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.获取class对象</span>Class <span class="token class-name">clazz</span> <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.获取运行时类对象</span>Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.获取方法对象</span>Method method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"study"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.0 暴力反射，忽略修饰符</span>method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.执行方法</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"好好学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>getName() ： 获取方法名称</p></li><li><p>getAnnotations()：获取方法注解（前提是注解的生命周期必须是RUNTIME，因为反射是runtime）</p></li></ul></li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p><strong>代理模式</strong>：</p><p>使用一个代理将对象包装起来，然后用该代理对象取代原始对象，任何调用原始对象都需要通过代理，代理对象再决定方法逻辑和是否要转到原始对象方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态代理</span><span class="token keyword">interface</span> <span class="token class-name">User</span><span class="token punctuation">{</span>     <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">userImpl</span> <span class="token keyword">implements</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">userProxy</span> <span class="token keyword">implements</span> <span class="token class-name">User</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> User u<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">userProxy</span><span class="token punctuation">(</span>User u<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>u <span class="token operator">=</span> u <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userImpl u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">userImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userProxy userProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">userProxy</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        userProxy<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>代理模式优点：在不修改原码的基础上，对方法进行增强</p><p>静态代理的缺点：</p><p>每个代理实现类实现的接口都写死了，如果每个业务都需要增加功能，都需要创建响应的代理类，</p><p>所以动态代理油然而生，写一个通用的代理实现类，当运行时根据调用的对象来动态生成代理类，</p><p>其动态代理类的特点在于：不知道要创建哪个被代理对象的代理类，不知道被代理对象的方法，因此使用到反射来获取其代理对象和代理方法。</p></blockquote><p><strong>动态代理</strong></p><p>普通静态代理，是指代理类和原始对象的类都已经在<strong>编译时期</strong>确定下来，不利于程序的扩展，而且一个代理类只能为一个接口服务。而动态代理客户通过代理类调用其他对象的方法，并且在程序<strong>运行时根据需要动态</strong>创建<strong>代理对象</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一步：创建接口，JDK动态代理基于接口实现，所以接口必不可少（准备工作）</span>    <span class="token comment" spellcheck="true">//接口</span>    <span class="token keyword">interface</span> <span class="token class-name">Man</span><span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//被代理类</span>    <span class="token keyword">class</span> <span class="token class-name">ManImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Man</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"说话！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二步：实现InvocationHandler接口，重写invoke方法（准备工作）</span>    <span class="token comment" spellcheck="true">//动态代理实现类</span>    <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建handler对象时，初始化obj</span>        <span class="token keyword">private</span> Object obj <span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyHandler</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//执行方法</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第三步：调用Proxy的静态方法newProxyInstance方法生成代理实例（生成实例时需要提供类加载器，我们可以使用接口类的加载器即可）</span>        <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Man man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建被代理对象</span>            MyHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建handler</span>            <span class="token comment" spellcheck="true">//Man manImpl = (Man) handler.getProxyInstance();//创建代理类</span>            Man manImpl <span class="token operator">=</span> <span class="token punctuation">(</span>Man<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ManImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ManImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第四步：使用新生成的代理实例调用某个方法实现功能。</span>            manImpl<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行方法</span>    <span class="token punctuation">}</span></code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>需求</strong>：写一个”框架”，可以帮我们创建任意类的对象，并且执行其中任意方法</p><p>思路：创建配置文件，写入全类名和方法名，将配置文件加载进内存，获取配置文件的值，创建对象，执行方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取properties对象</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加载配置文件</span>        InputStream is <span class="token operator">=</span> ReflectTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"pro.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取配置文件的值</span>        String className <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取class对象</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建对象，执行方法</span>        <span class="token comment" spellcheck="true">//这里cls.newInstance()被废弃了</span>        Object obj <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>问题</strong></p><ol><li><p>什么时候使用反射的方式</p><pre><code>反射是视为动态语言的关键，反射机制允许程序在运行期借助api获取任意类的内部信息，并可以直接操作任意对象的内部属性和方法反射的特征：动态性。当不确定实例化哪个对象和方法的时候，才用得到反射</code></pre></li><li><p>反射机制与面向对象中的封装性是不是矛盾的？如何看待两个技术？</p><pre><code>不矛盾，两个的目的性不一样面向对象的封装性的目的就是为了让人知道，哪些属性推荐你调用的，哪些属性并不需要调用也能实现相同的效果。反射机制的目的是表明自己可以调用这些属性，虽然不推荐调用，但是如果真的想调用也不是不可以。</code></pre></li><li><p>写出获取Class实例的三种常见方式</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jm.java.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">clazz</span> <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>关于Class类的理解</p><pre><code>1.Class实例对应加载到内存中的一个运行时类2.Class实例调取其中的方法，就是调取对应运行时类的结构</code></pre></li><li><p>创建Class对应运行时类的对象的通用方法，以及这样操作，需要对应运行时类构造器方面满足的要求</p><pre class=" language-java"><code class="language-java">Object obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">.</span>必须要有空参构造器<span class="token number">2</span><span class="token punctuation">.</span>空参构造器的权限修饰符的权限要够，通常为<span class="token keyword">public</span></code></pre></li><li><p>调用方法</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>method<span class="token punctuation">.</span><span class="token function">setAccessable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>读取配置文件</p><pre class=" language-java"><code class="language-java">Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ClassLoader classloader <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InputStream is <span class="token operator">=</span> classloader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>反射机制能提供的功能</p><pre><code>在运行时判断任意一个对象所属的类在运行时构造任意一个类的对象在运行时判断任意一个类所具有的成员变量和方法在运行时获取泛型信息在运行时调用任意一个对象的成员变量与方法在运行时处理注解生成动态代理</code></pre></li><li><p>相关API</p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Class<span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field</code></pre></li><li><p>创建类的对象的方式</p></li></ol><pre><code>1. new+构造器2. 工具类中是否有静态方法存在3. 通过反射</code></pre><pre><code>反射机制就是程序.java文件在编译之后生成class文件，通过类加载器将class文件加载进内存，加载进内存的就称之为运行时类，而运行时类就对应着一个class实例，我们可以通过操作这个实例来获取运行时类对应的属性及方法。反射的动态性：因为是操控class实例，已经经过了编译过程进入运行过程，换句话说我们只有在运行程序时才知道到底创建了哪个对象，从而进行相应对象的逻辑操作</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客备份</title>
      <link href="/2020/08/01/hexo/hexo-bo-ke-bei-fen/"/>
      <url>/2020/08/01/hexo/hexo-bo-ke-bei-fen/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客备份"><a href="#Hexo博客备份" class="headerlink" title="Hexo博客备份"></a>Hexo博客备份</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用Hexo在github搭建的博客，博客作为一个单独的GitHub仓库存在，但是这个仓库只有生成的静态网页文件，并没有Hexo的源文件，如果要换电脑或者重装系统后，就比较麻烦了，这里推荐一种方法。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>我们的博客是托管到 GitHub（Coding） 上的。而我们每次上传（<code>hexo d</code>）的是网页文件，不是我们的文章，所以我们如果想上传文章，但同时不会干扰到网页部署，就在 GitHub 的博客仓库上建立一个分支 hexo。</p><p>这个 hexo 分支的作用就是用来保存我的博客所有文件。所以第一步我们就获得了博客仓库的 .git 文件夹，作用就是利用它连接到我们的博客仓库，而且建立分支 hexo。所以拿到这个文件夹，我们就把除了它的其他文件删掉。</p><p>然后利用这个分支，把我们的 MarkDown 文章和其他文件上传到 GitHub 托管。这样 <code>hexo d</code>推送的是 master 分支，而 <code>git push</code> 推送的是 hexo 分支，互不干扰。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-获取-git文件"><a href="#1-获取-git文件" class="headerlink" title="1. 获取.git文件"></a>1. 获取.git文件</h3><ol><li><p>我们先建立一个文件夹，名字随便，我这里叫 hexo，在该文件夹空白处，启动 GitBash</p></li><li><p>先克隆我们博客的仓库</p><pre><code>git clone https://e.coding.net/fenghen0918/fenghen0918.git</code></pre><p>这里仅仅只是为了获得版本管理的 <strong>.git</strong> 隐藏文件夹。</p></li></ol><h3 id="2-建立分支"><a href="#2-建立分支" class="headerlink" title="2. 建立分支"></a>2. 建立分支</h3><p>建立一个分支，我这里分支名为 hexo ，输入代码</p><pre><code>git checkout -b hexo</code></pre><h3 id="3-清空-hexo-分支"><a href="#3-清空-hexo-分支" class="headerlink" title="3. 清空 hexo 分支"></a>3. 清空 hexo 分支</h3><p>克隆下来的都是编译后的静态页面，直接删除留下.git即可。</p><ol><li><p>删除除了 .git 文件夹的所有文件。我们只需要这个版本管理，在删除后通过代码 <code>git status</code> 查看</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/hb1.png" alt="123"></p></li><li><p>增加到暂存区</p><pre><code>git add --all</code></pre></li><li><p>提交到本地仓库</p><pre><code>git commit -m  "清空hexo分支仓库"</code></pre></li><li><p>最后我们推送到远端更新</p><pre><code>git push --set-upstream origin hexo</code></pre><p>这里同时设置了以后默认为hexo分支，回到博客的根目录下就能看到。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/JJ4@GVG[HYUI8$NL~TMR5_S.png" alt="img"></p><blockquote><p>注意：这时默认分支为hexo，但博客部署的还是master分支，此配置在config.yml中配置的</p><pre><code>deploy:  type: git  repo: https://github.com/Witman1999/Witman1999.github.io.git  branch: master #提交的默认分支</code></pre></blockquote></li></ol><h3 id="4-移动-git文件"><a href="#4-移动-git文件" class="headerlink" title="4. 移动.git文件"></a>4. 移动.git文件</h3><p>把 .git 文件夹移动到博客的根目录下</p><h3 id="5-提交源文件"><a href="#5-提交源文件" class="headerlink" title="5. 提交源文件"></a>5. 提交源文件</h3><blockquote><p>注意：如果你的主题文件，是克隆 Github 下来的，那么会带有该主题的 Github 的 .git 版本管理文件，也就是 .git 文件夹。所以主题下面的要删除 .git 文件夹和 .gitignore 文件，否则会忽略这个 next 主题的上传。</p></blockquote><p>推送 Github 的仓库的步骤，在博客的根目录下，输入</p><pre><code>git add --allgit commit -m “提交源文件”git push （这里要确保提交的分支为 hexo ，在前面的步骤可以查看，如果不是可以输入 git checkout hexo切换分支）</code></pre><p>此时会发现在远程仓库的Hexo分支中已经推送了绝大部分文件，只有一些被忽略的文件，这些被忽略的并不需要拷贝</p><ol><li><p><code>_config.yml</code>站点的配置文件，需要拷贝；</p></li><li><p><code>themes/</code>主题文件夹，需要拷贝；</p></li><li><p><code>source</code>博客文章的.md文件，需要拷贝；</p></li><li><p><code>scaffolds/</code>文章的模板，需要拷贝；</p></li><li><p><code>package.json</code>安装包的名称，需要拷贝；</p></li><li><p><code>.gitignore</code>限定在push时哪些文件可以忽略，需要拷贝；</p></li><li><p><code>.git/</code>主题和站点都有，标志这是一个git项目，不需要拷贝；</p></li><li><p><code>node_modules/</code>是安装包的目录，在执行<code>npm install</code>的时候会重新生成，不需要拷贝；</p></li><li><p><code>public</code>是<code>hexo g</code>生成的静态网页，不需要拷贝；</p></li><li><p><code>.deploy_git</code>同上，<code>hexo g</code>也会生成，不需要拷贝；</p></li><li><p><code>db.json</code>文件，不需要拷贝。</p></li></ol><p>其实不需要拷贝的文件正是<code>.gitignore</code>中所忽略的。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>在本地对博客修改（包括修改主题样式、发布新文章等）后：</p><ol><li>依次执行<code>git add .</code>、<code>git commit -m "推送"</code>、<code>git push origin hexo</code>来提交hexo网站源文件，因为我设置了默认hexo分支，直接输入<code>git push</code>即可；</li><li>执行<code>hexo g -d</code>生成静态网页部署至Github上，我使用了gulp插件压缩代码，所以直接输入<code>gulp</code>，<code>hexo d</code>即可。</li></ol><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><h3 id="1-配置Hexo环境"><a href="#1-配置Hexo环境" class="headerlink" title="1.配置Hexo环境"></a>1.配置Hexo环境</h3><p>重装电脑后，或者在其它电脑上想修改博客：</p><ol><li>安装git；</li><li>安装Nodejs和npm；</li><li>使用<code>git clone git@github.com:WincerChan/WincerChan.github.io.git</code>将仓库拷贝至本地；</li><li>在文件夹内执行以下命令<code>npm install hexo-cli -g</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code>。</li></ol><h3 id="2-添加ssh-keys"><a href="#2-添加ssh-keys" class="headerlink" title="2.添加ssh-keys"></a>2.添加ssh-keys</h3><ol><li>在终端下运行：<code>ssh-keygen -t rsa -C "yourname@email.com"</code>，一路回车；</li><li>会在.ssh目录生成<code>id_rsa</code>、<code>id_rsa.pub</code>两个文件，这就是密钥对，id_rsa是私钥，千万不能泄漏出去；</li><li>登录Github，打开「Settings」–&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容，注意不要粘贴成<code>id_rsa</code>，最后点击「Add SSH Key」。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2020/07/29/linux/linux/"/>
      <url>/2020/07/29/linux/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux（CentOS-7）"><a href="#Linux（CentOS-7）" class="headerlink" title="Linux（CentOS 7）"></a>Linux（CentOS 7）</h2><h3 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h3><ul><li><p>CentOS 7下载：<a href="https://www.jianshu.com/p/a63f47e096e8">https://www.jianshu.com/p/a63f47e096e8</a></p></li><li><p>安装：<a href="https://www.bilibili.com/video/BV1ZJ411g7Kk/?spm_id_from=333.788.videocard.1">https://www.bilibili.com/video/BV1ZJ411g7Kk/?spm_id_from=333.788.videocard.1</a></p></li><li><p>Linux是基于Unix的</p></li><li><p>Linux的版本分为两种：内核版本和发行版本</p></li></ul><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312180507.png"></p><h3 id="常用的虚拟原件："><a href="#常用的虚拟原件：" class="headerlink" title="常用的虚拟原件："></a>常用的虚拟原件：</h3><ol><li>VMware workstation 收费（可破解）</li><li>VirtualBox 免费</li></ol><h3 id="远程操控虚拟机："><a href="#远程操控虚拟机：" class="headerlink" title="远程操控虚拟机："></a>远程操控虚拟机：</h3><p>CRT：选项–会话选项–外观字体、仿真终端Linux</p><hr><h3 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312180450.png"></p><ul><li>/：根目录</li><li>~：根据不同用户，代表用户</li></ul><hr><h3 id="Linux常见命令"><a href="#Linux常见命令" class="headerlink" title="Linux常见命令"></a>Linux常见命令</h3><h3 id="总结常见命令"><a href="#总结常见命令" class="headerlink" title="总结常见命令"></a>总结常见命令</h3><p>查看环境变量值：echo $PATH（查看path变量）</p><p>检查gcc的版本：gcc -v</p><p>检查文件夹大小：du -sh 文件名</p><p>清空文件内容（用于清空日志）：cp /dev/null catalina.out</p><p>重新加载环境变量：source /etc/profile</p><p>查看操作系统位数：uname -a，如果信息中有x86_64，则是64位，没有就是32位</p><p>动态查看日志：tail -f catalina.out，如果查看后100行：-100f</p><h4 id="列出文件列表：ls（查看文件名列表）-ll（查看文件列表详细信息）"><a href="#列出文件列表：ls（查看文件名列表）-ll（查看文件列表详细信息）" class="headerlink" title="列出文件列表：ls（查看文件名列表） ll（查看文件列表详细信息）"></a>列出文件列表：ls（查看文件名列表） ll（查看文件列表详细信息）</h4><p><code>ls -a</code>显示所有文件、隐藏文件</p><p><code>ll -h</code>显示所有文件信息，文件大小可读性较高</p><p><code>ll -t</code>按创建时间倒序（正序-tr）排列</p><p><code>du -sh 目录路径</code>显示目录的真实大小</p><blockquote><p>路径</p><p>./ ：当前目录</p><p>../：上一级目录</p></blockquote><h4 id="显示当前目录路径-pwd"><a href="#显示当前目录路径-pwd" class="headerlink" title="显示当前目录路径 pwd"></a>显示当前目录路径 pwd</h4><h4 id="切换目录命令cd："><a href="#切换目录命令cd：" class="headerlink" title="切换目录命令cd："></a>切换目录命令cd：</h4><ul><li>cd ..（返回上一级） </li><li>cd /（返回根目录） </li><li>cd ~（返回用户主目录） </li><li>cd - （返回上一次所在目录）</li><li>cd /usr/文档（进入目标目录）</li></ul><h4 id="创建目录和移除目录："><a href="#创建目录和移除目录：" class="headerlink" title="创建目录和移除目录："></a>创建目录和移除目录：</h4><ul><li>mkdir（创建文件夹） mkdir -p aaa/bbb（创建多级目录）</li><li>rmdir（移除文件夹）只能删除空文件夹 </li></ul><h4 id="浏览文件："><a href="#浏览文件：" class="headerlink" title="浏览文件："></a>浏览文件：</h4><ul><li><p>cat（了解）、more、less（多个上下键功能）：回车显示下一行内容，空格显示下一页内容，按 q 键退出查看</p></li><li><p>tail：用于显示文件后几行的内容 <strong>ctrl+c结束查看</strong></p><ul><li><p>用法:</p><p>tail -10 /etc/passwd  查看后10行数据</p><p>tail -f catalina.log  动态查看日志(*****)  </p></li></ul></li><li><p>head -10 文件路径：查看文件的前10行</p></li><li><p>wc 文件路径：统计文件的行数、字数、字节数</p></li></ul><h4 id="文件操作：-上一级目录-当前目录"><a href="#文件操作：-上一级目录-当前目录" class="headerlink" title="文件操作：../上一级目录 ./当前目录"></a>文件操作：../上一级目录 ./当前目录</h4><h4 id="复制：cp-剪切：mv"><a href="#复制：cp-剪切：mv" class="headerlink" title="复制：cp     剪切：mv"></a>复制：cp     剪切：mv</h4><ul><li><p>用法：</p><p>cp xx.txt aa  复制到aa文件夹中</p><p>cp xx.txt aa/yy.txt 复制到aa文件夹中，重命名为yy.txt</p><p>选项：</p><p>-r：    cp -r aa /aa 复制文件夹aa到根目录下，-r递归复制，加上可以复制文件夹</p><p>-i：    cp -i aa /aa 复制文件夹到根目录下，若目标档已存在，先询问动作再执行</p><p>-p：    连同文件的属性也复制过去，而非使用默认属性（备份常用）</p><p>-f：    强制复制，如果目标文件已存在且无法开启，移除再尝试一次</p></li></ul><h4 id="删除：rm"><a href="#删除：rm" class="headerlink" title="删除：rm"></a>删除：rm</h4><ul><li><p>用法：</p><p>rm -r aa 可删除文件夹 </p><p>rm -rf aa 不询问删除</p></li></ul><h4 id="打包、解压：tar（打包文件：tar，被压缩的打包文件：tar-gz）"><a href="#打包、解压：tar（打包文件：tar，被压缩的打包文件：tar-gz）" class="headerlink" title="打包、解压：tar（打包文件：tar，被压缩的打包文件：tar.gz）"></a>打包、解压：tar（打包文件：tar，被压缩的打包文件：tar.gz）</h4><ul><li><p>常用参数：</p><p>-c：创建一个新tar文件</p><p>-v：显示运行过程的信息</p><p>-f：指定文件名</p><p>-z：调用gzip压缩命令进行压缩</p><p>-t：查看压缩文件的内容</p><p>-x：解开tar文件</p><p><strong>打包：</strong></p><p>​    tar –cvf xxx.tar ./* 将当前目录下的文件打包</p><p>打包并且压缩：</p><p>​    tar –zcvf xxx.tar.gz ./* </p><p><strong>解压</strong></p><p>​    tar –xvf xxx.tar </p><p>​    tar -zxvf xxx.tar.gz -C /usr/aaa（将解压的结果放在aaa目录下）</p></li></ul><h4 id="查找："><a href="#查找：" class="headerlink" title="查找："></a>查找：</h4><ul><li><p>find：查找符合条件的文件</p><ul><li><p>示例：</p><p>find / -name ins* 查找文件名称是以ins开头的文件</p><p>find / -name ins* –ls </p><p>find / –user itcast –ls 查找用户itcast的文件</p><p>find / -type f 查找根目录下的所有文件（f代表文件，d代表文件夹）</p></li></ul></li><li><p>grep：查找文件里符合条件的字符串</p><ul><li><p>示例：</p><p>grep lang anaconda-ks.cfg 在文件中查找lang</p><p>grep lang anaconda-ks.cfg –color 高亮显示</p><p>grep lang anaconda-ks.cfg –color -A5 相关字符串前五行显示</p></li></ul></li></ul><h4 id="查看时间-date"><a href="#查看时间-date" class="headerlink" title="查看时间 date"></a>查看时间 date</h4><p>date：输出形式 2021年3月21日 星期日 23:42:28</p><p>date +%F：输出形式 2021-03-21</p><p>date “+%F %T”：输出形式 2021-03-21 23:42:28</p><p>date -s “20220810 22:25:35”</p><p>cal：查看当前日历</p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><ol><li><code>free -mh</code>：<strong>查看内存使用情况</strong></li><li><code>sync</code>：<strong>将缓存写入文件系统</strong></li><li><code>echo 3 &gt; /proc/sys/vm/drop_caches</code>：<strong>释放内存</strong></li><li><strong>再次查看内存情况</strong></li><li><code>echo 0 &gt; /proc/sys/vm/drop_caches</code>：<strong>恢复设置</strong></li></ol><blockquote><p>　　0：0是系统默认值，默认情况下表示不释放内存，由操作系统自动管理</p><p>　　1：释放页缓存</p><p>　　2：释放dentries和inodes</p><p>　　3：释放所有缓存</p></blockquote><h4 id="其他常见命令"><a href="#其他常见命令" class="headerlink" title="其他常见命令"></a>其他常见命令</h4><ul><li>pwd：<strong>显示当前目录名</strong></li><li>touch 文件名：<strong>创建空文件</strong></li><li>clear/ctrl+L：<strong>清屏</strong></li><li>ctrl+u/ctrl+k：<strong>删除光标前/后内容</strong></li><li>df -h：<strong>查看磁盘使用情况</strong></li><li>uptime：<strong>查看服务器运行时间</strong></li><li>uname -a：<strong>查看系统信息</strong></li><li>netstat -tnlp：查看进程<ul><li>kill -9 id：杀进程</li></ul></li><li>nohup 文件名 &amp;：</li></ul><h4 id="重定向输出-gt-和-gt-gt-（结果复制到对应文件中）"><a href="#重定向输出-gt-和-gt-gt-（结果复制到对应文件中）" class="headerlink" title="重定向输出>和>>（结果复制到对应文件中）"></a>重定向输出&gt;和&gt;&gt;（结果复制到对应文件中）</h4><ul><li><p>cat /etc/passwd &gt; a.txt 将输出定向到a.txt中（覆盖）</p><p>cat /etc/passwd &gt;&gt; a.txt 输出并且追加</p></li></ul><h4 id="系统管理命令-ps（进程）"><a href="#系统管理命令-ps（进程）" class="headerlink" title="系统管理命令 ps（进程）"></a>系统管理命令 ps（进程）</h4><ul><li>ps –ef <strong>查看所有进程</strong><ul><li>uid：用户id</li><li><strong>pid：进程id</strong></li><li><strong>ppid：父级进程id</strong></li><li><strong>c：cpu占用率</strong></li><li>stime：进程启动时间</li><li>tty：终端设备，发起该进程的设备识别符号，？表示系统自动的</li><li>time：进程执行时间</li><li>cmd：该进程名称/路径</li></ul></li><li>ps –ef | grep ssh 查找含有ssh的进程<ul><li>ef：系统所有进程信息</li><li>ux：当前用户进程信息</li><li>aux：所有用户进程信息</li></ul></li><li>top（任务管理器）<ul><li>pid：进程id</li><li>user：用户</li><li>pr：优先级</li><li>virt：虚拟内存</li><li>res：常驻内存</li><li>shr：共享内存（实际内存=常驻内存-共享内存）</li><li><strong>s：进程状态（s表示睡眠，r表示运行）</strong></li><li><strong>%cpu：表示cpu占用比</strong></li><li><strong>%mem：内存占用比</strong></li><li>time：执行时间</li><li><strong>command：进程名称/路径</strong></li></ul></li><li>top的快捷键<ul><li>M：按内存从高到低排序</li><li>P：CPU从高到低</li><li>1：查看每个cpu的使用情况</li></ul></li><li>kill 2868 杀掉2868编号的进程</li><li>kill all 进程名称</li><li>kill -9 2868 强制杀死进程</li><li>pkill -9 进程名 ：这样杀掉更干净</li></ul><h4 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 |</h4><ul><li><p><strong>一个命令的输出用作另一个命令的输入</strong></p></li><li><p>ls –help | more 分页查询帮助信息</p><p>ps –ef | grep java 查询名称中包含java的进程</p><p>ifconfig | more</p><p>cat index.html | more</p></li></ul><hr><h3 id="Vi和Vim编辑器："><a href="#Vi和Vim编辑器：" class="headerlink" title="Vi和Vim编辑器："></a>Vi和Vim编辑器：</h3><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul><li><p>三种模式：命令行、插入、底行模式</p></li><li><p>命令行操作</p><ul><li>移动光标<ul><li>行尾 shift+6<ul><li>行首 shift+4</li></ul></li><li>首行 gg</li><li>末行 G</li><li>上翻屏 PgUp 或 ctrl+b</li><li>下翻屏 PgDn 或 ctrl+f</li><li>快速移动 <code>数字 方向键</code></li></ul></li><li>复制<ul><li><strong>复制光标所在行 yy</strong></li><li>复制光标向下的行数 数字+yy</li></ul></li><li><strong>粘贴 p</strong></li><li><strong>剪切/删除 dd</strong></li><li><strong>撤销 u</strong></li><li>恢复 ctrl+r</li></ul></li><li><p>用于编辑文件</p><ul><li><p><strong>切换到命令行模式：按Esc键</strong></p></li><li><p><strong>切换到插入模式：按 i 、o、a键</strong></p><ul><li><p>i 在当前位置前插入</p><p>I 在当前行首插入</p><p>a 在当前位置后插入</p><p>A 在当前行尾插入</p><p>o 在当前行之后插入一行</p><p>O 在当前行之前插入一行</p></li></ul></li><li><p><strong>切换到底行模式：按 :（冒号）</strong></p></li><li><p>打开文件：</p><ul><li>vim 文件路径 ：打开文件</li></ul></li><li><p>vim +数字 文件路径：打开文件 并将光标移动到指定行</p><ul><li>vim +/关键词 文件路径：打开文件 高亮显示关键词</li></ul><p><strong>退出：esc ， :q</strong></p><p>修改文件：输入i进入插入模式</p><p><strong>保存并退出：esc，:wq</strong></p><p><strong>不保存退出：esc，:q!</strong></p><p><strong>万能退出： :x</strong>（推荐，修改就保存并退出，未修改就退出，不会影响修改时间）</p></li><li><p><strong>查找（高亮）：  :/查找的字</strong></p></li><li><p>取消高亮： :nohl </p></li><li><p>显示行号： :set nu</p></li><li><p>取消行号： :set nonu</p></li><li><p>显示着色： :syntax on/off</p></li></ul></li></ul><h4 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h4><ol><li>临时配置：即在文件中底层模式下输入的，临时的</li><li>个人配置文件：（~/.vimrc）如果没有可以自行创建<ol><li>如显示行号<code>set nu</code>，保存即可</li></ol></li><li>全局配置文件：（vim自带，/etc/vimrc）</li></ol><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>如果遇到突然关闭正在编写的文件，如断电，文件出现崩溃。</p><p>解决方案：</p><p>删除交换文件（xxx.swp）<code>rm -f .xxx.swp</code></p><hr><h3 id="Linux的权限命令"><a href="#Linux的权限命令" class="headerlink" title="Linux的权限命令"></a>Linux的权限命令</h3><p>身份：owner、group、others</p><p>权限：read、write、execute</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210312180430.png"></p><ul><li><p>文件类型：普通文件（-）目录（d）符号链接（l）</p></li><li><p>权限类型：可读（r）（4），可写（w）（2），可执行（x）（1）</p></li><li><p><strong>文件权限管理：<code>chmod 选项 权限模式 文档</code></strong></p><ul><li><p>选项：-R：递归设置权限</p></li><li><p>chmod 755 a.txt （4+2+1，4+1，4+1）</p><p>chmod u=rwx,g=rx,o=rx a.txt（u代表所有者，g代表组，o代表其他）</p></li></ul></li><li><p>修改文件所有者（属组）<code>chown -R username 文档路径</code></p></li><li><p>修改文件所属组<code>chgrp -R groupname 文档路径</code></p></li></ul><hr><h3 id="Linux上常用网络操作"><a href="#Linux上常用网络操作" class="headerlink" title="Linux上常用网络操作"></a>Linux上常用网络操作</h3><p>OSI7层网络模型：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层（应表会传网数物）</p><p>TCP/IP4层概念模型：数据链路层、网络层、传输层、应用层</p><h4 id="网络常用命令"><a href="#网络常用命令" class="headerlink" title="网络常用命令"></a>网络常用命令</h4><p>重启网络（用于修改ip后）：systemctl restart network</p><h4 id="网络相关的配置文件"><a href="#网络相关的配置文件" class="headerlink" title="网络相关的配置文件"></a>网络相关的配置文件</h4><table><thead><tr><th>配置文件名</th><th>功能</th></tr></thead><tbody><tr><td>/etc/sysconfig/network</td><td>最基本的网络信息，系统启动时读取该文件</td></tr><tr><td>/etc/sysconfig/network-scripts/*</td><td>系统启动时初始化的网络信息：第一块网卡ifcfg-eth0</td></tr><tr><td>/etc/host.conf</td><td>域名解析的控制文件</td></tr><tr><td>/etc/hosts</td><td>域名或主机名与IP地址的映射文件</td></tr><tr><td>/etc/resolv.conf</td><td>域名服务器DNS设置文件</td></tr><tr><td>/etc/services</td><td>设定主机的不同端口的网络服务</td></tr></tbody></table><h4 id="网络相关命令"><a href="#网络相关命令" class="headerlink" title="网络相关命令"></a>网络相关命令</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ping</td><td>测试主机连通性</td></tr><tr><td>netstat</td><td>显示网络状态，参数-a显示所有连接与监听端口。参数-n以数字形式显示地址与端口号</td></tr><tr><td>ftp</td><td>文件传输命令</td></tr><tr><td>telnet</td><td>远程登陆</td></tr><tr><td>ssh</td><td>加密功能远程管理工具</td></tr><tr><td>ifconfig</td><td>显示网络设备</td></tr></tbody></table><h4 id="id指令"><a href="#id指令" class="headerlink" title="id指令"></a>id指令</h4><ul><li>id ：查看用户的基本信息</li><li>id 用户名：显示指定用户的基本信息</li></ul><h4 id="whoami指令"><a href="#whoami指令" class="headerlink" title="whoami指令"></a>whoami指令</h4><ul><li>显示当前用户名</li></ul><h4 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h4><ul><li><p>hostname 查看主机名</p><p>hostname -f 查看主机全限定域名</p><p>hostname xxx 修改主机名 重启后无效</p><p>hostnamectl set-hostname xxx 永久修改主机名，也可以修改/etc/sysconfig/network文件</p></li><li><p>修改域名 /etc/hosts</p></li></ul><h4 id="IP地址配置"><a href="#IP地址配置" class="headerlink" title="IP地址配置"></a>IP地址配置</h4><ul><li><p>ifconfig或ip a 查看(修改)ip地址</p></li><li><p>ip route 查看路由</p><p>ifconfig eth0 192.168.12.22 修改ip地址(重启后无效)</p><p>如果想要永久生效</p><p>修改 /etc/sysconfig/network-scripts/ifcfg-eth0文件</p><pre><code>DEVICE=eth0 #网卡名称BOOTPROTO=static #获取ip的方式(none/static,dhcp)NBOOT=yes #  系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备。HWADDR=00:0C:29:B5:B2:69 #MAC地址IPADDR=192.168.177.129 #IP地址NETMASK=255.255.255.0 #子网掩码NETWORK=192.168.177.0 #网络地址BROADCAST=192.168.0.255 #广播地址</code></pre></li></ul><h4 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h4><ul><li>/etc/hosts文件用于在通过主机名进行访问时做ip地址解析之用</li></ul><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200525001027974.png" alt="image-20200525001027974" style="zoom: 80%;"><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><pre><code>ifup ens33开启网卡ifdown ens33关闭网卡service network status 查看指定服务的状态service network stop 停止指定服务service network start 启动指定服务service network restart 重启指定服务service --status–all 查看系统中所有后台服务netstat –nltp 查看系统中网络进程的端口监听情况centos6防火墙设置防火墙根据配置文件/etc/sysconfig/iptables来控制本机的”出”、”入”网络访问行为。service iptables status 查看防火墙状态service iptables stop 关闭防火墙 ***service iptables start 启动防火墙chkconfig  iptables off 禁止防火墙自启centos7关闭防火墙的方法：systemctl stop firewalld启动：systemctl start firewalld查看状态：systemctl status firewalld开机禁用：systemctl disable firewalld开机启用：systemctl enable firewalld*增加防火墙端口（开放一个端口可访问）：firewalld-cmd --zone=public --add-port=80/tcp --permanent (--permanent 永久生效，没有该参数重启后失效)重新载入（刷新配置）：firewall-cmd --reload查看所有打开的端口：firewall-cmd --zone=public --list-ports删除端口：firewall-cmd --zone= public --remove-port=80/tcp --permanent加强版权限管理selinuxgetenforce 查看状态setenforce 0 关闭权限安全管理/etc/selinux 永久修改配置，selinux=enforcing(开启)disabled(关闭)</code></pre><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><ul><li><p>列出磁盘使用量</p><ul><li>df -Th</li><li>选项<ul><li>-T 显示文件类型</li><li>-m 容量可视化</li></ul></li></ul></li><li><p>挂载</p><blockquote><p>什么是挂载？</p><p><a href="http://c.biancheng.net/view/2859.html">http://c.biancheng.net/view/2859.html</a></p></blockquote><ul><li>挂载:mount 【-t 文件系统】【-L Label名】【-o 额外选项】【-n】 装置文件名 挂载点</li><li>取消挂载：umount 【-fn】 装置文件名或挂载点<ul><li>-n：不升级</li><li>-f：强制卸载</li></ul></li></ul></li></ul><hr><h3 id="Linux上软件安装"><a href="#Linux上软件安装" class="headerlink" title="Linux上软件安装"></a>Linux上软件安装</h3><ul><li><p>Linux上的软件安装有以下几种常见方式</p><ol><li>二进制发布包：软件已经针对具体平台编译打包发布，只要解压，修改配置即可</li><li>RPM包<ol><li>rpm -qa |grep 名</li><li>rpm -e</li><li>rpm -ivh</li></ol></li><li>Yum在线安装<ol><li>yum list 列出已装软件</li><li>yum search 名 搜索关键包</li><li>yum install 包名</li><li>yum update 包名</li><li>yum remove 包名 </li></ol></li><li>源码编译安装<ol><li>配置(config/configure/bootsrtrap)</li><li>编译(make)</li><li>安装(make install)</li></ol></li></ol></li><li><p>上传与下载工具：</p><ul><li>FileZilla</li><li>sftp<ul><li>使用alt + p 组合键打开sftp窗口</li><li>使用put 命令上传：put h:/redis -2.4.5.zip</li><li>使用get命令下载(默认下载位置在当前计算的的文档位置)</li></ul></li><li>ftp<ul><li>在linux上安装ftp客户端，windows上安装home ftp server。home ftp server添加linux成员，开始服务</li><li>linux上输入<code>ftp</code>登录，ls查看的就是windows下的文件目录。前面加<code>l</code>就是linux下的命令，如lcd</li><li>从windows取到linux<code>get 文件名</code>，反之是<code>put 文件名</code></li></ul></li></ul></li></ul><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK:"></a>安装JDK:</h4><blockquote><p>附录：windows安装jdk</p><p><a href="https://www.cnblogs.com/boringwind/p/8001300.html">https://www.cnblogs.com/boringwind/p/8001300.html</a></p></blockquote><ol><li>上传JDK到Linux的服务器.</li></ol><pre><code>* 上传JDK# 查看jdk版本java –version# 查看安装的jdk信息rpm -qa | grep java# 卸载jdkyum remove *openjdk*</code></pre><ol start="2"><li>在Linux服务器上安装JDK</li></ol><pre><code>* 通常将软件安装到/usr/local* 直接解压就可以   tar –zxvf  jdk.tar.gz  -C 目标路径  </code></pre><ol start="3"><li>配置JDK的环境变量</li></ol><pre><code>1. vi /etc/profile2. 在末尾行添加    export JAVA_HOME=/usr/local/jdk/jdk1.7.0_71    export JRE_HOME=${JAVA_HOME}/jre    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH    export JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin     export PATH=${JAVA_PATH}:$PATH保存退出3.source /etc/profile  使更改的配置立即生效</code></pre><ol start="4"><li>检查是否安装完成</li></ol><pre class=" language-html"><code class="language-html">java -version</code></pre><h4 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat:"></a>安装Tomcat:</h4><p><strong>方式一（单个tomcat，不需要配环境变量）：</strong></p><ol><li><p>Tomcat上传到linux上</p></li><li><p>检查是否安装有tomcat</p><p>rpm -qa|grep tomcat </p></li><li><p>将上传的tomcat解压</p><p>tar -zxvf apache-tomcat-7.0.57</p></li><li><p>开启tomcat</p><p>/usr/local/tomcat/bin/startup.sh</p></li><li><p>访问</p><p>192.168.179.128/8080</p></li></ol><p><strong>方案二（多个tomcat，需要配置环境变量）：</strong></p><blockquote><p>此处是在测试nginx负载均衡时，创建的两个tomcat</p></blockquote><ol><li><p>Tomcat上传到linux上</p></li><li><p>检查是否安装有tomcat</p><p>rpm -qa|grep tomcat </p></li><li><p>将上传的tomcat解压</p><p>tar -zxvf apache-tomcat-7.0.57</p></li><li><p>重命名</p><p>mv apache-tomcat-7.0.57 tomcat7</p></li><li><p>复制一个tomcat</p><p>cp -r tomcat7 /opt/tomcat8</p></li><li><p>配置环境变量</p><p>vim /etc/prpfile</p><p>在下方添加</p><pre><code>unset iunset -f pathmungeexport JAVA_HOME=/opt/jdk1.7.0_75export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATHexport JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/binexport PATH=$PATH:${JAVA_PATH}:$PATHexport CATALINA_HOME=/opt/tomcat7export CATALINA_BASE=/opt/tomcat7export TOMCAT_HOME=/opt/tomcat7export CATALINA_HOME2=/opt/tomcat8export CATALINA_BASE2=/opt/tomcat8export TOMCAT_HOME2=/opt/tomcat8</code></pre><p>让环境变量生效，<code>source /etc/profile</code></p></li><li><p>第一个Tomcat可直接运行，第二个Tomcat配置修改如下</p><p>修改/opt/tomcat8/bin/catalina.sh，在文件开始处（参考位置）加入如下配置：</p><pre><code>OS specific support.  $var must be set to either true or false. (参考位置)</code></pre><pre><code>export CATALINA_BASE=$CATALINA_BASE2export CATALINA_HOME=$CATALINA_HOME2</code></pre></li><li><p>修改端口</p><pre><code>&lt;Server port="8005" shutdown="SHUTDOWN"&gt; 修改为：&lt;Server port="8006" shutdown="SHUTDOWN"&gt;&lt;Connector port="8080" protocol="HTTP/1.1" 修改为：&lt;Connector port="8090" protocol="HTTP/1.1"&lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt; 修改为：&lt;Connector port="8010" protocol="AJP/1.3" redirectPort="8443" /&gt;</code></pre></li><li><p>启动两个tomcat</p></li></ol><h4 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h4><ol><li><p>安装 gcc-c++</p><p>redis是C语言开发，安装redis需要先将官网下载的源码进行编译，编译依赖gcc环境。</p><p>输入命令：</p><p><code>    yum install gcc-c++</code></p></li><li><p>下载redis源码</p><p><code>wget http://download.redis.io/releases/redis-3.0.4.tar.gz</code></p></li><li><p>解压</p><p><code>tar -xzvf redis-3.0.4.tar.gz</code></p></li><li><p>编译</p><p>切换都程序目录，并执行make命令编译</p><p><code>cd redis-3.0.4</code></p><p><code>make</code></p></li><li><p>安装</p><p>将编译好的文件安装成可执行文件</p><p><code>make PREFIX=/usr/local/redis install </code></p><pre><code>make install安装完成后，会在/usr/local/bin目录下生成下面几个可执行文件，它们的作用分别是：redis-server：Redis服务器端启动程序redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作redis-benchmark：Redis性能测试工具redis-check-aof：数据修复工具redis-check-dump：检查导出工具</code></pre></li><li><p>配置redis</p><p>复制配置文件到/usr/local/redis/bin目录：</p><p><code>cd redis-3.0.4</code></p><p><code>cp redis.conf /usr/local/redis/bin</code></p></li><li><p>启动redis</p><ol><li><p>进入redis/bin目录</p><p><code>cd redis/bin</code></p></li><li><p>启动redis服务端</p><p><code>./redis-server redis.conf</code></p></li><li><p>克隆新窗口，启动redis客户端</p><p><code>./redis-cli</code></p></li></ol></li><li><p>操作redis</p><pre><code>keys *set name zhangsanget zhangsan</code></pre></li></ol><h4 id="安装Mysql："><a href="#安装Mysql：" class="headerlink" title="安装Mysql："></a>安装Mysql：</h4><ol><li>将mysql的安装文件上传到Linux的服务器.</li></ol><pre><code>1.将mysql的tar解压tar -xvf MySQL-5.6.22-1.el6.i686.rpm-bundle.tar2.查看系统中是否有Mysql* 方式1：yum list installed mysql** 方式2(-i 忽略大小写)：rpm -qa | grep -i mysql3.卸载mysql(彻底卸载)* 方式1：yum remove mysql mysql-server mysql-libs compat-mysql51        rm -rf /var/lib/mysql        rm /usr/my.cnf* 方式2：rpm -aq | grep -i mysql        rpm -e MySQL-server-5.6.27-1.el6.x86_64        rpm -e MySQL-client-5.6.27-1.el6.x86_64        rpm -e MySQL-devel-5.6.27-1.el6.x86_64        rm -rf /var/lib/mysql（如果自定义安装路径写自定义路径，并不是压缩包路径）4.如果64位系统安装32位软件，进行以下操作    yum list|grep ia32-libs&nbsp; &nbsp;查看是否有32位的运行库    yum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6、    yum whatprovides libstdc++.so.6    yum&nbsp; install&nbsp; libstdc++-4.4.7-18.e16.i686</code></pre><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210311151417.png"></p><ol start="2"><li>安装mysql（服务端sever，客户端client）</li></ol><pre><code>1.加两个参数： nodeps ，force    rpm -ivh MySQL-server-5.6.22-1.el6.i686.rpm --nodeps --force</code></pre><ol start="3"><li>登录mysql</li></ol><pre><code>安装时，下面的提示是告诉我们root用户的密码第一次是随机生成的，它保存在/root/.mysql_secret中，第一次登录需要修改root密码1.查看生成的root密码    cat /root/.mysql_secret2.启动mysql服务    service mysql start3.登录mysql    mysql -uroot -p5vxj7g0xeTcBjGBc4.执行下面操作报错，原因是第一次操作mysql必须修改root用户的密码    set password=password('1234');5.登录成功</code></pre><ol start="4"><li>操作mysql</li></ol><pre><code>show databased;use test;</code></pre><h5 id="远程连接mysql"><a href="#远程连接mysql" class="headerlink" title="远程连接mysql"></a>远程连接mysql</h5><blockquote><p>linux的mysql只是当作一个服务器来使用，windows想要连接linux上的Mysql，我们常用的图形化界面sqlyog</p></blockquote><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20210311155653.png"></p><p>注意：连接时会报错，报错代码2003，说明我们linux防火墙没有关闭。</p><ol><li><strong>关闭防火墙</strong><ul><li>centos7关闭防火墙的方法：systemctl stop firewalld</li><li>centos6及以下关闭防火墙的方法：service iptables stop</li></ul></li></ol><p>注意：如果报错1045，说明我们需要授权本机电脑为root权限</p><ol start="2"><li><p><strong>授权</strong></p><pre><code>grant all privileges on *.* to 'root' @'%' identified by '你的密码';flush privileges; 刷新，立即生效# 这里的root代表root用户，最后的root代表root用户的密码，我这里用户名，密码都是root，中间的%号代表所有的ip地址都能远程访问，如果你要针对某一台机器开放远程访问权限，那就把%换成哪台机器的ip地址，这样就只能这台机器远程访问linux下的mysql数据库了。</code></pre></li><li><p><strong>连接成功</strong></p></li></ol><h2 id="Linux自有服务"><a href="#Linux自有服务" class="headerlink" title="Linux自有服务"></a>Linux自有服务</h2><h3 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h3><p>指系统的运行模式，也称运行级别</p><p>进程：init 进程id为1。对应的进程配置文件：inittab（/etc/inittab）</p><pre><code>0-关机模式1-单用户模式2-多用户模式，不带NFS3-多用户模式，完全4-没有被使用的模式5-x11，完整图形化界面模式6-重启</code></pre><ol><li>init 0 表示关机</li><li>init 3 切换不带桌面模式</li><li>init 5 切换图形界面</li><li>Init 6 重启电脑</li></ol><p>永久切换命令行模式：</p><p>​    将/etc/inittab文件的initdefault设置成3，然后重启系统。</p><h3 id="开机启动服务配置"><a href="#开机启动服务配置" class="headerlink" title="开机启动服务配置"></a>开机启动服务配置</h3><p><code>chkconfig --list</code><strong>修改开机启动。</strong></p><p>0-6表示上面的运行模式中是否开启或关闭</p><p><strong>添加删除启动项</strong>：<code>chkconfig --add/del 服务名</code></p><p><strong>设置是否开启</strong>：<code>chkconfig --level 运行模式序号 服务名 on/off</code></p><p><strong>查看指定服务配置</strong>：<code>chkconfig --list|grep 服务名</code></p><h3 id="时间同步服务"><a href="#时间同步服务" class="headerlink" title="时间同步服务"></a>时间同步服务</h3><p>ntpd：开启时间同步<code>service ntpd start</code></p><h2 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h2><p>/etc/passwd 存储用户的关键信息 </p><p>/etc/group 存储用户组的关键信息</p><p>/etc/shadow 存储用户的密码信息</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><p>常用语法：<code>useradd 选项 用户名</code></p><p>常用选项：</p><ul><li>-g：表示指定用户的用户组，选项的值可以是Id，也可以是组名</li><li>-G：表示指定用户的附加组，选项的值可以是Id，也可以是组名</li><li>-u：uid，用户的id</li><li><code>useradd -g 501 -G 500 -u 666 lisi</code>李四的用户组501，附加组500，uid为666</li></ul><p>验证是否成功：</p><ol><li>在/etc/passwd最后一行，查看zhangsan的信息</li><li>验证是否存在家目录：<code>ls /home/</code></li></ol><h4 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h4><p>常用语法：<code>usermod 选项 用户名</code></p><p>常用选项：</p><ul><li>上面3个，和<code>-l</code>：修改用户名</li></ul><p><code>usermod -l wangwu zhangsan</code>：把张三改为王五</p><h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><p>刚注册的用户没有密码，处于锁定状态，需要设置密码才能使用</p><p>常用语法：<code>passwd 用户名</code></p><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><p>常用语法：<code>su 用户名</code></p><p><code>su - root</code>的<code>-</code>代表该表用户变量</p><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><p>常用语法：<code>userdel 选项 用户名</code></p><p>常用选项:</p><ul><li>-r ：表示删除用户的同时，删除其家目录</li></ul><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>/etc/group，结构：用户组名:密码:用户组id:组内用户名</p><h4 id="用户组添加"><a href="#用户组添加" class="headerlink" title="用户组添加"></a>用户组添加</h4><p>常用语法：<code>groupadd 选项 组名</code></p><p>常用选项：</p><ul><li>-g：类似用户添加里的”-u”，可以设置用户组id</li></ul><h4 id="用户组修改"><a href="#用户组修改" class="headerlink" title="用户组修改"></a>用户组修改</h4><p>常用语法：<code>groupmod 选项 用户名</code></p><p>常用选项：</p><ul><li>-n：修改用户组组名</li><li><code>groupmod -g 502 -n nihao wangwu</code></li></ul><h4 id="用户组删除"><a href="#用户组删除" class="headerlink" title="用户组删除"></a>用户组删除</h4><p>常用语法：<code>groupdel 组名</code></p><h3 id="sudo，非root用户执行root操作"><a href="#sudo，非root用户执行root操作" class="headerlink" title="sudo，非root用户执行root操作"></a>sudo，非root用户执行root操作</h3><p>Sudo配置文件：/etc/sudoers，配置请使用<code>visudo</code></p><pre><code>root all=(all) allall 表示允许登录的主机(all) 表示以谁的身份执行 all表示root身份all 表示当前用户可以执行的命令</code></pre><pre><code>案例：让test用户拥有增加用户，修改密码的权力test all=(all) /usr/sbin/useradd,/usr/bin/passwd使用：sudo useradd wangwu</code></pre><h2 id="RPM管理"><a href="#RPM管理" class="headerlink" title="RPM管理"></a>RPM管理</h2><p>查询、卸载、安装</p><p><strong>查询软件安装情况</strong>：<code>rpm -qa|grep 关键词</code></p><p>选项：</p><ul><li>-q：查询</li><li>-a：全部</li></ul><p><strong>卸载软件</strong>：<code>rpm -e 软件名</code></p><p><code>rpm -e 软件名 --nodeps</code>：忽略依赖关系卸载</p><p><strong>安装软件</strong>：<code>rpm -ivh 软件名</code></p><p>选项：</p><ul><li>-i：安装</li><li>-v：显示进度条</li><li>-h：表示以#进度条显示</li></ul><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p>设置计划，跟闹钟一样定点执行</p><p><code>crontab 选项</code></p><ul><li>-l：列出计划列表</li><li>-e：编辑</li><li>-u：指定用户名，不指定就是当前用户</li><li>-r：删除计划列表</li></ul><p><strong>编辑的语法</strong>：分 时 日 月 周 需要执行的命令</p><p>如：每天0点0分执行reboot：<code>0 0 * * * reboot</code></p><p>每十分钟执行一次 <code>*/10</code></p><p>周一到周五执行：<code>1-5</code></p><p><strong>权限</strong>：</p><p>黑名单（不能修改计划）：<code>/etc/cron.deny</code>里写用户名，一行一个</p><p>白名单（能修改计划）：<code>/etc/cron.allow</code></p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>规范：</p><pre><code>#!/bin/bash        指定系统当前脚本使用的shell解析器shell相关指令编辑命令时不需要加分号文件命名规范：文件名.sh</code></pre><p>变量</p><pre><code>定义： 变量名="变量值"使用： $变量名    ，单引号会原样输出，需要用双引号dt=`date +'%F %T'`，如果使用是指令赋值，需要反引号</code></pre><p>接受用户输入</p><pre><code>read -p 提示信息 变量名如：read -p '请输入文件路径' filepath touch $filepath</code></pre><p>条件判断语句</p><pre><code>if [条件]then    语句【else】    语句fi</code></pre><p>算数运算符</p><pre><code>expr 计算如： expr 2+20得出22</code></pre><p>关系运算符</p><pre><code>-eq 判断是否相等</code></pre><p>逻辑运算符</p><pre><code>! 非-o 或-a 与</code></pre><p>文件测试运算符</p><pre><code>-d file 是否为目录-f file 是否为文件-r file 是否为可读-w file 是否为可写-x file 是否为可执行-e file 是否存在</code></pre><h2 id="调整存储分区"><a href="#调整存储分区" class="headerlink" title="调整存储分区"></a>调整存储分区</h2><p><code>df -h</code>查看是否/目录最大，如果不是，通过以下操作使根目录最大。</p><ol><li><p>备份home分区文件<br>tar cvf /tmp/home.tar /home</p></li><li><p>卸载/home，如果无法卸载，先终止使用/home文件系统的进程<br>umount /home （卸载）</p><p>卸载时，发现/home在使用中，所以先终止。<br>fuser -km /home/（终止）<br>再次卸载，没有报错，表示成功。</p></li><li><p>删除/home所在的lv</p><p>lvremove /dev/mapper/cl-home</p></li><li><p>扩展/root所在的lv<br>lvextend -L +460G /dev/mapper/cl-root （多少G，具体看自己）</p></li><li><p>扩展/root文件系统<br>xfs_growfs /dev/mapper/cl-root</p></li><li><p>创建/home所在的lv<br>lvcreate -L 50G -n home cl</p></li><li><p>创建文件系统<br>mkfs.xfs /dev/mapper/cl-home</p></li><li><p>挂载home<br>mount /dev/mapper/cl-home</p></li><li><p>home文件恢复<br>tar xvf /tmp/home.tar -C /home/</p></li></ol><h2 id="Kubectl运维"><a href="#Kubectl运维" class="headerlink" title="Kubectl运维"></a>Kubectl运维</h2><p><code>kubectl describe node</code></p><p>查看各节点pod的资源分配情况预留/最大限制CPU、内存</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20231108155642829.png" alt="image-20231108155642829"></p><p><code>kubectl top pod -A</code></p><p>查看所有pod内存占用</p><p><code>kubectl get pod -A -owide|grep k8sworker05</code></p><p>查看指定节点的pod名称</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap前端框架</title>
      <link href="/2020/07/28/qian-duan/bootstrap/"/>
      <url>/2020/07/28/qian-duan/bootstrap/</url>
      
        <content type="html"><![CDATA[<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><ol><li><p>概念：一个前端开发的框架</p><ul><li>框架：一个半成品软件，开发人员在框架基础上，在进行开发</li><li>好处：<ul><li>定义了很多CSS样式和js插件，开发人员可以直接使用来丰富页面效果</li><li>响应式布局：同一套页面可以兼容不同分辨率的设备</li></ul></li></ul></li><li><p>快速入门</p><ol><li><p>下载：v3.bootcss.com</p></li><li><p>在项目中将三个文件夹和jquery.js（放到js文件夹中）复制到项目中</p></li><li><p>创建html页面，引入必要的资源文件</p><ol><li>引入一个css，两个js</li></ol><pre><code>           &lt;link href="css/bootstrap.min.css" rel="stylesheet"&gt;           &lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;        &lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;</code></pre></li></ol></li></ol><hr><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><ul><li><p>同一套页面可以兼容不同分辨率的设备</p></li><li><p>实现：依赖于==栅格系统==：将一行平均分成12个格子，可以指定元素占几个格子</p></li><li><p>步骤：(class来定义，一个class里可以定义多个属性值)</p><ol><li>定义容器。相当于之前的table<ul><li>容器分类：<ol><li>container：两边留白</li><li>container-fluid：每一种设备都是100%宽度</li></ol></li></ul></li><li>定义行。相当于之前的tr   样式：row</li><li>定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目(一个格子占几个位置)<ul><li>设备代号：<ol><li>xs：超小屏幕 手机 (&lt;768px)：col-xs-12</li><li>sm：小屏幕 平板 (≥768px)</li><li>md：中等屏幕 桌面显示器 (≥992px)</li><li>lg：大屏幕 大桌面显示器 (≥1200px)</li></ol></li></ul></li></ol><ul><li>注意：<ol><li>一行中如果格子数目超过12，则超出部分自动换行。</li><li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</li><li>（向下不兼容）如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</li></ol></li></ul></li></ul><hr><h3 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h3><ul><li><p>全局CSS样式：（class来定义，一个class里可以定义多个属性值）</p><ul><li><p>按钮：</p><pre><code>button标签class="btn btn-default/success/info（一般信息）/warning/danger/link"</code></pre></li><li><p>图片：</p><pre><code>img标签*  class="img-responsive"：图片在任意尺寸都占100%    *  图片形状        *  &lt;img src="..." alt="..." class="img-rounded"&gt;：方形        *  &lt;img src="..." alt="..." class="img-circle"&gt; ： 圆形        *  &lt;img src="..." alt="..." class="img-thumbnail"&gt; ：相框</code></pre></li><li><p>表格：</p><pre><code>table标签        * table 表格样式    * table-bordered  表格边框    * table-hover 表格悬停特效  tr标签    * active灰色/success绿色/info蓝色/warning黄色/danger红色</code></pre></li><li><p>表单：</p><pre class=" language-html"><code class="language-html">input标签    * class="form-control"注意：用div包裹表单，div中写class="form-group"效果更棒     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>//这是扩大焦点    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail1<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>水平排列表单form标签中class="form-horizontal"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputEmail3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputEmail3<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>组件：</p><ul><li><p>导航条：看文档，把模板复制进去，看不懂删了就知道是哪个结构，改就可以了</p></li><li><p>分页条：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Previous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&laquo;">&amp;laquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&raquo;">&amp;raquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>ul标签    * pager 翻页    * pagination-lg 大号分页    * pagination-sm 小号分页li标签    * active 激活    * disabled 禁用</code></pre></li></ul></li><li><p>插件：</p><ul><li>轮播图：看文档，把模板复制进去，看不懂删了就知道是哪个结构，改就可以了</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax、Json详解</title>
      <link href="/2020/07/24/qian-duan/ajax-json/"/>
      <url>/2020/07/24/qian-duan/ajax-json/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX："><a href="#AJAX：" class="headerlink" title="AJAX："></a>AJAX：</h2><h3 id="1-概念：-ASynchronous-JavaScript-And-XML-异步的JavaScript-和-XML"><a href="#1-概念：-ASynchronous-JavaScript-And-XML-异步的JavaScript-和-XML" class="headerlink" title="1.概念： ASynchronous JavaScript And XML    异步的JavaScript 和 XML"></a>1.概念： ASynchronous JavaScript And XML    异步的JavaScript 和 XML</h3><ol><li><p>异步和同步：客户端和服务器端相互通信的基础上</p><ul><li>客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</li><li>客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</li></ul><p> Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 ==（提交不刷新页面）==</p><p> 提升用户的体验</p></li></ol><h3 id="2-实现方式："><a href="#2-实现方式：" class="headerlink" title="2. 实现方式："></a>2. 实现方式：</h3><ol><li><p>原生的JS实现方式（了解）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.创建核心对象</span><span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// code for IE7+, Firefox, Chrome, Opera, Safari</span>    xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// code for IE6, IE5</span>    xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2. 建立连接</span><span class="token comment" spellcheck="true">/*                    参数：                        1. 请求方式：GET、POST                            * get方式，请求参数在URL后边拼接。send方法为空参                            * post方式，请求参数在send方法中定义                        2. 请求的URL：                        3. 同步或异步请求：true（异步）或 false（同步）                 */</span>xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"ajaxServlet?username=tom"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.发送请求</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.接受并处理来自服务器的响应结果</span><span class="token comment" spellcheck="true">//获取方式 ：xmlhttp.responseText</span><span class="token comment" spellcheck="true">//什么时候获取？当服务器响应成功后再获取</span><span class="token comment" spellcheck="true">//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。</span>xmlhttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取服务器的响应结果</span>        <span class="token keyword">var</span> responseText <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>JQeury实现方式</p><ol><li><p>$.ajax()</p><ul><li>语法：$.ajax({键值对});</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//使用$.ajax()发送异步请求</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    url<span class="token punctuation">:</span><span class="token string">"ajaxServlet"</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求路径</span>                    type<span class="token punctuation">:</span><span class="token string">"POST"</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//请求方式</span>                    <span class="token comment" spellcheck="true">//data: "username=jack&amp;age=23",//请求参数</span>                    data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//响应成功后的回调函数</span>                    error<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"出错啦..."</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表示如果请求响应出现错误，会执行的回调函数</span>                        dataType<span class="token punctuation">:</span><span class="token string">"text"</span><span class="token comment" spellcheck="true">//设置接受到的响应数据的格式</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发送异步请求<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                </code></pre></li><li><p>$.get()：发送get请求</p><ul><li>语法：$.get(url, [data], [callback], [type])<ul><li>参数：<ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型：xml,html,javascript,json,text,_default</li></ul></li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"ajaxServlet"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>username<span class="token punctuation">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>$.post()：发送post请求</p><ul><li>语法：$.post(url, [data], [callback], [type])<pre><code>      * 参数：          * url：请求路径         * data：请求参数         * callback：回调函数         * type：响应结果的类型</code></pre></li></ul></li></ol></li></ol><hr><h2 id="JSON："><a href="#JSON：" class="headerlink" title="JSON："></a>JSON：</h2><h3 id="1-概念：-JavaScript-Object-Notation-JavaScript对象表示法"><a href="#1-概念：-JavaScript-Object-Notation-JavaScript对象表示法" class="headerlink" title="1. 概念： JavaScript Object Notation        JavaScript对象表示法"></a>1. 概念： JavaScript Object Notation        JavaScript对象表示法</h3><pre><code>//普通Person p = new Person();p.setName("张三");p.setAge(23);p.setGender("男");//jsonvar p = {"name":"张三","age":23,"gender":"男"};</code></pre><ul><li>json现在多用于存储和交换文本信息的语法</li><li>进行数据的传输</li><li>JSON 比 XML 更小、更快，更易解析。</li></ul><h3 id="2-语法："><a href="#2-语法：" class="headerlink" title="2. 语法："></a>2. 语法：</h3><h4 id="2-1-基本规则"><a href="#2-1-基本规则" class="headerlink" title="2.1 基本规则"></a>2.1 基本规则</h4><ul><li><p>数据在名称/值对中：json数据是由键值对构成的</p><ul><li>键==用引号(单双都行)==引起来，也可以==不使用引号==</li><li>值的取值类型：<ol><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号中）    {“persons”:[ { },{ } ]}</li><li>对象（在花括号中） {“address”:{“province”：”陕西”….}}</li><li>null</li></ol><pre><code>var persons = {"persons":[{"name":"张三"},{"name":"李四"}]}</code></pre></li></ul></li><li><p>数据由逗号分隔：多个键值对由逗号分隔</p></li><li><p>花括号保存对象：使用{}定义json 格式</p></li><li><p>方括号保存数组：[]</p></li></ul><h4 id="2-2-获取数据"><a href="#2-2-获取数据" class="headerlink" title="2.2 获取数据:"></a>2.2 获取数据:</h4><ol><li>json对象.键名</li><li>json对象[“键名”]</li><li>数组对象[索引]</li></ol><pre><code>var persons = {"persons":[{"name":"张三"},{"name":"李四"}]}//李四var name1 = persons.persons[1].name</code></pre><ol start="4"><li><strong>遍历</strong></li></ol><pre><code> //1.定义基本格式                var person = {"name": "张三", age: 23, 'gender': true};                        var ps = [{"name": "张三", "age": 23, "gender": true},                    {"name": "李四", "age": 24, "gender": true},                    {"name": "王五", "age": 25, "gender": false}];                                    //获取person对象中所有的键和值                //for in 循环                for(var key in person){                    alert(key)//键，字符串形式，获取值时不能使用：person.key --&gt; person."name"                    alert(person[key])//值                }                                 //获取ps数组中的所有值                 for(var i=0;i&lt;ps.length;i++){                     var p = ps[i];                     for(var key in p){                         alert(key+":"+p[key]);                     }                 }</code></pre><h4 id="2-3-JSON数据和Java对象的相互转换"><a href="#2-3-JSON数据和Java对象的相互转换" class="headerlink" title="2.3 JSON数据和Java对象的相互转换"></a>2.3 JSON数据和Java对象的相互转换</h4><ul><li>JSON解析器：<ul><li>常见的解析器：Jsonlib，Gson，fastjson，jackson</li></ul></li></ul><ol><li><p>JSON转为Java对象（了解）</p><ol><li>导入jackson的相关jar包</li><li>创建Jackson核心对象 ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换<ol><li>readValue(json字符串数据,class)</li></ol><pre><code>String person = "{"name": "张三", age: 23, 'gender': true}";Person person = mapper.readValue(person,Person.class)</code></pre></li></ol></li><li><p><strong>Java对象转换JSON</strong></p></li><li><p><strong>使用步骤</strong></p></li></ol><pre><code>1. 导入jackson的相关jar包2. 创建Jackson核心对象 ObjectMapper3. 调用ObjectMapper的相关方法进行转换  1. **转换方法**          * writeValue(参数1，obj):                参数1：                    File：将obj对象转换为JSON字符串，并保存到指定的文件中                    Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中                    OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中    * writeValueAsString(obj):将对象转为json字符串        ``` java    var person = {"name": "张三", age: 23, 'gender': true};        String json = writeValueAsString(person);    System.out.println(json);        writeValue(new File("d://a.txt"),json);    ```      2. 注解：（定义在Bean类的属性上方）     1. @JsonIgnore：排除属性（该属性不被转换为json）。（了解）     2. @JsonFormat：属性值得格式化          * @JsonFormat(pattern = "yyyy-MM-dd")  3. 复杂java对象转换     1. List：转换出的是数组     2. Map：转换出的和对象格式一致</code></pre><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li><p>校验用户名是否存在</p><pre><code>注意：servlet返回的应该是json对象有两种解决方案：1. $.get(type):将最后一个参数type指定为"json"2. 在服务器端设置MIME类型response.setContentType("application/json;charset=utf-8");</code></pre><pre><code>乱码:response.setContentType("application/json;charset=utf-8");</code></pre><pre><code>json is not a function:没有加引号 "json"</code></pre><pre><code>连接数据库bug:except 1,actl 0（getParameter获取不到值）dao的impl类数据库逻辑，应该try catch，查找到返回true，查找不到catch中返回false</code></pre></li></ul><pre><code>分析：1.在html中创建表单，并在username的表单后加上span标签2.引入jquery，绑定blur事件，触发ajax请求查询数据库方法，返回一个userExsit和msg，判断userExsit，将msg传值3.FindUserServlet，获取ajax传来的值，调用数据库查询，查询到有值则返回true，把userExsit和msg赋值，转换json对象</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s_username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bt_reg<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.3.1.min.js<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取输入框的值</span>        <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用Ajax发送请求,接收到回应之后调用function方法</span>        $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"findUserServlet"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span>username<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>userExsit<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//存在用户</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"s_username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"s_username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//用户名可用</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"s_username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"s_username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取ajax发送请求的值</span>String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置回应的格式和字符集</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存在该用户</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userExsit"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"该用户已存在，请重试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用户名可用</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userExsit"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"该用户名可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将map集合对象转换为json对象,并返回给客户端</span>ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mapper<span class="token punctuation">.</span><span class="token function">writeValue</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> json </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS:页面美化和布局控制</title>
      <link href="/2020/07/22/qian-duan/css-ye-mian-mei-hua-he-bu-ju-kong-zhi/"/>
      <url>/2020/07/22/qian-duan/css-ye-mian-mei-hua-he-bu-ju-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-页面美化和布局控制"><a href="#CSS-页面美化和布局控制" class="headerlink" title="CSS:页面美化和布局控制"></a>CSS:页面美化和布局控制</h2><h3 id="1-概念：Cascading-Style-Sheets-层叠样式表（多种样式同时作用在一个html元素中）"><a href="#1-概念：Cascading-Style-Sheets-层叠样式表（多种样式同时作用在一个html元素中）" class="headerlink" title="1. 概念：Cascading Style Sheets 层叠样式表（多种样式同时作用在一个html元素中）"></a>1. 概念：Cascading Style Sheets 层叠样式表（多种样式同时作用在一个html元素中）</h3><h3 id="2-好处：将内容展示和样式控制分离，降低耦合度"><a href="#2-好处：将内容展示和样式控制分离，降低耦合度" class="headerlink" title="2. 好处：将内容展示和样式控制分离，降低耦合度"></a>2. 好处：将内容展示和样式控制分离，降低耦合度</h3><h3 id="3-CSS的使用："><a href="#3-CSS的使用：" class="headerlink" title="3. CSS的使用："></a>3. CSS的使用：</h3><ol><li><p>内联样式</p><ul><li>在标签内使用style属性指定css代码</li></ul></li><li><p>内部样式</p><ul><li>在head标签内，定义style标签的标签体内容就是css代码</li></ul></li><li><p>外部样式</p><ul><li>在head标签内，定义link标签，引入外部的css资源文件</li></ul><pre><code>&lt;link rel="stylesheet" href="css/a.css"&gt;</code></pre></li></ol><h3 id="4-CSS语法："><a href="#4-CSS语法：" class="headerlink" title="4. CSS语法："></a>4. CSS语法：</h3><ol><li><p>格式：</p><pre><code>选择器{    属性名1：属性值1；    属性名2：属性值2；……}</code></pre></li><li><p><strong>选择器：</strong></p><ul><li><p>分类</p><ol><li><p><strong>基础选择器</strong></p><ol><li><p>id选择器</p><ul><li>语法：#属性值{    }</li></ul></li><li><p>元素选择器</p><ul><li>语法：标签名称{    }</li></ul></li><li><p>类选择器</p><ul><li>语法：.class属性值{    }</li></ul><pre><code>.cls1{    }&lt;p class="cls1"&gt;111&lt;/p&gt;</code></pre></li></ol><ul><li>注意：优先级：id&gt;类&gt;元素</li></ul></li><li><p><strong>扩展选择器</strong></p><ol><li><p>选择所有元素</p><ul><li>语法： *{ }</li></ul></li><li><p>并集选择器</p><ul><li>选择器1，选择器2{ }</li></ul></li><li><p>子选择器：选择器1元素下的选择器2元素</p><ul><li>选择器1 选择器2{    }</li></ul></li><li><p>父选择器：  选择器2元素上的选择器1元素</p><ul><li>选择器2 &gt; 选择器1{    }</li></ul></li><li><p>属性选择器： 一般用于表单标签</p><ul><li>语法：元素名称[属性名=”属性值 “]</li></ul><pre><code>input[type="text"]{    }</code></pre></li><li><p>伪类选择器：选择一些元素具有的状态</p><ul><li>语法： 元素：状态{}</li><li>如：<a>状态：<ul><li> link：初始化的状态</li><li>visited：被访问过的状态</li><li>active：正在访问状态</li><li>hover：鼠标悬浮状态</li></ul></a></li></ul><pre><code>a:hover{    }</code></pre></li></ol></li></ol></li></ul></li><li><p><strong>属性</strong></p><ol><li>字体、文本<ul><li>font-size:字体大小</li><li>font-family:字体类型</li><li>font-align:对齐方式</li><li>line-height:行高</li></ul></li><li>背景<ul><li>background：颜色/url(“ “) no-repeat不重复 center</li></ul></li><li>边框<ul><li>border：设置边框，复合属性1px solid red</li><li>border-radius:圆角 px</li></ul></li><li>尺寸<ul><li>width宽度</li><li>height高度</li></ul></li><li>盒子模型（根据视角）<ul><li>margin：外边距px</li><li>padding：内边距<ul><li>默认情况下内边距会影响整个盒子的大小</li><li>box-sizing：border-box; 设置盒子的属性 让width和height就是最终盒子的大小</li></ul></li><li>float：浮动<ul><li>left左浮动</li><li>right右浮动</li></ul></li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis非关系型数据库</title>
      <link href="/2020/07/21/qian-duan/redis/"/>
      <url>/2020/07/21/qian-duan/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="概念：-redis是一款高性能的NOSQL系列的非关系型数据库"><a href="#概念：-redis是一款高性能的NOSQL系列的非关系型数据库" class="headerlink" title="概念： redis是一款高性能的NOSQL系列的非关系型数据库"></a>概念： redis是一款高性能的NOSQL系列的非关系型数据库</h3><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/redis1.png" alt="image-20200510215548542" style="zoom:80%;"><pre><code>1.1.什么是NOSQL    NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。        1.1.1.    NOSQL和关系型数据库比较        优点：            1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。            2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。            3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。            4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。        缺点：            1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。            2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。            3）不提供关系型数据库对事务的处理。    1.1.2.    非关系型数据库的优势：        1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。        2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。    1.1.3.    关系型数据库的优势：        1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。        2）事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。    1.1.4.    总结        关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，        让NoSQL数据库对关系型数据库的不足进行弥补。        一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据1.2.主流的NOSQL产品    •    键值(Key-Value)存储数据库            相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB            典型应用： 内容缓存，主要用于处理大量数据的高访问负载。             数据模型： 一系列键值对            优势： 快速查询            劣势： 存储的数据缺少结构化    •    列存储数据库            相关产品：Cassandra, HBase, Riak            典型应用：分布式的文件系统            数据模型：以列簇式存储，将同一列数据存在一起            优势：查找速度快，可扩展性强，更容易进行分布式扩展            劣势：功能相对局限    •    文档型数据库            相关产品：CouchDB、MongoDB            典型应用：Web应用（与Key-Value类似，Value是结构化的）            数据模型： 一系列键值对            优势：数据结构要求不严格            劣势： 查询性能不高，而且缺乏统一的查询语法    •    图形(Graph)数据库            相关数据库：Neo4J、InfoGrid、Infinite Graph            典型应用：社交网络            数据模型：图结构            优势：利用图结构相关算法。            劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。1.3 什么是Redis    Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：        1) 字符串类型 string        2) 哈希类型 hash        3) 列表类型 list        4) 集合类型 set        5) 有序集合类型 sortedset    1.3.1 redis的应用场景        •    缓存（数据查询、短连接、新闻内容、商品内容等等）        •    聊天室的在线好友列表        •    任务队列。（秒杀、抢购、12306等等）        •    应用排行榜        •    网站访问统计        •    数据过期处理（可以精确到毫秒        •    分布式集群架构中的session分离表锁:MyISAM行锁：Innodb大数据：3v:海量数据、数据多样、实时数据 3高：高并发、高可拓、高性能单线程：redis是基于内存操作，CPU不是Redis性能瓶颈，而是根据内存和网络带宽，redis将全部数据放在内存当中。</code></pre><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ol><li>官网：<a href="https://redis.io/">https://redis.io</a><ol start="2"><li>中文网：<a href="http://www.redis.net.cn/">http://www.redis.net.cn/</a></li><li>解压直接可以使用：<ul><li>redis.windows.conf：配置文件</li><li>redis-cli.exe：redis的客户端</li><li>redis-server.exe：redis服务器端</li></ul></li></ol></li></ol><h3 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h3><h4 id="redis的数据结构："><a href="#redis的数据结构：" class="headerlink" title="redis的数据结构："></a>redis的数据结构：</h4><ul><li>redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构<ul><li>value的数据结构：<ol><li>字符串类型 string</li><li>哈希类型 hash ： map格式  </li><li>列表类型 list ： linkedlist格式。支持重复元素</li><li>集合类型 set  ： 不允许重复元素</li><li>有序集合类型 sortedset：不允许重复元素，且元素有顺序</li></ol></li></ul></li></ul><h4 id="1-字符串类型-string"><a href="#1-字符串类型-string" class="headerlink" title="1. 字符串类型 string"></a>1. 字符串类型 string</h4><ol><li><p>存储： set key value</p><pre><code>    127.0.0.1:6379&gt; set username zhangsan    OK</code></pre></li><li><p>获取： get key</p><pre><code>127.0.0.1:6379&gt; get username"zhangsan"</code></pre></li><li><p>删除： del key</p><pre><code>127.0.0.1:6379&gt; del age(integer) 1</code></pre></li><li><p>增加字符串：APPEND <key> <value></value></key></p><p>如果key不存在，就相当于set</p></li><li><p>获取字符串长度：STRLEN <key></key></p></li><li><p>自增1：incr <key></key></p></li><li><p>自减1：decr <key></key></p></li><li><p>自增步长：INCRBY <key> &lt;步长&gt;</key></p></li><li><p>自减步长：DECRBY <key> &lt;步长&gt;</key></p></li><li><p>截取字符串：GETRANGE <key> &lt;起始索引0&gt; &lt;终止索引&gt; 如：03就是[0,3]，0 -1就是get</key></p></li><li><p>替换字符串：SETRANGE <key> &lt;索引&gt; <value> 如：原来是abcc  ,1 aa  就是aaac</value></key></p></li><li><p>设置过期时间：setex <key> &lt;秒&gt; <value></value></key></p></li><li><p>不存在时再set：setnx <key> <value></value></key></p></li><li><p>批量set/get/setex/setnx：mset <key> <value><key> <value></value></key></value></key></p></li><li><p>先get后set：getset <key> <value> 如果存在值就获取原值，并设置新值</value></key></p></li></ol><h4 id="2-哈希类型-hash"><a href="#2-哈希类型-hash" class="headerlink" title="2. 哈希类型 hash"></a>2. 哈希类型 hash</h4><ol><li><p>存储： hset key field value</p><pre><code>127.0.0.1:6379&gt; hset myhash username lisi(integer) 1127.0.0.1:6379&gt; hset myhash password 123(integer) 1</code></pre><p>批量存储：hmset <key> <field> <value><field> <value></value></field></value></field></key></p></li><li><p>获取： </p><ul><li><p>hget key field: 获取指定的field对应的值</p><pre><code>127.0.0.1:6379&gt; hget myhash username"lisi"</code></pre></li><li><p>批量获取：hmget <key> <field><field><field></field></field></field></key></p></li><li><p>获取所有field：hkeys <key></key></p></li><li><p>获取所有value：hvals <key></key></p></li><li><p>hgetall key：获取所有的field和value</p><pre><code>127.0.0.1:6379&gt; hgetall myhash1) "username"2) "lisi"3) "password"4) "123"</code></pre></li></ul></li><li><p>删除： hdel key field</p><pre><code>127.0.0.1:6379&gt; hdel myhash username(integer) 1</code></pre></li><li><p>key中键值对数量：hlen <key></key></p></li><li><p>判断key中是否存在key：hexists <key> <filed></filed></key></p></li><li><p>按步长增加value的值：hincrby/hincrbyfloat <key> <filed> &lt;步长&gt;</filed></key></p></li><li><p>不存在时再set：hsetnx <key> <filed> <value></value></filed></key></p></li></ol><h4 id="3-列表类型-list-可以添加一个元素到列表的头部（左边）或者尾部（右边）"><a href="#3-列表类型-list-可以添加一个元素到列表的头部（左边）或者尾部（右边）" class="headerlink" title="3. 列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）"></a>3. 列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）</h4><ol><li><p>添加：</p><ol><li><p>lpush key value: 将元素加入列表左表</p></li><li><p>rpush key value：将元素加入列表右边</p><pre><code>127.0.0.1:6379&gt; lpush myList a(integer) 1127.0.0.1:6379&gt; lpush myList b(integer) 2127.0.0.1:6379&gt; rpush myList c(integer) 3</code></pre></li></ol></li><li><p>获取：</p><ul><li>lrange key start end ：范围获取<pre><code>127.0.0.1:6379&gt; lrange myList 0 -1        1) "b"        2) "a"        3) "c"</code></pre></li><li>lindex <key> <index>：通过下标获取值，从0开始</index></key></li></ul></li><li><p>删除：</p><ul><li>lpop key： 删除列表最左边的元素，并将元素返回</li><li>rpop key： 删除列表最右边的元素，并将元素返回</li><li>lrem <key> &lt;数量&gt; <value>：移除对应数量的值</value></key></li></ul></li><li><p>获取列表长度：Llen <key> </key></p></li><li><p>截取：ltrim <key> &lt;起始index&gt;&lt;终止index&gt;</key></p></li><li><p>移除列表最后一个元素，并移动到新列表中：rpoplpush <key> <otherkey></otherkey></key></p></li><li><p>更新值，将列表指定下标的值替换为另一个值：lset <key> <index> <value>，不存在会报错</value></index></key></p></li></ol><h4 id="4-无序集合类型-set-：-不允许重复元素"><a href="#4-无序集合类型-set-：-不允许重复元素" class="headerlink" title="4. 无序集合类型 set ： 不允许重复元素"></a>4. 无序集合类型 set ： 不允许重复元素</h4><ol><li><p>存储：sadd key value</p><pre><code>127.0.0.1:6379&gt; sadd myset a(integer) 1127.0.0.1:6379&gt; sadd myset a(integer) 0</code></pre></li><li><p>获取：smembers key:获取set集合中所有元素</p><pre><code>127.0.0.1:6379&gt; smembers myset1) "a"</code></pre></li><li><p>判断是否有该值：sismember <key> <value></value></key></p></li><li><p>删除：srem key value:删除set集合中的某个元素    </p><pre><code>127.0.0.1:6379&gt; srem myset a(integer) 1</code></pre></li><li><p>获取集合里面的元素个数：scard <key></key></p></li><li><p>随机出几个数字：srandmember <key></key></p></li><li><p>随机出栈：spop <key></key></p></li><li><p>将key1的值转到key2里：smove <key1> <key2> <value></value></key2></key1></p></li><li><p>差集（在set1中，不在set2中的值）：sdiff <key1> <key2></key2></key1></p></li><li><p>交集：sinter  <key1> <key2></key2></key1></p></li><li><p>并集：sunion  <key1> <key2></key2></key1></p></li></ol><h4 id="5-有序集合类型-sortedset：不允许重复元素，且元素有顺序-每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。"><a href="#5-有序集合类型-sortedset：不允许重复元素，且元素有顺序-每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。" class="headerlink" title="5. 有序集合类型 sortedset：不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。"></a>5. 有序集合类型 sortedset：不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</h4><ol><li><p>存储（可批量）：zadd key score value</p><pre><code>127.0.0.1:6379&gt; zadd mysort 60 zhangsan(integer) 1127.0.0.1:6379&gt; zadd mysort 50 lisi(integer) 1127.0.0.1:6379&gt; zadd mysort 80 wangwu(integer) 1</code></pre></li><li><p>获取：zrange/zrevrange key start end [withscores]</p><pre><code>127.0.0.1:6379&gt; zrange mysort 0 -11) "lisi"2) "zhangsan"3) "wangwu"127.0.0.1:6379&gt; zrange mysort 0 -1 withscores1) "zhangsan"2) "60"3) "wangwu"4) "80"5) "lisi"6) "500"</code></pre><p>根据分数获取：zrangebyscore/zrevrangebyscore <key> &lt;开始score&gt;&lt;结束score&gt;</key></p><p>[“（ ”表示不包含]：zrangebyscore <key> &lt;开始score&gt;（&lt;结束score&gt;： 开始≤分数＜结束</key></p><p>截取：zrangebyscore <key> &lt;开始score&gt;&lt;结束score&gt; limit <index> &lt;截取个数&gt;</index></key></p></li><li><p>删除：zrem key value</p><pre><code>127.0.0.1:6379&gt; zrem mysort lisi(integer) 1</code></pre></li><li><p>集合里面的元素个数：zcard <key></key></p></li><li><p>集合区间内的元素个数：zcount <key> &lt;开始score&gt;&lt;结束score&gt;</key></p></li><li><p>元素的下标：zrank/zrevrank <key> <value></value></key></p></li><li><p>元素的分数：zscore <key> <value></value></key></p></li></ol><h4 id="6-通用命令"><a href="#6-通用命令" class="headerlink" title="6. 通用命令"></a>6. 通用命令</h4><ol><li>keys * : 查询所有的键</li><li>type key ： 获取键对应的value的类型</li><li>del key：删除指定的key value</li><li>select <index> ：切换数据库</index></li><li>DBSIZE：数据库key的数量</li><li>flushdb：清空数据库</li><li>flushAll：清空全部数据库</li><li>EXIST <key> ：是否存在</key></li><li>EXPIRE <key> &lt;秒&gt;：设定过期时间</key></li><li>ttl <key>：查看剩余时间</key></li></ol><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><ol><li><p>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</p></li><li><p>redis持久化机制：</p><ol><li><p><strong>RDB：默认方式，不需要进行配置，默认就使用这种机制</strong></p><p>原理：</p><p>在指定时间间隔内将内存中的数据集快照写入到磁盘中，当需要恢复的时候再将磁盘中的快照读到内存里</p><p>redis会单独创建(fork)一个子线程进行持久化操作，会先将数据集写入到临时文件中，当持久化过程结束之后，临时文件就会替换原持久化好的rdb文件。在整个过程中，主进程没有任何io操作，确保了极高的性能。</p><p>优点：</p><ol><li>适合于大规模数据的恢复</li><li>对数据的完整性要求不高</li></ol><p>缺点：</p><ol><li>容易丢失最后一次修改的数据，需要一定的时间间隔进程操作</li><li>在fork进程的时候，会占用一定的内存空间</li></ol><ol><li><p>编辑redis.windwos.conf文件</p><pre><code>after 900 sec (15 min) if at least 1 key changed            save 900 1after 300 sec (5 min) if at least 10 keys changed            save 300 10after 60 sec if at least 10000 keys changed            save 60 10000</code></pre></li><li><p>重新启动redis服务器，并指定配置文件名称</p><p>在此处打开命令行 redis-server.exe redis.windows.conf    </p></li></ol></li><li><p><strong>AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</strong></p><p>原理：</p><p>以日志的形式记录每一次写操作，将redis执行过的每一个写的指令记录下来，只能追加文件，不能改写文件，在刚启动redis的时候会读取文件重新构建数据。</p><p>优点:</p><ol><li>每一次修改都会保存，文件的完整性好</li><li>每秒同步一次，只可能丢失一秒的数据</li><li>从不同步，效率最高</li></ol><p>缺点：</p><ol><li>数据文件aof要比rdb大很多，修复的速度要比rdb慢</li><li>aof运行时要进行读写的操作，运行效率f会比rdb慢</li></ol><ol><li><p>编辑redis.windwos.conf文件</p><pre><code>appendonly no（关闭aof） --&gt; appendonly yes （开启aof）# appendfsync always ： 每一次操作都进行持久化appendfsync everysec ： 每隔一秒进行一次持久化# appendfsync no     ： 不进行持久化</code></pre></li><li><p>重新启动redis服务器，并指定配置文件名称</p><p> 在此处打开命令行 redis-server.exe redis.windows.conf    </p></li></ol></li></ol></li></ol><p>​          </p><h3 id="Java客户端-Jedis"><a href="#Java客户端-Jedis" class="headerlink" title="Java客户端 Jedis"></a>Java客户端 Jedis</h3><ul><li><p>Jedis: 一款java操作redis数据库的工具.</p></li><li><p>使用步骤：</p><ol><li>下载jedis的jar包</li><li>使用<ol><li>获取连接<br>Jedis jedis = new Jedis(“localhost”,6379);</li></ol></li></ol></li></ul><ol start="2"><li>操作<pre><code>   jedis.set("username","zhangsan");</code></pre><ol start="3"><li>关闭连接</li></ol></li></ol><pre><code>           jedis.close();</code></pre><ul><li><p><strong>Jedis操作各种redis中的数据结构</strong></p><ol><li><p>字符串类型 string</p><pre><code>   set</code></pre><p>get</p></li><li><p>哈希类型 hash ： map格式 </p><pre><code> hset   hget</code></pre><p>hgetAll</p></li><li><p>列表类型 list ： linkedlist格式。支持重复元素</p><pre><code> lpush / rpush   lpop / rpop</code></pre><p>lrange start end : 范围获取</p></li><li><p>集合类型 set  ： 不允许重复元素</p><pre><code>   sadd</code></pre><p>smembers:获取所有元素</p></li><li><p>有序集合类型 sortedset：不允许重复元素，且元素有顺序</p><pre><code>   zadd</code></pre><p>   zrange</p></li></ol></li><li><p><strong>jedis连接池： JedisPool</strong></p><ul><li>使用：<ol><li>创建JedisPool连接池对象 new JedisPool([config],[“localhost”],[6379])</li><li>调用方法 getResource()方法获取Jedis连接</li></ol></li></ul><ol start="3"><li>使用</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//0.创建一个配置对象</span>JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.创建Jedis连接池对象</span>JedisPool jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.获取连接</span>Jedis jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 使用</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">,</span><span class="token string">"heihei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4. 关闭 归还到连接池中</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>连接池工具类（加载配置文件，获取Jedis方法）<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JedisPool jedisPool<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取配置文件</span>        InputStream is <span class="token operator">=</span> JedisPoolUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jedis.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Properties对象</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关联文件</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取数据，设置到JedisPoolConfig中</span>        JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化JedisPool</span>        jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**                 * 获取连接方法                 */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Jedis <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>   </code></pre></li></ul></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><pre class=" language-javascript"><code class="language-javascript">bug1<span class="token punctuation">:</span>查询后的列表<span class="token punctuation">:</span>undefind没有遍历获取的集合$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"findProvinceServlet"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历</span>    <span class="token function">$</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token string">"&lt;option id='"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token string">"'>"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"&lt;/option>"</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#province"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre><code>bug2:JedisConnectionException: Could not get a resource from the pool没有开redis服务器在运行前要先开启redis服务器挂着</code></pre><pre><code>案例需求：    1. 提供index.html页面，页面中有一个省份 下拉列表    2. 当 页面加载完成后 发送ajax请求，加载所有省份</code></pre><pre><code>* 注意：使用redis缓存一些不经常发生变化的数据。    * 数据库的数据一旦发生改变，则需要更新缓存。        * 数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，再次存入        * 在service对应的增删改方法中，将redis数据删除。        //1.查询redis缓存中是否有数据        //1.1创建jedis        Jedis jedis = RedisUtils.getJedis();        String province_json = jedis.get("province");        if(province_json==null||province_json.length()==0){            //没有数据，查询数据库            List&lt;Province&gt; list = provinceDao.findProvince();            //将数据序列化为json对象            ObjectMapper mapper = new ObjectMapper();            try {                province_json = mapper.writeValueAsString(list);            } catch (JsonProcessingException e) {                e.printStackTrace();            }            //存储进缓存中            jedis.set("province",province_json);            jedis.close();        }else {            return province_json;        }</code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><pre class=" language-yaml"><code class="language-yaml">bind 127.0.0.1 <span class="token comment" spellcheck="true">#绑定的Ip</span>protected<span class="token punctuation">-</span>mode yes <span class="token comment" spellcheck="true"># 保护模式</span>port 6379 <span class="token comment" spellcheck="true">#端口设置</span></code></pre><h3 id="通用GENERAL"><a href="#通用GENERAL" class="headerlink" title="通用GENERAL"></a>通用GENERAL</h3><pre class=" language-yaml"><code class="language-yaml">daemonize yes <span class="token comment" spellcheck="true"># 以守护进程的方式运行，默认为no，需要手动开启为yes</span>pidfile /var/run/redis_6379.pid <span class="token comment" spellcheck="true"># 如果以后台的方式运行，我们就需要指定一个pid文件</span><span class="token comment" spellcheck="true">#日志</span><span class="token comment" spellcheck="true"># notive生产环境</span>loglevel notice logfile "" <span class="token comment" spellcheck="true">#日志的文件位置名</span>databases 16 <span class="token comment" spellcheck="true"># 数据库的数量，默认为16个</span>always<span class="token punctuation">-</span>show<span class="token punctuation">-</span>logo yes <span class="token comment" spellcheck="true">#是否显示logo</span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>Redis单条命令是保持原子性的，但是事务不保证原子性</strong>，没有隔离级别的概念</p><p>一次性、顺序性、排他性</p><p>所有命令在事务中，并没有直接被执行，只有执行命令之后才会被执行</p><p>开启事务：multi</p><p>命令入队：。。。</p><p>执行事务：exec</p><p>放弃事务：discard</p><blockquote><p>编译型异常（代码有问题）：所有命令都不会执行</p><p>运行时异常：其他命令依然正常执行</p></blockquote><h2 id="消息订阅发布"><a href="#消息订阅发布" class="headerlink" title="消息订阅发布"></a>消息订阅发布</h2><p><strong>先订阅后发布</strong></p><p>订阅端、频道、发布端</p><p>订阅：subscribe &lt;频道名称&gt;</p><p>发布：publish &lt;频道名称&gt; &lt;消息&gt;</p><p>退订：unsubscribe &lt;频道名称&gt;</p><p><strong>原理</strong>：redis-server里维护了一个字典，字典的键就是一个个频道，值是一个链表，链表中保存了所有订阅的客户端，订阅的命令核心就是将客户端添加到订阅的链表中。发布就是根据频道在字典中查到对应的值，遍历这个链表将其发布给订阅者。</p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>指将一台redis服务器的数据，复制到其他redis服务器。</p><p><strong>数据的复制时单向的，只有主节点到从节点</strong></p><p>单个redis最大使用内存不应该超过20G</p><p>作用：</p><ol><li>数据冗余</li><li>故障恢复</li><li>负载均衡：读写分离，主机为写为主，从机以读为主（只要配置了主从关系，就自动实现了这一点）</li><li>高可用（集群）基石：哨兵模式、集群能够实施的基础</li></ol><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>只配置从库，不用配置主库</p><p>复制3个配置文件，然后修改对应的信息</p><ol><li>port端口（主不变，从变）</li><li>pidfile名字 （不改为空）</li><li>log文件名字</li><li>dump.rdb名字</li></ol><p>修改之后，启动3个redis服务器，可以通过进程信息查看 ps -ef|grop redis</p><p>查看当前库的信息：info replication（能看到角色master，从机数量）</p><p>认老大：slaveof 127.0.0.1 6379</p><blockquote><p>想要持久化主从关系，需要在配置文件中配置 replicaof &lt;主ip&gt; &lt;主port&gt;</p></blockquote><p>测试：主机断开连接，从机依然可以连接到主机，但仍不能进行写操作，主机连接上之后，从机依然能读到主机写的新数据</p><p>测试：如果使用命令行配置主从，从机断开连接，会变回主机</p><blockquote><p>复制原理：</p><p>从机成功连接主机之后，会发送一条sync同步命令，主机接到命令，会启动后台存盘进程，同时收集所有用于修改数据集的命令，在后台进程执行完毕之后，主机会传送整个数据文件到从机，实现完全同步</p><p>全量复制：从机接收到数据库文件，将其加载进内存</p><p>增量复制：连接后，主机新收集的修改命令给从机，完成同步</p></blockquote><h4 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h4><ol><li>一主二仆</li><li>层层链路：M-S(M)-S，即当主又当从的节点，仍然不能写</li><li>谋朝篡位：如果主机断开连接，使用<code>slaveof no one</code>，让自己变为主机，其他节点归顺</li></ol><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p><strong>原理</strong>：哨兵通过发送命令，等待redis服务器回应，从而监控运行的多个redis实例</p><p>当主服务器宕机，哨兵1检测到结果，系统并不会进行failover(故障转移)操作，当之后的哨兵也检测到不可用，数量达到一定值，哨兵间就会进行投票，进行故障转移（选新主机）操作。切换成功后发布订阅模式，让各个监控的从服务器切换主机</p><p><strong>步骤</strong>：</p><ol><li><p>目前状态时1主2从</p></li><li><p>配置哨兵配置文件 sentinel.conf</p><pre class=" language-bash"><code class="language-bash">sentinel monitor 被监控的名称 127.0.0.1 6379 1<span class="token comment" spellcheck="true"># 后面的数字1，代表主机挂了，从机投票看谁接替为主机</span></code></pre></li><li><p>启动哨兵</p><pre class=" language-bash"><code class="language-bash">redis-sentinel kconfig/sentinel.conf</code></pre></li></ol><blockquote><p>当主机回来了，只能归到新的主机下，当作从机</p></blockquote><p><strong>优点</strong>：</p><ol><li>哨兵集群，基于主从复制模式，所有的主从配置优点都有</li><li>主从自动切换，故障可以转移，系统可用性更好</li></ol><p><strong>缺点</strong>：</p><ol><li>Redis不好在线扩容，集群容量达到上限，扩容就会很麻烦</li><li>哨兵模式配置麻烦</li></ol><h2 id="缓存穿透、雪崩"><a href="#缓存穿透、雪崩" class="headerlink" title="缓存穿透、雪崩"></a>缓存穿透、雪崩</h2><p>缓存穿透概念：<del>当查询一个数据，内存数据库中没有，也就是缓存没有命中，就去持久层查询，持久层也没有，本次查询失败，当用户很多的时候，缓存都没有命中（秒杀），都去访问持久层，带来了很大的压力，这就是缓存穿透。（大面积查不到）</del></p><p>缓存穿透概念：<strong>缓存穿透</strong>是指缓存和数据库中都没有的数据，而用户不断发起请求，如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。</p><p><strong>解决方案：</strong></p><ol><li>接口层增加校验，如用户信息校验，id做基础校验，id&lt;=0的直接拦截；</li><li>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</li></ol><p><strong>布隆过滤器</strong>：是一种数据结构，对所有可能查询的参数以哈希的形式存储，在控制层先进行校验，不符合就会被丢弃，减缓存储系统压力。</p><p><strong>缓存空对象</strong>：当存储层不命中的时候，返回的空对象将其缓存起来，同时设定一个过期时间，之后如果再访问这个数据就可以在换从获取，避免了后端数据源压力。</p><blockquote><p>缓存空对象的两个问题：</p><ol><li>如果空值被缓存起来，意味着缓存需要更大的空间去存储更多的键</li><li>即使对空值设置了过期时间，还是会存在缓存层和存储层有一段时间不一致，对于要保持一致性的业务有影响</li></ol></blockquote><p>缓存击穿概念（量太大，缓存过期）：指一个Key非常热点，大并发集中在一个点上访问，当这个key失效的瞬间，持续的大并发就会穿破缓存，直接访问数据库。这一瞬间叫做缓存击穿。</p><p>解决方案：</p><p><strong>设置热点数据永不过期</strong></p><p><strong>加互斥锁</strong>：分布式锁，保证对于每一个key只有一个线程可以访问后端服务，其他线程没有访问权限，只需要等待即可。这种方式将高并发的压力转移给了分布式锁。</p><p><strong>缓存雪崩</strong>是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><p><strong>解决方案</strong>：</p><ol><li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同缓存数据库中。</li><li>设置热点数据永远不过期。</li><li>数据预热：在正式部署之前，先把数据提前访问一遍，保证大量访问的数据加载进缓存中。将大并发的数据设定不同的key和过期时间，失效时间尽量均匀分布。</li><li>限流降级：通过加锁、队列来控制读数据库写缓存的线程数量</li></ol>]]></content>
      
      
      <categories>
          
          <category> nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM模型、BOM模型、事件</title>
      <link href="/2020/07/20/qian-duan/dom-shi-jian-he-bom/"/>
      <url>/2020/07/20/qian-duan/dom-shi-jian-he-bom/</url>
      
        <content type="html"><![CDATA[<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul><li><p>功能：控制html文档的内容</p></li><li><p>代码：获取页面标签（元素）对象 Element</p><ul><li>document.getElementById(“id值”)：通过元素的id获取元素的对象</li></ul></li><li><p>操作Element对象</p><ol><li>修改属性值<ul><li>对象.src=””</li></ul></li><li>修改标签体内容<ol><li>获取文本标签对象</li><li>修改内容<ul><li>对象.innerHTML =”可以是数字/标签 “</li><li>追加：对象.innerHTML +=”可以是数字/标签 “</li></ul></li></ol></li></ol><hr></li><li><p>概念：Document Object Model 文档对象模型</p><ul><li>将标记语言文档的各个组成部分，封装成对象，可以使用这些对象，对标记语言文档进行CRUD的动态操作</li></ul></li><li><p>W3C DOM 标准被分为3个不同的部分：</p><ul><li> 核心DOM-针对任何结构化文档的标准模型</li><li>Document：文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li><li>Node：节点对象，其他5个的父对象</li><li>XML DOM-针对XML文档</li><li>HTML DOM-针对HTML文档</li></ul></li></ul><h3 id="核心DOM-针对任何结构化文档的标准模型"><a href="#核心DOM-针对任何结构化文档的标准模型" class="headerlink" title="核心DOM-针对任何结构化文档的标准模型"></a>核心DOM-针对任何结构化文档的标准模型</h3><h4 id="Document：文档对象"><a href="#Document：文档对象" class="headerlink" title="Document：文档对象"></a>Document：文档对象</h4><ol><li>创建（获取）：在html dom模型中可以使用window对象来获取<ol><li>window.document</li><li>document</li></ol></li><li>方法：<ol><li>获取Element对象<ol><li>getElementById()：根据id属性值获取元素对象，id属性值一般唯一</li><li>getElementsByTagName():根据元素名称获取元素对象们，返回值是一个数组</li><li>getElementsByClassName():根据Class属性值获取元素对象们，返回值是一个数组</li><li>getElementsByName():根据Name属性值获取元素对象们，返回值是一个数组</li></ol></li><li>创建其他DOM对象<ol><li>createAttribute(name)属性对象</li><li>createComment()注释对象</li><li>createElement()元素对象</li><li>createTextNode()节点对象</li></ol></li></ol></li></ol><h4 id="Element：元素对象"><a href="#Element：元素对象" class="headerlink" title="Element：元素对象"></a>Element：元素对象</h4><ol><li>获取/创建：通过document来获取和创建</li><li>方法：<ol><li>removeAttribute(属性名)：删除属性</li><li>setAttribute(属性名，属性值)：设置属性</li></ol></li></ol><h4 id="Node：节点对象，其他5个的父对象"><a href="#Node：节点对象，其他5个的父对象" class="headerlink" title="Node：节点对象，其他5个的父对象"></a>Node：节点对象，其他5个的父对象</h4><ul><li>特点：所有dom对象都可以被认为是一个节点</li><li>方法：<ul><li>CRUD dom树：<ul><li>appendChild(id)：向节点的子节点列表的结尾添加新子节点<ul><li>注意：想要给标签内加文本内容，需要先创建一个文本节点，再将文本节点当作子节点加入</li></ul></li><li>removeChild(id)：删除（并返回）当前节点的指定子节点<ul><li>注意：想要超链接不跳转，但执行javaScript语句，可以使用href=”javascript:void(0);”</li></ul></li><li>replaceChild()：用新节点替换一个子节点</li></ul></li></ul></li><li>属性：<ul><li>parentNode 父节点</li></ul></li></ul><h3 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h3><ul><li><p>标签体的设置和获得：innerHTML</p></li><li><p>使用html元素对象的属性</p></li><li><p>控制元素样式</p><ol><li><p>使用元素的style属性来设置(了解)</p><pre><code>div1.style.border = "1px"</code></pre></li><li><p>提前定义好类选择器的样式，通过元素的className属性来设置其class属性值</p><pre><code>&lt;style&gt;.di{    border="1px"}&lt;/style&gt;div1.className ="d1";</code></pre></li></ol></li></ul><hr><h2 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h2><h3 id="功能：某些组件被执行了某些操作后，触发某些代码执行"><a href="#功能：某些组件被执行了某些操作后，触发某些代码执行" class="headerlink" title="功能：某些组件被执行了某些操作后，触发某些代码执行"></a>功能：某些组件被执行了某些操作后，触发某些代码执行</h3><ul><li><p>事件：某些操作（单双击……）</p></li><li><p>事件源：组件（按钮，输入框……）</p></li><li><p>监听器：代码</p></li><li><p>注册监听：将事件，事件源，监听器结合在一起</p></li></ul><h3 id="常见的事件："><a href="#常见的事件：" class="headerlink" title="常见的事件："></a>常见的事件：</h3><h4 id="点击事件："><a href="#点击事件：" class="headerlink" title="点击事件："></a>点击事件：</h4><ol><li>onclick：单击事件</li><li>ondblclick：双击事件</li></ol><h4 id="焦点事件："><a href="#焦点事件：" class="headerlink" title="焦点事件："></a>焦点事件：</h4><ul><li><p>onblur：失去焦点</p><ul><li>一般用于表单验证</li></ul><pre><code>//设置onblur事件，注意是方法名，不带括号document.getElementsByName("password")[0].onblur=checkPassword;</code></pre></li><li><p>onfocus：元素获得焦点</p></li></ul><h4 id="加载事件："><a href="#加载事件：" class="headerlink" title="加载事件："></a>加载事件：</h4><ol><li><p>onload：一张页面或一幅图被完成加载</p><ul><li>一般用于网页加载完毕再加载js代码</li></ul><pre><code>window.onload = function(){    js代码}</code></pre></li></ol><h4 id="鼠标事件："><a href="#鼠标事件：" class="headerlink" title="鼠标事件："></a>鼠标事件：</h4><ul><li>onmousedown：鼠标按钮被按下</li><li>onmouseup：鼠标按钮被松开</li><li>onmousemove：鼠标被移动</li><li>onmouseover：鼠标移到某元素之中</li><li>onmouseout：鼠标从某元素移开</li></ul><h4 id="键盘事件："><a href="#键盘事件：" class="headerlink" title="键盘事件："></a>键盘事件：</h4><ul><li>onkeydown：某个键盘按键被按下</li><li>onkeyup：某个键盘按键被松开</li><li>onkeypress：某个键盘按键被按下并松开</li></ul><h4 id="选择和改变"><a href="#选择和改变" class="headerlink" title="选择和改变"></a>选择和改变</h4><ul><li>onchange 域的内容被改变</li><li>onselect：文本被选中</li></ul><h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><ul><li><p>onsubmit：确认按钮被点击</p><ul><li><p>可以阻止表单提交，再from标签中调用onsubmit事件，方法返回false</p><pre><code>document.getElementById("form").onsubmit=function(){return false;}-------------document.getElementById("form").onsubmit = function () {                return checkUserName()&amp;&amp;checkPassword();            }</code></pre></li><li><p>如果是再from标签中调用onclick事件，应该是onclick=”return checkform( return false)”</p></li></ul></li><li><p>onreset：重置按钮被点击</p></li></ul><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><ul><li>直接在html标签上，指定事件的属性，属性值就是js代码 如：onclick=”fun()”;</li><li>通过js获取元素对象，指定事件属性，设置一个函数<ol><li>获取对象</li><li>绑定事件 对象.onclick=fun;</li></ol></li></ul><hr><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="概念：Browser-Object-Model-浏览器对象模型"><a href="#概念：Browser-Object-Model-浏览器对象模型" class="headerlink" title="概念：Browser Object Model 浏览器对象模型"></a>概念：Browser Object Model 浏览器对象模型</h3><ul><li>将浏览器的各个组成部分封装成对象</li></ul><h3 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h3><h4 id="Window：窗口对象"><a href="#Window：窗口对象" class="headerlink" title="Window：窗口对象"></a>Window：窗口对象</h4><ol><li>方法<ol><li>与弹出窗口有关的方法：<ol><li>alert()警告框，信息，确认</li><li>confirm()消息框，信息，确认，取消<ul><li>返回值：true、false</li></ul></li><li>prompt()输入框<ul><li>返回值：用户输入的值</li></ul></li></ol></li><li>与打开关闭有关的方法：<ol><li>open（）打开一个新窗口</li><li>close()关闭浏览器窗口，注意：关闭的是当前window</li></ol></li><li>与定时器有关的方式：<ol><li>setTimeout()一次性定时器<ul><li>参数：<ol><li>JS代码 注意：调用函数直接写名即可，不用加括号</li><li>毫秒值</li></ol></li><li>返回值：id</li></ul></li><li>clearTimeout()<ol><li>参数：定时器的id</li></ol></li><li>setInterval()重复定时器<ul><li>参数：<ol><li>JS代码 注意：调用函数直接写名即可，不用加括号</li><li>毫秒值</li></ol></li><li>返回值：id</li></ul></li><li>clearInterval()<ol><li>参数：定时器的id</li></ol></li></ol></li></ol></li><li>属性<ol><li>获取其他BOM对象<ol><li>history</li><li>location</li><li>Navigator</li><li>Screen</li></ol></li><li>获取DOM对象<ul><li>document</li></ul></li></ol></li><li>特点：<ol><li>window对象不需要创建，直接可以window.fun()，也可以省略直接fun（）；</li></ol></li></ol><h4 id="Navigator：浏览器对象（了解）"><a href="#Navigator：浏览器对象（了解）" class="headerlink" title="Navigator：浏览器对象（了解）"></a>Navigator：浏览器对象（了解）</h4><h4 id="Screen：显示器屏幕对象（了解）"><a href="#Screen：显示器屏幕对象（了解）" class="headerlink" title="Screen：显示器屏幕对象（了解）"></a>Screen：显示器屏幕对象（了解）</h4><h4 id="History：历史记录对象"><a href="#History：历史记录对象" class="headerlink" title="History：历史记录对象"></a>History：历史记录对象</h4><h4 id="Location：地址栏对象"><a href="#Location：地址栏对象" class="headerlink" title="Location：地址栏对象"></a>Location：地址栏对象</h4><ol><li><p>创建（获取）</p><ol><li>window.location</li><li>location</li></ol></li><li><p>方法</p><ol><li>reload()重新加载当前文档，刷新</li></ol></li><li><p>属性</p><ol><li>href 设置或返回完整的url</li></ol><pre><code>location.href="http://www.baidu.com"</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter过滤器、Listener监听器</title>
      <link href="/2020/07/19/qian-duan/filter-guo-lu-qi/"/>
      <url>/2020/07/19/qian-duan/filter-guo-lu-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul><li>生活中的过滤器：净水器,空气净化器，土匪</li><li>web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</li><li>过滤器的作用：<ul><li>一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤…</li></ul></li></ul><h3 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h3><ol><li><p>步骤：</p><ol><li>定义一个类，实现接口Filter</li><li>复写方法</li><li>配置拦截路径<ol><li>web.xml</li><li>==注解==</li></ol></li></ol></li><li><p>代码：</p><pre><code>@WebFilter("/*")//访问所有资源之前，都会执行该过滤器        public class FilterDemo1 implements Filter {            @Override            public void init(FilterConfig filterConfig) throws ServletException {            }                                @Override            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {                System.out.println("filterDemo1被执行了....");                //放行                filterChain.doFilter(servletRequest,servletResponse);            }                    @Override            public void destroy() {            }        }</code></pre></li></ol><h3 id="过滤器细节："><a href="#过滤器细节：" class="headerlink" title="过滤器细节："></a>过滤器细节：</h3><ol><li><p>web.xml配置</p><pre><code>        &lt;filter&gt;            &lt;filter-name&gt;demo1&lt;/filter-name&gt;            &lt;filter-class&gt;cn.itcast.web.filter.FilterDemo1&lt;/filter-class&gt;        &lt;/filter&gt;        &lt;filter-mapping&gt;            &lt;filter-name&gt;demo1&lt;/filter-name&gt;            &lt;!-- 拦截路径 --&gt;            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;        &lt;/filter-mapping&gt;</code></pre></li><li><p>过滤器执行流程</p><ol><li><p>执行过滤器</p></li><li><p>过滤器执行流程</p><ol><li>执行过滤器</li><li>执行放行的资源</li><li>回来执行过滤器放行代码下边的代码</li></ol></li><li><p>过滤器生命周期方法</p><ol><li><p>init:在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源</p></li><li><p>doFilter:每一次请求被拦截资源时，会执行。执行多次</p></li><li><p>destroy:在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源</p></li></ol></li></ol></li><li><p>过滤器配置详解</p><ul><li><p><strong>拦截路径配置：</strong></p><ol><li>具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行</li><li>拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行</li><li>后缀名拦截： *.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行</li><li>拦截所有资源：/*        访问所有资源时，过滤器都会被执行</li></ol></li><li><p><strong>拦截方式配置：资源被访问的方式</strong></p><ul><li><p>注解配置：</p><ul><li><p>设置dispatcherTypes属性</p><pre><code>              1. REQUEST：默认值。浏览器直接请求资源              2. FORWARD：转发访问资源              3. INCLUDE：包含访问资源              4. ERROR：错误跳转资源              5. ASYNC：异步访问资源</code></pre><ul><li>注意：设置多个值可以是数组dispatcherTypes={DispatcherType.REQUEST,……}</li></ul></li></ul></li><li><p>web.xml配置</p><ul><li>再mapping内设置<dispatcher></dispatcher>标签即可</li></ul></li></ul></li></ul></li><li><p>过滤器链(配置多个过滤器)</p><ul><li><p>执行顺序：如果有两个过滤器：过滤器1和过滤器2</p><pre><code>  1. 过滤器1  2. 过滤器2  3. 资源执行  4. 过滤器2  5. 过滤器1 </code></pre></li><li><p>过滤器先后顺序问题：</p><ol><li><p>注解配置：按照==类名==的字符串比较规则比较，值小的先执行</p><ul><li>如： AFilter 和 BFilter，AFilter就先执行了。</li></ul></li><li><p>web.xml配置： <filter-mapping>谁定义在上边，谁先执行（和filter标签无关）</filter-mapping></p></li></ol></li></ul></li></ol><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><h4 id="案例1：登录验证"><a href="#案例1：登录验证" class="headerlink" title="案例1：登录验证"></a>案例1：登录验证</h4><ul><li>需求：<ol><li>访问day17_case案例的资源。验证其是否登录</li><li>如果登录了，则直接放行。</li><li>如果没有登录，则跳转到登录页面，提示”您尚未登录，请先登录”。</li></ol></li></ul><h4 id="案例2：增强对象的功能："><a href="#案例2：增强对象的功能：" class="headerlink" title="案例2：增强对象的功能："></a>案例2：增强对象的功能：</h4><ul><li><p>设计模式：一些通用的解决固定问题的方式</p><ol><li><p>装饰模式</p></li><li><p>代理模式</p></li></ol><ul><li><p>概念：</p><ol><li>真实对象：被代理的对象（如：request）</li><li>代理对象：</li><li>代理模式：代理对象代理真实对象，达到增强真实对象功能的目的</li></ol><ul><li>实现方式：<ol><li>静态代理：有一个类文件描述代理模式    2. 动态代理：在内存中形成代理类<ul><li><strong>实现步骤：</strong><ol><li>代理对象和真实对象实现相同的接口</li><li>代理对象 = Proxy.newProxyInstance(真实对象.getClass().getClassLoader(),真实对象.getClass().getInterfaces(),new InvocationHandler{逻辑});</li><li>使用代理对象调用方法。method.invoke(代理/真实对象，args参数数组)</li><li>增强方法</li></ol><ul><li>增强方式：<ul><li>增强参数列表</li><li>增强返回值类型</li><li>增强方法体执行逻辑</li></ul></li></ul></li></ul></li></ol></li></ul><pre class=" language-java"><code class="language-java">Lenovo lenovo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lenovo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//参数说明：</span>        <span class="token comment" spellcheck="true">//1.真实目标对象类加载器，2.接口目标对象，3.逻辑方法</span>        SaleComputer proxy <span class="token operator">=</span> <span class="token punctuation">(</span>SaleComputer<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>lenovo<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                lenovo<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"sale"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//增强参数</span>                            <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            money <span class="token operator">=</span> money<span class="token operator">*</span><span class="token number">0.85</span><span class="token punctuation">;</span>                            Object o <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>lenovo<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//增强返回值</span>                            <span class="token keyword">return</span> o<span class="token operator">+</span><span class="token string">"_鼠标垫"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            Object o <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>lenovo<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//增强逻辑过程</span>                            <span class="token comment" spellcheck="true">//System.out.println("方法执行了");</span>                            <span class="token keyword">return</span> o<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sale <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sale<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><hr><h2 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h2><ul><li><p>概念：web的三大组件之一。</p><ul><li>事件监听机制<ul><li>事件    ：一件事情</li><li>事件源 ：事件发生的地方</li><li>监听器 ：一个对象</li><li>注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码</li></ul></li></ul></li><li><p>ServletContextListener:监听ServletContext对象的创建和销毁</p><ul><li>方法：<ul><li>void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法</li><li><h4 id="void-contextInitialized-ServletContextEvent-sce-：ServletContext对象创建后会调用该方法（一般用于加载全局配置文件）"><a href="#void-contextInitialized-ServletContextEvent-sce-：ServletContext对象创建后会调用该方法（一般用于加载全局配置文件）" class="headerlink" title="void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法（一般用于加载全局配置文件）"></a>void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法（一般用于加载全局配置文件）</h4></li></ul></li><li>创建监听器步骤：<ol><li>定义一个类，实现ServletContextListener接口</li><li>复写方法</li><li>配置</li><li>web.xml<listener>                      <listener-class>cn.itcast.web.listener.ContextLoaderListener</listener-class></listener>* 指定初始化参数<context-param></context-param></li><li>注解：<pre><code>            * @WebListener</code></pre></li></ol></li></ul><pre><code>加载全局配置文件:web.xml:    &lt;context-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;/WEB-INF/classes/applicationContext.xml&lt;/param-value&gt;    &lt;/context-param&gt;listener:  public void contextInitialized(ServletContextEvent servletContextEvent) {        //加载全局配置文件        //获取ServletContext对象        ServletContext servletContext = servletContextEvent.getServletContext();        //获取配置文件（web.xml）中的参数(字符串),传参是配置文件中的name        String contextConfigLocation = servletContext.getInitParameter("contextConfigLocation");        //获取文件真实（服务器）路径（字符串）        String realPath = servletContext.getRealPath(contextConfigLocation);        //加载进内存        try {            FileInputStream fis = new FileInputStream(realPath);</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript（ECMAScript）、正则表达式</title>
      <link href="/2020/07/18/qian-duan/javascript-ecmascript/"/>
      <url>/2020/07/18/qian-duan/javascript-ecmascript/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript（ECMAScript）"><a href="#JavaScript（ECMAScript）" class="headerlink" title="JavaScript（ECMAScript）"></a>JavaScript（ECMAScript）</h2><p>###概念：一门客户端脚本语言</p><ul><li>JavaScript=ECMAScript + JavaScript自己特有的东西（BOM+DOM）</li><li>运行在客户端浏览器中的，不需要编译，直接被浏览器解析执行</li></ul><p>###功能：</p><ul><li>可以增强用户和HTML页面的交互过程，控制html元素，让页面有一些动态效果</li></ul><h3 id="ECMAScript：客户端脚本语言的标准"><a href="#ECMAScript：客户端脚本语言的标准" class="headerlink" title="ECMAScript：客户端脚本语言的标准"></a>ECMAScript：客户端脚本语言的标准</h3><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><ol><li><p>与HTML结合方式</p><ol><li><p>内部</p><p><scrip t="">可定义在任意位置，定义的位置会影响执行的顺序</scrip></p></li><li><p>外部</p><p><scrip t="" src=""></scrip></p></li></ol></li><li><p>注释</p><ul><li>//</li><li>/*  */</li></ul></li><li><p>数据类型</p><ol><li>原始数据类型（基本数据类型）<ol><li>number：数字。 整数/小数/NaN(not a Number 一个不是数字的数字类型)<ul><li>0和NaN为false</li></ul></li><li>string：字符串<ul><li>空字符串为false</li></ul></li><li>boolean：布尔值</li><li>null：一个对象为空的占位符</li><li>undefined：未定义，如果一个变量没有被初始化，则默认赋值为undefined</li></ol></li><li>引用数据类型：对象</li></ol></li><li><p>变量</p><ol><li>Java是强类型语言，JavaScript是弱类型语言</li><li>语法：<ul><li>var 变量名=初始值;</li></ul></li><li>typeof(变量名) 返回变量的类型</li></ol></li><li><p>运算符</p><ol><li><p>一元运算符：只有一个运算数的运算符</p><p>++，–，+(正号)可以将其他值转换为number类型</p></li><li><p>算数运算符</p></li><li><p>赋值运算符</p><p>= += -=</p></li><li><p>比较运算符</p><p>===(全等于)先判断类型，如果类型不一样就直接返回false</p></li><li><p>逻辑运算符</p><p>&amp;&amp; &amp; | || ！</p></li><li><p>三元运算符</p><p>？ :</p><p>var a=3;</p><p>var b=4;</p><p>var c =a &gt; b ? 1: 0   (0)</p></li></ol></li><li><p>流程控制语句</p><ol><li>if…else</li><li>switch:<ul><li>switch(可以任何类型){case xx: xxx break}</li></ul></li><li>while</li><li>do…while </li><li>for</li></ol></li></ol><h4 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h4><h5 id="Function对象"><a href="#Function对象" class="headerlink" title="Function对象"></a>Function对象</h5><ol><li><p>创建方式</p><ol><li>创建方式1：function fun(a,b){    }</li><li>创建方式2：var fun = function(a,b){ }<ul><li>形参类型不用写，返回值类型也不用写</li><li>方法是一个对象，如果定义相同名字会被覆盖</li><li>方法调用只看名称，不看参数个数</li></ul></li></ol></li><li><p>属性：</p><p>length：代表形参的个数</p></li></ol><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><ol><li><p>创建方式：</p><ol><li>var arr = new Array(元素列表)可空</li><li>var arr = new Array(默认长度)</li><li>var arr = [元素列表]<ul><li>元素类型是可变的，可存不同类型的元素</li><li>长度可变</li></ul></li></ol></li><li><p>方法：</p><p>join(“X”)两元素之间的逗号改变成想要的样子</p><p>push(元素)向数组的末尾添加一个或更多元素，并返回新的长度</p></li><li><p>属性：</p><p>length：代表数组长度</p></li></ol><h5 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h5><h5 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h5><ol><li><p>创建方式：</p><ol><li>var date = new Date();</li></ol></li><li><p>方法：</p><p>toLocaleString()：返回当前date对象对应的时间本地字符串格式</p><p>getTime()：获取毫秒值，返回当前时间与1970.1.1 0点的毫秒之差</p></li></ol><h5 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h5><ol><li><p>创建方式：</p><p>不用创建，内置对象</p></li><li><p>方法：</p><ol><li>random() [0,1)的随机数</li><li>ceil（x）向上取整 2.2—&gt;3</li><li>floor(x) 向下取整  2.2—&gt;2</li><li>round(x) 四舍五入</li></ol><pre><code>取1-100的随机整数Math.floor((Math.random()*100))+1</code></pre></li><li><p>属性：</p><p>PI</p></li></ol><h5 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h5><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><h6 id="RegExp：正则表达式对象"><a href="#RegExp：正则表达式对象" class="headerlink" title="RegExp：正则表达式对象"></a>RegExp：正则表达式对象</h6><ol><li><p>正则表达式：定义字符串的组成规则</p><ol><li><p>单个字符：[    ]</p><ol><li>\d：单个数字字符</li><li>\w：单个单词字符</li></ol></li><li><p>量词符号：</p><p>？：表示出现0次或1次</p><p>*：表示出现0次或多次</p><p>+：表示出现1次或多次</p><p>{m,n}表示 数量在[m，n]之间</p><ul><li> m如果缺省，{,n}最多n次</li><li>n如果缺省，{m,}最少m次</li></ul></li><li><p>开始结束符号：</p><p>^:开始</p><p>$:结束</p></li></ol><pre><code>\w{6,12}</code></pre></li><li><p>正则对象：</p><ol><li>创建<ol><li>var reg = new RegExp(“正则表达式”) <ul><li>注意：这里定义\w的反斜线需要转义字符来写，\ \w</li></ul></li><li>var reg = /正则表达式/</li></ol></li><li>方法：<ol><li>test(参数)：验证指定的字符串是否符合正则定义的规范</li></ol></li></ol></li></ol><pre class=" language-javascript"><code class="language-javascript">             <span class="token keyword">function</span> <span class="token function">checkUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//检查用户名是否有误</span>                 <span class="token comment" spellcheck="true">//获取用户名</span>                 <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"input_username"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//写正则表达式</span>                 <span class="token keyword">var</span> reg_username<span class="token operator">=</span><span class="token regex">/^\w{6,12}$/</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//判断用户名与正则表达式的关系</span>                 <span class="token keyword">var</span> flag <span class="token operator">=</span> reg_username<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//提示信息</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                     document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"s_username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"用户名正确！"</span>                 <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                     document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"s_username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"用户名错误！"</span>                 <span class="token punctuation">}</span>                 <span class="token keyword">return</span> flag<span class="token punctuation">;</span>             <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议：响应消息、Response对象、ServletContext对象</title>
      <link href="/2020/07/17/qian-duan/response/"/>
      <url>/2020/07/17/qian-duan/response/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议：响应消息"><a href="#HTTP协议：响应消息" class="headerlink" title="HTTP协议：响应消息"></a>HTTP协议：响应消息</h2><h3 id="请求消息：客户端发送给服务器端的数据"><a href="#请求消息：客户端发送给服务器端的数据" class="headerlink" title="请求消息：客户端发送给服务器端的数据"></a>请求消息：客户端发送给服务器端的数据</h3><ul><li>数据格式：<ol><li>请求行</li><li>请求头</li><li>请求空行</li><li>请求体</li></ol></li></ul><h3 id="响应消息：服务器端发送给客户端的数据"><a href="#响应消息：服务器端发送给客户端的数据" class="headerlink" title="响应消息：服务器端发送给客户端的数据"></a>响应消息：服务器端发送给客户端的数据</h3><ul><li><p>数据格式：</p><ol><li><p><strong>响应行</strong></p><ol><li>组成：协议/版本 响应状态码 状态码描述</li><li>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。<ol><li>状态码都是3位数字 </li><li>分类：<ol><li>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码</li><li>2xx：成功。代表：200</li><li>3xx：重定向。代表：302(重定向)，304(访问缓存)</li><li>4xx：客户端错误。<ul><li>代表：<ul><li>404（请求路径没有对应的资源） </li><li>405：请求方式没有对应的doXxx方法</li></ul></li></ul></li><li>5xx：服务器端错误。代表：500(服务器内部出现异常)</li></ol></li></ol></li></ol></li><li><p><strong>响应头</strong></p></li><li><p>格式：头名称： 值</p><pre><code>            2. 常见的响应头：       1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式           2. Content-disposition：（打开方式）服务器告诉客户端以什么格式打开响应体数据                       * 值：                           * in-line:默认值,在当前页面内打开                   * attachment;filename=xxx（提示框的名字）：以附件形式打开响应体。文件下载</code></pre></li><li><p><strong>响应空行</strong></p></li><li><p><strong>响应体:传输的数据</strong></p></li></ol><pre><code></code></pre></li><li><p>响应字符串格式</p><pre><code>    //响应行：协议/版本 响应状态码 状态码描述      HTTP/1.1 200 OK      //响应头      Content-Type: text/html;charset=UTF-8      Content-Length: 101      Date: Wed, 06 Jun 2018 07:08:42 GMT      //响应体      &lt;html&gt;        &lt;head&gt;          &lt;title&gt;$Title$&lt;/title&gt;        &lt;/head&gt;        &lt;body&gt;        hello , response        &lt;/body&gt;      &lt;/html&gt;</code></pre><pre><code></code></pre></li></ul><hr><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><ul><li><p>功能：设置响应消息</p><ol><li><p>设置响应行</p><ol><li>格式：HTTP/1.1 200 ok</li><li>设置状态码：setStatus(int sc) </li></ol></li><li><p>设置响应头：setHeader(String name, String value) </p></li><li><p>设置响应体(在浏览器上展示数据)：</p><ul><li><p>使用步骤：</p><ol><li><p>获取输出流</p><ul><li><p>字符输出流：PrintWriter getWriter()</p></li><li><p>字节输出流：ServletOutputStream getOutputStream()</p></li></ul></li><li><p>使用输出流，将数据输出到客户端浏览器</p></li></ol></li></ul></li></ol></li></ul><h3 id="1-重定向："><a href="#1-重定向：" class="headerlink" title="1. 重定向："></a>1. 重定向：</h3><pre><code>复杂方式：//1. 设置状态码为302response.setStatus(302);//2.设置响应头locationresponse.setHeader("location","/day15/responseDemo2");简单方式：sendRedirect("虚拟路径+资源名称")response.sendRedirect("/day15/responseDemo2");</code></pre><h4 id="重定向的特点-redirect"><a href="#重定向的特点-redirect" class="headerlink" title="重定向的特点:redirect"></a>重定向的特点:redirect</h4><ol><li>地址栏发生变化</li><li>重定向可以访问其他站点(服务器)的资源</li><li>重定向是两次请求。不能使用request对象来共享数据</li></ol><h4 id="转发的特点：forward"><a href="#转发的特点：forward" class="headerlink" title="转发的特点：forward"></a>转发的特点：forward</h4><ol><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求，可以使用request对象来共享数据</li></ol><h3 id="2-服务器输出字符-字节数据到浏览器（设置响应体）"><a href="#2-服务器输出字符-字节数据到浏览器（设置响应体）" class="headerlink" title="2.服务器输出字符/字节数据到浏览器（设置响应体）"></a>2.服务器输出字符/字节数据到浏览器（设置响应体）</h3><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li>获取字符输出流：PrintWriter pw = response.getWriter();</li><li>输出数据：：pw.write(“ “);</li></ol><h4 id="乱码问题："><a href="#乱码问题：" class="headerlink" title="乱码问题："></a>乱码问题：</h4><ol><li>PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-8859-1</li><li>设置该流的默认编码</li><li>告诉浏览器响应体使用的编码</li></ol><p>//简单的形式实现2、3步骤，设置编码，是在==获取流之前设置==</p><p>response.setContentType(“text/html;charset=utf-8”);<br>//底层的含义也就是设置了响应头ContentType：text/html;charset=utf-8</p><hr><h2 id="路径写法："><a href="#路径写法：" class="headerlink" title="路径写法："></a>路径写法：</h2><p>路径分类</p><h3 id="相对路径：通过相对路径不可以确定唯一资源"><a href="#相对路径：通过相对路径不可以确定唯一资源" class="headerlink" title="相对路径：通过相对路径不可以确定唯一资源"></a>相对路径：通过相对路径不可以确定唯一资源</h3><ul><li>如：./index.html</li><li>不以/开头，以.开头路径</li><li><strong>规则：找到当前资源和目标资源之间的相对位置关系</strong></li><li>./：当前目录</li><li>../:后退一级目录</li></ul><h3 id="绝对路径：通过绝对路径可以确定唯一资源"><a href="#绝对路径：通过绝对路径可以确定唯一资源" class="headerlink" title="绝对路径：通过绝对路径可以确定唯一资源"></a>绝对路径：通过绝对路径可以确定唯一资源</h3><ul><li>以http开头的路径</li><li><strong>规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出</strong></li><li><strong>客户端浏览器发出的请求：需要加虚拟目录(项目的访问路径)</strong><ul><li>建议虚拟目录动态获取：request.getContextPath()</li><li><a> , <form> 重定向…</form></a></li><li><strong>服务器内部发生的请求：不需要加虚拟目录</strong></li></ul></li><li>转发路径、ServletContext获取真实路径</li></ul><h3 id="根路径：转发和重定向使用"><a href="#根路径：转发和重定向使用" class="headerlink" title="根路径：转发和重定向使用"></a>根路径：转发和重定向使用</h3><ul><li>以/开头</li><li>一般情况：代表当前服务器，/day15/responseDemo2.jsp</li><li>转发：代表当前项目  如：/responseDemo2.jsp</li><li>重定向：代表当前服务器  如：/day15/responseDemo2.jsp</li></ul><hr><h2 id="ServletContext对象："><a href="#ServletContext对象：" class="headerlink" title="ServletContext对象："></a>ServletContext对象：</h2><ol><li><p>概念：代表整个web应用，可以和程序的容器(服务器)来通信</p></li><li><p>获取：</p><ol><li>通过request对象获取<br> request.getServletContext();</li><li><strong>通过HttpServlet获取</strong> this.getServletContext();</li></ol></li><li><p>功能：</p><ol><li><strong>获取MIME类型：</strong><ul><li>MIME类型:在互联网通信过程中定义的一种文件数据类型</li><li>格式： 大类型/小类型   text/html        image/jpeg</li><li><h4 id="获取：String-getMimeType-String-file"><a href="#获取：String-getMimeType-String-file" class="headerlink" title="获取：String getMimeType(String file)"></a>获取：String getMimeType(String file)</h4></li></ul></li><li><strong>域对象：共享数据</strong><ol><li>setAttribute(String name,Object value)</li><li>getAttribute(String name)</li><li>removeAttribute(String name)</li></ol><ul><li><strong>ServletContext对象范围：所有用户所有请求的数据</strong></li></ul></li><li><strong>获取文件的真实(服务器)路径</strong></li></ol><p>  <strong>方法：String getRealPath(String path)</strong></p><pre><code>   String b = context.getRealPath("/b.txt");//web目录下资源访问   System.out.println(b);   String c = context.getRealPath("/WEB-INF/c.txt");//WEB-INF目录下的资源访问   System.out.println(c);   String a = context.getRealPath("/WEB-INF/classes/a.txt");//src目录下的资源访问   System.out.println(a);</code></pre></li></ol><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><pre><code>* 文件下载需求：    1. 页面显示超链接    2. 点击超链接后弹出下载提示框    3. 完成图片文件下载</code></pre><pre><code>* 分析：    1. 任何资源都必须弹出下载提示框    2. 使用响应头设置资源的打开方式：        * content-disposition:attachment;filename=xxx</code></pre><pre><code>* 步骤：    1. 定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename    2. 定义Servlet        1. 获取文件名称        2.0 获取ServletContext对象，获取文件的真实路径        2. 使用字节输入流加载文件进内存        3. 指定response的响应头： content-disposition:attachment;filename=xxx打开方式                            和Content-type mimeType传输类型        4. 将数据写出到response输出流(输入流和输出流的对写)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsp </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP详解</title>
      <link href="/2020/07/17/qian-duan/jsp/"/>
      <url>/2020/07/17/qian-duan/jsp/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP:"></a>JSP:</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li>作用：用于配置JSP页面，导入资源文件</li><li>格式：<br>  &lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 … %&gt;</li><li>分类：<ol><li><strong>page        ： 配置JSP页面的</strong><ul><li>contentType：等同于response.setContentType()<ol><li>设置响应体的mime类型以及字符集</li><li>设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）</li></ol></li><li>language：java </li><li>import：导包</li><li>errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</li><li>isErrorPage：标识当前也是是否是错误页面。<ul><li>true：是，可以使用内置对象exception</li><li>false：否。默认值。不可以使用内置对象exception</li></ul></li></ul></li><li>** include    ： 页面包含的。导入页面的资源文件**<ul><li>&lt;%@include file=”top.jsp”%&gt;</li></ul></li><li><strong>taglib    ： 导入资源（标签库）</strong><ul><li>&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core"</a> %&gt;<ul><li>prefix：前缀，自定义的</li></ul></li></ul></li><li><strong>注释:</strong><ol><li>html注释：（不建议使用，在响应体里还会被显示） <!-- -->:只能注释html代码片段</li><li><strong>jsp注释：推荐使用</strong> &lt;%– –%&gt;：可以注释所有</li></ol></li></ol></li></ul><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><ul><li>在jsp页面中不需要创建，直接使用的对象</li><li>一共有9个：</li></ul><pre><code>变量名                    真实类型                        作用- pageContext        PageContext                     当前页面共享数据，还可获取其他八个内置对象- request            HttpServletRequest             一次请求访问的多个资源(转发)- session            HttpSession                    一次会话的多个请求间- application        ServletContext                 所有用户间共享数据- response            HttpServletResponse             响应对象- page                Object                        当前页面(Servlet)的对象  this- out                JspWriter                    输出对象，数据输出到页面上- config            ServletConfig                Servlet的配置对象- exception            Throwable                    异常对象</code></pre><hr><h2 id="MVC：开发模式"><a href="#MVC：开发模式" class="headerlink" title="MVC：开发模式"></a>MVC：开发模式</h2><ol><li><p>jsp演变历史</p><ol><li>早期只有servlet，只能使用response输出标签数据，非常麻烦</li><li>后来又jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中即写大量的java代码，有写html表，造成难于维护，难于分工协作</li><li>再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性</li></ol></li><li><p>MVC：</p></li><li><p>M：Model，模型。JavaBean</p><ul><li>完成具体的业务操作，如：查询数据库，封装对象</li></ul></li><li><p>V：View，视图。JSP</p><ul><li>展示数据</li></ul></li><li><p>C：Controller，控制器。Servlet</p><ul><li>获取用户的输入</li><li>调用模型</li><li>将数据交给视图进行展示</li></ul></li><li><p>优缺点：</p><ol><li>优点：<ol><li>耦合性低，方便维护，可以利于分工协作</li><li>重用性高</li></ol></li><li>缺点：<ol><li>使得项目架构变得复杂，对开发人员要求高</li></ol></li></ol></li></ol><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/jsp1.png" alt="image-20200504140128503" style="zoom: 67%;"><hr><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ol><li><p>概念：Expression Language ==表达式==语言</p></li><li><p><strong>作用：替换和简化jsp页面中java代码的编写</strong></p></li><li><p><strong>语法：${表达式}</strong></p></li><li><p>注意：</p><ul><li>jsp默认支持el表达式的。如果要忽略el表达式<ol><li>设置jsp中page指令中：isELIgnored=”true” 忽略当前jsp页面中所有的el表达式</li><li>${表达式} ：忽略当前这个el表达式</li></ol></li></ul></li><li><p>使用：</p><ol><li><p>运算：</p><ul><li>运算符：<ol><li>算数运算符： + - * /(div) %(mod)</li><li>比较运算符： &gt; &lt; &gt;= &lt;= == !=</li><li>逻辑运算符： &amp;&amp;(and) ||(or) !(not)</li><li>空运算符： empty<ul><li>功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0</li><li>${empty list}:判断字符串、集合、数组对象是否为null或者长度为0</li><li>${not empty str}:表示判断字符串、集合、数组对象是否不为null 并且 长度&gt;0</li></ul></li></ol></li></ul></li><li><p><strong>获取值</strong></p><ol><li>el表达式只能从域对象中获取值<ol start="2"><li>语法：<ol><li><strong>${域名称.键名}：从指定域中获取指定键的值</strong><ul><li>域名称：<ol><li>pageScope        –&gt; pageContext</li><li>requestScope     –&gt; request</li><li>sessionScope     –&gt; session</li><li>applicationScope –&gt; application（ServletContext）</li></ol></li><li>举例：在request域中存储了name=张三</li><li>获取：${requestScope.name}</li></ul></li></ol></li></ol></li><li><strong>${键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</strong></li></ol></li></ol></li><li><p><strong>获取对象、List集合、Map集合的值</strong></p><ol><li>对象：${域名称.键名.属性名}<ul><li>本质上会去调用对象的getter方法</li><li>属性名：get和set方法去掉get/set，剩余字符串首字母去掉大写，就是属性<pre><code>  * 如：getName --&gt; Name --&gt; name</code></pre></li></ul></li><li>List集合：${域名称.键名[索引]}</li><li>Map集合：<ul><li>${域名称.键名.key名称}<pre><code>* ${域名称.键名["key名称"]}</code></pre></li></ul></li></ol></li><li><p>隐式对象：</p><ul><li><p>el表达式中有11个隐式对象</p></li><li><p><strong>pageContext：</strong></p></li><li><p>获取jsp其他八个内置对象</p><ul><li>${pageContext.request.contextPath}：动态获取虚拟目录</li></ul></li></ul></li></ol><hr><h2 id="JSTL：标签库"><a href="#JSTL：标签库" class="headerlink" title="JSTL：标签库"></a>JSTL：标签库</h2><ol><li>概念：JavaServer Pages Tag Library  JSP标准==标签库==</li></ol><ul><li>是由Apache组织提供的开源的免费的jsp标签        &lt;标签&gt;</li></ul><ol start="2"><li><p>作用：用于简化和替换jsp页面上的java代码        </p></li><li><p><strong>使用步骤：</strong></p><ol><li>导入jstl相关jar包</li><li>引入标签库：taglib指令：  &lt;%@ taglib %&gt;</li></ol></li><li><p>使用标签</p></li><li><p><strong>常用的JSTL标签</strong></p></li><li><p>if:相当于java代码的if语句    1. 属性：</p><pre><code>   *  test 必须属性，接受boolean表达式       * 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容       * 一般情况下，test属性值会结合el表达式一起使用</code></pre><p>  注意：</p><ul><li>c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签</li></ul></li></ol><pre><code>``` &lt;c:if test="${number%2 != 0 }"&gt; //逻辑&lt;/c:if&gt;```</code></pre><ol start="2"><li>choose:相当于java代码的switch语句    1. 使用choose标签声明                     相当于switch声明    2. 使用when标签做判断                     相当于case<ul><li>属性：test    3. 使用otherwise标签做其他情况的声明        相当于default</li></ul></li></ol><pre><code>``` &lt;c:choose&gt;&lt;c:when test="${number == 1}"&gt; 星期一 &lt;/c:when&gt;&lt;c:when test="${number == 2}"&gt; 星期二 &lt;/c:when&gt;&lt;c:otherwise&gt; 输入有误 &lt;/c:otherwise&gt;&lt;/c:choose&gt;```</code></pre><ol start="3"><li><p><strong>foreach:相当于java代码的for语句</strong></p><ol><li><p><strong>完成重复操作</strong></p><ul><li><p>属性：</p><p>begin：开始值</p><p>end：结束值</p><p>var：临时变量</p><p>step：步长</p><p>varStatus：循环状态对象</p><ul><li><p>index：容器中元素的索引，从0开始</p></li><li><p>count：循环次数，从1开始</p></li></ul></li></ul><pre><code>&lt;c:forEach begin="1" end="10" var="i" step="2" varStatus="s"(这个不常用)&gt;${s.index} ${s.count}&lt;/c:forEach&gt;</code></pre></li><li><p><strong>遍历容器</strong></p><ul><li><p>属性：</p><p>items：容器对象</p><p>var：容器中元素的临时变量，相当于for each中的元素名称</p><p>varStatus：循环状态对象</p><ul><li><p>index：容器中元素的索引，从0开始</p></li><li><p>count：循环次数，从1开始</p></li></ul></li></ul><pre><code>&lt;%List list = new ArrayList();list.add("aaa");request.setAttribbute("list",list);%&gt;&lt;c:forEach items="${list}" var="str" varStatus="s"&gt;//索引 循环次数 遍历的元素${s.index} ${s.count} ${str}&lt;/c:forEach&gt;</code></pre></li></ol></li></ol><hr><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/jsp3.png" alt="image-20200504175818407"></p><ol><li>界面层(表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互</li><li>业务逻辑层：处理业务逻辑的。</li><li>数据访问层：操作数据存储文件。</li></ol><hr><h2 id="案例1：用户信息列表展示"><a href="#案例1：用户信息列表展示" class="headerlink" title="案例1：用户信息列表展示"></a>案例1：用户信息列表展示</h2><pre><code>bug1:路径错误404    使用跳转时：不加虚拟路径，并且注意资源名称的大小写    使用超链接，按钮时：加虚拟路径，注意大小写</code></pre><pre><code>bug2:添加用户功能，不知道怎么在操作数据库类中获取表单数据    将添加用户方法设置有参，传入一个servlet获取表单数据后并封装好的对象即可</code></pre><pre><code>bug3.1:修改用户信息功能，性别获取不到值    性别的name值是sex，而数据库的是gender,修改相同即可bug3.2:修改用户信息，获取值成功，但无法修改数据库值    sql语句书写错误，虽然没有报错，但是应修改：当需要更改多个值时 应该用","连接，而不是"and"    如： 正确:update user set gender=?,age=? where name=?;        错误：update user set gender=? and age=? where name=?;        bug3.3:登录用户信息，获取值成功，但显示账号密码错误    sql语句书写错误,看看where 后的参数名是否出错    如：错：select * from user where name=?        实际上是username=？</code></pre><ol><li><p>需求：用户信息的增删改查操作</p></li><li><p>设计：</p><ol><li>技术选型：Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat</li><li>数据库设计：<br> create database day17; – 创建数据库<br> use day17;                – 使用数据库<br> create table user(   – 创建表<pre><code> id int primary key auto_increment, name varchar(20) not null, gender varchar(5), age int, address varchar(32), qq    varchar(20), email varchar(50)</code></pre> );</li></ol></li><li><p>开发：（程序员主负责第二步）</p><ol><li><p>环境搭建</p><ol><li>创建数据库环境</li><li>创建项目，导入需要的jar包</li></ol></li><li><p>编码</p></li></ol></li><li><p>测试</p></li><li><p>部署运维</p></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/jsp2.png" alt="image-20200504203115861"></p><pre><code>查询功能分析：1.创建数据库，环境搭建(导入jar包，导入静态网页)2.创建web.servlet、service、dao包3.点击index.jsp进入UserListSerlet4.UserListSerlet：调用service层中的findAll（）方法,将返回值user对象存储进request域中，并转发到list.jsp页面5.service层：需要用接口实现多态，实现类调用Dao层中的findAll（）方法6.0 创建domain包，创建user的javaBean类6.dao层：需要用接口实现多态，实现类实现JDBC操作数据库功能实现查询，返回user对象（使用数据库连接池、JdbcTemplate技术）7.list.jsp：将静态数据删掉，获取request域中的数据展示在页面上</code></pre><h2 id="案例2：综合案例分析"><a href="#案例2：综合案例分析" class="headerlink" title="案例2：综合案例分析"></a>案例2：综合案例分析</h2><pre><code>登录：1.调整页面布局2.将登录界面设置成jsp，并且展示验证码3.0将数据库增加username,password，并且javaBean中也增加相应的成员变量和getset方法3.登录跳转到loginServlet，获取数据，审核验证码，审核账号密码，储存信息，重定向到index.jsp，并显示名字，欢迎你4.验证码或账号密码失败，都转发回login.jsp添加功能：注意：add()需要添加参数add.jsp：提交到UserAddServletUserAddSerclet:设置编码格式，获取值，调用service层中的add()，转发到list.jsp页面UserService接口：public void add(User newUser);UserServiceImpl：public void add(User newUser){ dao.add(User newUser)}UserDao接口：public void add(User newUser);UserDaoImpl：public void add(User newUser){ jdbc操作数据库}update user set gender=? and qq=? where name=?修改：1.list.jsp点击修改跳转到findUserServlet2.fidUserServlet中获取id信息，调用findUser方法查询用户信息，存储到request中，跳转到update.jsp3.update.jsp获取信息，回写信息（加上隐藏域id，用于通过id来修改对应的数据）4.提交跳转到updateServlet，获取表单信息，调用数据库方法进行修改数据5.uodateServlet跳转到list.jsp删除选中：    要求：    1.复选框全选、全不选    2.点击删除选中会提交对应id值    3.删除选中加个判断，确定是否要删除    4.不选时点删除选中时，不报空指针异常，先判断复选框的状态再进行删除操作1.用javascript，获取总复选框id，设置单击事件，事件中获取其他复选框的name，遍历将其checked状态与总复选框相同2.1将复选框设置value值，表格外嵌套表单，删除选中按钮设置单击事件，让其拥有提交表单功能2.2提交到delSelectServlet，获取所有id值（数组），调用service中方法转入数组，跳转到listServlet2.3service中遍历数组，分别调用del方法，传入id3.用javascript，confirm（）实现4.前端：用javascript，获取所有复选框的name，遍历将其checked状态是否为checked，有一个就将flag变为true进行删除操作  后端：2.3遍历数组前，判断数组是否不为空或长度大于0</code></pre><p>分页查询：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/jsp4.png" alt="image-20200506133933677"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/jsp5.png" alt="image-20200506134007778"></p><pre><code>bug1:实现当前页面被激活状态，按键消失检查代码：&lt;c:if test="${pb.currentPage == i}"&gt; &lt;li class="active"&gt;    注意：不是${pb.currentPage}==${i}||${pb.currentPage}==i重启服务器</code></pre><pre><code>bug2:实现下一页禁用状态，按钮分离检查代码：不要多复制代码</code></pre><pre><code>bug3:NumberFormatException: null获取的数据为空if(currentPage==null||"".equals(currentPage)){            currentPage="1";}if(rows==null||"".equals(rows)){            rows="5";}</code></pre><pre><code>分页查询分析：    要求：    1.点击页数提交当前页码，查询的条数    2.实现分页查询5条数据    3.获取总记录数，总页码，当前页码，每页的数据    4.修改动态总记录数、总页码    5.实现上下页功能    6.实现当前页面为激活状态（前后端都要设置）    7.实现当前页面为1或最后一页，上下一页功能被禁用（前后端都要设置）1.点击页码，跳转到FindUserByPageServlet，并传参currentPage当前页面和rows每页显示条数2.0 创建PageBean类，参数:总记录数、总页码、当前页码、查询条数、每页数据2.FindUserByPageServlet：获取参数currentPage、rows，调用Service中的findUserByPage(传入参数)，返回一个PageBean集合，将PageBean存入request中，转发到list.jsp进行展示，将list.jsp:表格遍历items:${pb.list}3.Service中findUserByPage方法实现：    创建PageBean对象，    将当前页码、查询条数保存进对象中，    调用dao中的findTotalCount()获取总记录数并保存进对象中，    计算总页码：总记录数/查询条数，向上取整,保存进对象    计算开始查询的页数：(当前页数-1)*查询条数    调用dao中的findByPage（传入开始查询的页数、查询条数）方法获取每页数据，保存进对象    返回对象3.1dao中findTotalCount()、findByPage（）方法实现4.${pb.totalCount} ${pb.totalPage}5.上一页：currentPage=${pb.currentPage-1}&amp;rows=5下一页：currentPage=${pb.currentPage+1}&amp;rows=5其他页数在遍历中改&lt;c:forEach begin="1" end="${pb.totalPage}" var="i"&gt;6.前端：&lt;c:if test="${pb.currentPage == i}"&gt; &lt;li class="active"&gt;   后端：if(currentPage&lt;=0){            currentPage=1;        }7.&lt;c:if test="${pb.currentPage == 1}"&gt; &lt;li class="disabled"&gt;</code></pre><p>复杂条件查询：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/jsp6.png" alt="image-20200506181255362"></p><pre><code>bug0:getParameterMap获取不到值1.form表单没有action2.input表单没有name或name写错</code></pre><pre><code>bug1:拼接字符串将currentPage和row也拼了进去在遍历key的时候，加个if判断将两个跳过if("currentPage".equals(key)||"rows".equals(key)){                continue;}</code></pre><pre><code>bug2:拼接字符串需要注意的细节：1.使用StringBuilder2.拼接时要加空格 不然会拼接在一起，不符合sql语法3.？代表的值用 集合params.toArray()来写：template.queryForObject(sql,Integer.class,params.toArray());</code></pre><pre><code>bug3:获得参数都正确，拼接字符串也正确，查的值不对没有添加%，如：select * from user where 1 = 1 and name like %李%所有在获取值时应该加上%params.add("%"+value+"%");</code></pre><pre><code>复杂条件查询分析：    要求：    1.输入值 模糊查询出记录数，页数    2.按照分页查询出对应的数据    3.查询之后信息回写    4.点击其他页信息传参    分析：1.点击查询，提交表单，跳转到FindUserByPageServlet2.FindUserByPageServlet：获取到表单的map集合，调用Service中的findUserByPage（传入map集合）3.Service中findUserByPage方法实现：调用dao中的findTotalCount(传入map集合)4.dao中findTotalCount()方法实现，    Map.keySet获取键集合，再用遍历键集合获取value，    判断value是否有值，如果有值证明用户输入了值，    拼接字符串 select * from user where 1 = 1 ,sb.append(" and "+key+" like "?) ,获取值 params    template.queryForObject(sql,Integer.class,params.toArray())5.Service中findUserByPage方法实现：调用dao中的findByPage(传入map集合)6.dao中的findByPage()方法实现，    与4相同，额外值params中加上参数startPage、rows    注意：加参数应该将 params的泛型改成Object，因为类型可以不同7.信息回写：    将condition获取到后，可以存入request中    将表单的value值改为动态获取${condition.email[0]}    注意：存的condition是map集合，获取的时候应该加下标[0]8.点击其他页信息传参:将分页导航的链接都加上动态参数：    &amp;name=${condition.name[0]}&amp;address=${condition.address[0]}……</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsp </tag>
            
            <tag> el、jstl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>request详解、BeanUtils工具类</title>
      <link href="/2020/07/16/qian-duan/request/"/>
      <url>/2020/07/16/qian-duan/request/</url>
      
        <content type="html"><![CDATA[<h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><ol><li><p>request对象和response对象的原理</p><ol><li>request和response对象是由服务器创建的。我们来使用它们</li><li>request对象是来获取请求消息，response对象是来设置响应消息</li></ol></li><li><p>request对象继承体系结构：<br>ServletRequest        –    接口</p><p>​    |    继承</p><p>HttpServletRequest    – 接口</p><pre><code>|    实现</code></pre><p>org.apache.catalina.connector.RequestFacade 类(tomcat)</p></li></ol><h3 id="request功能："><a href="#request功能：" class="headerlink" title="request功能："></a>request功能：</h3><h4 id="获取请求消息数据"><a href="#获取请求消息数据" class="headerlink" title="获取请求消息数据"></a>获取请求消息数据</h4><ol><li><p><strong>获取请求行数据</strong></p><ul><li><p>GET /day14/demo1?name=zhangsan HTTP/1.1</p></li><li><p>方法：</p><ol><li><p>获取请求方式 ：GET</p><ul><li>String getMethod()  </li></ul></li><li><p><strong>(*)获取虚拟目录：/day14</strong></p><ul><li>String getContextPath()</li></ul></li><li><p>获取Servlet路径: /demo1</p><ul><li>String getServletPath()</li></ul></li><li><p>获取get方式请求参数：name=zhangsan</p></li></ol><ul><li>String getQueryString()</li></ul><ol start="5"><li><strong>(*)获取请求URI：/day14/demo1</strong><ul><li>String getRequestURI():        /day14/demo1</li></ul></li></ol><ul><li><p>StringBuffer getRequestURL()  :<a href="http://localhost/day14/demo1">http://localhost/day14/demo1</a></p></li><li><p>URL:统一资源定位符 ： <a href="http://localhost/day14/demo1">http://localhost/day14/demo1</a>    中华人民共和国</p></li><li><p>URI：统一资源标识符 : /day14/demo1                    共和国</p></li></ul><ol start="6"><li>获取协议及版本：HTTP/1.1</li></ol><ul><li>String getProtocol()</li></ul><ol start="7"><li><p>获取客户机的IP地址：</p><ul><li>String getRemoteAddr()</li></ul></li></ol></li></ul></li><li><p><strong>获取请求头数据</strong></p><ul><li><p>方法：</p><ul><li><p><strong>(*)String getHeader(String name):通过请求头的名称获取请求头的值</strong></p><ul><li>获取虚拟路径getHeader(referer)进行防盗链</li></ul><pre><code>if(referer!=null){    if(referer.contains("/day14")){        //播放电影    }erlse{        //盗链    }}</code></pre><ul><li>获取浏览器版本getHeader(user-agent)进行逻辑</li></ul><pre><code>if(agent.contains("Chrome")){    //谷歌}else if(agent.contains("Firefox"){    //火狐}</code></pre></li><li><p>Enumeration<string> getHeaderNames():获取所有的请求头名称</string></p></li></ul></li></ul></li><li><p><strong>获取请求体数据:</strong></p><ul><li>请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数<ul><li>步骤：<ol><li>获取流对象<ul><li> BufferedReader getReader()：获取字符输入流，只能操作字符数</li><li> ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据</li></ul></li><li>再从流对象中拿数据</li></ol></li></ul></li></ul></li></ol><p>​      </p><h3 id="其他功能："><a href="#其他功能：" class="headerlink" title="其他功能："></a>其他功能：</h3><ol><li><p><strong>获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数</strong></p></li><li><p><strong>String getParameter(String name)</strong>:根据参数名称获取参数值    username=zs&amp;password=123</p></li><li><p>String[] getParameterValues(String name):根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game</p></li><li><p>Enumeration<string> getParameterNames():获取所有请求的参数名称</string></p></li><li><p>Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</p><ul><li><strong>中文乱码问题：</strong><pre><code>* get方式：tomcat 8 已经将get方式乱码问题解决了</code></pre><ul><li>post方式：会乱码<pre><code>    * 解决：在获取参数前，设置request的编码request.setCharacterEncoding("utf-8");</code></pre></li></ul></li></ul><ol start="2"><li><p> <strong>请求转发(forward)：一种在服务器内部的资源跳转方式</strong></p></li><li><p>步骤：</p><ol><li>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path目标资源文件)</li><li>使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response) <ul><li>特点：<ol><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器内部资源中。</li><li>转发是一次请求</li></ol></li></ul></li></ol><pre><code>request.getRequestDispatcher("/requestDemo9").forward(request,response);</code></pre></li><li><p><strong>共享数据：</strong></p><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据<pre><code>  * request域(只能用于转发forward)：代表一次请求的范围，一般用于请求转发的多个资源中共享数据  * 方法：      1. void setAttribute(String name,Object obj):存储数据      2. Object getAttitude(String name):通过键获取值      3. void removeAttribute(String name):通过键移除键值对      4. **ServletContext getServletContext()** </code></pre></li></ul></li></ol></li></ol><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/request1.png" alt="image-20200429161829534" style="zoom: 67%;"><p>​                </p><h3 id="登录案例"><a href="#登录案例" class="headerlink" title="登录案例"></a>登录案例</h3><h4 id="bug1-数据库语法错误：MySQLSyntaxErrorException"><a href="#bug1-数据库语法错误：MySQLSyntaxErrorException" class="headerlink" title="bug1:    数据库语法错误：MySQLSyntaxErrorException"></a>bug1:    数据库语法错误：MySQLSyntaxErrorException</h4><pre><code>解决方案：数据库语法出现错误，看语法//是from 表名，不是from 数据库名String sql = "select * from user where account=? and password=?";</code></pre><h4 id="bug2-500异常：DataAccessException"><a href="#bug2-500异常：DataAccessException" class="headerlink" title="bug2:    500异常：DataAccessException"></a>bug2:    500异常：DataAccessException</h4><pre><code>解决方案：1. 在正确路径下建立lib包。路径为：WEB-INF目录下的lib目录，目录名不能写成别的，加个s都不行。2. 导入完整jar包 3. 在1，2正确前提下，可以删除，重启idea，再次导入。</code></pre><h4 id="bug3：getParameterMap（）获取不到值"><a href="#bug3：getParameterMap（）获取不到值" class="headerlink" title="bug3：getParameterMap（）获取不到值"></a>bug3：getParameterMap（）获取不到值</h4><pre><code>解决方案：表单的name必须和数据库的列名相同，不能name="acc"</code></pre><pre><code>* 用户登录案例需求：    1.编写login.html登录页面        username &amp; password 两个输入框    2.使用Druid数据库连接池技术,操作mysql，day14数据库中user表    3.使用JdbcTemplate技术封装JDBC    4.登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您    5.登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</code></pre><pre><code>分析:* 注意：引入jar包必须在web/WEB-INF/lib中引入，否则会出500异常* 注意：login.html中form表单的action路径的写法        * 虚拟目录+Servlet的资源路径1.创建login.html写表单2.创建数据库，存储用户数据（引入jar包）3.创建对应的用户类4.创建操作Mysql数据库的dao类，使用template技术，（引入jar包）5.创建JDBC工具类，使用Druid数据库连接池技术（引入jar包），获取连接池对象DataSource6.在dao类中写方法操作数据库7.创建servlet类获取表单值，将封装成对象，调用dao类的操作数据库方法8.成功获取到user信息，则将信息储存进request域中，登录成功跳转到successServlet中，并展示信息9.失败则跳转到failedServlet中，并展示信息</code></pre><hr><h2 id="BeanUtils工具类，简化数据封装"><a href="#BeanUtils工具类，简化数据封装" class="headerlink" title="BeanUtils工具类，简化数据封装"></a>BeanUtils工具类，简化数据封装</h2><ul><li>用于封装JavaBean的<ol><li>JavaBean：标准的Java类<pre><code> 1. 要求：     1. 类必须被public修饰 2. 必须提供空参的构造器 3. 成员变量必须使用private修饰 4. 提供公共setter和getter方法</code></pre><ol start="2"><li>功能：封装数据</li><li>方法：<pre><code>      1. setProperty(Object,String key,String value)：将javabean封装值    2. getProperty(Object,String key)：获取javabean的值     3. populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</code></pre></li></ol></li></ol></li></ul><p>例子：<br>//注意：使用该方法要确保表单的name与数据库中的列名相同，不然获取不到值<br>Map&lt;String,String[]&gt;  map = request.getParameterMap();<br>user user1 = new user();<br>user loginUser = BeanUtils.populate(user1,map);</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsp </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http请求详解</title>
      <link href="/2020/07/15/qian-duan/http/"/>
      <url>/2020/07/15/qian-duan/http/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul><li><p>概念：Hyper Text Transfer Protocol 超文本传输协议</p><ul><li><p>传输协议：定义客户端和服务器端通信时，发送数据的格式</p></li><li><p>特点：</p><ol><li>基于TCP/IP的高级协议</li><li>默认端口号:80</li><li>基于请求/响应模型的:一次请求对应一次响应</li><li>无状态的：每次请求之间相互独立，不能交互数据</li></ol></li><li><p>历史版本：</p><ul><li>1.0：每一次请求响应都会建立新的连接</li><li>1.1：复用连接</li></ul></li></ul></li></ul><h3 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h3><h4 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1. 请求行"></a>1. 请求行</h4><p>请求方式 请求url 请求协议/版本<br>GET /login.html    HTTP/1.1</p><ul><li><p>请求方式：</p><ul><li><p>HTTP协议有7种请求方式，常用的有2种</p><ul><li><p><strong>GET：</strong></p><pre><code>                   1. 请求参数在请求行中，在url后。                                  2.  请求的url长度有限制的                                  3. 不太安全</code></pre></li><li><p><strong>POST：</strong></p><pre><code>                   1. 请求参数在请求体中                                  2. 请求的url长度没有限制的                                  3. 相对安全</code></pre></li></ul></li></ul></li></ul><h4 id="2-请求头：客户端浏览器告诉服务器一些信息"><a href="#2-请求头：客户端浏览器告诉服务器一些信息" class="headerlink" title="2. 请求头：客户端浏览器告诉服务器一些信息"></a>2. 请求头：客户端浏览器告诉服务器一些信息</h4><p>格式：请求头名称: 请求头值</p><ul><li><p>常见的请求头：</p></li><li><p>User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</p><ul><li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li></ul></li><li><p>Referer：<a href="http://localhost/login.html">http://localhost/login.html</a></p><ul><li><p>告诉服务器，我(当前请求)从哪里来？</p><ul><li><p>作用：</p><ol><li><p>防盗链：</p></li><li><p>统计工作：</p></li></ol></li></ul></li></ul></li></ul><h4 id="3-请求空行"><a href="#3-请求空行" class="headerlink" title="3. 请求空行"></a>3. 请求空行</h4><p>空行，就是用于分割POST请求的请求头，和请求体的。</p><h4 id="4-请求体-正文-："><a href="#4-请求体-正文-：" class="headerlink" title="4. 请求体(正文)："></a>4. 请求体(正文)：</h4><ul><li>封装POST请求消息的请求参数的</li></ul><h3 id="字符串格式："><a href="#字符串格式：" class="headerlink" title="字符串格式："></a>字符串格式：</h3><pre><code>  //请求行            POST /login.html    HTTP/1.1            //请求头            Host: localhost            User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0    //告知服务器，浏览器的版本信息            Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8            Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2            Accept-Encoding: gzip, deflate            Referer: http://localhost/login.html //告诉服务器，当前请求是从哪来            Connection: keep-alive            Upgrade-Insecure-Requests: 1          //请求体          username=zhangsan    </code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web服务器Tomcat、Servlet</title>
      <link href="/2020/07/13/qian-duan/tomcat-servlet/"/>
      <url>/2020/07/13/qian-duan/tomcat-servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="web相关概念回顾"><a href="#web相关概念回顾" class="headerlink" title="web相关概念回顾"></a>web相关概念回顾</h2><ol><li>软件架构<ol><li>C/S：客户端/服务器端</li><li>B/S：浏览器/服务器端</li></ol></li><li>资源分类<ol><li>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析<ul><li>如： html,css,JavaScript</li></ul></li><li>动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器<ul><li>如：servlet/jsp,php,asp…</li></ul></li></ol></li><li>网络通信三要素<ol><li>IP：电子设备(计算机)在网络中的唯一标识。</li><li>端口：应用程序在计算机中的唯一标识。 0~65536</li><li>传输协议：规定了数据传输的规则<ol><li>基础协议：<ol><li>tcp:安全协议，三次握手。 速度稍慢</li><li>udp：不安全协议。 速度快</li></ol></li></ol></li></ol></li></ol><hr><h2 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h2><ul><li><p>服务器：安装了服务器软件的计算机</p></li><li><p>服务器软件：接收用户的请求，处理请求，做出响应</p></li><li><p>web服务器软件：接收用户的请求，处理请求，做出响应。</p><ul><li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li><li>web容器</li></ul></li><li><p>常见的java相关的web服务器软件：</p><ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li></ul></li><li><p>JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</p></li></ul><hr><h2 id="Tomcat：web服务器软件"><a href="#Tomcat：web服务器软件" class="headerlink" title="Tomcat：web服务器软件"></a>Tomcat：web服务器软件</h2><ol><li><p>下载：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a>    </p></li><li><p>安装：解压压缩包即可。</p><pre><code>    * 注意：安装目录建议不要有中文和空格</code></pre></li><li><p>卸载：删除目录就行了</p></li><li><p>文件目录：bin:可执行文件，conf：配置文件，lib：依赖jar包，logs：日志文件，temp：临时文件，   webapps：存放web项目，work：存放运行时的数据</p></li><li><p>开启：</p><ul><li><p>bin/startup.bat ,双击运行该文件即可</p></li><li><p>访问：浏览器输入：<a href="http://localhost:8080/">http://localhost:8080</a> 回车访问自己</p><pre><code>                http://别人的ip:8080 访问别人</code></pre></li><li><p>可能遇到的问题：</p><ol><li><p>黑窗口一闪而过：</p><ul><li>原因： 没有正确配置JAVA_HOME环境变量<ul><li>解决方案：正确配置JAVA_HOME环境变量</li></ul></li></ul></li><li><p>启动报错：</p><ol><li>暴力：找到占用的端口号，并且找到对应的PID进程，杀死该进程<ul><li>netstat -ano</li></ul></li></ol></li></ol></li></ul></li><li><p>关闭：</p><ul><li>bin/shutdown.bat</li><li>ctrl+c</li></ul></li><li><p>配置：</p><ol><li>直接将项目放到webapps目录下即可<ul><li>简化部署：将项目打成一个war包，将war包放置目录下，会自动解压缩</li></ul></li><li>在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写<pre><code>            &lt;Context docBase="D:\hello" /&gt;            * 虚拟目录：xml文件的任意名称</code></pre></li></ol><ul><li>静态项目和动态项目：<pre><code>      * 目录结构          * java动态项目的目录结构：              -- 项目的根目录                  -- WEB-INF目录：                      -- web.xml：web项目的核心配置文件                      -- classes目录：放置字节码文件的目录                      -- lib目录：放置依赖的jar包</code></pre></li></ul></li><li><p>将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目。</p><ol><li>run–&gt;edit configuration–&gt;templates–&gt;tomcat–&gt;local–&gt;configure</li><li>update action–&gt;update resources</li><li>取消勾选afterLauch</li></ol></li><li><p>deployment–&gt;application context:/</p></li></ol><p>创建项目：</p><p>   ​    java Enterprise –&gt;version:7 –&gt;web application(勾选上)</p><hr><h2 id="Servlet-server-applet"><a href="#Servlet-server-applet" class="headerlink" title="Servlet :server applet"></a>Servlet :server applet</h2><h3 id="概念：运行在服务器端的小程序"><a href="#概念：运行在服务器端的小程序" class="headerlink" title="概念：运行在服务器端的小程序"></a>概念：运行在服务器端的小程序</h3><ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li><li>将来我们自定义一个类，实现Servlet接口，复写方法。</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>创建JavaEE项目</p></li><li><p>定义一个类，实现Servlet接口</p><ul><li>public class ServletDemo1 ==implements== Servlet</li></ul></li><li><p>实现接口中的抽象方法</p><p>service方法</p></li><li><p>配置Servlet<br>在web.xml中配置：</p><pre><code> &lt;!--配置Servlet --&gt; &lt;servlet&gt;     &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;     &lt;servlet-class&gt;cn.itcast.web.servlet.ServletDemo1&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt;     &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;     &lt;url-pattern&gt;/demo1&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;</code></pre></li></ol><h3 id="执行原理："><a href="#执行原理：" class="headerlink" title="执行原理："></a>执行原理：</h3><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容。</url-pattern></li><li>如果有，则在找到对应的<servlet-class>全类名</servlet-class></li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol><h3 id="Servlet中的生命周期方法："><a href="#Servlet中的生命周期方法：" class="headerlink" title="Servlet中的生命周期方法："></a>Servlet中的生命周期方法：</h3><h4 id="被创建：执行init方法，只执行一次"><a href="#被创建：执行init方法，只执行一次" class="headerlink" title="被创建：执行init方法，只执行一次"></a>被创建：执行init方法，只执行一次</h4><ul><li><p>Servlet什么时候被创建？</p><ul><li>默认情况下，第一次被访问时，Servlet被创建</li><li>可以配置执行Servlet的创建时机。<ul><li>在<servlet>标签下配置<ol><li><p>第一次被访问时，创建</p><pre><code>       * &lt;load-on-startup&gt;的值为负数</code></pre></li><li><p>在服务器启动时，创建</p><ul><li><load-on-startup>的值为0或正整数</load-on-startup></li></ul></li></ol></servlet></li></ul></li></ul></li><li><p>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</p><ul><li><p>多个用户同时访问时，可能存在线程安全问题。</p></li><li><p>解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</p><ul><li><p>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</p><ul><li><p>多个用户同时访问时，可能存在线程安全问题。</p></li><li><p>解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</p></li></ul></li></ul></li></ul></li></ul><p>####提供服务：执行service方法，执行多次</p><ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul><p>####被销毁：执行destroy方法，只执行一次</p><ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li></ul><h3 id="Servlet3-0："><a href="#Servlet3-0：" class="headerlink" title="Servlet3.0："></a>Servlet3.0：</h3><ul><li><p>好处：</p></li><li><p>支持注解配置。不需要web.xml来配置文件了。</p></li><li><p>步骤：</p><ol><li>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</li><li>定义一个类，实现Servlet接口或继承httpServlet接口</li><li>复写方法<ol><li>在类上使用@WebServlet注解，进行配置</li></ol><ul><li>@WebServlet(“资源路径”)–&gt;如：@WebServlet(“/demo就是xml里面的patten”)<ul><li>资源路径patten的定义规则<ul><li>/xxx</li><li>/xxx/xxx：多层路径</li><li>*.do（没有/）</li></ul></li></ul></li></ul></li></ol></li></ul><h3 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h3><ol><li>IDEA会为每一个tomcat部署的项目单独建立一份配置文件</li></ol><ul><li>查看控制台的log：Using CATALINA_BASE:   “C:\Users\fqy.IntelliJIdea2018.1\system\tomcat_itcast”</li></ul><ol start="2"><li>工作空间项目    和     tomcat部署的web项目<ul><li>tomcat真正访问的是“tomcat部署的web项目”，”tomcat部署的web项目”对应着”工作空间项目” 的web目录下的所有资源</li><li>WEB-INF目录下的资源不能被浏览器直接访问。</li></ul></li><li>断点调试：使用”小虫子”启动 dubug 启动</li></ol><h3 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h3><ul><li>Servlet – 接口<pre><code>            |</code></pre>  GenericServlet – 抽象类：继承，只需要实现service()方法即可<pre><code>      |</code></pre>  HttpServlet  – 抽象类：最常用，继承，复写doGet/doPost方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> servlet </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie、Session详解</title>
      <link href="/2020/07/12/qian-duan/cookie-session/"/>
      <url>/2020/07/12/qian-duan/cookie-session/</url>
      
        <content type="html"><![CDATA[<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><ol><li>会话：一次会话中包含多次请求和响应。<ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li></ul></li><li>功能：在一次会话的范围内的多次请求间，共享数据</li><li>方式：<ol><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ol></li></ol><hr><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ol><li><p>概念：客户端会话技术，将数据保存到==客户端==</p></li><li><p>快速入门：</p></li></ol><ul><li><strong>使用步骤</strong>：</li></ul><ol><li><p>创建Cookie对象，绑定数据</p><pre><code> * new Cookie(String name, String value)        * 设置新值：setValue(String value)</code></pre><ol start="2"><li>发送Cookie对象<ul><li>response.addCookie(Cookie cookie) </li></ul></li><li>设置Cookie的作用范围，默认情况是当前虚拟目录下<ul><li>setPath(String path)：”/“表示tomcat目录所有部署项目</li></ul></li><li>获取Cookie，拿到数据</li></ol><ul><li>Cookie[]  request.getCookies()  </li></ul></li><li><p>实现原理</p><ul><li>基于响应头set-cookie和请求头cookie实现</li></ul></li><li><p><strong>cookie的细节</strong></p><ol><li><p><strong>一次可不可以发送多个cookie?</strong></p><ul><li>可以<ul><li>可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</li></ul></li></ul></li><li><p><strong>cookie在浏览器中保存多长时间？</strong></p><ol><li>默认情况下，当==浏览器关闭==后，Cookie数据被销毁</li><li> 持久化存储：</li></ol><ul><li>setMaxAge(int seconds)<ol><li>正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效</li><li>负数：默认值</li><li>零：删除cookie信息</li></ol></li></ul></li><li><p><strong>cookie能不能存中文？</strong></p><ul><li>在tomcat 8 之前 cookie中不能直接存储中文数据。<ul><li>需要将中文数据转码—一般采用URL编码(%E3)</li></ul></li><li>在==tomcat 8==之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</li></ul></li><li><p><strong>cookie共享问题？</strong></p><ol><li><p>假设在==一个tomcat服务器==中，部署了多个web项目，那么在这些web项目中cookie能不能共享？</p><ul><li><p>默认情况下cookie不能共享</p></li><li><p>setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录</p><ul><li>如果要共享，则可以将path设置为”/“</li></ul></li></ul></li><li><p>==不同的tomcat服务器==间cookie共享问题？</p><ul><li><p>setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享</p><p>例子：setDomain(“.baidu.com”),那么tieba.baidu.com和news.baidu.com中cookie可以共享</p></li></ul></li></ol></li></ol></li><li><p>Cookie的特点和作用</p><ol><li>cookie存储数据在客户端浏览器（不太安全，易被篡改）</li><li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</li></ol><ul><li>作用：<ol><li>cookie一般用于存出少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ol></li></ul></li></ol><hr><h2 id="案例：记住上一次访问时间"><a href="#案例：记住上一次访问时间" class="headerlink" title="案例：记住上一次访问时间"></a>案例：记住上一次访问时间</h2><ol><li>需求：<pre><code> 1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</code></pre><ol start="2"><li>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</li></ol></li><li>分析：<ol><li>可以采用Cookie来完成<ol start="2"><li>在服务器中的Servlet判断是否有一个名为lastTime的cookie<ol><li>有：不是第一次访问<ol><li>响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20</li><li>写回Cookie：lastTime=2018年6月10日11:50:01</li></ol></li><li>没有：是第一次访问<ol><li>响应数据：您好，欢迎您首次访问</li><li>写回Cookie：lastTime=2018年6月10日11:50:01</li></ol></li></ol></li></ol></li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/CookieServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取cookies</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果数组不为空则遍历</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookies<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>cookies<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取cookie的name，如果是lastTime进行下一步</span>                String name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//获取时间</span>                    String value <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//URL解码</span>                    value <span class="token operator">=</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//输出</span>                    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>欢迎回来，您的上次访问时间为："</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">"&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//设置cookie值，新的访问时间</span>                    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String sdf_date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//编码</span>                    sdf_date <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>sdf_date<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//增加cookie</span>                    cookie<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>sdf_date<span class="token punctuation">)</span><span class="token punctuation">;</span>                    response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//设置cookie的存活时间</span>                    cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookies<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>cookies<span class="token operator">==</span>null<span class="token operator">||</span>flag<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//证明没有lastTime</span>            Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sdf_date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            sdf_date <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>sdf_date<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建新的cookie</span>            Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">,</span>sdf_date<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"您是第一次访问该网页，欢迎您！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="JSP：入门学习"><a href="#JSP：入门学习" class="headerlink" title="JSP：入门学习"></a>JSP：入门学习</h2><ol><li>概念：<ul><li>Java Server Pages： java服务器端页面<ul><li>可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</li><li>用于简化书写！！！</li></ul></li></ul></li><li>原理<ul><li>JSP本质上就是一个Servlet</li></ul></li><li>JSP的脚本：JSP定义Java代码的方式<ol><li>&lt;%  代码 %&gt;：定义的java代码。</li><li>&lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。</li><li>&lt;%= 代码 %&gt;：定义的java代码，表达式。</li></ol></li><li>JSP的内置对象：<pre><code>* 在jsp页面中不需要获取和创建，可以直接使用的对象   * jsp一共有9个内置对象。   * 今天学习3个：       * request       * response       * out：字符输出流对象，可以将数据输出到页面上。           * response.getWriter()和out.write()的区别：               * 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。               * response.getWriter()数据输出永远在out.write()之前</code></pre></li></ol><hr><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ol><li><p>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在==服务器端==的对象中。HttpSession</p></li><li><p><strong>快速入门：</strong></p><ol><li>获取HttpSession对象：<br> HttpSession session = request.getSession();</li><li>使用HttpSession对象：<br> Object getAttribute(String name)<br> void setAttribute(String name, Object value)<br>void removeAttribute(String name)  </li></ol></li><li><p>原理</p><ul><li>Session的实现是依赖于Cookie的。（用cookie来标记sessionID来找到同一个session）</li></ul></li><li><p>细节：</p><ol><li><p><strong>当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</strong></p><ul><li>默认情况下，不是。</li><li>如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。<br> Cookie c = new Cookie(“JSESSIONID”,session.getId());<br>c.setMaxAge(60*60);<br>response.addCookie(c);</li></ul></li><li><p><strong>客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</strong></p><ul><li>不是同一个（ID不同），但是tomcat可以保证数据不丢失。会自动完成以下工作，idea不可以<ul><li>session的钝化：<ul><li>在服务器正常关闭之前，将session对象系列化到硬盘上</li></ul></li><li>session的活化：<ul><li>在服务器启动后，将session文件转化为内存中的session对象即可。</li></ul></li></ul></li></ul></li><li><p><strong>session什么时候被销毁？</strong></p><ol><li>==服务器关闭==</li><li>session对象调用invalidate() 。自我销毁</li><li>session默认失效时间 30分钟<br>选择性配置修改（web.xml）    <session-config>      <session-timeout>30</session-timeout>  </session-config></li></ol></li><li><p><strong>session的特点</strong></p><ol><li>session用于存储一次会话的多次请求的数据，存在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ol><ul><li><strong>session与Cookie的区别：</strong><ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li><li>session数据安全，Cookie相对于不安全</li></ol></li></ul></li></ol></li></ol><hr><h2 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h2><pre><code>1. 案例需求：    1. 访问带有验证码的登录页面login.jsp    2. 用户输入用户名，密码以及验证码。        * 如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误        * 如果验证码输入有误，跳转登录页面，提示：验证码错误        * 如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您</code></pre><pre><code>2. 分析：    1.先设计login.jsp，实现表单表格嵌套    2.获取表单的值，并将值封装成user对象    3.使用工具类和dao操作数据库类，将对象传入并查询数据库对应的信息，返回该对象所有信息    4.获取验证码的值，将随机验证码存储进session中，    5.验证码成功再判断账号密码，失败就转发到login.jsp，并将错误信息存储再request域中    6.账号密码成功，则将用户信息存储进session中，重定向到success.jsp，在成功页面获取信息    7.账号密码失败就转发到login.jsp中，并将错误信息存储在request域中    8.Login.jsp获取错误信息    细节：1.错误信息隐藏null:（三元表达式）    &lt;%=request.getAttribute("cc_err")==null ? "":request.getAttribute("cc_err") %&gt;    2.防止返回重复填写验证码：    获取session中验证码的值之后，立即删除存储在session中的验证码信息    3.失败转发是用request域存储，成功重定向是session存储    4.Map一次性获取信息不能分离验证码，导致无法判断</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml详解</title>
      <link href="/2020/07/10/qian-duan/xml/"/>
      <url>/2020/07/10/qian-duan/xml/</url>
      
        <content type="html"><![CDATA[<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="概念：Extensible-Markup-Language-可扩展标记语言"><a href="#概念：Extensible-Markup-Language-可扩展标记语言" class="headerlink" title="概念：Extensible Markup Language 可扩展标记语言"></a>概念：Extensible Markup Language 可扩展标记语言</h3><ul><li>可扩展：标签都是自定义的    </li><li>功能<ul><li>存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ul></li><li>XML和HTML的区别<ol><li>XML的标签是自定义的，html的标签是预定义的</li><li>xml的语法严格，html语法松散</li><li>xml是存储数据的，html是展示数据的</li></ol></li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p>基本语法：</p><ul><li><p>xml第一行必须定义文档声明（必须是第一行，不能有空格）</p><pre><code>&lt;?xml version='1.0'?&gt;</code></pre></li><li><p>xml文档中有且只有一个根标签</p></li><li><p>属性值必须使用引号引起来</p></li><li><p>标签必须有结束标签</p></li><li><p>xml标签名称区分大小写</p></li></ul></li><li><p>组成部分：</p><ol><li><p>文档声明</p><ol><li>格式：<!--?xml 属性列表?--></li><li>属性列表：<ul><li>version：版本号（必须写）</li><li>encoding：编码方式，告知解析引擎当前文档使用的字符集，默认iso-8859-1</li><li>standalone：是否独立（yes不依赖其他文件/no）</li></ul></li></ol></li><li><p>指令（了解）</p><ul><li><!--?xml-stylesheet type="text/css" href="a.css"?--></li></ul></li><li><p>标签：标签名称自定义</p><ul><li>规则：<ul><li>不能数字和xml开头</li></ul></li></ul></li><li><p>属性：</p><ul><li>id属性值唯一</li></ul></li><li><p>文本</p><ol><li>CDATA区：可以原样输出</li></ol><pre><code>&lt;![CDATA[原样输出的文本]]&gt;</code></pre></li></ol></li></ul><h3 id="约束：规定XML文档的书写规则"><a href="#约束：规定XML文档的书写规则" class="headerlink" title="约束：规定XML文档的书写规则"></a>约束：规定XML文档的书写规则</h3><ul><li><p>作为框架的使用者：</p><ul><li>能够在xml中引入约束文档</li><li>能够简单读懂约束文档</li></ul></li><li><p>分类：</p><ul><li>DTD：一个简单的约束技术</li><li>Schema：一种复杂的约束技术</li></ul></li><li><p>DTD:（.dtd）</p><pre><code>* .dtd约束文件：//students是父标签，里面可以包含多个student子标签    &lt;!ELEMENT students (student+)&gt;//student标签中，可以包含name,age,sex标签    &lt;!ELEMENT student(name,age,sex)&gt;//name标签体的类型是字符串    &lt;!ELEMENT name(#PCDATA)&gt;//age标签体的类型是字符串    &lt;!ELEMENT age(#PCDATA)&gt;//sex标签体的类型是字符串    &lt;!ELEMENT sex(#PCDATA)&gt;//student标签必须（#REQUIRED）有一个number属性，属性类型是id    &lt;!ATTLIST student number ID #REQUIRED&gt;</code></pre><p>```</p></li><li><p>引入dtd文档到xml文档中</p><ul><li><p>内部dtd：将约束规则定义在xml文档中（了解）</p><p>​    </p></li><li><p>外部dtd：将约束规则定义在外部dtd文件中</p><ul><li>本地：</li><li>网络：</li></ul></li></ul></li></ul><pre><code>* XSD（Schema）(.xsd)* ```xml  * .xsd约束文件：  //students标签，类型为studentsType  &lt;xsd:element name="students" type="studentsType"/&gt;  //对studentsType的解析，复杂类型  &lt;xsd:complexType name="studentsType"&gt;      //按顺序      &lt;xsd:sequence&gt;          //student标签，类型为studentType，至少是0个，至多不限          &lt;xsd:element name="student" type="studentType" minOccurs="0" maxOccurs="unbounded"/&gt;      &lt;/xsd:sequence&gt;  &lt;/xsd:complexType&gt;  //对studentType的解析，复杂类型  &lt;xsd:complexType name="studentType"&gt;      &lt;xsd:sequence&gt;          //name标签，类型为string          &lt;xsd:element name="name" type="xsd:string"/&gt;          //age标签，类型为ageType          &lt;xsd:element name="age" type="ageType" /&gt;          &lt;xsd:element name="sex" type="sexType" /&gt;      &lt;/xsd:sequence&gt;      //student标签中的属性，number，类型为numberType，不可重复      &lt;xsd:attribute name="number" type="numberType" use="required"/&gt;  &lt;/xsd:complexType&gt;  //对sexType的解析，简单类型  &lt;xsd:simpleType name="sexType"&gt;      //约束，类型为string      &lt;xsd:restriction base="xsd:string"&gt;          //枚举          &lt;xsd:enumeration value="male"/&gt;          &lt;xsd:enumeration value="female"/&gt;      &lt;/xsd:restriction&gt;  &lt;/xsd:simpleType&gt;  //对ageType的解析，简单类型  &lt;xsd:simpleType name="ageType"&gt;      &lt;xsd:restriction base="xsd:integer"&gt;          //最大最小值限定          &lt;xsd:minInclusive value="0"/&gt;          &lt;xsd:maxInclusive value="256"/&gt;      &lt;/xsd:restriction&gt;  &lt;/xsd:simpleType&gt;  //对numberType的解析，简单类型  &lt;xsd:simpleType name="numberType"&gt;      &lt;xsd:restriction base="xsd:string"&gt;          //格式为：heima_4个数字          &lt;xsd:pattern value="heima_\d{4}"/&gt;      &lt;/xsd:restriction&gt;  &lt;/xsd:simpleType&gt;</code></pre><ul><li><p>引入xsd文件的方法：</p><pre><code>        * 引入：                  1.填写xml文档的根元素（&lt;students &gt;）                  2.引入xsi前缀.  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"                  3.引入xsd文件 命名空间.  xsi:schemaLocation="http://www.itcast.cn/xml（给路径起的名字，即命名空间）  student.xsd(这是文件路径)"                  4.为每一个xsd约束声明一个前缀,作为标识  xmlns="http://www.itcast.cn/xml" （给约束起个名字，以后用的时候哪个语句用哪个约束，直接写名字开头即可）                  如xmlns:a="http://www.itcast.cn/xml"，不写就是默认                    &lt;（1）students   （2）xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"                  （4）xmlns="http://www.itcast.cn/xml"                  （3）xsi:schemaLocation="http://www.itcast.cn/xml  student.xsd"&gt;</code></pre></li></ul><hr><h3 id="解析：操作xml文档，将文档中的数据读取到内存中"><a href="#解析：操作xml文档，将文档中的数据读取到内存中" class="headerlink" title="解析：操作xml文档，将文档中的数据读取到内存中"></a>解析：操作xml文档，将文档中的数据读取到内存中</h3><ul><li><p>操作xml文档</p><ol><li>解析（读取）：将文档中的数据读取到内存中</li><li>写入：将内存中的数据包保存到xml文档中，持久化的存储</li></ol></li><li><p>解析xml的方式：</p><ol><li><p>DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树</p><ul><li><p>优点：操作方便，可以对文档进行CRUD的所有操作</p></li><li><p>缺点：占内存</p></li></ul></li><li><p>SAX：逐行读取，基于事件驱动的。</p><ul><li>优点：不占内存。</li><li>缺点：只能读取，不能增删改</li></ul></li></ol></li><li><p>xml常见的解析器：</p><ol><li>JAXP：sun公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据</li><li>PULL：Android操作系统内置的解析器，sax方式的。</li></ol></li><li><p><strong>Jsoup解析器详解</strong></p><ul><li><p>步骤：</p><ol><li><p>导入jar包：jsoup-1.11.2.jar</p></li><li><p>获取Document对象</p><pre><code>Jsoup.pasrse(文件,"字符集")注意：文件可以通过 类名.class.getClassLoader().getAsResource("student.xml")来获取</code></pre></li><li><p>获取对应的标签Element对象</p><pre><code>Elements 指的是集合，可以通过集合的方式get(索引)来获取对象</code></pre></li><li><p>获取数据</p><pre><code>element.text()获取文本数据</code></pre></li></ol></li><li><p>对象的使用：</p><ol><li><strong>Jsoup：工具类，可以解析html或xml文档，返回Document</strong></li></ol></li></ul></li><li><p>parse：解析html或xml文档，返回Document</p><pre><code>                       * parse(File in, String charsetName)：解析xml或html文件的。                    * parse(String html)：解析xml或html字符串                    * parse(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</code></pre></li></ul><ol start="2"><li><p><strong>Document：文档对象，代表内存中的dom树</strong></p><ul><li>获取Element对象<pre><code>                  * getElementById(String id)：根据id属性值获取唯一的element对象                * getElementsByTag(String tagName)：根据标签名称获取元素对象集合                * getElementsByAttribute(String key)：根据属性名称获取元素对象集合                * getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</code></pre></li></ul><ol start="3"><li><p>Elements：元素Element对象的集合。可以当做 ArrayList<element>来使用,get(索引)</element></p></li><li><p><strong>Element：元素对象</strong></p></li></ol></li><li><p>获取子元素对象</p><pre><code>                            * getElementById(String id)：根据id属性值获取唯一的element对象                     * getElementsByTag(String tagName)：根据标签名称获取元素对象集合                   * getElementsByAttribute(String key)：根据属性名称获取元素对象集合                   * getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合              2. 获取属性值                * String attr(String key)：根据属性名称获取属性值            3. 获取文本内容                * String text():获取纯文本内容                * String html():获取标签体内所有内容的字符串表示形式(包括子标签的标签和文本内容)</code></pre><ol start="5"><li><strong>Node：节点对象</strong></li></ol><ul><li>是Document和Element的父类</li></ul></li></ol><p>​    </p><ul><li><p>快捷查询方式</p><ul><li><strong>selector：选择器</strong></li></ul></li><li><p>使用的方法：Elements    select(String cssQuery)</p><pre><code>        * 语法：参考API文档里Selector类中定义的语法    如：获取有number属性值为heima_0001的student标签中的age子标签  Elements eles = document.select("student[number='heima_0001'] age")</code></pre><ul><li><p><strong>xpath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</strong></p><ul><li>使用Jsoup的Xpath需要额外==导入jar包==：JsoupXpath-0.3.2.jar    <ul><li>查询w3cshool参考手册，使用xpath的语法完成查询</li></ul></li></ul><p>//1.获取student.xml的path</p><pre><code>            String path = JsoupDemo6.class.getClassLoader().getResource("student.xml").getPath();              //2.获取Document对象              Document document = Jsoup.parse(new File(path), "utf-8");                //3.根据document对象，创建JXDocument对象              JXDocument jxDocument = new JXDocument(document);                    //4.结合xpath语法查询            //4.1查询所有student标签              List&lt;JXNode&gt; jxNodes = jxDocument.selN("//student");              for (JXNode jxNode : jxNodes) {                  System.out.println(jxNode);              }                    System.out.println("--------------------");                    //4.2查询所有student标签下的name标签              List&lt;JXNode&gt; jxNodes2 = jxDocument.selN("//student/name");              for (JXNode jxNode : jxNodes2) {                  System.out.println(jxNode);              }                    System.out.println("--------------------");                    //4.3查询student标签下带有id属性的name标签              List&lt;JXNode&gt; jxNodes3 = jxDocument.selN("//student/name[@id]");              for (JXNode jxNode : jxNodes3) {                  System.out.println(jxNode);              }              System.out.println("--------------------");              //4.4查询student标签下带有id属性的name标签 并且id属性值为itcast                    List&lt;JXNode&gt; jxNodes4 = jxDocument.selN("//student/name[@id='itcast']");              for (JXNode jxNode : jxNodes4) {                  System.out.println(jxNode);              }</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> xml </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery高级操作</title>
      <link href="/2020/07/09/qian-duan/jquery-gao-ji/"/>
      <url>/2020/07/09/qian-duan/jquery-gao-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="JQuery-高级"><a href="#JQuery-高级" class="headerlink" title="JQuery 高级"></a>JQuery 高级</h2><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ol><li><p>三种方式显示和隐藏元素</p><ol><li><p>默认显示和隐藏方式</p><ol><li><p>show([speed,[easing],[fn]])</p><ol><li>参数：<ol><li>speed：动画的速度。三个预定义的值(“slow”,”normal”, “fast”)或表示动画时长的毫秒数值(如：1000)</li><li>easing：用来指定切换效果，默认是”swing”，可用参数”linear”<ul><li>swing：动画执行时效果是 先慢，中间快，最后又慢</li><li>linear：动画执行时速度是匀速的</li></ul></li></ol></li><li>fn：在动画完成时执行的函数，每个元素执行一次。</li></ol></li><li><p>hide([speed,[easing],[fn]])</p></li><li><p>toggle([speed],[easing],[fn])</p></li></ol></li><li><p>滑动显示和隐藏方式</p><ol><li>slideDown([speed],[easing],[fn])</li><li>slideUp([speed,[easing],[fn]])</li></ol></li><li><p>slideToggle([speed],[easing],[fn])</p></li><li><p>淡入淡出显示和隐藏方式</p><ol><li>fadeIn([speed],[easing],[fn])</li><li>fadeOut([speed],[easing],[fn])</li><li>fadeToggle([speed,[easing],[fn]])</li></ol></li></ol></li></ol><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol><li>js的遍历方式<ul><li>for(初始化值;循环结束条件;步长)</li></ul></li><li>jq的遍历方式</li><li>jq对象.each(callback)    1. 语法：<br> jquery对象.each(function(index,element){});<ul><li>index:就是元素在集合中的索引</li><li>element：就是集合中的每一个元素对象</li><li>this：集合中的每一个元素对象    2. 回调函数返回值：</li><li>true:如果当前function返回为false，则结束循环(break)。</li><li>false:如果当前function返回为true，则结束本次循环，继续下次循环(continue)</li></ul></li></ol><pre><code>``` html&lt;ul id="address"&gt;&lt;li&gt;北京&lt;/li&gt;&lt;li&gt;上海&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;    $("#address li").each(function(){        alert(this.innerHTML());    });    //第二种写法    $("#address li").each(function(index,element){        //判断如果是北京，跳过        if("上海"==element.innerHtml()){            //function返回false，(break)            //function返回true，(continue)            return true;        }        //alert(index+":"+element.innerHtml());        //alert(index+":"+$(element).html());    });&lt;/script&gt;```</code></pre><ol start="2"><li><p>$.each(object, [callback])</p><pre class=" language-html"><code class="language-html">$.each($("#address li"),funtion(){    //逻辑相同    alert(this.innerHtml());});</code></pre></li><li><p>for..of: jquery 3.0 版本之后提供的方式（因为版本太新，不推荐使用）<br>for(元素对象 of 容器对象)</p></li></ol><pre><code>``` for(li of $("#address li")){    alert(li.innerHtml());}```</code></pre><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ol><li>jquery标准的绑定方式<ul><li>jq对象.事件方法(回调函数)；</li><li>注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。<ul><li>表单对象.submit();//让表单提交</li></ul></li></ul></li><li>on绑定事件/off解除绑定<ul><li>jq对象.on(“事件名称”,回调函数)</li><li>jq对象.off(“事件名称”)<ul><li>如果off方法不传递任何参数，则将组件上的所有事件全部解绑</li></ul></li></ul></li><li>事件切换：toggle<ul><li>jq对象.toggle(fn1,fn2…)<ul><li>当单击jq对象对应的组件后，会执行fn1.第二次点击会执行fn2…..</li></ul></li><li>注意：1.9版本 .toggle() 方法删除,jQuery Migrate（迁移）插件可以恢复此功能。<pre><code>&lt;script src="../js/jquery-migrate-1.0.0.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</code></pre></li></ul></li></ol><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><pre class=" language-html"><code class="language-html">广告显示、隐藏：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定时器</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>div1Show<span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>div1Hide<span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">div1Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">div1SHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">抽奖：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xiaodiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;input type="button" id="start" value = "开始">&lt;input type="button" id="stop" value = "停止"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dadiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> imgs<span class="token operator">=</span><span class="token punctuation">{</span>        src<span class="token operator">=</span><span class="token string">"1.jpg"</span><span class="token punctuation">;</span>        src<span class="token operator">=</span><span class="token string">"1.jpg"</span><span class="token punctuation">;</span>        src<span class="token operator">=</span><span class="token string">"1.jpg"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> startId<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始按钮的定时器</span>    <span class="token keyword">var</span> index<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机角标</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//刚开始，停止不可用</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//点击开始，开始不可用</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数组角标随机0-3</span>        index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置循环定时器</span>        startId<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置小相框里img标签下的src属性为随机src</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#xiaodiv"</span> img<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span>imgs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//点击停止，停止不可用</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//小相框停止——停止循环定时器</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>startId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置大相框里img标签下的src属性为小相框的src</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#dadiv"</span> img<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span>imgs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="插件：增强JQuery的功能"><a href="#插件：增强JQuery的功能" class="headerlink" title="插件：增强JQuery的功能"></a>插件：增强JQuery的功能</h3><ol><li>实现方式：<ol><li>$.fn.extend(object) <ul><li>增强通过Jquery获取的对象的功能  $(“#id”)</li></ul></li><li>$.extend(object)<ul><li>增强JQeury对象自身的功能  $/jQuery</li></ul></li></ol></li></ol><pre class=" language-html"><code class="language-html">定义jq对象的功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义了一个check方法，所有的jq对象都可以调用此方法</span>    check<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"btn_check"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type="</span>checkbox<span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>定义全局的功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个取两值之间最大数的方法</span>    max<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token punctuation">,</span><span class="token keyword">var</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">>=</span>b <span class="token operator">?</span> a<span class="token punctuation">:</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//两个方法之间用“，”连接</span>    min<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token punctuation">,</span><span class="token keyword">var</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">&lt;=</span>b <span class="token operator">?</span> a<span class="token punctuation">:</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> maxValue <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p>案例需求：<br>     1. 提供index.html页面，页面中有一个省份 下拉列表<br>     2. 当页面加载完成后 发送ajax请求，加载所有省份（使用缓存来处理优化）</p><ul><li>注意：使用redis缓存一些不经常发生变化的数据。<ul><li>数据库的数据一旦发生改变，则需要更新缓存。</li><li>数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，再次存入</li><li>在service对应的增删改方法中，将redis数据删除。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery基础</title>
      <link href="/2020/07/08/qian-duan/jquery-ji-chu/"/>
      <url>/2020/07/08/qian-duan/jquery-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="JQuery-基础"><a href="#JQuery-基础" class="headerlink" title="JQuery 基础"></a>JQuery 基础</h2><h3 id="概念：-一个JavaScript框架。简化JS开发"><a href="#概念：-一个JavaScript框架。简化JS开发" class="headerlink" title="概念： 一个JavaScript框架。简化JS开发"></a>概念： 一个JavaScript框架。简化JS开发</h3><ul><li><p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</p></li><li><p>JavaScript框架：本质上就是一些js文件，封装了js的原生代码而已</p></li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p><strong>步骤：</strong></p></li><li><p>下载JQuery</p><ul><li>目前jQuery有三个大版本：<br>  1.x：兼容ie678,使用最为广泛的，官方只做BUG维护，<pre><code>   功能不再新增。因此一般项目来说，使用1.x版本就可以了，   最终版本：1.12.4 (2016年5月20日)</code></pre>  2.x：不兼容ie678，很少有人使用，官方只做BUG维护，<pre><code>   功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，   最终版本：2.2.4 (2016年5月20日)</code></pre>  3.x：不兼容ie678，只支持最新的浏览器。除非特殊要求，<pre><code>   一般不会使用3.x版本的，很多老的jQuery插件不支持这个版本。   目前该版本是官方主要更新维护的版本。最新版本：3.2.1（2017年3月20日）</code></pre></li><li>jquery-xxx.js 与 jquery-xxx.min.js区别：<ol><li>jquery-xxx.js：开发版本。给程序员看的，有良好的缩进和注释。体积大一些</li><li>jquery-xxx.min.js：生产版本。程序中使用，没有缩进。体积小一些。程序加载更快</li></ol></li></ul></li><li><p>导入JQuery的js文件：导入min.js文件</p></li><li><p>使用：</p><p>var div1 = $(“#div1”);</p><p>alert(div1.html());</p></li></ol><h3 id="JQuery对象和JS对象区别与转换"><a href="#JQuery对象和JS对象区别与转换" class="headerlink" title="JQuery对象和JS对象区别与转换"></a>JQuery对象和JS对象区别与转换</h3><ol><li><p>JQuery对象在操作时，更加方便。</p></li><li><p><strong>JQuery对象和js对象方法不通用的.</strong></p></li><li><p><strong>两者相互转换</strong></p></li></ol><ul><li>jq – &gt; js : jq对象[索引] 或者 jq对象.get(索引)<ul><li>js – &gt; jq : $(js对象)</li></ul></li></ul><h3 id="选择器：筛选具有相似特征的元素-标签"><a href="#选择器：筛选具有相似特征的元素-标签" class="headerlink" title="选择器：筛选具有相似特征的元素(标签)"></a>选择器：筛选具有相似特征的元素(标签)</h3><ol><li>基本操作学习：</li><li><strong>事件绑定</strong></li></ol><pre><code>``` //1.获取b1按钮      $("#b1").click(function(){          alert("abc");      });```</code></pre><ol start="2"><li><p><strong>入口函数(相当于window.onload )</strong></p><pre><code>$(function(){});</code></pre><p>  window.onload  和 $(function) 区别</p><ul><li>​    window.onload 只能定义一次,如果定义多次，后边的会将前边的覆盖掉</li><li>​    $(function)可以定义多次的。</li></ul></li><li><p><strong>样式控制：css方法</strong></p><pre><code> $("#div1").css("background-color","red"); $("#div1").css("backgroundColor","pink");</code></pre></li><li><p><strong>选择器分类：</strong></p><pre><code>1. 基本选择器    1. 标签选择器（元素选择器）        * 语法： $("html标签名") 获得所有匹配标签名称的元素        * 如：$("div")    2. id选择器         * 语法： $("#id的属性值") 获得与指定id属性值匹配的元素        * 如：$("#d1")    3. 类选择器        * 语法： $(".class的属性值") 获得与指定的class属性值匹配的元素        * 如：$(".c1")    4. 并集选择器：        * 语法： $("选择器1,选择器2....") 获取多个选择器选中的所有元素        * 如：$("#d1,.c1")2. 层级选择器    1. 后代选择器        * 语法： $("A B ") 选择A元素内部的所有B元素             * 如：$("#d1 #d2")    2. 子选择器        * 语法： $("A &gt; B") 选择A元素内部的所有B子元素        * 如：$("#d1&gt;#d2")3. 属性选择器    1. 属性名称选择器         * 语法： $("A[属性名]") 包含指定属性的选择器        * 如：$("#d1[title]")    2. 属性选择器        * 语法： $("A[属性名='值']") 包含指定属性等于指定值的选择器        * 如：$("#d1[title='123']")属性值是123            $("#d1[title^='123']")属性值开头是123            $("#d1[title$='123']")属性值结尾是123            $("#d1[title*='123']")属性值包含123    3. 复合属性选择器        * 语法： $("A[属性名='值'][]...") 包含多个属性条件的选择器        * 如：$("#d1[title='123'][class]")4. 过滤选择器    1. 首元素选择器         * 语法： :first 获得选择的元素中的第一个元素        * 如：$("div:first")第一个div    2. 尾元素选择器         * 语法： :last 获得选择的元素中的最后一个元素        * 如：$("div:last")最后一个div    3. 非元素选择器        * 语法： :not(selector) 不包括指定内容的元素        * 如：$("div:not(.one))class属性值不是.one的div    4. 偶数选择器        * 语法： :even 偶数，从 0 开始计数        * 如：$("div:even")偶数的div    5. 奇数选择器        * 语法： :odd 奇数，从 0 开始计数        * 如：$("div:odd")奇数的div    6. 等于索引选择器        * 语法： :eq(index) 指定索引元素        * 如：$("div:eq(3)")第3个div    7. 大于索引选择器         * 语法： :gt(index) 大于指定索引元素        * 如：$("div:gt(3)")第3个之后的div    8. 小于索引选择器         * 语法： :lt(index) 小于指定索引元素        * 如：$("div:lt(3)")第3个之前的div    9. 标题选择器        * 语法： :header 获得标题（h1~h6）元素，固定写法        * 如：$(":header")所有标题5. 表单过滤选择器    1. 可用元素选择器         * 语法： :enabled 获得可用元素        * 如：$("input[type='text']:enabled").val("aaa")可用文本输入框，改变值为aaa    2. 不可用元素选择器         * 语法： :disabled 获得不可用元素        * 如：$("input[type='text']:disabled").val("aaa")不可用文本输入框，改变值为bbb    3. 选中选择器         * 语法： :checked 获得单选/复选框选中的元素        * 如：$("input[type='checkbox']:checked").length已选择复选框的个数    4. 选中选择器         * 语法： :selected 获得下拉框选中的元素        * 如：$("#job &gt; option:selected").length下拉框，选择复选项的个数</code></pre></li></ol><h3 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h3><ol><li><p>内容操作</p><ol><li><p>html(): 获取/设置元素的标签体内容   </p><pre><code>&lt;a&gt;&lt;font&gt;内容&lt;/font&gt;&lt;/a&gt;  如：value = $("#id").html()  &lt;font&gt;内容&lt;/font&gt;    $("#id").html("aaa")     &lt;a&gt;aaa&lt;a&gt;</code></pre></li><li><p>text(): 获取/设置元素的标签体纯文本内容   </p><pre><code>&lt;a&gt;&lt;font&gt;内容&lt;/font&gt;&lt;/a&gt; 如：value = $("#id").text()  内容    $("#id").html("aaa")     &lt;a&gt;aaa&lt;a&gt;</code></pre></li><li><p>val()： 获取/设置元素的value属性值</p><pre><code>如：value = $("#id").val();    $("#id").val("aaa")</code></pre></li></ol></li><li><p>属性操作</p><ol><li><p>通用属性操作</p><ol><li>attr(): 获取/设置元素的属性</li><li>removeAttr():删除属性</li><li>prop():获取/设置元素的属性</li><li>removeProp():删除属性</li></ol><ul><li>attr和prop区别？<ol><li>如果操作的是元素的固有属性，则建议使用prop</li><li>如果操作的是元素自定义的属性，则建议使用attr</li></ol></li></ul><pre><code>获取：classValue = $("#id").attr("class")设置：$("#id").attr("class","nihao")</code></pre></li><li><p>对class属性操作</p><ol><li><p>addClass():添加class属性值</p><pre><code>如：$("#id").addClass("haha")</code></pre></li><li><p>removeClass():删除class属性值</p><pre><code>如：$("#id").removeClass("haha")</code></pre></li><li><p>toggleClass():切换class属性</p><pre><code>toggleClass("one"): 判断如果元素对象上存在class="one"，则将属性值one删除掉。  如果元素对象上不存在class="one"，则添加</code></pre></li><li><p>css():获取/设置css属性</p><pre><code>如：color = $("#id").css("backgroundColor")获取背景颜色$("#id").css("backgroundColor","red")</code></pre></li><li><p>CRUD操作:</p><ol><li><p>append():父元素将子元素追加到末尾</p><pre><code> * 对象1.append(对象2): 将对象2添加到对象1元素内部，并且在末尾</code></pre><pre><code>&lt;a id="a"&gt;&lt;a&gt;&lt;p id="b"&gt;&lt;p&gt;$("#a").append("#b") ---&gt; &lt;a&gt;&lt;p&gt;&lt;/p&gt;&lt;/a&gt;</code></pre></li><li><p>prepend():父元素将子元素追加到开头</p><ul><li>对象1.prepend(对象2):将对象2添加到对象1元素内部，并且在开头</li></ul></li><li><p>after():添加元素到元素后边</p><ul><li>对象1.after(对象2)： 将对象2添加到对象1后边。对象1和对象2是兄弟关系</li></ul></li><li><p>before():添加元素到元素前边</p><ul><li>对象1.before(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</li></ul></li><li><p>remove():移除元素</p></li></ol></li></ol></li></ol></li></ol><ul><li>对象.remove():将对象删除掉</li></ul><ol start="6"><li>empty():清空元素的所有后代元素。<pre><code>                    * 对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点</code></pre></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><pre class=" language-html"><code class="language-html">QQ表情：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    对话框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".word"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">下拉列表左右移：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//绑定单击事件</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#toRight"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"left>option:selected"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//绑定单击事件</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#toLeft"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"right>option:selected"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">全选和全不选：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll(this)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">selectAll</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取下面的复选框，将其属性设置成</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".itemSelect"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span>obj<span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>错误：$(function() {    在这里面写就不行，因为obj是js的对象，不能调用jq的方法})</code></pre><pre class=" language-html"><code class="language-html">隔行换色：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将数据行的奇数背景颜色设置成pink</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tr:gt(1):odd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数据行的偶数背景颜色设置成yellow</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tr:gt(1):even"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html表单</title>
      <link href="/2020/07/07/qian-duan/html-biao-dan/"/>
      <url>/2020/07/07/qian-duan/html-biao-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="今日内容："><a href="#今日内容：" class="headerlink" title="今日内容："></a>今日内容：</h1><pre><code>1. HTML标签：表单标签2. CSS：</code></pre><h2 id="HTML标签：表单标签"><a href="#HTML标签：表单标签" class="headerlink" title="HTML标签：表单标签"></a>HTML标签：表单标签</h2><pre><code>* 表单：    * 概念：用于采集用户输入的数据的。用于和服务器进行交互。    * form：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围        * 属性：            * action：指定提交数据的URL            * method:指定提交方式                * 分类：一共7种，2种比较常用                   * get：                        1. 请求参数会在地址栏中显示。会封装到请求行中(HTTP协议后讲解)。                        2. 请求参数大小是有限制的。                        3. 不太安全。                   * post：                        2. 请求参数不会再地址栏中显示。会封装在请求体中(HTTP协议后讲解)                        2. 请求参数的大小没有限制。                        3. 较为安全。        * 表单项中的数据要想被提交：必须指定其name属性    * 表单项标签：        * input：可以通过type属性值，改变元素展示的样式            * type属性：                * text：文本输入框，默认值                    * placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息                    * password：密码输入框                * radio:单选框                    * 注意：                        1. 要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样。                        2. 一般会给每一个单选框提供value属性，指定其被选中后提交的值                        3. checked属性，可以指定默认值                * checkbox：复选框                    * 注意：                        1. 一般会给每一个单选框提供value属性，指定其被选中后提交的值                        2. checked属性，可以指定默认值                * file：文件选择框                * hidden：隐藏域，用于提交一些信息。                * 按钮：                    * submit：提交按钮。可以提交表单                    * button：普通按钮                    * image：图片提交按钮                        * src属性指定图片的路径    </code></pre><p>​<br>​<br>​           * label：指定输入项的文字描述信息<br>​               * 注意：<br>​                * label的for属性一般会和 input 的 id属性值 对应。如果对应了，则点击label区域，会让input输入框获取焦点。<br>​                * select: 下拉列表<br>​                * 子元素：option，指定列表项<br>​<br>        * textarea：文本域<br>            * cols：指定列数，每一行有多少个字符<br>            * rows：默认多少行。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html概述、标签</title>
      <link href="/2020/07/06/qian-duan/html/"/>
      <url>/2020/07/06/qian-duan/html/</url>
      
        <content type="html"><![CDATA[<h1 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h1><pre><code>1. web概念概述2. HTML</code></pre><h2 id="web概念概述"><a href="#web概念概述" class="headerlink" title="web概念概述"></a>web概念概述</h2><pre><code>* JavaWeb：    * 使用Java语言开发基于互联网的项目* 软件架构：    1. C/S: Client/Server 客户端/服务器端        * 在用户本地有一个客户端程序，在远程有一个服务器端程序        * 如：QQ，迅雷...        * 优点：            1. 用户体验好        * 缺点：            1. 开发、安装，部署，维护 麻烦    2. B/S: Browser/Server 浏览器/服务器端        * 只需要一个浏览器，用户通过不同的网址(URL)，客户访问不同的服务器端程序        * 优点：            1. 开发、安装，部署，维护 简单        * 缺点：            1. 如果应用过大，用户的体验可能会受到影响            2. 对硬件要求过高* B/S架构详解    * 资源分类：        1. 静态资源：            * 使用静态网页开发技术发布的资源。            * 特点：                * 所有用户访问，得到的结果是一样的。                * 如：文本，图片，音频、视频, HTML,CSS,JavaScript                * 如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源        2. 动态资源：            * 使用动态网页及时发布的资源。            * 特点：                * 所有用户访问，得到的结果可能不一样。                * 如：jsp/servlet,php,asp...                * 如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器    * 我们要学习动态资源，必须先学习静态资源！    * 静态资源：        * HTML：用于搭建基础网页，展示页面的内容        * CSS：用于美化页面，布局页面        * JavaScript：控制页面的元素，让页面有一些动态的效果</code></pre><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre><code>1. 概念：是最基础的网页开发语言    * Hyper Text Markup Language 超文本标记语言        * 超文本:            * 超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本.        * 标记语言:            * 由标签构成的语言。&lt;标签名称&gt; 如 html，xml            * 标记语言不是编程语言2. 快速入门：    * 语法：        1. html文档后缀名 .html 或者 .htm        2. 标签分为            1. 围堵标签：有开始标签和结束标签。如 &lt;html&gt; &lt;/html&gt;            2. 自闭和标签：开始标签和结束标签在一起。如 &lt;br/&gt;        3. 标签可以嵌套：            需要正确嵌套，不能你中有我，我中有你            错误：&lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;            正确：&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;        4. 在开始标签中可以定义属性。属性是由键值对构成，值需要用引号(单双都可)引起来        5. html的标签不区分大小写，但是建议使用小写。    * 代码：        &lt;html&gt;                    &lt;head&gt;                &lt;title&gt;title&lt;/title&gt;            &lt;/head&gt;                        &lt;body&gt;                &lt;FONT color='red'&gt;Hello World&lt;/font&gt;&lt;br/&gt;                                &lt;font color='green'&gt;Hello World&lt;/font&gt;                        &lt;/body&gt;            &lt;/html&gt;3. 标签学习：    1. 文件标签：构成html最基本的标签        * html:html文档的根标签        * head：头标签。用于指定html文档的一些属性。引入外部的资源        * title：标题标签。        * body：体标签        * &lt;!DOCTYPE html&gt;：html5中定义该文档是html文档    2. 文本标签：和文本有关的标签        * 注释：&lt;!-- 注释内容 --&gt;        * &lt;h1&gt; to &lt;h6&gt;：标题标签            * h1~h6:字体大小逐渐递减        * &lt;p&gt;：段落标签        * &lt;br&gt;：换行标签        * &lt;hr&gt;：展示一条水平线            * 属性：                * color：颜色                * width：宽度                * size：高度                * align：对其方式                    * center：居中                    * left：左对齐                    * right：右对齐        * &lt;b&gt;：字体加粗        * &lt;i&gt;：字体斜体        * &lt;font&gt;:字体标签        * &lt;center&gt;:文本居中            * 属性：                * color：颜色                * size：大小                * face：字体        * 属性定义：            * color：                1. 英文单词：red,green,blue                2. rgb(值1，值2，值3)：值的范围：0~255  如  rgb(0,0,255)                3. #值1值2值3：值的范围：00~FF之间。如： #FF00FF            * width：                1. 数值：width='20' ,数值的单位，默认是 px(像素)                2. 数值%：占比相对于父元素的比例    3. 图片标签：            * img：展示图片                * 属性：                    * src：指定图片的位置            * 代码：                 &lt;!--展示一张图片 img--&gt;                 &lt;img src="image/jingxuan_2.jpg" align="right" alt="古镇" width="500" height="500"/&gt;                    &lt;!--                相对路径                    * 以.开头的路径                        * ./：代表当前目录  ./image/1.jpg                        * ../:代表上一级目录             --&gt;                    &lt;img src="./image/jiangwai_1.jpg"&gt;                    &lt;img src="../image/jiangwai_1.jpg"&gt;    4. 列表标签：        * 有序列表：            * ol:            * li:        * 无序列表：            * ul:            * li:    5. 链接标签：        * a:定义一个超链接            * 属性：                * href：指定访问资源的URL(统一资源定位符)                * target：指定打开资源的方式                    * _self:默认值，在当前页面打开                    * _blank：在空白页面打开        * 代码：             &lt;!--超链接  a--&gt;            &lt;a href="http://www.itcast.cn"&gt;点我&lt;/a&gt;            &lt;br&gt;                    &lt;a href="http://www.itcast.cn" target="_self"&gt;点我&lt;/a&gt;            &lt;br&gt;            &lt;a href="http://www.itcast.cn" target="_blank"&gt;点我&lt;/a&gt;                    &lt;br&gt;                    &lt;a href="./5_列表标签.html"&gt;列表标签&lt;/a&gt;&lt;br&gt;            &lt;a href="mailto:itcast@itcast.cn"&gt;联系我们&lt;/a&gt;                    &lt;br&gt;            &lt;a href="http://www.itcast.cn"&gt;&lt;img src="image/jiangwai_1.jpg"&gt;&lt;/a&gt;    6. div和span：        * div:每一个div占满一整行。块级标签        * span：文本信息在一行展示，行内标签 内联标签    7. 语义化标签：html5中为了提高程序的可读性，提供了一些标签。        1. &lt;header&gt;：页眉        2. &lt;footer&gt;：页脚            8. 表格标签：        * table：定义表格            * width：宽度            * border：边框            * cellpadding：定义内容和单元格的距离            * cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、            * bgcolor：背景色            * align：对齐方式        * tr：定义行            * bgcolor：背景色            * align：对齐方式        * td：定义单元格            * colspan：合并列            * rowspan：合并行        * th：定义表头单元格        * &lt;caption&gt;：表格标题        * &lt;thead&gt;：表示表格的头部分        * &lt;tbody&gt;：表示表格的体部分        * &lt;tfoot&gt;：表示表格的脚部分</code></pre><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解驱动</title>
      <link href="/2020/07/05/ssm-kuang-jia/spring-zhu-jie-qu-dong/"/>
      <url>/2020/07/05/ssm-kuang-jia/spring-zhu-jie-qu-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring注解驱动"><a href="#Spring注解驱动" class="headerlink" title="Spring注解驱动"></a>Spring注解驱动</h1><h2 id="1-容器"><a href="#1-容器" class="headerlink" title="1.容器"></a>1.容器</h2><h3 id="组件添加"><a href="#组件添加" class="headerlink" title="组件添加"></a>组件添加</h3><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><p><strong>告诉Spring这是一个配置类</strong></p><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><p><strong>在配置类中注册一个Bean</strong>，</p><p>类型为返回值的类型，id默认为方法名的Id，也可以通过@Bean(“persion”)来命名id</p><h4 id="ConponentScan（”com-atguigu”）"><a href="#ConponentScan（”com-atguigu”）" class="headerlink" title="@ConponentScan（”com.atguigu”）"></a>@ConponentScan（”com.atguigu”）</h4><p><strong>加在配置类的类上，扫描包</strong></p><p>可以指定排除规则 @ConponentScan（value=”com.atguigu”,excludeFilters = { @Filter(type=FilterType.ANNOTATION,classes={Controller.class})}）：根据注解排除Controller注解</p><p>也可以指定包含规则@ConponentScan（value=”com.atguigu”,includeFilters = { @Filter(type=FilterType.ANNOTATION,classes={Controller.class})},useDefaultFilters = false）：根据注解只包含Controller注解，前提要禁用掉默认的过滤规则</p><p>也可以指定类型@ConponentScan（value=”com.atguigu”,includeFilters = { @Filter(type=FilterType.ASSIGNABLE_TYPE,classes={BookService.class})},useDefaultFilters = false）：BookService一定会包含进去</p><h4 id="Scope-“”"><a href="#Scope-“”" class="headerlink" title="@Scope(“”)"></a>@Scope(“”)</h4><p><strong>加在@bean上，指定作用范围</strong></p><p>值：prototype:多实例，singleton：单实例</p><p>多实例：在容器创建时不会被调用，获取几次就调用几次</p><p>单实例：在容器创建时被调用，获取的时候直接拿出来即可，多次调用的是一个对象</p><h4 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h4><p><strong>加在@Bean上，懒加载</strong></p><p>转对单实例对象，在容器创建时不会被调用，获取使才会被加载，并且获取的是单例对象</p><h4 id="Conditional-WindowsCondition-class"><a href="#Conditional-WindowsCondition-class" class="headerlink" title="@Conditional({WindowsCondition.class})"></a>@Conditional({WindowsCondition.class})</h4><p><strong>可以加在@bean上</strong>，根据条件判断（WindowsCondition就是一个自动的判断方法），如果返回true，则该bean会加载容器中</p><p><strong>也可以加在类上，返回为true，该类下的所有@Bean都会被加在容器中</strong></p><h4 id="Import-color-class"><a href="#Import-color-class" class="headerlink" title="@Import({color.class})"></a>@Import({color.class})</h4><p><strong>加在配置类上，快速加载组件</strong>，不需要使用无参构造器+@bean的方式</p><h4 id="Import-MyImportSelector-class"><a href="#Import-MyImportSelector-class" class="headerlink" title="@Import({MyImportSelector.class})"></a>@Import({MyImportSelector.class})</h4><p><strong>加在配置类上，加载自定义方法的返回值指定的全类名组件</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//实现方法，方法返回值就是需要导入容器中的全类名</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"com.atguigu.bean.blue"</span><span class="token punctuation">,</span><span class="token string">"com.atguigu.bean.red"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Import-MyImportBeanDefinitionRegister-class"><a href="#Import-MyImportBeanDefinitionRegister-class" class="headerlink" title="@Import({MyImportBeanDefinitionRegister.class})"></a>@Import({MyImportBeanDefinitionRegister.class})</h4><p><strong>加在配置类上，加载自定义方法中自定义的组件</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyImportBeanDefinitionRegister</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现方法，判断是否存在red组件，如果存在，就自定义创建一个rainbow组件</span>    <span class="token keyword">boolean</span> definition <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.bean.Red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>defintion<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Bean的类型</span>        RootBeanDefinition beanDefintion <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>RainBow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Bean的id，Bean的类型</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"rainbow"</span><span class="token punctuation">,</span>beanDefintion<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="FactoryBean创建组件"><a href="#FactoryBean创建组件" class="headerlink" title="FactoryBean创建组件"></a>FactoryBean创建组件</h4><p>使用@Bean的方式FactoryBean创建组件，实际上创建的是Color组件</p><pre><code>加在配置类中@Beanpublic ColorFactoryBean colorFactoryBean(){    return new ColorFactoryBean();}</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ColorFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Color<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//重写getObject：创建bean对象</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//重写getObjectType：设置对象类型</span>    <span class="token keyword">return</span> Color<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token comment" spellcheck="true">//重写isSingleton：设置是否为单例，true为单例</span>    <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></code></pre><p>如果想获取FactoryBean本身，在获取的时候前面加个&amp;</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><h5 id="1-Bean-initMethod-”init”-destoryMethod-”destory”"><a href="#1-Bean-initMethod-”init”-destoryMethod-”destory”" class="headerlink" title="1. @Bean(initMethod=”init”,destoryMethod=”destory”)"></a>1. @Bean(initMethod=”init”,destoryMethod=”destory”)</h5><p>指定生命周期方法，init和destory为自己定义的</p><p>对象创建：</p><ul><li><p>单实例：在容器启动时创建</p></li><li><p>多实例：在每次获取时创建</p></li></ul><p>初始化：</p><ul><li>对象创建完成，并赋值好，调用初始化方法</li></ul><p>销毁：</p><ul><li><p>单实例：容器关闭的时候</p></li><li><p>多实例：容器不会管理Bean，容器不会调用销毁方法</p></li></ul><h5 id="2-通过让Bean实现InitializingBean和DisposableBean接口"><a href="#2-通过让Bean实现InitializingBean和DisposableBean接口" class="headerlink" title="2. 通过让Bean实现InitializingBean和DisposableBean接口"></a>2. 通过让Bean实现InitializingBean和DisposableBean接口</h5><p>实现destory和Init方法</p><h5 id="3-PostConstruct（初始化）、-PreDestroy（容器移除对象前：销毁）"><a href="#3-PostConstruct（初始化）、-PreDestroy（容器移除对象前：销毁）" class="headerlink" title="3. @PostConstruct（初始化）、@PreDestroy（容器移除对象前：销毁）"></a>3. @PostConstruct（初始化）、@PreDestroy（容器移除对象前：销毁）</h5><p>在Bean的init方法和destory方法中，加上以上两个注解</p><h5 id="4-后置处理器BeanPostProcessor（类似监听器）"><a href="#4-后置处理器BeanPostProcessor（类似监听器）" class="headerlink" title="4. 后置处理器BeanPostProcessor（类似监听器）"></a>4. 后置处理器BeanPostProcessor（类似监听器）</h5><p>写一个后置处理器，实现BeanPostProcessor，</p><p>实现两个方法：</p><p>postProcessBeforeInitialization：初始化前调用</p><p>postProcessAfterInit ialization：初始化后调用</p><h3 id="组件赋值"><a href="#组件赋值" class="headerlink" title="组件赋值"></a>组件赋值</h3><h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><p><strong>在Bean的属性上赋值</strong></p><p>1.基本数值</p><p>2.可以写SpEL #{ }</p><p>3.可以写${ }，取出配置文件中的值，前提要有@PropertySource加载配置文件</p><h4 id="PropertySource（-“classpath-person-properties”-）"><a href="#PropertySource（-“classpath-person-properties”-）" class="headerlink" title="@PropertySource（{“classpath:/person.properties”}）"></a>@PropertySource（{“classpath:/person.properties”}）</h4><p><strong>加在配置类上，读取外部配置文件中保存的k/v</strong></p><h3 id="自动装配（注入）"><a href="#自动装配（注入）" class="headerlink" title="自动装配（注入）"></a>自动装配（注入）</h3><h4 id="Autowired-，Spring定义的"><a href="#Autowired-，Spring定义的" class="headerlink" title="@Autowired             ，Spring定义的"></a>@Autowired             ，Spring定义的</h4><p><strong>加在属性上，自动装配</strong></p><p>1.默认优先按照类型去容器中找对应组件</p><p>2.如果找到多个相同类型的组件，再将属性名称作为容器的id在容器中查找</p><p>3.@Qualifier（”bookDao”），指定需要装配的id，而不是使用属性名</p><p>4.自动装配默认一定要将属性赋值好，没有找到相应组件就会报错</p><p>​    可以使用@Autowired（required=false），没有装配也不会报错</p><p>5.@Primary，在没有明确指定时，这个注解是首选装配，忽略属性名</p><p><strong>还可以加在有参构造器、参数、方法上，都是从容器中拿到并自动装配，如果只有一个参数，可以省略@Autowired</strong></p><h4 id="Resource-name-””-JSR250，Java规范的注解"><a href="#Resource-name-””-JSR250，Java规范的注解" class="headerlink" title="@Resource(name=””) JSR250，Java规范的注解"></a>@Resource(name=””) JSR250，Java规范的注解</h4><p>可以和@Autowried一样实现自动装配功能，默认按照组件名称装配</p><p>不支持@Primary，@Autowired（required=false）功能</p><h4 id="Inject-JSR330，Java规范的注解"><a href="#Inject-JSR330，Java规范的注解" class="headerlink" title="@Inject JSR330，Java规范的注解"></a>@Inject JSR330，Java规范的注解</h4><p>需要导入javax.inject的包，和Autowired的功能一样</p><h4 id="xxxAware"><a href="#xxxAware" class="headerlink" title="xxxAware"></a>xxxAware</h4><p>自定义组件实现XXXAware，在创建对象的时候，会调用接口规定的方法注入相关组件</p><p>把Spring底层的一些组件注入到自定义的Bean中</p><h4 id="Profile（””）"><a href="#Profile（””）" class="headerlink" title="@Profile（””）"></a>@Profile（””）</h4><p><strong>加在@Bean上，根据环境注册Bean</strong></p><p>1.使用命令行动态参数：在虚拟机参数位置加载 -Dspring.profiles.active=test</p><p>2.代码的方式激活某种环境</p><p>（1）创建一个applicationContext </p><p>（2）设置需要激活的环境，applicationContext.getEnvironment().setActiveProfiles(“test”,”dev”)</p><p>（3）注册主配置类，applicationContext.register(MainConfigOfProfile.class)</p><p>（4）启动刷新容器，applicationContext.refresh()</p><p><strong>加在配置类上，只有是该指定的环境，整个配置类才会起作用</strong></p><p><strong>没有标注环境标识的Bean，在任何环境下都是加载的</strong></p>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot与数据访问</title>
      <link href="/2020/07/02/springboot/springboot-yu-shu-ju-fang-wen/"/>
      <url>/2020/07/02/springboot/springboot-yu-shu-ju-fang-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot与数据访问"><a href="#SpringBoot与数据访问" class="headerlink" title="SpringBoot与数据访问"></a>SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><p>创建项目时加上jdbc、mysql模块</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>主配置文件中设置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.15.22<span class="token punctuation">:</span>3306/jdbc    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver</code></pre><p>效果：</p><p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；（新版2.3.3默认用的是hikari数据源）</p><p>​    数据源的相关配置都在DataSourceProperties里面；</p><p>自动配置原理：</p><p>org.springframework.boot.autoconfigure.jdbc：</p><p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p><p>2、SpringBoot默认可以支持；</p><pre><code>org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</code></pre><p>3、自定义数据源类型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Generic DataSource configuration. */</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.datasource.type"</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span>DataSourceProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span>      <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p><p>​    作用：</p><p>​        1）、runSchemaScripts();运行建表语句；</p><p>​        2）、runDataScripts();运行插入数据的sql语句；</p><p>默认只需要将文件命名为：</p><pre class=" language-properties"><code class="language-properties">schema-*.sql、data-*.sql默认规则：schema.sql，schema-all.sql；<span class="token attr-name">可以使用</span> <span class="token attr-value">  </span><span class="token attr-name">    schema</span><span class="token punctuation">:</span><span class="token attr-name">      -</span> <span class="token attr-value">classpath:department.sql</span>      指定位置</code></pre><p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p><h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><ol><li><p>导入druid数据源依赖</p></li><li><p>编写配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">1234</span><span class="token comment" spellcheck="true">#切换默认数据源</span><span class="token attr-name">spring.datasource.type</span><span class="token punctuation">=</span><span class="token attr-value">com.alibaba.druid.pool.DruidDataSource</span></code></pre></li><li><p>如果想配置druid的属性，在配置文件中设定，之后在自己写的config中注册bean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">druid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="4"><li>如果想设置durid后台，增加servlet、filter</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">druid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置Druid的监控</span>    <span class="token comment" spellcheck="true">//1、配置一个管理后台的Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认就是允许所有访问</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"deny"</span><span class="token punctuation">,</span><span class="token string">"192.168.15.21"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2、配置一个web监控的filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180305194443.png"></p><p>步骤：</p><p>​    1）、配置数据源相关属性（见上一节Druid）+主配置文件配置数据源和druid相关属性</p><p>​    2）、给数据库建表（用schema）</p><blockquote><p>用schema遇到的坑：</p><p>错误：表创建不出来</p><p>改为：在yml中加上 initialization-mode: always</p><p>错误：Failed to bind properties under ‘spring.datasource’ to javax.sql.DataSource:</p><p>原因：少了log4j的相关依赖</p><p>改为：</p><pre><code>&lt;dependency&gt;            &lt;groupId&gt;log4j&lt;/groupId&gt;            &lt;artifactId&gt;log4j&lt;/artifactId&gt;            &lt;version&gt;1.2.17&lt;/version&gt;        &lt;/dependency&gt;</code></pre><p> 再把yml配置文件中的driver改为：com.mysql.cj.jdbc.Driver</p><p>错误：log4j:WARN No appenders could be found for logger (druid.sql.Connection)</p><p>原因：日志配置</p><p>解决：<a href="https://blog.csdn.net/weixin_43759352/article/details/104298332">https://blog.csdn.net/weixin_43759352/article/details/104298332</a></p></blockquote><p>​    3）、创建JavaBean</p><h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定这是一个操作数据库的mapper</span><span class="token comment" spellcheck="true">//@Mapper和@Repository的区别</span><span class="token comment" spellcheck="true">//@Repository需要在Spring中配置扫描地址，然后生成Dao层的Bean才能被注入到Service层中。</span><span class="token comment" spellcheck="true">//@Mapper不需要配置扫描地址，通过xml里面的namespace里面的接口地址，生成了Bean后注入到Service层中。</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DepartmentMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from department where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Department <span class="token function">getDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from department where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获得自增主键</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into department(departmentName) values(#{departmentName})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update department set departmentName=#{departmentName} where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>遇到的坑：</p><p>错误：编写完controller层，查询不到数据</p><p>原因：查询的是@GetMapping(“/dept/{id}”)，访问时不能用localhost:8080/dept?id=1</p><p>改为：localhost:8080/dept/1</p></blockquote><p>问题：当数据库列名修改为驼峰命名后，数据封装不上</p><p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConfigurationCustomizer <span class="token function">configurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>Configuration configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//开启驼峰命名法</span>                configuration<span class="token punctuation">.</span><span class="token function">setMapUnderscoreToCamelCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">使用MapperScan批量扫描所有的Mapper接口；<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.atguigu.springboot.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBoot06DataMybatisApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBoot06DataMybatisApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml 指定全局配置文件的位置  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml  指定sql映射文件的位置</code></pre><p>其他操作都是一样的，@MapperScan只需要配置一次，注解和配置方法都可以使用</p><p>更多使用参照</p><p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2020/07/01/linux/docker/"/>
      <url>/2020/07/01/linux/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145531.png" alt="docker1"></p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/docker2.png" alt="docker2"></p><p>使用Docker的步骤：</p><p>1）、安装Docker</p><p>2）、去Docker仓库找到这个软件对应的镜像；</p><p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p><p>4）、对容器的启动停止就是对软件的启动停止；</p><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p><p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p><p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p><p>​    4）、使用客户端连接linux服务器进行命令操作；</p><p>​    5）、设置虚拟机网络；</p><p>​        桥接网络===选好网卡====接入网线；</p><p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p><pre class=" language-shell"><code class="language-shell">service network restart</code></pre><p>​    7）、查看linux的ip地址</p><pre class=" language-shell"><code class="language-shell">ip addr</code></pre><p>​    8）、使用客户端连接linux；</p><h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p><pre class=" language-shell"><code class="language-shell">1、检查内核版本，必须是3.10及以上uname -r2、安装dockeryum install docker3、输入y确认安装4、启动docker[root@localhost ~]# systemctl start docker[root@localhost ~]# docker -vDocker version 1.12.6, build 3e8e77d/1.12.65、开机启动docker[root@localhost ~]# systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.6、停止dockersystemctl stop docker</code></pre><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker  search 关键字  eg：docker  search redis</td><td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p><p>步骤：</p><pre class=" language-shell"><code class="language-shell">1、搜索镜像[root@localhost ~]# docker search tomcat2、拉取镜像[root@localhost ~]# docker pull tomcat3、根据镜像启动容器docker run --name mytomcat -d tomcat:latest4、docker ps  查看运行中的容器5、 停止运行中的容器docker stop  容器的id6、查看所有的容器docker ps -a7、启动容器docker start 容器id8、删除一个容器 docker rm 容器id9、启动一个做了端口映射的tomcat[root@localhost ~]# docker run -d -p 8888:8080 tomcat-d：后台运行-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口10、为了演示简单关闭了linux的防火墙service firewalld status ；查看防火墙状态service firewalld stop：关闭防火墙11、查看容器的日志docker logs container-name/container-id更多命令参看https://docs.docker.com/engine/reference/commandline/docker/可以参考每一个镜像的文档TYPE=EthernetBOOTPROTO=static#配置静态IP，网关，子网掩码IPADDR=192.168.179.0NETMASK=255.255.255.0GATEWAY=192.168.179.2NM_CONTROLLED=no</code></pre><blockquote><p>遇到的坑：</p><p>错误：404</p><p>原因：下载的tomcat镜像版本不对</p><p>改为：下载tomcat:8.0.35版本</p><p>错误：重启虚拟机后，ip发生改变，导致crt和mysql无法连接</p><p>原因：应该是网络没有开启，需要配置Ip之后重启网络即可</p><p>方法：<a href="https://blog.csdn.net/delight_sl/article/details/91358832">https://blog.csdn.net/delight_sl/article/details/91358832</a></p></blockquote><h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><pre><code>docker pull mysql</code></pre><p>错误的启动</p><pre><code>[root@localhost ~]# docker run --name mysql01 -d mysql42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846mysql退出了[root@localhost ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01538bde63e500        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       compassionate_goldstinec4f1ac60b3fc        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi81ec743a5271        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan//错误日志[root@localhost ~]# docker logs 42f09819908berror: database is uninitialized and password option is not specified   You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</code></pre><p>错误的启动</p><pre><code>[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESb874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</code></pre><p>正确的启动：做了端口映射</p><pre><code>[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.5ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMESad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</code></pre><blockquote><p>遇到的坑：</p><p>错误：Error response from daemon: driver failed programming external connectivity on</p><p>原因：docker服务启动时定义的自定义链DOCKER由于某种原因被清掉</p><p>解决：重启docker服务器后再启动容器</p></blockquote><p>几个其他的高级操作</p><pre><code>docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci指定mysql的一些配置参数</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>修改运行中的容器端口</p><p><a href="https://www.cnblogs.com/shijf/p/10386193.html">https://www.cnblogs.com/shijf/p/10386193.html</a></p><p>修改容器中host</p><p><code>docker run -d -p 8000:8000 --add-host=blade-report:127.0.0.1 799382</code></p><ol><li>–add-host=host名:IP</li><li>799382是镜像id</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot web开发</title>
      <link href="/2020/06/26/springboot/spring-boot-web-kai-fa/"/>
      <url>/2020/06/26/springboot/spring-boot-web-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot；</p><p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码；</strong></p><p><strong>自动配置原理？</strong></p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p><pre><code>xxxxAutoConfiguration：帮我们给容器中自动配置组件；xxxxProperties:配置类来封装配置文件的内容；</code></pre><h2 id="2、SpringBoot对静态资源的映射规则"><a href="#2、SpringBoot对静态资源的映射规则" class="headerlink" title="2、SpringBoot对静态资源的映射规则"></a>2、SpringBoot对静态资源的映射规则</h2><pre class=" language-java"><code class="language-java">    WebMvcAuotConfiguration：        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Integer cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCachePeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>                                        <span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token operator">/</span><span class="token operator">/</span>静态资源文件夹映射            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>                                        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">/</span>配置欢迎页映射        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> WelcomePageHandlerMapping <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span>                ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token operator">/</span><span class="token operator">/</span>配置喜欢的图标        <span class="token annotation punctuation">@Configuration</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"spring.mvc.favicon.enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FaviconConfiguration</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">final</span> ResourceProperties resourceProperties<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">FaviconConfiguration</span><span class="token punctuation">(</span>ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> resourceProperties<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Bean</span>            <span class="token keyword">public</span> SimpleUrlHandlerMapping <span class="token function">faviconHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SimpleUrlHandlerMapping mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleUrlHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mapping<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token operator">/</span><span class="token operator">/</span>所有  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>favicon<span class="token punctuation">.</span>ico                 mapping<span class="token punctuation">.</span><span class="token function">setUrlMap</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"**/favicon.ico"</span><span class="token punctuation">,</span>                        <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> mapping<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Bean</span>            <span class="token keyword">public</span> ResourceHttpRequestHandler <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ResourceHttpRequestHandler requestHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                requestHandler                        <span class="token punctuation">.</span><span class="token function">setLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getFaviconLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> requestHandler<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p><p>​    webjars：以jar包的方式引入静态资源；<a href="http://www.webjars.org/">http://www.webjars.org/</a></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbweb1.png" alt="sbweb1"></p><p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入jquery-webjar--></span>在访问的时候只需要写webjars下面资源的名称即可        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p><pre><code>"classpath:/META-INF/resources/", "classpath:/resources/","classpath:/static/", "classpath:/public/" "/"：当前项目的根路径</code></pre><p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p><p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p><p>​    localhost:8080/   找index页面</p><p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p><p>想修改静态资源文件夹的位置：<code>spring.resources.static-locations=classpath:/hello/</code></p><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbweb2.png" alt="sbweb2"></p><p>SpringBoot推荐的Thymeleaf；</p><h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              2.1.6        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>切换thymeleaf版本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf.version</span><span class="token punctuation">></span></span>3.0.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf.version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --></span>        <span class="token comment" spellcheck="true">&lt;!-- thymeleaf2   layout1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_ENCODING <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MimeType DEFAULT_CONTENT_TYPE <span class="token operator">=</span> MimeType<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//</span></code></pre><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>2、使用thymeleaf语法；</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>成功！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--th:text 将div里面的文本内容设置为 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是显示欢迎信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p><p>​    th：任意html属性；来替换原生属性的值</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbweb3.png" alt="sbweb3"></p><p>th:each语法：<code>&lt;span th:each="user:${users}"&gt;[[user]]&lt;/span&gt;</code></p><p>2）、表达式</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">Simple</span> <span class="token attr-value">expressions:（表达式语法）</span><span class="token attr-name">    Variable</span> <span class="token attr-value">Expressions: ${...}：获取变量值；OGNL；</span>            1）、获取对象的属性、调用方法            2）、使用内置的基本对象：<span class="token comment" spellcheck="true">                #ctx : the context object.上下文</span><span class="token comment" spellcheck="true">                #vars: the context variables.</span><span class="token comment" spellcheck="true">                #locale : 区域对象</span><span class="token comment" spellcheck="true">                #内置对象</span><span class="token comment" spellcheck="true">                #request : (only in Web Contexts)</span><span class="token comment" spellcheck="true">                #response : (only in Web Contexts) </span><span class="token comment" spellcheck="true">                #session : (only in Web Contexts) </span><span class="token comment" spellcheck="true">                #servletContext : (only in Web Contexts) </span>                                ${session.foo}            3）、内置的一些工具对象：<span class="token comment" spellcheck="true">#execInfo : information about the template being processed.</span><span class="token comment" spellcheck="true">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #{…} syntax.</span><span class="token comment" spellcheck="true">#uris : methods for escaping parts of URLs/URIs</span><span class="token comment" spellcheck="true">#conversions : methods for executing the configured conversion service (if any).</span><span class="token comment" spellcheck="true">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><span class="token comment" spellcheck="true">#calendars : analogous to #dates , but for java.util.Calendar objects.</span><span class="token comment" spellcheck="true">#numbers : methods for formatting numeric objects.</span><span class="token comment" spellcheck="true">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><span class="token comment" spellcheck="true">#objects : methods for objects in general.</span><span class="token comment" spellcheck="true">#bools : methods for boolean evaluation.</span><span class="token comment" spellcheck="true">#arrays : methods for arrays.</span><span class="token comment" spellcheck="true">#lists : methods for lists.</span><span class="token comment" spellcheck="true">#sets : methods for sets.</span><span class="token comment" spellcheck="true">#maps : methods for maps.</span><span class="token comment" spellcheck="true">#aggregates : methods for creating aggregates on arrays or collections.</span><span class="token comment" spellcheck="true">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><span class="token attr-name">    Selection</span> <span class="token attr-value">Variable Expressions: *{...}：选择表达式：和${}在功能上是一样；只是配合${}使用的</span>    <span class="token attr-name">        补充：配合</span> <span class="token attr-value">th:object="${session.user}：</span><span class="token attr-name">               &lt;div</span> <span class="token attr-value">th:object="${session.user}"></span><span class="token attr-name">                    &lt;p>Name</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*{firstName}">Sebastian&lt;/span>.&lt;/p></span><span class="token attr-name">                    &lt;p>Surname</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*{lastName}">Pepper&lt;/span>.&lt;/p></span><span class="token attr-name">                    &lt;p>Nationality</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*{nationality}">Saturn&lt;/span>.&lt;/p></span>                &lt;/div>    <span class="token attr-name">    Message</span> <span class="token attr-value">Expressions: #{...}：获取国际化内容</span><span class="token attr-name">    Link</span> <span class="token attr-value">URL Expressions: @{...}：定义URL； </span><span class="token attr-name">            @{/order/process(execId</span><span class="token punctuation">=</span><span class="token attr-value">${execId},execType='FAST')}</span><span class="token attr-name">    Fragment</span> <span class="token attr-value">Expressions: ~{...}：片段引用表达式</span><span class="token attr-name">            &lt;div</span> <span class="token attr-value">th:insert="~{commons :: main}">...&lt;/div></span>            Literals（字面量）<span class="token attr-name">      Text</span> <span class="token attr-value">literals: 'one text' , 'Another one!' ,…</span><span class="token attr-name">      Number</span> <span class="token attr-value">literals: 0 , 34 , 3.0 , 12.3 ,…</span><span class="token attr-name">      Boolean</span> <span class="token attr-value">literals: true , false</span><span class="token attr-name">      Null</span> <span class="token attr-value">literal: null</span><span class="token attr-name">      Literal</span> <span class="token attr-value">tokens: one , sometext , main ,…</span><span class="token attr-name">Text</span> <span class="token attr-value">operations:（文本操作）</span><span class="token attr-name">    String</span> <span class="token attr-value">concatenation: +</span><span class="token attr-name">    Literal</span> <span class="token attr-value">substitutions: |The name is ${name}|</span><span class="token attr-name">Arithmetic</span> <span class="token attr-value">operations:（数学运算）</span><span class="token attr-name">    Binary</span> <span class="token attr-value">operators: + , - , * , / , %</span><span class="token attr-name">    Minus</span> <span class="token attr-value">sign (unary operator): -</span><span class="token attr-name">Boolean</span> <span class="token attr-value">operations:（布尔运算）</span><span class="token attr-name">    Binary</span> <span class="token attr-value">operators: and , or</span><span class="token attr-name">    Boolean</span> <span class="token attr-value">negation (unary operator): ! , not</span><span class="token attr-name">Comparisons</span> <span class="token attr-value">and equality:（比较运算）</span><span class="token attr-name">    Comparators</span><span class="token punctuation">:</span> <span class="token attr-value">> , &lt; , >= , &lt;= ( gt , lt , ge , le )</span><span class="token attr-name">    Equality</span> <span class="token attr-value">operators: == , != ( eq , ne )</span><span class="token attr-name">Conditional</span> <span class="token attr-value">operators:条件运算（三元运算符）</span><span class="token attr-name">    If-then</span><span class="token punctuation">:</span> <span class="token attr-value">(if) ? (then)</span><span class="token attr-name">    If-then-else</span><span class="token punctuation">:</span> <span class="token attr-value">(if) ? (then) : (else)</span><span class="token attr-name">    Default</span><span class="token punctuation">:</span> <span class="token attr-value">(value) ?: (defaultvalue)</span><span class="token attr-name">Special</span> <span class="token attr-value">tokens:</span><span class="token attr-name">    No-Operation</span><span class="token punctuation">:</span> <span class="token attr-value">_ </span></code></pre><h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p></li></ul><ul><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul><p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p></li><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p></li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p></li></ul><h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><p><strong>==编写一个配置类（@Configuration），实现WebMvcConfigurer接口<del>继承WebMvcConfigurerAdapter</del>；不能标注@EnableWebMvc，重写里面的add方法来自定义组件==</strong></p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span>  <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>原理：</p><p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EnableWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> WebMvcConfigurerComposite configurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//从容器中获取所有的WebMvcConfigurer</span>      <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConfigurers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>WebMvcConfigurer<span class="token operator">></span> configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>configurers<span class="token punctuation">.</span><span class="token function">addWebMvcConfigurers</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span>                <span class="token annotation punctuation">@Override</span>             <span class="token comment" spellcheck="true">// public void addViewControllers(ViewControllerRegistry registry) {</span>              <span class="token comment" spellcheck="true">//    for (WebMvcConfigurer delegate : this.delegates) {</span>               <span class="token comment" spellcheck="true">//       delegate.addViewControllers(registry);</span>               <span class="token comment" spellcheck="true">//   }</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​    4）、我们的配置类也会被调用；</p><p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）、@EnableWebMvc的核心</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>DelegatingWebMvcConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token punctuation">{</span></code></pre><p>2）、</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span></code></pre><p>3）、</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        WebMvcConfigurerAdapter<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//容器中没有这个组件的时候，这个自动配置类才生效</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>WebMvcConfigurationSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DispatcherServletAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ValidationAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span></code></pre><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p><h2 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token comment" spellcheck="true">//@EnableWebMvc   不要接管SpringMVC</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//将组件注册在容器</span>    <span class="token keyword">public</span> WebMvcConfigurerAdapter <span class="token function">webMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        WebMvcConfigurerAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p><p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p><p>3）、在页面使用fmt:message取出国际化内容</p><p>步骤：</p><p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbweb11.png" alt="image-20200627180810368"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbweb12.png" alt="image-20200627180856525"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sbweb13.png" alt="image-20200627181119740"></p><p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.messages"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSourceAutoConfiguration</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String basename <span class="token operator">=</span> <span class="token string">"messages"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//我们的配置文件可以直接放在类路径下叫messages.properties；</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MessageSource <span class="token function">messageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResourceBundleMessageSource messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置国际化资源文件的基础名（去掉语言国家代码的）</span>            messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>                    StringUtils<span class="token punctuation">.</span><span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoding <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoding<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageSource<span class="token punctuation">.</span><span class="token function">setFallbackToSystemLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fallbackToSystemLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setCacheSeconds</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setAlwaysUseMessageFormat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>alwaysUseMessageFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> messageSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>只需要在主配置文件中设置配置文件的路径</p><pre><code>spring.messages.basename==i18n.login</code></pre><p>3）、去页面获取国际化的值</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Signin Template for Bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Bootstrap core CSS --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/webjars/bootstrap/4.0.0/css/bootstrap.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Custom styles for this template --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/signin.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/asserts/css/signin.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dashboard.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mb-4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/asserts/img/bootstrap-solid.svg}<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/img/bootstrap-solid.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h3 mb-3 font-weight-normal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.tip}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> [[#{login.remember}]]        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.btn}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-5 mb-3 text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>© 2017-2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>效果：根据浏览器语言设置的信息切换了国际化；</p><blockquote><p>遇到的坑:</p><p>错误：出现??login.tip_zh_CN??乱码</p><p>原因：在主配置文件中设置成了spring.messages.basename=i18n</p><p>改为：spring.messages.basename=i18n.login</p></blockquote><p>原理：</p><p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"locale"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties                    <span class="token punctuation">.</span><span class="token function">getLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> WebMvcProperties<span class="token punctuation">.</span>LocaleResolver<span class="token punctuation">.</span>FIXED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FixedLocaleResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            AcceptHeaderLocaleResolver localeResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcceptHeaderLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            localeResolver<span class="token punctuation">.</span><span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> localeResolver<span class="token punctuation">;</span>        <span class="token punctuation">}</span>默认的就是根据请求头带来的区域信息获取Locale进行国际化</code></pre><p>4）、点击链接切换国际化</p><p>在连接上携带区域信息</p><pre class=" language-html"><code class="language-html">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(l<span class="token punctuation">=</span><span class="token punctuation">'</span>zh_CN<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/index.html(l<span class="token punctuation">=</span><span class="token punctuation">'</span>en_US<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>自己写区域信息对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 可以在连接上携带区域信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String l <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Locale locale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> locale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在扩展mvc配置类中将自己写的区域信息对象交给spring容器</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>遇到的坑：</p><p>错误：点击了却没有效果</p><p>原因1：在mvc的配置类MyMvcConfig中没有加@Configuration注解</p><p>改为：在配置类上标记注解@Configuration，表示这是一个配置类</p><p>原因2：将区域信息对象交给Spring容器时，方法名必须是localeResolver，区分大小写</p></blockquote><h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>登录界面传参，发送请求</p><p>编写controller获取请求，进行判断后重定向到后台页面</p><p>编写错误提示信息</p><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）、禁用模板引擎的缓存</p><pre><code># 禁用缓存spring.thymeleaf.cache=false </code></pre><p>2）、页面修改完成以后ctrl+f9：重新编译；</p><p>登陆错误消息的显示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not #strings.isEmpty(msg)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 登陆检查， */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//目标方法执行之前</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Object user <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//未登陆，返回登陆页面</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"没有权限请先登陆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//已登陆，放行请求</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注册拦截器</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//将组件注册在容器</span>    <span class="token keyword">public</span> WebMvcConfigurerAdapter <span class="token function">webMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        WebMvcConfigurerAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/main.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"dashboard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//注册拦截器</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//super.addInterceptors(registry);</span>                <span class="token comment" spellcheck="true">//静态资源；  *.css , *.js</span>                <span class="token comment" spellcheck="true">//SpringBoot已经做好了静态资源映射</span>                registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginHandlerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>修改后台页面的值，[[${session.loginUser}]]</p><blockquote><p>遇到的坑：</p><p>错误：500</p><p>原因：修改后台值的时候，多写了个大括号</p></blockquote><h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>点击员工列表，进入员工页面，设置href属性</p><p>编写controller，连接dao，查询员工信息</p><p>实验要求：</p><p>1）、RestfulCRUD：CRUD满足Rest风格；</p><p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—DELETE</td></tr></tbody></table><p>2）、实验的请求架构;</p><table><thead><tr><th>实验功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工(来到修改页面)</td><td>emp/1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp/1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp/1</td><td>DELETE</td></tr></tbody></table><blockquote><p>遇到的坑：</p><p>错误：进入list员工页面丢失了样式</p><p>原因：list页面的css没有换成themelf</p><p>改为：<code>th:href="@{/webjars/bootstrap/4.0.0/css/bootstrap.css}"</code></p></blockquote><p>3）、员工列表：</p><h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><pre class=" language-html"><code class="language-html">1、抽取公共片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>2、引入公共片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{footer :: copy}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>~{templatename::selector}：模板名::选择器~{templatename::fragmentname}:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~{}：行内写法可以加上：[[~{}]];[(~{})]；</code></pre><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>引入方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>高亮：引入片段的时候传入参数</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-2 d-none d-md-block bg-light sidebar<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar-sticky<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav flex-column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-link active<span class="token punctuation">"</span></span>                   <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${activeUri<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>main.html<span class="token punctuation">'</span>?<span class="token punctuation">'</span>nav-link active<span class="token punctuation">'</span>:<span class="token punctuation">'</span>nav-link<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span>                   <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/main.html}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 24 24<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-linecap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-linejoin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feather feather-home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polyline</span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9 22 9 12 15 12 15 22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>polyline</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>                    Dashboard <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(current)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入侧边栏;传入参数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commons/bar::#sidebar(activeUri<span class="token punctuation">=</span><span class="token punctuation">'</span>emps<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><blockquote><p>遇到的坑:</p><p>错误：点击没有出现高亮效果</p><p>原因：传值放在了topBar上</p><p>改为：将传值放在sideBar上</p></blockquote><p>员工信息列表显示</p><p>```html</p>    <!--emps是controller中Dao查询到的值-->                    [[${emp.lastName}]]                                <!--日期格式可以使用工具类进行修改-->        ]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot日志</title>
      <link href="/2020/06/26/springboot/spring-boot-ri-zhi/"/>
      <url>/2020/06/26/springboot/spring-boot-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p><strong>市面上的日志框架；</strong></p><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td><td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：  SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；</p><p>​    <strong>==SpringBoot选用 SLF4j和logback；==</strong></p><h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org/">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>给系统里面导入slf4j的jar和  logback的实现jar</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sblog1.png" alt="sblog1">每一个日志的实现框架都有自己的配置文件。使用slf4j以后，配置文件还是做成日志<strong>实现框架自己本身的配置文件；</strong></p><h3 id="2、遗留问题（多个框架不同日志文件的处理办法）"><a href="#2、遗留问题（多个框架不同日志文件的处理办法）" class="headerlink" title="2、遗留问题（多个框架不同日志文件的处理办法）"></a>2、遗留问题（多个框架不同日志文件的处理办法）</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sblog2.png" alt="sblog2"></p><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>==1、将系统中其他日志框架先排除出去；==</p><p>==2、用中间包来替换原有的日志框架；==</p><p>==3、我们导入slf4j其他的实现==</p><h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot使用它来做日志功能；</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>底层依赖关系</p><p>右键pom.xml空白处，Diagrams,show Dependencies</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sblog3.png" alt="sblog3"></p><p>总结：</p><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p><p>​    3）、中间替换包？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LogFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J <span class="token operator">=</span> <span class="token string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实际上用的是slf4j的日志工厂</span>    <span class="token keyword">static</span> LogFactory logFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SLF4JLogFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sblog4.png" alt="sblog4"></p><p>4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉</p><p>​            Spring框架用的是commons-logging的排除方法；</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p><h2 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//记录器</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//System.out.println();</span>        <span class="token comment" spellcheck="true">//日志的级别；</span>        <span class="token comment" spellcheck="true">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span>        <span class="token comment" spellcheck="true">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"这是trace日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"这是debug日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这是info日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"这是warn日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"这是error日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>SpringBoot修改日志的默认配置(可以在总配置文件中设置)</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">logging.level.com.atguigu</span><span class="token punctuation">=</span><span class="token attr-value">trace</span><span class="token comment" spellcheck="true">#logging.file.path=</span><span class="token comment" spellcheck="true"># 不指定路径在当前项目下生成springboot.log日志</span><span class="token comment" spellcheck="true"># 可以指定完整的路径；</span><span class="token comment" spellcheck="true">#logging.file.name=G:/springboot.log</span><span class="token comment" spellcheck="true"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用&amp;nbsp;spring.log 作为默认文件</span><span class="token attr-name">logging.file.path</span><span class="token punctuation">=</span><span class="token attr-value">/spring/log</span><span class="token comment" spellcheck="true">#  在控制台输出的日志的格式</span><span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value">%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n</span><span class="token comment" spellcheck="true"># 指定文件中日志输出的格式</span><span class="token attr-name">logging.pattern.file</span><span class="token punctuation">=</span><span class="token attr-value">%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n</span></code></pre><pre><code>日志输出格式：    %d表示日期时间，    %thread表示线程名，    %-5level：级别从左显示5个字符宽度    %logger{50} 表示logger名字最长50个字符，否则按照句点分割。     %msg：日志消息，    %n是换行符--&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到本地磁盘指定目录的 spring.log 文件中</td></tr></tbody></table><blockquote><p>现在都用logging.file.name即可</p><pre class=" language-yml"><code class="language-yml">logging.file.name: log/log1.log# 在当前项目下的Log文件夹中</code></pre></blockquote><h3 id="2、指定配置-用自己的日志框架"><a href="#2、指定配置-用自己的日志框架" class="headerlink" title="2、指定配置(用自己的日志框架)"></a>2、指定配置(用自己的日志框架)</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他的默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>staging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- configuration to be enabled when the "staging" profile is active --></span>      可以指定某段配置只在某个环境下生效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span></code></pre><p>如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        日志输出格式：            %d表示日期时间，            %thread表示线程名，            %-5level：级别从左显示5个字符宽度            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。             %msg：日志消息，            %n是换行符        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误,因为不支持高级功能</p><p> <code>no applicable action for [springProfile]</code></p><h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；（排除掉logback，log4j-logback，增加logback-Log4j）</p><p>可以在依赖图中，选中依赖右键排除</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>切换为log4j2的方式；（排除掉spring-boot-starter-logging，增加spring-boot-starter-log4j2）</p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot配置文件</title>
      <link href="/2020/06/24/springboot/spring-boot-pei-zhi-wen-jian/"/>
      <url>/2020/06/24/springboot/spring-boot-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><p>•application.properties</p><p>•application.yml</p><p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p><p>标记语言：</p><p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p><p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p><h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><p>属性和值也是大小写敏感；</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /hello</code></pre><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span>        <span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan        <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">20</span></code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre><h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> cat <span class="token punctuation">-</span> dog <span class="token punctuation">-</span> pig</code></pre><p>行内写法</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token key atrule">lastName</span><span class="token punctuation">:</span> hello    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2017/12/12    <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span>    <span class="token key atrule">lists</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> lisi      <span class="token punctuation">-</span> zhaoliu    <span class="token key atrule">dog</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> 小狗      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span></code></pre><p>javaBean</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将配置文件中配置的每一个属性的值，映射到这个组件中 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射 * * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； * */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span></code></pre><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/sb2-1.png" alt="spring Boot2-1"></p><h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL 表达式#{ }</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * &lt;bean class="Person">     *      &lt;property name="lastName" value="字面量/${key}从环境变量、配置文件中获取值/#{SpEL}">&lt;/property>     * &lt;bean/>     */</span>   <span class="token comment" spellcheck="true">//lastName必须是邮箱格式</span>    <span class="token annotation punctuation">@Email</span>    <span class="token comment" spellcheck="true">//@Value("${person.last-name}")</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("#{11*2}")</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("true")</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span></code></pre><h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *@PropertySource：加载自定义的配置文件 */</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:person.properties"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//lastName必须是邮箱格式</span>   <span class="token comment" spellcheck="true">// @Email</span>    <span class="token comment" spellcheck="true">//@Value("${person.last-name}")</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("#{11*2}")</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("true")</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span></code></pre><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；（一般不用此类方法，而是全注解配置类）</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>导入Spring的配置文件让其生效</code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.springboot.service.HelloService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><p>1、配置类**@Configuration**——&gt;Spring配置文件</p><p>2、使用**@Bean**给容器中添加组件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件 * * 在配置文件中用&lt;bean>&lt;bean/>标签添加组件 * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"配置类@Bean给容器中添加组件了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>##4、配置文件占位符</p><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>random<span class="token punctuation">.</span>value<span class="token punctuation">}</span>、$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">}</span>、$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">long</span><span class="token punctuation">}</span>$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span>、$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">person.last-name</span><span class="token punctuation">=</span><span class="token attr-value">张三${random.uuid}</span><span class="token attr-name">person.age</span><span class="token punctuation">=</span><span class="token attr-value">${random.int}</span><span class="token attr-name">person.birth</span><span class="token punctuation">=</span><span class="token attr-value">2017/12/15</span><span class="token attr-name">person.boss</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">person.maps.k1</span><span class="token punctuation">=</span><span class="token attr-value">v1</span><span class="token attr-name">person.maps.k2</span><span class="token punctuation">=</span><span class="token attr-value">14</span><span class="token attr-name">person.lists</span><span class="token punctuation">=</span><span class="token attr-value">a,b,c</span><span class="token attr-name">person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">${person.hello:hello}_dog</span><span class="token attr-name">person.dog.age</span><span class="token punctuation">=</span><span class="token attr-value">15</span></code></pre><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><pre class=" language-yml"><code class="language-yml">server:  port: 8081spring:  profiles:    active: prod---server:  port: 8083spring:  profiles: dev---server:  port: 8084spring:  profiles: prod  #指定属于哪个环境</code></pre><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p><p>​    2、命令行：</p><p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>​        可以直接在测试的时候，配置传入命令行参数</p><p>​    3、虚拟机参数；</p><p>​        -Dspring.profiles.active=dev</p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/</p><p>–file:./</p><p>–classpath:/config/</p><p>–classpath:/</p><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p><p>==<strong>优先加载带profile</strong>==</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>==<strong>再来加载不带profile</strong>==</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties">配置文件能配置的属性参照</a></p><h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p><p><strong>2）、@EnableAutoConfiguration 作用：</strong></p><ul><li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</p></li><li><p>可以查看selectImports()方法的内容；</p></li><li><p>List<string> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</string></p><ul><li><pre class=" language-java"><code class="language-java">SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>扫描所有jar包类路径下  META<span class="token operator">-</span>INF<span class="token operator">/</span>spring<span class="token punctuation">.</span>factories把扫描到的这些文件的内容包装成properties对象从properties中获取到EnableAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span>类（类名）对应的值，然后把他们添加在容器中</code></pre></li></ul></li></ul><p><strong>==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># Auto Configure</span><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\...</span></code></pre><p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>   <span class="token comment" spellcheck="true">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HttpEncodingProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token comment" spellcheck="true">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span><span class="token comment" spellcheck="true">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//他已经和SpringBoot的配置文件映射了</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> HttpEncodingProperties properties<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span>      <span class="token keyword">public</span> <span class="token function">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span>HttpEncodingProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Bean</span>   <span class="token comment" spellcheck="true">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断容器没有这个组件？</span>    <span class="token keyword">public</span> CharacterEncodingFilter <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CharacterEncodingFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>==一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；本身properties就有值，如果对值不满意，我们可以根据properties的前缀在配置文件上修改值==</p><p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//从配置文件中获取指定的值和bean的属性进行绑定</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingProperties</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>精髓：</strong></p><p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类（会根据判断是否真正加载）</strong></p><p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p><p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p><p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong>**</p><p>xxxxAutoConfigurartion：自动配置类；</p><p>给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性；</p><h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p>**==我们可以在配置文件中通过启用  debug=true属性；来让控制台打印自动配置报告==**，这样我们就可以很方便的知道哪些自动配置类生效；</p><pre class=" language-java"><code class="language-java"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>AUTO<span class="token operator">-</span>CONFIGURATION REPORT<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Positive matches<span class="token operator">:</span>（自动配置类启用的）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   DispatcherServletAutoConfiguration matched<span class="token operator">:</span>      <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> found required <span class="token keyword">class</span> <span class="token string">'org.springframework.web.servlet.DispatcherServlet'</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@ConditionalOnMissingClass</span> did not find unwanted <span class="token keyword">class</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>      <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token punctuation">(</span>required<span class="token punctuation">)</span> found <span class="token function">StandardServletEnvironment</span> <span class="token punctuation">(</span>OnWebApplicationCondition<span class="token punctuation">)</span>            Negative matches<span class="token operator">:</span>（没有启动，没有匹配成功的自动配置类）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   ActiveMQAutoConfiguration<span class="token operator">:</span>      Did not match<span class="token operator">:</span>         <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> did not find required classes <span class="token string">'javax.jms.ConnectionFactory'</span><span class="token punctuation">,</span> <span class="token string">'org.apache.activemq.ActiveMQConnectionFactory'</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>   AopAutoConfiguration<span class="token operator">:</span>      Did not match<span class="token operator">:</span>         <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> did not find required classes <span class="token string">'org.aspectj.lang.annotation.Aspect'</span><span class="token punctuation">,</span> <span class="token string">'org.aspectj.lang.reflect.Advice'</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>        </code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot入门</title>
      <link href="/2020/06/23/springboot/spring-boot-ru-men/"/>
      <url>/2020/06/23/springboot/spring-boot-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote><p>简化Spring应用开发的一个框架；</p><p>整个Spring技术栈的一个大整合；</p><p>J2EE开发的一站式解决方案；</p></blockquote><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p><p>微服务：架构风格（服务微化）</p><p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p><p>单体应用：ALL IN ONE</p><p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p><h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p>环境约束</p><p>–jdk1.9：Spring Boot 推荐jdk1.7及以上；java version “9.0.4”</p><p>–maven3.x：maven 3.3以上版本；Apache Maven 3.6.3</p><p>–IntelliJIDEA2019：IntelliJ IDEA 2019.3 x64</p><p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p><p>统一环境；</p><h3 id="1、MAVEN设置"><a href="#1、MAVEN设置" class="headerlink" title="1、MAVEN设置"></a>1、MAVEN设置</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span></code></pre><h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/springboot1.png" alt="sp1"></p><h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>需求：浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p><h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldMainApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Spring应用启动起来</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldMainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><p>在主入口的同级目录下创建包</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将数据直接返回给服务器</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><p>运行main方法，在网页上访问localhost:8080//hello</p><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 这个**插件**，可以将应用打包成一个可执行的jar包；--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>将这个应用打成jar包，直接在cmd命令行使用<code>java -jar 包名</code> 的命令进行执行；</p><h2 id="5、Hello-World探究（底层分析）"><a href="#5、Hello-World探究（底层分析）" class="headerlink" title="5、Hello World探究（底层分析）"></a>5、Hello World探究（底层分析）</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目-Spring-Boot的版本仲裁中心"><a href="#1、父项目-Spring-Boot的版本仲裁中心" class="headerlink" title="1、父项目(Spring Boot的版本仲裁中心)"></a>1、父项目(Spring Boot的版本仲裁中心)</h4><p>作用：以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>他的父项目是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../../spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>他来真正管理Spring Boot应用里面的所有依赖版本；</code></pre><h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><p>作用：Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>spring-boot-starter</strong>-==web==：</p><p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldMainApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Spring应用启动起来</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldMainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>@<strong>SpringBootApplication</strong>:   其中包含的最核心的两个注解</p><pre><code>@SpringBootConfiguration@EnableAutoConfiguration</code></pre><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p>作用：标注在某个类上，表示这是一个Spring Boot的配置类；</p><p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p><p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>作用：以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p><p>实现原理：先将包中的注解扫描到spring容器中，再将使用到的注解配置自动配置到容器中，从而实现自动配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>EnableAutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span></code></pre><p>​        @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p><p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；</p><p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的全限定类名，将这些类名作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==</p><p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p><h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目：</p><ul><li>主程序已经生成好了，我们只需要我们自己的逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置，如tomcat端口号；</li></ul></li></ul><h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Spring Boot是一个便捷搭建 基于spring工程的脚手架；作用是帮助开发人员快速搭建大型的spring 项目。简化工程的配置，依赖管理；我们只需要导入不同功能场景所对应的starter，springBoot就会通过自动配置将场景中所需要的配置组件都加入到spring容器中管理。</p><h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a><strong>自动配置</strong></h3><p><strong>bean注册</strong></p><ul><li>基于java代码的bean配置</li></ul><p>mybatis-spring-boot-starter这个包帮我们引入了mybatis-spring-boot-autoconfigure子包，其中还会有不同的子包（jdbc、mongo），里面有对应的xxxAutoConfiguration配置类，其中有@Configuration和@Bean，将对象注册spring容器中</p><ul><li>自动配置条件依赖</li></ul><p>并不是所有的bean都会实例化成功并加入容器中的，在xxxAutoConfiguration配置类中有很多@Conditionalxxx的条件注解，只有满足这些条件才会完成注册</p><p><strong>bean参数装配</strong></p><ul><li>bean参数获取（如何从yml、properties配置文件中获取属性）</li></ul><p>在xxxAutoConfiguration配置类中，有@EnableConfigurationProperties注解，用于开启@ConfigurationProperties的功能，此注解参数中包含xxxProperties.class，其中封装了组件的各个参数，且使用了注解@ConfigurationProperties指定了配置文件的前缀，用于把yml或者properties配置文件的属性封装进bean中</p><p><strong>扫描bean</strong></p><p>springboot默认扫描启动类所在的包下的主类与子类的所有组件，但并没有包括依赖包的中的类，那么依赖包中的bean是如何被发现和加载的？</p><p>主要是因为@SpringBootApplication，其中有3个注解，@SpringBootConfiguration（里面还是应用了@Configuration）表示自己是配置类，@ComponentScan扫描所在包下的注解，@EnableAutoConfiguration开启自动配置功能（主要加载依赖包中的bean和注册），见下面详解</p><p>@EnableAutoConfiguration注解引入了@AutoConfigurationPackage和@Import这两个注解，@AutoConfigurationPackage（将标记的类所在的包变为自动配置包）的作用就是将主配置类（@SpringBootApplication标注的类）的所在包及下面子包里面的所有组件扫描到Spring容器，</p><p>@Import({AutoConfigurationImportSelector.class})导入需要自动配置的组件，这些组件的由来:AutoConfigurationImportSelector类中有个方法，可以从所有的jar包中读取META-INF/xxx.factories文件信息，其中有很多xxxAutoConfiguration，它们表示一个个配置类，但只会根据xxxAutoConfiguration上的条件判断是否加载，之后通过反射机制创建出对应的bean实例。</p><p><strong>将扫描的xxxAutoConfiguration(本身也是一个bean)加到容器中</strong></p><p>xxxAutoConfiguration加入容器，自然其中的bean组件也会通过1，2步加入到容器</p><p>springboot中使用了@Import 方法加载Bean：</p><p>@EnableAutoConfiguration注解中使用了@Import({AutoConfigurationImportSelector.class})注解，AutoConfigurationImportSelector底层接口的方法获取来自上一步的方法获取xxx.factories中返回的全类名，将组件加入spring容器中</p><p><strong>总结</strong></p><p>1、@Configuration&amp;与@Bean-&gt;基于java代码的bean配置</p><p>2、@Conditional-&gt;设置自动配置条件依赖</p><p>3、@EnableConfigurationProperties与@ConfigurationProperties-&gt;bean参数装配。</p><p>4、@EnableAutoConfiguration、@AutoConfigurationPackage 与@Import-&gt;实现bean发现与加载。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2020/06/23/ssm-kuang-jia/springmvc/"/>
      <url>/2020/06/23/ssm-kuang-jia/springmvc/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="三层架构和-MVC"><a href="#三层架构和-MVC" class="headerlink" title="三层架构和 MVC"></a>三层架构和 MVC</h2><ul><li>三层架构 <ul><li>表现层：  也就是我们常说的web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求 web 层，web 需要接收 http 请求，完成 http 响应。  </li><li>业务层：  也就是我们常说的 service 层。它负责业务逻辑处理，和我们开发项目的需求息息相关。</li><li>持久层：  也就是我们是常说的 dao 层。负责数据持久化，包括数据层即数据库和数据访问层。</li></ul></li><li>MVC <ul><li>全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写， 是一种用于设计创建 Web 应用程序表现层的模式。</li><li>Model（模型）：   通常指的就是我们的数据模型。作用一般情况下用于封装数据。 </li><li>View（视图）：   通常指的就是我们的 jsp 或者 html。作用一般就是展示数据的。 </li><li>Controller（控制器）：   是应用程序中处理用户交互的部分。作用一般就是处理程序逻辑的。 </li></ul></li></ul><h2 id="SpringMVC-概述"><a href="#SpringMVC-概述" class="headerlink" title="SpringMVC 概述"></a>SpringMVC 概述</h2><ul><li>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 表现层框架</li></ul><h2 id="SpringMVC的入门"><a href="#SpringMVC的入门" class="headerlink" title="SpringMVC的入门"></a>SpringMVC的入门</h2><p>需求：点击超链接发送一个请求，跳转页面</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li><p>创建maven web工程，导入依赖(ioc，web,webmvc,servletapi,jspapi)</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 版本锁定 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置核心的控制器（配置DispatcherServlet） </p><pre class=" language-xml"><code class="language-xml">在web.xml配置文件<span class="token comment" spellcheck="true">&lt;!-- SpringMVC的核心控制器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 配置Servlet的初始化参数，读取springmvc的配置文件，创建spring容器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!-- 配置servlet启动时加载对象 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写springmvc.xml的配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 配置spring创建容器时要扫描的包 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 配置视图解析器 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 配置spring开启注解mvc的支持     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p> 编写index.jsp和HelloController控制器类 </p></li></ol><pre class=" language-jsp"><code class="language-jsp"><body>            <h3>入门案例</h3>           <a href="${ pageContext.request.contextPath }/hello">入门案例</a></body></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 控制器 */</span><span class="token annotation punctuation">@Controller</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">/**         * 接收请求             */</span>        <span class="token comment" spellcheck="true">//请求映射</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello SpringMVC!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li><p>在WEB-INF目录下创建pages文件夹，编写success.jsp的成功页面</p><pre class=" language-jsp"><code class="language-jsp"><body>    <h3>入门成功！！</h3></body></code></pre></li><li><p>启动Tomcat服务器，进行测试</p></li></ol><h3 id="执行过程分析"><a href="#执行过程分析" class="headerlink" title="执行过程分析"></a>执行过程分析</h3><h4 id="1-入门案例的执行流程"><a href="#1-入门案例的执行流程" class="headerlink" title="1. 入门案例的执行流程"></a>1. 入门案例的执行流程</h4><ol><li>当启动Tomcat服务器的时候，因为配置了load-on-startup标签，所以会<strong>创建DispatcherServlet对象</strong>， 就会**加载springmvc.xml配置文件 **</li><li>开启了注解扫描，那么<strong>HelloController对象就会被创建</strong> </li><li>从index.jsp发送请求，请求会先到达DispatcherServlet核心控制器，根据配置@RequestMapping注解 **找到执行的具体方法 **</li><li>根据执行方法的返回值，再根据配置的<strong>视图解析器</strong>，去指定的目录下**查找指定名称的JSP文件 **</li><li>Tomcat服务器渲染页面，做出响应 </li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/mvc1.png" alt="image-20200608001412839"></p><p><strong>原理（运行机制）</strong></p><ol><li><p>客户端发送请求到DispacherServlet（分发器）</p></li><li><p>由DispacherServlet控制器查询HanderMapping，找到处理请求的Controller</p></li><li><p>Controller调用业务逻辑处理后，返回ModelAndView</p></li><li><p>DispacherServlet查询视图解析器，找到ModelAndView指定的视图</p></li><li><p>视图负责将结果显示到客户端</p></li></ol><h4 id="2-入门案例中涉及的组件"><a href="#2-入门案例中涉及的组件" class="headerlink" title="2. 入门案例中涉及的组件"></a>2. 入门案例中涉及的组件</h4><ol><li><p>DispatcherServlet：前端控制器 </p><ul><li>用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由 它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。 </li></ul></li><li><p>HandlerMapping：处理器映射器 </p><ul><li>负责根据用户请求找到 sayhello 即处理器</li></ul></li><li><p>Handler：处理器 （方法）</p><ul><li>它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。</li></ul></li><li><p>HandlAdapter：处理器适配器 </p><ul><li>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，不同的处理器都可以通过适配器执行</li></ul></li><li><p> View Resolver：视图解析器 （根据方法执行的结果找到对应的页面）</p></li></ol><ul><li>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名 即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</li></ul><ol start="6"><li><p>View：视图 </p></li><li><p> &lt; mvc:annotation-driven&gt;说明 </p></li></ol><ul><li>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。 <ul><li>开启mvc注解支持代表自动加载 RequestMappingHandlerMapping （处理映射器）和 RequestMappingHandlerAdapter （ 处 理 适 配 器 ），同时集成了json转换工具</li></ul></li></ul><ol start="8"><li><strong>明确：  我们只需要编写处理具体业务的控制器（方法）以及视图（页面）。</strong></li></ol><hr><h2 id="请求参数的绑定"><a href="#请求参数的绑定" class="headerlink" title="请求参数的绑定"></a>请求参数的绑定</h2><ol><li><p>请求参数的绑定说明 </p><ol><li>表单提交的数据都是k=v格式的 username=haha&amp;password=123 </li><li>SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定的 </li><li>要求：提交表单的name和参数的名称是相同的 </li></ol></li><li><p>支持的数据类型 </p><ol><li>基本数据类型和字符串类型 </li><li>实体类型（JavaBean） </li><li>集合数据类型（List、map集合等）</li></ol></li><li><p><strong>基本数据类型和字符串类型</strong></p><ol><li>提交表单的name和参数的名称是相同的 </li><li>区分大小写</li></ol></li><li><p><strong>实体类型（JavaBean）</strong></p><ol><li>提交表单的name和JavaBean中的属性名称需要一致，方法参数写实体对象，可自动封装</li><li>如果一个JavaBean类中包含其他的引用类型，那么表单的name属性需要编写成：对象.属性 例如： address.name </li></ol></li><li><p><strong>给数组属性数据封装</strong></p><ol><li>提交表单的name和方法参数的数组对象名称需要一致</li></ol></li><li><p><strong>给集合属性数据封装</strong></p><p>创建Vo对象，属性包含实体类集合，方法参数是vo，表单如下</p><ol><li>JSP页面编写方式：list[0].实体类属性 </li><li>Map：map[‘one’].属性</li></ol></li><li><p><strong>请求参数中文乱码的解决</strong></p><ul><li><p>在web.xml中配置Spring提供的过滤器类</p><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 配置过滤器，解决中文乱码的问题 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filterclass</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 指定字符集 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p><strong>自定义类型转换器</strong></p><ul><li><p>接收到的数据都是字符串类型，springMVC里面有配置好的类型转换器进行转换为其他类型，有特殊需求可以自己加类型转换器</p></li><li><p>步骤：</p><ol><li><p>写一个自定义类型转换器的类，实现Converter的接口 </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  把字符串转换成日期的转换器 */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Date<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 进行类型转换的方法     */</span>        <span class="token keyword">public</span> Date <span class="token function">convert</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断        </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>source <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"参数不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>                        DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 字符串转换日期           </span>            Date date <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> date<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"类型转换错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>注册自定义类型转换器，在springmvc.xml配置文件中编写配置</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 注册自定义类型转换器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注入自定义的转换器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.utils.StringToDateConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 开启Spring对MVC注解的支持 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ol></li></ul></li><li><p><strong>在控制器中使用原生的ServletAPI对象</strong></p><ul><li>只需要在控制器的方法参数定义HttpServletRequest和HttpServletResponse对象</li></ul></li></ol><hr><h2 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h2><h3 id="RequestMapping-注解"><a href="#RequestMapping-注解" class="headerlink" title="RequestMapping 注解"></a>RequestMapping 注解</h3><ul><li>作用：  用于建立请求 URL 和处理请求方法之间的对应关系</li><li>出现位置：  <ul><li>类上：   请求 URL 的第一级访问目录。此处不写的话，就相当于应用的根目录。写的话需要以/开头。                   它出现的目的是为了使我们的 URL 可以按照模块化管理</li><li>方法上：   请求 URL 的第二级访问目录。 </li></ul></li><li>属性：  <ul><li>value：用于指定请求的 URL。它和 path 属性的作用是一样的。  </li><li>method：用于指定请求的方式。  post/get</li><li>params：用于指定限制请求参数的条件。要求请求参数的 key 和 value 必须和 配置的一模一样。<ul><li>例如：params = {“accountName”} params = {“accountName=hehe”}</li></ul></li><li>headers：用于指定限制请求消息头的条件。 </li></ul></li></ul><h3 id="WebServlet、-WebFilter、-Weblistener"><a href="#WebServlet、-WebFilter、-Weblistener" class="headerlink" title="@WebServlet、@WebFilter、@Weblistener"></a>@WebServlet、@WebFilter、@Weblistener</h3><ol><li>作用：加在类上，表示该类是一个三大组件</li><li>属性<ol><li>value：url路径     如： /hello</li></ol></li></ol><h3 id="RequestParam注解-（解决参数名称和传递参数名称不一致）"><a href="#RequestParam注解-（解决参数名称和传递参数名称不一致）" class="headerlink" title="RequestParam注解 （解决参数名称和传递参数名称不一致）"></a>RequestParam注解 （解决参数名称和传递参数名称不一致）</h3><ol><li>作用：把请求中的指定名称的参数传递给控制器中的形参赋值 </li><li>属性 <ol><li>value：请求参数中的名称 </li><li>required：请求参数中是否必须提供此参数，默认值是true，必须提供</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span><span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>               </code></pre><h3 id="RequestBody注解"><a href="#RequestBody注解" class="headerlink" title="RequestBody注解"></a>RequestBody注解</h3><ol><li>作用：用于获取请求体的内容（注意：get方法不可以） </li><li>属性 <ol><li>required：是否必须有请求体，默认值是true </li></ol></li></ol><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String body<span class="token punctuation">)</span> <span class="token punctuation">{</span> </code></pre><h3 id="ResponseBody注解"><a href="#ResponseBody注解" class="headerlink" title="ResponseBody注解"></a>ResponseBody注解</h3><ol><li>作用：用在方法上，不进行页面跳转，直接回写数据</li></ol><h3 id="RequestHeader注解"><a href="#RequestHeader注解" class="headerlink" title="RequestHeader注解"></a>RequestHeader注解</h3><ol><li>作用：获取指定请求头的值 </li><li>属性 <ol><li>value：请求头的名称</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"Accept"</span><span class="token punctuation">)</span> String header<span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><h3 id="CookieValue注解"><a href="#CookieValue注解" class="headerlink" title="CookieValue注解"></a>CookieValue注解</h3><ol><li>作用：用于获取指定cookie的名称的值 </li><li>属性 <ol><li>value：cookie的名称 </li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> String cookieValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><h3 id="PathVariable注解"><a href="#PathVariable注解" class="headerlink" title="PathVariable注解"></a>PathVariable注解</h3><ol><li>作用：拥有绑定url中的占位符的。例如：url中有/delete/{id}，{id}就是占位符 </li><li>属性 <ol><li>value：指定url中的占位符名称</li></ol></li><li>Restful风格的URL <ol><li>请求路径一样，可以根据不同的请求方式去执行后台的不同方法 </li><li>restful风格的URL优点 1. 结构清晰 2. 符合标准 3. 易于理解 4. 扩展方便</li></ol></li></ol><pre><code> @RequestMapping(path="/hello/{id}")     public String sayHello(@PathVariable(value="id") String id) { </code></pre><h3 id="ModelAttribute注解"><a href="#ModelAttribute注解" class="headerlink" title="ModelAttribute注解"></a>ModelAttribute注解</h3><ol><li><p> 作用 </p></li><li><p>出现在方法上：表示当前方法会在控制器方法执行前先执行。</p></li><li><p>出现在参数上：获取指定的数据给参数赋值。</p></li><li><p>应用场景：当提交表单数据不是完整的实体数据时，保证没有提交的字段使用数据库原来的数据。</p></li><li><p>运行流程：</p><ol><li> 执行@ModelAttribute注解修饰的方法：从数据库中取出对象，把对象放到model/map当中</li><li> SpringMVC从model/map取出对象，把表单的请求参数给该对象的对应属性</li><li> springMVC把上述对象传入目标方法的参数</li></ol><p>注意：在@ModelAttribute修饰的方法中，放入到Map时的键和目标方法的参数类型的第一个字符小写的字符串一致</p></li></ol><pre class=" language-java"><code class="language-java">修饰方法有返回值<span class="token comment" spellcheck="true">/**     * 作用在方法，先执行* 有返回值，方法控制器获取的值就有修饰方法返回的值*/</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> User <span class="token function">showUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showUser执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 模拟从数据库中查询对象        </span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">100d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * 修改用户的方法     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">修饰方法无返回值 <span class="token comment" spellcheck="true">/**      * 作用在方法，先执行 * 无返回值会将值存到map中，方法控制器使用注解会从map中取 */</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showUser执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 模拟从数据库中查询对象      </span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">100d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 修改用户的方法 */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="SessionAttributes注解-（存到session域中）"><a href="#SessionAttributes注解-（存到session域中）" class="headerlink" title="SessionAttributes注解 （存到session域中）"></a>SessionAttributes注解 （存到session域中）</h3><ol><li>作用：用于多次执行控制器方法间的参数共享 </li><li>属性 <ol><li>value：指定存入属性的名称 </li><li>types：指定类型，存入属性</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/user"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>types<span class="token operator">=</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 把数据存入到session域对象中 </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**         * 向session中存入值          */</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/save"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//将数据存储到model中，底层实际上是存储到了request域中</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向session域中保存数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * 从session中获取值  */</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/find"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> String <span class="token function">find</span><span class="token punctuation">(</span>ModelMap modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//ModelMap是model的实现类，能够获取存储在model中的值</span>        String username <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           String password <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Integer age <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">" : "</span><span class="token operator">+</span>password <span class="token operator">+</span><span class="token string">" : "</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**     * 清除值    */</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span>SessionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//SessionStatus会话状态，将会话完成，即删除session域中的值，</span>        status<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="响应数据和结果视图"><a href="#响应数据和结果视图" class="headerlink" title="响应数据和结果视图"></a>响应数据和结果视图</h2><h3 id="Model-ModelAndView"><a href="#Model-ModelAndView" class="headerlink" title="Model,ModelAndView"></a>Model,ModelAndView</h3><p>底层实际上是存储到了request域中</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>map.put（）方法也会存入到request域中</p><h3 id="返回值分类"><a href="#返回值分类" class="headerlink" title="返回值分类"></a>返回值分类</h3><ol><li><p> 返回字符串：根据视图解析器为物理视图的地址。</p></li><li><p>返回值是void ：</p><ol><li>可使用 request 转向页面</li><li>也可以通过 response 页面重定向</li><li>也可以通过 response 指定响应结果</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/initAdd"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initAdd</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求转发或者重定向"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 请求转发        </span>     request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/add.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 重定向        </span>    response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/add2.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 直接响应数据        </span>    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre></li><li><p>返回值是ModelAndView对象 ：类似返回字符串，调用视图解析器跳转到具体的JSP视图 </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 返回ModelAndView对象     * 可以传入视图的名称（即跳转的页面），还可以传入对象。*/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>           ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 跳转到list.jsp的页面   </span>    mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟从数据库中查询所有的用户信息        </span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         user1<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 添加对象       </span>    mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span> 也可以ModelAndView作为参数，SpringMVC会自动创建    <span class="token keyword">public</span> ModelAndView <span class="token function">findAll</span><span class="token punctuation">(</span>ModelAndView modelAndView<span class="token punctuation">)</span><span class="token punctuation">{</span>    modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p> 返回值是字符串，参数是model：用于携带数据</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick4"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello4</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello SpringMVC!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"zhaowu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="5"><li> 使用@ResponseBody回写字符串</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick5"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> String <span class="token function">sayHello4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"hello success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="SpringMVC框架提供的转发和重定向"><a href="#SpringMVC框架提供的转发和重定向" class="headerlink" title="SpringMVC框架提供的转发和重定向"></a>SpringMVC框架提供的转发和重定向</h3><ol><li><p>forward请求转发</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token string">"forward:/WEB-INF/pages/success.jsp"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre></li><li><p>redirect重定向</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/count"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//不需要写项目名request.getContextPath(),底层已经写好了</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/add.jsp"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre></li></ol><h3 id="ResponseBody响应json数据"><a href="#ResponseBody响应json数据" class="headerlink" title="ResponseBody响应json数据"></a>ResponseBody响应json数据</h3><ol><li><p>第一种方式：开启mvc注解驱动，导入jar包，使用@ResponseBody，直接返回对象，回写json数据</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> User <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>           User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre></li></ol><ul><li><p>DispatcherServlet会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而 不能被使用。解决问题就是需要配置静态资源不进行拦截，</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 设置静态资源不过滤    1. location元素表示webapp目录下的包下的所有文件    2. mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 样式 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 图片 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- javascript --></span>也可以使用，效果一样<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用@RequestBody获取请求体数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用Ajax需要提前导入jquery的js文件</span><span class="token comment" spellcheck="true">// 页面加载       </span>$<span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 绑定点击事件      </span>    $<span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                         url<span class="token operator">:</span><span class="token string">"user/testJson"</span><span class="token punctuation">,</span>                    contentType<span class="token operator">:</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span>            data<span class="token operator">:</span><span class="token string">'{"addressName":"aa","addressNum":100}'</span><span class="token punctuation">,</span>                     dataType<span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>                          type<span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>                   success<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                          <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>addressName<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*获取请求体数据*/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testJson"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String body<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p> json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><p>使用@RequestBody注解把json的字符串自动转换成JavaBean的对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testJson"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Address address<span class="token punctuation">)</span> <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>使用@ResponseBody注解把JavaBean对象自动转换成json字符串，直接响应 ，前提开启了mvc注解驱动</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ajax的回调函数</span>success<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>addressName<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testJson"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> Address <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Address address<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>       address<span class="token punctuation">.</span><span class="token function">setAddressName</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><hr><h2 id="SpringMVC实现文件上传"><a href="#SpringMVC实现文件上传" class="headerlink" title="SpringMVC实现文件上传"></a>SpringMVC实现文件上传</h2><h3 id="SpringMVC传统方式文件上传（省去了解析request域获取上传文件项的过程，直接获得文件项）"><a href="#SpringMVC传统方式文件上传（省去了解析request域获取上传文件项的过程，直接获得文件项）" class="headerlink" title="SpringMVC传统方式文件上传（省去了解析request域获取上传文件项的过程，直接获得文件项）"></a>SpringMVC传统方式文件上传（省去了解析request域获取上传文件项的过程，直接获得文件项）</h3><ol><li><p>导入文件上传的jar包</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写文件上传的JSP页面</p><ul><li>SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，要求变量名称必须和表单ﬁle标签的 name属性名称相同</li></ul><pre class=" language-jsp"><code class="language-jsp"><h3>文件上传</h3>        <form action="user/fileupload" method="post" enctype="multipart/form-data">       选择文件：<input type="file" name="upload"/><br/>          <input type="submit" value="上传文件"/>    </form></code></pre></li><li><p>配置文件解析器对象</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 在springMVC.xml中配置文件解析器对象，要求id名称必须是multipartResolver --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置文件上传大小为10M--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写文件上传的方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * SpringMVC方式的文件上传     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/fileupload2"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">fileupload2</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SpringMVC方式的文件上传..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 先获取到要上传的文件目录        </span>    String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 创建File对象，一会向该路径下上传文件     </span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 判断路径是否存在，如果不存在，创建该路径     </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 获取到上传文件的名称   </span>    String filename <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建随机序列号</span>    String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把文件的名称唯一化    </span>    filename <span class="token operator">=</span> uuid<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>filename<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上传文件     </span>    upload<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre></li></ol><h3 id="SpringMVC跨服务器方式文件上传"><a href="#SpringMVC跨服务器方式文件上传" class="headerlink" title="SpringMVC跨服务器方式文件上传"></a>SpringMVC跨服务器方式文件上传</h3><pre><code>bug1:403错误    原因：tomcat权限不够    改为：修改tomcat的web.xml    &lt;init-param&gt;    &lt;param-name&gt;readonly&lt;/param-name&gt;    &lt;param-value&gt;false&lt;/param-value&gt;    &lt;/init-param&gt;    位置：&lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;    bug2:409错误    原因：没有该文件夹    改为：在部署的目录中创建该文件夹        E:\Java\springMVC_day02_image\target\springMVC_day02_image\uploads</code></pre><ol><li><p>搭建图片服务器</p></li><li><p>导入开发需要的jar包</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.jersey<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jersey-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.jersey<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jersey-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写文件上传的JSP页面</p></li><li><p>编写控制器</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/fileupload3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">fileupload3</span><span class="token punctuation">(</span>MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SpringMVC跨服务器方式的文件上传..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义图片服务器的请求路径        </span>    String path <span class="token operator">=</span> <span class="token string">"http://localhost:9090/day02_springmvc5_02image/uploads/"</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取到上传文件的名称      </span>    String filename <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把文件的名称唯一化   </span>    filename <span class="token operator">=</span> uuid<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>filename<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 向图片服务器上传文件           </span>    <span class="token comment" spellcheck="true">// 创建客户端对象  </span>    Client client <span class="token operator">=</span> Client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 连接图片服务器  </span>    WebResource webResource <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>path<span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 上传文件   </span>    webResource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>upload<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><hr><h2 id="SpringMVC的异常处理"><a href="#SpringMVC的异常处理" class="headerlink" title="SpringMVC的异常处理"></a>SpringMVC的异常处理</h2><ul><li><p>异常处理思路 ：Controller调用service，service调用dao，异常都是向上抛出的，最终有DispatcherServlet找<strong>异常处理器</strong>进行异常的处理</p></li><li><p>前提：程序的异常必须抓并抛自己定义的异常</p></li><li><p>步骤（简单异常处理器）：</p><blockquote><p>遇到异常，只能跳转到指定的页面。不能增加其他逻辑</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultErrorView<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--没有匹配到的异常跳转到这个，error，因为配置了视图解析器，所以直接输入error即可跳转error.jsp--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exceptionMappings<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.ClassCastException<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.jm.MyException<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>步骤（自定义异常）：</p><ol><li><p>自定义异常类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//继承Exception类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 异常提示信息    </span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>        <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token function">SysException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>自定义异常处理器</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 异常处理器 :实现HandlerExceptionResolver*/</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 跳转到具体的错误页面的方法         ex：程序执行时抛出的异常（前提：程序的异常必须抓并抛自己定义的异常）    */</span>       <span class="token keyword">public</span> ModelAndView <span class="token function">resolveException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span>Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             SysException e <span class="token operator">=</span> null<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 获取到异常对象      </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">SysException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//是自己定义的异常类对象</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span>SysException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">//不是自己定义的异常</span>            e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token string">"请联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>             ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 存入错误的提示信息</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 跳转的Jsp页面</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>配置异常处理器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置异常处理器 正常配bean就行--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sysExceptionResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.exception.SysExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ol></li></ul><hr><h2 id="SpringMVC框架中的拦截器"><a href="#SpringMVC框架中的拦截器" class="headerlink" title="SpringMVC框架中的拦截器"></a>SpringMVC框架中的拦截器</h2><p>概述：用于对处理器进行预处理和后处理的技术</p><p><strong>拦截器和过滤器的功能比较类似，有区别</strong></p><ol><li>过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术。 </li><li>拦截器是SpringMVC框架独有的。 </li><li>过滤器配置了/*，可以拦截任何资源。 </li><li>拦截器只会对控制器中的方法进行拦截。 </li></ol><p>想要自定义拦截器，需要实现HandlerInterceptor接口</p><h3 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h3><ol><li><p>创建拦截器类，实现接口（接口内部已经实现了方法，需要自己重载）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor1</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**         * controller方法执行前，进行拦截的方法         * return true放行         * return false拦截         * 可以使用转发或者重定向直接跳转到指定的页面。         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截器执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在springmvc.xml中配置拦截器类</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置拦截器 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>               <span class="token comment" spellcheck="true">&lt;!-- 哪些方法进行拦截 --></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token comment" spellcheck="true">&lt;!-- 哪些方法不进行拦截             &lt;mvc:exclude-mapping path=""/>            --></span>            <span class="token comment" spellcheck="true">&lt;!-- 注册拦截器对象 --></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.demo1.MyInterceptor1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--第二个拦截器也是要全部配置mvc:interceptor，且拦截顺序按配置的顺序执行，12方法21--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="HandlerInterceptor接口中的方法"><a href="#HandlerInterceptor接口中的方法" class="headerlink" title="HandlerInterceptor接口中的方法"></a>HandlerInterceptor接口中的方法</h3><h4 id="preHandle方法：控制器方法执行前拦截"><a href="#preHandle方法：控制器方法执行前拦截" class="headerlink" title="preHandle方法：控制器方法执行前拦截"></a>preHandle方法：控制器方法执行前拦截</h4><ol><li>可以使用request或者response跳转到指定的页面 </li><li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。 </li><li>return false不放行，不会执行controller中的方法。</li></ol><h4 id="postHandle方法是controller方法执行后拦截"><a href="#postHandle方法是controller方法执行后拦截" class="headerlink" title="postHandle方法是controller方法执行后拦截"></a>postHandle方法是controller方法执行后拦截</h4><ol><li>可以使用request或者response跳转到指定的页面 </li><li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示，但输出控制台的仍然会执行。</li><li>参数ModelAndView可以将参数修改</li></ol><h4 id="afterCompletion方法是在页面加载后执行"><a href="#afterCompletion方法是在页面加载后执行" class="headerlink" title="afterCompletion方法是在页面加载后执行"></a>afterCompletion方法是在页面加载后执行</h4><ol><li>request或者response不能再跳转页面了</li></ol>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm框架整合</title>
      <link href="/2020/06/22/ssm-kuang-jia/ssm-zheng-he/"/>
      <url>/2020/06/22/ssm-kuang-jia/ssm-zheng-he/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="搭建整合环境"><a href="#搭建整合环境" class="headerlink" title="搭建整合环境"></a>搭建整合环境</h2><ul><li><p>思路</p><ul><li>整合说明：SSM整合可以使用多种方式，咱们会选择XML + 注解的方式 </li><li><ol><li>先搭建整合的环境 </li><li>先把Spring的配置搭建完成（spring整合其他两个）</li><li>再使用Spring整合SpringMVC框架 </li><li> 最后使用Spring整合MyBatis框架</li></ol></li></ul></li><li><p>步骤</p><ol><li><p>导入坐标依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">></span></span>1.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- log start --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!-- log end --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写实体类，在ssm_domain项目中编写</p></li><li><p>编写dao接口</p></li><li><p>编写service接口和实现类</p></li></ol></li></ul><h2 id="Spring框架代码的编写"><a href="#Spring框架代码的编写" class="headerlink" title="Spring框架代码的编写"></a>Spring框架代码的编写</h2><ul><li><p>步骤</p><ol><li><p>创建applicationContext.xml的（spring的）配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/aop    http://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/tx     http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 开启注解扫描，要扫描的是service和dao层的注解，要忽略web层注解，因为web层让SpringMVC框架 去管理 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!-- 配置要忽略的注解(spring配置文件只扫描service和dao的注解，表现层controller的注解不扫) --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><h2 id="Spring整合SpringMVC框架"><a href="#Spring整合SpringMVC框架" class="headerlink" title="Spring整合SpringMVC框架"></a>Spring整合SpringMVC框架</h2><blockquote><p>springmvc只加载了controller的bean，spring的applicationContext.xml文件并没有加载，service也没有加到spring容器中，controller注入service不成功。所以整合目的是在服务器启动时，也会加载spring的配置文件，service就可以被controller注入成功并调用了。</p><p>那么如何在服务器启动时加载呢，服务器启动有一个servletcontext域对象会被创建，关闭时销毁。在spring-web的依赖中有一个监听器ContextLoaderListener来监听servletContext的创建和销毁。</p><p>这个监听器默认是监听</p></blockquote><ul><li><p>步骤</p><ol><li><p>在web.xml中配置DispatcherServlet前端控制器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置前端控制器：服务器启动时加载，需要加载springmvc.xml配置文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 服务器启动的时候，让DispatcherServlet对象创建 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>在web.xml中配置DispatcherServlet过滤器解决中文乱码</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置解决中文乱码的过滤器 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建springmvc.xml的配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 扫描controller的注解，别的不扫描,需要用exclude --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 配置视图解析器 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!-- JSP文件所在的目录 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token comment" spellcheck="true">&lt;!-- 文件的后缀名 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 设置静态资源不过滤 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 开启对SpringMVC注解的支持 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--纯注解的方式：@EnableWebMvc--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><ol start="4"><li>测试SpringMVC的框架搭建是否成功<pre><code>编写index.jsp和list.jsp编写，超链接&lt;a href="account/findAll"&gt;查询所有&lt;/a&gt;</code></pre><pre class=" language-java"><code class="language-java">创建AccountController类，编写方法，进行测试<span class="token annotation punctuation">@Controller</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/**     * 查询所有的数据      */</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> String <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表现层：查询所有账户..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre></li><li><strong>整合</strong><ul><li>目的：在controller中能成功的调用service对象中的方法</li><li>在项目启动的时候，就去加载applicationContext.xml（spring的）的配置文件</li></ul><ol><li><p>在web.xml中配置 ContextLoaderListener监听器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置Spring的监听器,spring-web提供的监听器 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listenerclass</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置加载类路径的配置文件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre></li><li><p>在controller中注入service对象，调用service对象的方法进行测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> AccountService accoutService<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 查询所有的数据     */</span>       <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表现层：查询所有账户..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            accoutService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol></li></ol><h2 id="Spring整合SpringMVC框架（纯注解版）"><a href="#Spring整合SpringMVC框架（纯注解版）" class="headerlink" title="Spring整合SpringMVC框架（纯注解版）"></a>Spring整合SpringMVC框架（纯注解版）</h2><ol><li>创建applicationContext.xml的（spring的）配置文件，注解中叫配置类</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Spring的容器不扫描controller</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"com.atguigu"</span><span class="token punctuation">,</span>excludeFilters<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span>FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>classes<span class="token operator">=</span><span class="token punctuation">{</span>Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootConfig</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建SpringMVC.xml的配置文件，注解中叫配置类</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//SpringMVC容器只扫描controller</span><span class="token comment" spellcheck="true">//只扫描需要禁用默认的过滤规则    useDefaultFilters=false</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"com.atguigu"</span><span class="token punctuation">,</span>includeFilters<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span>FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>classes<span class="token operator">=</span><span class="token punctuation">{</span>Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>useDefaultFilters<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><ol start="3"><li>创建MyWebAppInitializer，继承AbstractAnnotationConfigDispatcherServletInitializer</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Web容器启动的时候创建对象，调用方法来初始化以前前端控制器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebAppInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//重写方法</span>    <span class="token comment" spellcheck="true">//获取根容器的配置类，spring配置类</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>RootConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取web容器的配置类，springMVC配置类</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取DispatcherServlet的映射信息</span>    <span class="token comment" spellcheck="true">// /：拦截所有请求（包括静态资源js,css），但是不包括*.jsp</span>    <span class="token comment" spellcheck="true">// /*:拦截所有请求，jsp也会拦截</span>    <span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>定制mvc：开启注解，配置视图解析器……</li></ol><p>三大步：</p><ul><li><p>@EnableWebMvc，开启SpringMVC定制功能，与&lt;mvc:annotation-driven /&gt;功能相同</p></li><li><p>继承WebMvcConfigurerAdapter</p></li><li><p>重写方法，进行定制</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"com.atguigu"</span><span class="token punctuation">,</span>includeFilters<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span>FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>classes<span class="token operator">=</span><span class="token punctuation">{</span>Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>useDefaultFilters<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//重写方法 alt+/</span>    <span class="token comment" spellcheck="true">//配置视图解析器</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span>ViewResolverRegistry registry<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//前缀，后缀</span>        registry<span class="token punctuation">.</span><span class="token function">jsp</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/views/"</span><span class="token punctuation">,</span><span class="token string">".jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置静态资源访问，所有静态资源交给tomcat来访问，不使用springMVC进行过滤</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span>DefaultServletHandlerConfigurer configurer<span class="token punctuation">)</span><span class="token punctuation">{</span>        configurer<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置拦截器</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将自定义的拦截器类加到组件中，并设置拦截的路径</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFirstInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Spring整合MyBatis框架"><a href="#Spring整合MyBatis框架" class="headerlink" title="Spring整合MyBatis框架"></a>Spring整合MyBatis框架</h2><ul><li><p>步骤：</p><ol><li><p>在web项目中编写SqlMapConﬁg.xml的配置文件，编写核心配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token doctype">&lt;!DOCTYPE configuration    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///ssm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 使用的是注解 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>               <span class="token comment" spellcheck="true">&lt;!-- &lt;mapper class="cn.itcast.dao.AccountDao"/> --></span>                <span class="token comment" spellcheck="true">&lt;!-- 该包下所有的dao接口都可以使用 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>在AccountDao接口的方法上添加注解，编写SQL语句</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"insert into account (name,money) values (#{name},#{money})"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">)</span>       <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>编写测试的方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 加载配置文件      </span>    InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建工厂      </span>    SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 创建sqlSession对象     </span>    SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 获取代理对象      </span>    AccountDao dao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>AccountDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 调用查询的方法    </span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>Account account <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 释放资源     </span>    session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p><strong>整合</strong></p><ul><li>目的：将生成的代理对象存入到Spring的容器当中（之前是通过自己的核心配置文件来配置）</li></ul><ol><li><p>SqlMapConﬁg.xml配置文件中的内容配置到applicationContext.xml（spring的）配置文件中</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置C3P0的连接池对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///ssm<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 配置SqlSession的工厂,底层工厂创建sqlsession，sqlsession创建代理对象存入ioc容器中--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!--如果不是纯注解方式，还需要注入mybatis核心配置文件--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:sqlMapConfig.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置扫描dao的包，底层告诉sqlsession创建谁的代理对象 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperScanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注入sqlSessionFactory--></span><span class="token comment" spellcheck="true">&lt;!--    &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory">&lt;/property>   --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.itcast.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>在AccountDao接口中添加@Repository注解</p></li><li><p>在service中注入dao对象，测试（这样真正注入的对象就是代理对象了，而不是原来daoImpl的实现类对象）</p></li><li><p>配置Spring的声明式事务管理</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 配置事务的通知 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ﬁnd*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">isolation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEFAULT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置 aop --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>conﬁg</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置切入点表达式 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 建立通知和切入点表达式的关系 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>conﬁg</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试：在业务层编写转账方法，不能在controller表现层编写</p><ul><li><strong>bug：在表现层编写，事务不能起效果，因为事务切入点表达式是业务层</strong></li></ul></li></ol></li></ol></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>配置文件：</p><ol><li><p>web.xml：    </p><ol><li>ContextLoaderListener监听器（加载Spring配置文件）、</li><li>DispatcherServlet前端控制器（加载SpringMVC配置文件）、</li><li>CharacterEncodingFilter（中文乱码问题）</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span>         <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--使用2.4以上的表头，不然会出现404--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--配置applicationContext监听器，加载spring配置文件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--配置加载类路径下的配置文件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置前端控制器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--加载springmvc配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--配置处理中文乱码问题--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><p>springMVC.xml： </p><ol><li>context:component-scan 开启注解扫描（只扫描mvc部分）、</li><li>InternalResourceViewResolver 视图解析器</li><li><a href="mvc:default-servlet-handler">mvc:default-servlet-handler</a>排除静态资源过滤</li><li>mvc:annotation-driven 开启MVC注解支持</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启注解扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--排除静态资源过滤问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启Mvc注解支持--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>applicationContext.xml：</p><ol><li>context:component-scan 开启注解扫描（排除mvc部分）</li><li>配置Bean：数据源 ComboPooledDataSource/druid/</li><li>配置Bean：工厂类对象 sqlSessionFactory</li><li>配置Bean：映射的包 MapperScannerConfigurer</li><li>配置Bean：平台事务管理器 DataSourceTransactionManager</li><li>配置事务通知：transactionManager</li><li>配置事务Aop增强：aop:config</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/aop    http://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/tx     http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启注解扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据源c3p0--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置工厂对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置映射的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperScanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory">&lt;/property> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务通知--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>/    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置aop增强--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* cn.hm.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>sqlMapConfig.xml</p><ol><li>配置别名</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token doctype">&lt;!DOCTYPE configuration    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架</title>
      <link href="/2020/06/22/ssm-kuang-jia/spring/"/>
      <url>/2020/06/22/ssm-kuang-jia/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h2><ul><li><p>Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以<strong>IoC（Inverse Of Control： 反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）</strong>为内核</p></li><li><p><strong>spring 的优势</strong></p><ul><li>方便解耦，简化开发</li><li>AOP编程的支持</li><li>声明式事务的支持</li><li>方便程序的测试</li><li>方便集成各种优秀框架 </li><li>降低 JavaEE API的使用难度 </li></ul></li><li><p><strong>spring的体系结构</strong></p><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/spring1.png" alt="image-20200601133424281" style="zoom: 67%;"></li><li><p>IOC和AOP</p><p>**IOC:**所谓控制反转就是应用本身依赖对象的创建和维护权力交给外部容器负责的。这样控制权就由应用转移到了外部容器，控制权的转移就是所谓反转，目的是为了解耦，获得更好的扩展性和良好的可维护性。</p><p>核心容器的主要组件是BeanFactory和ApplicationContext，它是工厂模式的实现，通过BeanFactory反射实例化一个bean对象，将其加入的spring容器中管理。</p><p><strong>AOP</strong>:面向切面编程，使用动态代理的设计模式，在不改变原来代码的基础上动态的增加功能以满足新的需求，如：动态的增加日志、安全或异常处理等。AOP使业务逻辑各部分间的耦合度降低，提高程序可重用性，提高开发效率。    </p></li><li><p>原代码耦合（程序间的依赖关系）问题的解决</p></li></ul><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/spring2.png" alt="image-20200601135015492" style="zoom:67%;"><ul><li><p>解决方案：</p><ol><li><p>使用反射创建对象，避免使用New关键字</p><pre><code>在创建好的工厂类中，使用反射的方法创建实例化对象，其中beanPath就是配置文件中的值bean = Class.forName(beanPath).newInstance();</code></pre></li><li><p>通过读取配置文件来获取要创建的对象全限定类名</p><pre><code>在创建好的工厂类中，使用静态代码块加载配置文件props = new Properties();//读取配置文件InputStream is = BeanFactory.class.getClassLoader().getResourceAsStream("Bean.properties");//加载配置文件props.load(is);</code></pre></li><li><p>优化：让类对象只被初始化（创建）一次，效率更高</p><pre class=" language-java"><code class="language-java">创建一个map集合，将配置文件中的key<span class="token punctuation">,</span>value全部遍历出来，生成对象，保存在map中，其他人调用的是mapz中的key，返回的是对象<span class="token comment" spellcheck="true">//读取配置文件中所有的值，将起存入到map中</span>            <span class="token comment" spellcheck="true">//实例化一个map对象</span>            beans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取props中的所有Key</span>            Enumeration keys <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历所有的key</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//取出每个key</span>                String key <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//根据key获取value</span>                String beanPath <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//反射创建实例化对象</span>                Object bean <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将key和对象都存入到map集合中</span>                beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    根据key值获取bean对象*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> beans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><p> IOC中最基本的技术就是“反射(Reflection)”，通俗来讲就是<strong>根据给出的类名（字符串方式）来动态地生成对象，这种编程方式可以让对象在生成时才被决定到底是哪一种对象</strong>。其实我们<strong>可以把IOC容器看作是一个工厂，这个工厂里要生产的对象都在配置文件中给出定义，然后利用编程语言提供的反射机制，根据配置文件中给出的类名生成相应的对象</strong>。这就是IOC的实现原理–反射机制在工厂模式中的应用。</p></li><li><h3 id="使用-spring的-IOC解决程序耦合"><a href="#使用-spring的-IOC解决程序耦合" class="headerlink" title="使用 spring的 IOC解决程序耦合"></a>使用 spring的 IOC解决程序耦合</h3><ul><li><ol><li><p>准备 spring 的开发包 ：</p><p>官网：<a href="http://spring.io/">http://spring.io/</a> </p><p>下载地址： <a href="http://repo.springsource.org/libs-release-local/org/springframework/spring">http://repo.springsource.org/libs-release-local/org/springframework/spring</a> </p></li></ol></li><li><ol start="2"><li>创建一个 xml 文件</li></ol><ul><li><ol><li>增加约束：</li></ol></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span> </code></pre><ul><li><ol start="2"><li>在配置文件中配置 service 和 dao </li></ol></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- bean 标签：用于配置让 spring 创建对象，并且存入 ioc 容器之中       id 属性：对象的唯一标识。       class 属性：指定要创建对象的全限定类名 --></span> <span class="token comment" spellcheck="true">&lt;!-- 配置 service --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 配置 dao --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li><ol start="3"><li>类中获取spring容器，获取容器中的对象</li></ol></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.使用 ApplicationContext 接口，就是在获取 spring 容器   </span>ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//2.根据 bean 的 id 获取对象   </span>IAccountService aService <span class="token operator">=</span> <span class="token punctuation">(</span>IAccountService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li><li><p><strong>Spring基于 XML 的 IOC 细节</strong></p><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/spring3.png" alt="image-20200601172657256" style="zoom:67%;"><ul><li> ApplicationContext 接口的实现类 </li></ul><pre><code>ClassPathXmlApplicationContext：  它是从类的根路径下加载配置文件  (推荐) FileSystemXmlApplicationContext： 它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。 AnnotationConfigApplicationContext: 使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。 </code></pre><ul><li><p>BeanFactory和 ApplicationContext 的区别</p><pre><code>BeanFactory 才是 Spring 容器中的顶层接口。 ApplicationContext 是它的子接口。 BeanFactory 和 ApplicationContext 的区别：  创建对象的时间点不一样。   ApplicationContext：只要一读取配置文件，默认情况下就会创建对象。(创建之后就不会再创建，适用于单例，不过它是智能的，可以通过具体情况改变)   BeanFactory：什么使用什么时候创建对象。（适用于多例）</code></pre></li></ul></li><li><p><strong>IOC 中 bean 标签和管理对象细节</strong></p><ul><li><p>实例化 Bean 的三种方式 </p><pre class=" language-xml"><code class="language-xml">第一种方式：使用**默认无参构造函数**  <span class="token comment" spellcheck="true">&lt;!--在默认情况下：它会根据默认无参构造函数来创建类对象。如果 bean 中没有默认无参构造函数，将会创建失败。  --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-xml"><code class="language-xml">第二种方式：spring管理静态工厂-使用**静态**工厂的方法创建对象     /**      * 模拟一个静态工厂，创建业务层实现类       */ public class StaticFactory {       public static IAccountService createAccountService(){           return new AccountServiceImpl();  } } <span class="token comment" spellcheck="true">&lt;!-- 使用 StaticFactory 类中的静态方法 createAccountService 创建对象，并存入 spring 容器       id 属性：指定 bean 的 id，用于从容器中获取的唯一标识       class 属性：指定静态工厂的全限定类名       factory-method 属性：指定生产对象的静态方法  --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span>     <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.factory.StaticFactory<span class="token punctuation">"</span></span>     <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createAccountService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml">第三种方式：spring管理实例工厂-使用**实例**工厂的方法创建对象 /**  * 模拟一个实例工厂，创建业务层实现类   * 此工厂创建对象，必须现有工厂实例对象，再调用方法  */ public class InstanceFactory {       public IAccountService createAccountService(){           return new AccountServiceImpl();  } }  <span class="token comment" spellcheck="true">&lt;!--先把工厂的创建交给 spring 来管理。 然后再使用工厂的 bean 来调用里面的方法   factory-bean 属性：用于指定实例工厂 bean 的 id。   factory-method 属性：用于指定实例工厂中创建对象的方法。  --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instancFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.factory.InstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span>  <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instancFactory<span class="token punctuation">"</span></span>       <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createAccountService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> </code></pre></li><li><p>bean 标签 </p><pre><code>作用：  用于配置对象让 spring 来创建的。  默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。 属性：  id：给对象在容器中提供一个唯一标识。用于获取对象。  class：指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。  scope：指定对象的作用范围。        * singleton :默认值，单例的.        * prototype :多例的.        * request :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到 request 域中.        * session :WEB 项目中,Spring 创建一个 Bean 的对象,将对象存入到 session 域中.        * global session :WEB 项目中,应用在 Portlet 集群环境.如果没有 Portlet 集群环境那么                             globalSession 相当于 session.   init-method：指定类中的初始化方法名称。   destroy-method：指定类中销毁方法名称。 </code></pre></li></ul></li><li><p><strong>spring 的依赖注入</strong></p><ul><li><p>概念：依赖关系交给spring来维护，框架把持久层对象传入业务层，而不用我们自己去获取</p></li><li><p>构造函数注入</p><pre class=" language-xml"><code class="language-xml">//有参构造函数public AccountServiceImpl(String name, Integer age, Date birthday) {   this.name = name;   this.age = age;   this.birthday = birthday;  } <span class="token comment" spellcheck="true">&lt;!-- 使用构造函数的方式，给 service 中的属性传值  要求：   类中需要提供一个对应参数列表的构造函数。  涉及的标签：   constructor-arg    属性：     index:指定参数在构造函数参数列表的索引位置 从0开始    type:指定参数在构造函数中的数据类型 name:指定参数在构造函数中的名称     用这个找给谁赋值  (常用)    =======上面三个都是找给谁赋值，下面两个指的是赋什么值的==============      value:它能赋的值是基本数据类型和 String 类型     ref:它能赋的值是其他 bean 类型，也就是说，必须是在配置文件中配置过的 bean   --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 张三 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> </code></pre></li><li><p>set 方法注入 (常用)</p><pre class=" language-xml"><code class="language-xml">只需要成员的set方法，不需要有参构造函数<span class="token comment" spellcheck="true">&lt;!-- 通过配置文件给 bean 中的属性传值：使用 set 方法的方式  涉及的标签：   property 属性：    name：找的是类中 set 方法后面的部分    ref：给属性赋值是其他 bean 类型的    value：给属性赋值是基本数据类型和 string 类型的  --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>注入集合属性（常用）</p><pre class=" language-xml"><code class="language-xml">使用set注入的方式<span class="token comment" spellcheck="true">&lt;!-- 在注入集合数据时，只要结构相同，标签可以互换   List 结构的：   array,list,set  Map 结构的   map,entry,props,prop --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 在注入集合数据时，只要结构相同，标签可以互换 --></span>      <span class="token comment" spellcheck="true">&lt;!-- 给数组注入数据 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myStrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 注入 list 集合数据 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 注入 set 集合数据 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mySet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 注入 Map 数据 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testA<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 注入 properties 数据 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul></li></ul><hr><h2 id="基于注解的-IOC-配置"><a href="#基于注解的-IOC-配置" class="headerlink" title="基于注解的 IOC 配置"></a>基于注解的 IOC 配置</h2><h3 id="常用注解："><a href="#常用注解：" class="headerlink" title="常用注解："></a>常用注解：</h3><ul><li><p>用于创建bean对象的</p></li><li><p>@Component </p><pre><code>作用：  把资源让 spring 来管理。相当于在 xml 中配置一个 bean。 属性：  value：指定 bean 的 id。如果不指定 value 属性，默认 bean 的 id 是当前类的类名。首字母小写。</code></pre></li><li><p> @Controller  @Service  @Repository </p></li></ul><pre><code>作用和Component一摸一样，更加明确的语义化。  @Controller：一般用于表现层的注解。  @Service：一般用于业务层的注解。 @Repository：一般用于持久层的注解。 细节：如果注解中有且只有一个属性要赋值时，且名称是 value时可以不写。 </code></pre><ul><li><p> 用于注入数据的</p></li><li><p>@Autowired </p><pre><code>作用：  自动按照类型注入。    当使用注解注入属性时，set方法可以省略。它只能注入bean 类型。当有多个相同类型时，使用变量名称作为 bean 的 id，在spring容器查找，找到了也可以注入成功。找不到就报错</code></pre></li><li><p>@Qualifier </p><pre><code>作用：  在自动按照类型注入的基础之上，再按照 Bean 的 id 注入。它在给字段注入时不能独立使用，必须和 @Autowire 一起使用；但是给方法参数注入时，可以独立使用。 属性：  value：指定 bean 的 id。 </code></pre></li><li><p> @Resource </p></li></ul><pre><code>作用：  直接按照 Bean 的 id 注入。也只能注入bean 类型。 属性：  name：指定 bean 的 id。</code></pre><ul><li><p>@Value </p><pre><code>作用：  注入基本数据类型和 String 类型数据的 属性：  value：用于指定值</code></pre></li><li><p>用于改变作用范围（单例、多例）的</p></li><li><p> @Scope </p></li></ul><pre><code>作用：  指定 bean 的作用范围。 属性：  value：指定范围的值。      取值：singleton（单）  prototype(多)                         request session globalsession </code></pre><ul><li><p>和生命周期相关的</p></li><li><p>@PostConstruct </p><pre><code>作用：  用于指定初始化方法。 </code></pre></li><li><p>@PreDestroy </p><pre><code>作用：  用于指定销毁方法。 </code></pre></li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li><p>导入spring-aop依赖</p></li><li><p>使用@Component 注解配置管理的资源 </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"accountDao"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span>  <span class="token keyword">implements</span> <span class="token class-name">IAccountDao</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> DBAssit dbAssit<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre></li><li><p>创建 spring 的 xml配置文件并开启对注解的支持</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 告知 spring 创建容器时要扫描有注解的的包 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span> </code></pre></li></ul><h3 id="关于-Spring-注解和-XML的选择问题"><a href="#关于-Spring-注解和-XML的选择问题" class="headerlink" title="关于 Spring 注解和 XML的选择问题"></a>关于 Spring 注解和 XML的选择问题</h3><ul><li><p>注解的优势：  配置简单，维护方便（我们找到类，就相当于找到了对应的配置）。 </p></li><li><p>XML 的优势：  修改时，不用改源码。不涉及重新编译和部署</p></li><li><p>Spring 管理 Bean方式的比较：</p><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/spring4.png" alt="image-20200602220049920" style="zoom:67%;"></li></ul><hr><h2 id="基于XML的IOC案例"><a href="#基于XML的IOC案例" class="headerlink" title="基于XML的IOC案例"></a>基于XML的IOC案例</h2><ul><li><p>需求：实现单表的CRUD操作</p></li><li><p>技术要求：使用 spring 的 IoC 实现对象的管理 ，使用 DBUtils 作为持久层解决方案，使用 c3p0 数据源</p><ol><li>环境搭建</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>创建数据库，根据数据库创建bean类</p></li><li><p>编写业务层代码</p></li></ol><pre class=" language-java"><code class="language-java"> 接口： <span class="token comment" spellcheck="true">/*    保存账户     */</span>    <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    查询所有     */</span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    通过Id查询单个     */</span>    Account <span class="token function">findAccountById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    通过id修改账户信息     */</span>    <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    通过id删除账户信息     */</span>    <span class="token keyword">void</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    实现类：    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//xml配置需要Set方法，注解不需要</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccountDao</span><span class="token punctuation">(</span>IAccountDao accountDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountDao <span class="token operator">=</span> accountDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="4"><li>编写持久层代码</li></ol><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//创建dbUtils对象</span>    <span class="token keyword">private</span> QueryRunner runner<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRunner</span><span class="token punctuation">(</span>QueryRunner runner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>runner <span class="token operator">=</span> runner<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span><span class="token string">"select * from account"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span><span class="token string">"select * from account where id = ? "</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span><span class="token string">"update account set name = ?,money = ? where id = ? "</span><span class="token punctuation">;</span>            runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ol start="5"><li>创建并编写配置文件bean.xml</li></ol><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--配置service--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注入dao--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置dao对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注入QueryRunner--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runner<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置QueryRunner对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.commons.dbutils.QueryRunner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注入数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据源c3p0--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--连接数据库必备信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ol start="6"><li>编写测试类</li></ol><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获得spring容器</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据bean的id获取对象</span>        IAccountService accountService <span class="token operator">=</span> <span class="token punctuation">(</span>IAccountService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts <span class="token operator">=</span> accountService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Account account<span class="token operator">:</span>accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ul><hr><h2 id="基于注解的IOC案例"><a href="#基于注解的IOC案例" class="headerlink" title="基于注解的IOC案例"></a>基于注解的IOC案例</h2><ol><li><p>环境搭建：当使用Resource注解时，需要加上此依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.annotation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.annotation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建数据库，根据数据库创建bean类</p></li><li><p>编写业务层代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可省略值，那么就是类名，首字母小写</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"accountDao"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里是dao的id</span>    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span></code></pre></li><li><p>编写持久层代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"accountDao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"runner"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里是xml中的bean id</span>    <span class="token keyword">private</span> QueryRunner runner<span class="token punctuation">;</span></code></pre></li><li><p>创建并编写配置文件bean.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--告知spring在创建容器时要扫描的包--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--配置QueryRunner对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.commons.dbutils.QueryRunner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注入数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据源c3p0--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--连接数据库必备信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写测试类</p></li></ol><hr><h2 id="纯注解形式，将xml变为注解"><a href="#纯注解形式，将xml变为注解" class="headerlink" title="纯注解形式，将xml变为注解"></a>纯注解形式，将xml变为注解</h2><ul><li><p>待改造的问题</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 配置 dbAssit --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dbAssit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dbassit.DBAssit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///spring_day02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> </code></pre></li><li><p><strong>新注解</strong></p><ul><li><p>@Configuration （声明配置类）</p><pre><code>作用：  用于指定当前类是一个 spring 配置类获取容器时需要使用 AnnotationApplicationContext(有@Configuration 注解的类.class)。 属性：  value:用于指定配置类的字节码 </code></pre></li><li><p>@ComponentScan（指定扫描的包） </p><pre><code>作用：  用于指定 spring 在初始化容器时要扫描的包。作用和在 spring 的 xml 配置文件中的： &lt;context:component-scan base-package="com.itheima"/&gt;一样。 属性：  basePackages/value：用于指定要扫描的包。</code></pre></li><li><p>@Bean（将对象放入容器） </p><pre><code>作用：  该注解只能写在方法上，将方法返回值放入 spring 容器中。 属性：  name：给当前@Bean 注解方法创建的对象指定一个名称(即 bean 的 id）。</code></pre></li><li><p>@Import（引入子配置类） </p><pre><code>作用：  用于父配置类导入子配置类，在引入其他配置类时，可以不用再写@Configuration 注解。写上也没问题。 属性：  value[]：用于指定其他配置类的字节码。</code></pre></li><li><p>@PropertySource（引入配置文件） </p><pre class=" language-java"><code class="language-java">作用：     用于加载<span class="token punctuation">.</span>properties 文件中的配置属性：  value<span class="token punctuation">[</span><span class="token punctuation">]</span>：用于指定 properties 文件位置。如果是在类路径下，需要写上 classpath<span class="token operator">:</span> 例如：<span class="token annotation punctuation">@PropertySource</span> <span class="token punctuation">(</span><span class="token string">"classpath:jdbcConfig.properties"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>位置在父配置类中<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcConfig</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String url<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String username<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String password<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**   * 创建一个数据源，并存入 spring 容器中    */</span>      <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> DataSource <span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>                ComboPooledDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       ds<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>                ds<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                ds<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> ds<span class="token punctuation">;</span>   <span class="token punctuation">}</span> </code></pre><blockquote><p>注意：</p><p>使用纯注解，测试的时候需要使用</p><p><code>ApplicationContext ac = new AnnotationConfigApplicationContext(springConfiguration.class);</code></p><p>来获取spring容器</p></blockquote></li></ul></li></ul><hr><h2 id="Spring-整合-Junit（需要4-12版本）"><a href="#Spring-整合-Junit（需要4-12版本）" class="headerlink" title="Spring 整合 Junit（需要4.12版本）"></a>Spring 整合 Junit（需要4.12版本）</h2><ul><li><p>思路分析：junit 无法知晓我们是否使用了 spring 框架，更不用说帮我们创建 spring 容器了。不过我们替换掉junit的运行器。 这时，我们需要依靠 spring 框架，因为它提供了一个运行器，可以读取配置文件（或注解）来创建容器。我 们只需要告诉它配置文件在哪就行了。</p><ol><li>导入依赖</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>使用@RunWith 注解替换原有运行器 </li></ol><pre><code>  @RunWith(SpringJUnit4ClassRunner.class) public class AccountServiceTest { } </code></pre><ol start="3"><li>使用@ContextConfiguration 指定 spring 配置文件的位置</li></ol><pre><code>  @ContextConfiguration 注解：  locations 属性：用于指定xml配置文件的位置。如果是类路径下，需要用 classpath:表明    classes 属性：用于指定注解的类。例如：@ContextConfiguration(locations= {"classpath:bean.xml"})</code></pre><ol start="4"><li>使用@Autowired 给测试类中的变量注入数据 </li></ol><pre><code>  @Autowired   private IAccountService as ; </code></pre></li></ul><hr><h2 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h2><h3 id="学习-spring-中的-AOP-要明确的事"><a href="#学习-spring-中的-AOP-要明确的事" class="headerlink" title="学习 spring 中的 AOP 要明确的事"></a>学习 spring 中的 AOP 要明确的事</h3><pre><code>a、开发阶段（我们做的）  编写核心业务代码（开发主线）：要求熟悉业务需求。  把公用代码抽取出来，制作成通知。（开发阶段最后再做） 在配置文件中，声明切入点与通知间的关系，即切面。 b、运行阶段（Spring框架完成的）  Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</code></pre><h3 id="AOP-相关术语"><a href="#AOP-相关术语" class="headerlink" title="AOP 相关术语"></a>AOP 相关术语</h3><pre><code>Joinpoint(连接点):   所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的 连接点。 Pointcut(切入点):   所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。 Advice(通知/增强):   所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。                      通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。 Introduction(引介):   引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。 Target(目标对象):   代理的目标对象。 Weaving(织入):   是指把增强应用到目标对象来创建新的代理对象的过程。                   spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。 Proxy（代理）:   一个类被 AOP 织入增强后，就产生一个结果代理类。 Aspect(切面):   是切入点和通知（引介）的结合。 </code></pre><h3 id="基于-XML-的-AOP-配置"><a href="#基于-XML-的-AOP-配置" class="headerlink" title="基于 XML 的 AOP 配置"></a>基于 XML 的 AOP 配置</h3><ol><li><p>导入依赖</p><pre><code>springaop5.0.2springaspects</code></pre></li><li><p>创建 spring 的配置文件并导入约束 </p><pre class=" language-xml"><code class="language-xml">aop的约束<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans               http://www.springframework.org/schema/beans/spring-beans.xsd              http://www.springframework.org/schema/aop               http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置 spring 的 ioc </p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 配置 service --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>把通知类配置进容器中</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置通知 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.utils.TransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用 aop:config 声明 aop 配置 </p><pre class=" language-xml"><code class="language-xml">作用：用于声明开始 aop 的配置 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 配置的代码都写在此处 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span> </code></pre></li><li><p>使用 aop:aspect 配置切面 </p><pre class=" language-xml"><code class="language-xml">作用：   用于配置切面。  属性：       id：给切面提供一个唯一标识。       ref：引用配置好的通知类 bean 的 id。 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--配置通知的类型要写在此处--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用 aop:pointcut 配置切入点表达式 </p><pre class=" language-xml"><code class="language-xml">作用：   用于配置切入点表达式。就是指定对哪些类的哪些方法进行增强。  属性：       expression：用于定义切入点表达式。       id：用于给切入点表达式提供一个唯一标识 位置：必须在配置切面之前，也可以在配置切面中，则该表达式只能应用于该切面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(  public void com.itheima.service.impl.AccountServiceImpl.transfer(    java.lang.String, java.lang.String, java.lang.Float) )<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 切入点表达式说明 :    表达式语法：execution([修饰符] 返回值类型 包名.类名.方法名(参数))     访问修饰符可以省略，    全通配方式：                       *     *..  *  .  *  (..)    使用..来表示当前包，及其子包         注：  通常情况下，我们都是对业务层的方法进行增强，所以切入点表达式都是切到业务层实现类。                  execution(* com.itheima.service.impl.*.*(..))    </code></pre></li><li><p>使用 aop:xxx 配置对应的通知类型 (写在aop:aspect里)</p><pre><code> 作用：   用于配置通知。指定增强的方法在切入点方法之前执行    属性：   method:用于指定通知类中的增强方法名称   ponitcut-ref：用于指定切入点的表达式的引用            poinitcut：用于指定切入点表达式，expression(public void                                     com.itheima.service.impl.AccountServiceImpl.transfer()) 执行时间点：       aop:before  前置通知，切入点方法执行之前执行     aop:after-returning 后置通知，切入点方法正常执行之后。它和异常通知只能有一个执行     aop:after-throwing 异常通知，切入点方法执行产生异常后执行。它和后置通知只能执行一个     aop:after  用于配置最终通知，无论切入点方法执行时是否有异常，它都会在其后面执行。      &lt;aop:before method="beginTransaction" pointcut-ref="pt1"/&gt; </code></pre></li></ol><ul><li><p><strong>环绕通知</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置环绕通知 <span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span>aop<span class="token operator">:</span>around method<span class="token operator">=</span><span class="token string">"transactionAround"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt1"</span><span class="token operator">/</span><span class="token operator">></span> 说明：   它是 spring 框架为我们提供的一种可以在代码中手动控制增强代码什么时候执行的方式。 注意：   通常情况下，环绕通知都是独立使用的     spring 框架为我们提供了一个接口：ProceedingJoinPoint，它可以作为环绕通知的方法参数。      在环绕通知执行时，spring 框架会为我们提供该接口的实现类对象，我们直接使用就行<span class="token keyword">public</span> Object <span class="token function">transactionAround</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//定义返回值  </span>    Object rtValue <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//获取方法执行所需的参数   </span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//前置通知：开启事务   </span>    <span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//执行方法  </span>    rtValue <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//后置通知：提交事务   </span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//异常通知：回滚事务   </span>    <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//最终通知：释放资源   </span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre></li><li><p><strong>例子</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 声明一个业务类 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.service.impl.UserManagerServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lixiaoxi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 声明通知类 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aspectBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.aop.AopAspect<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aspectBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.spring.service.impl.UserManagerServiceImpl..*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doBefore<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doAfterReturning<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doAfter<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doAround<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doAfterThrowing<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="基于注解的-AOP-配置"><a href="#基于注解的-AOP-配置" class="headerlink" title="基于注解的 AOP 配置"></a>基于注解的 AOP 配置</h3><p>三大步:</p><ul><li><p>将业务逻辑组件和切面类都加入到容器中，并告知spring容器哪个是切面类（@Aspect）</p></li><li><p>在切面类上的每一个通知方法上标注上通知注解，告诉Spring何时何地运行（切入点表达式）</p></li><li><p>开启基于注解的AOP模式</p><ol><li>配置文件中导入 spring配置文件 的名称空间</li></ol><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"  xmlns:aop="http://www.springframework.org/schema/aop"  xmlns:context="http://www.springframework.org/schema/context"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"     xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/aop         http://www.springframework.org/schema/aop/spring-aop.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd"&gt;</code></pre><ol start="2"><li>把资源使用注解配置 </li></ol><pre><code>@Service("accountService") public class AccountServiceImpl implements IAccountService { </code></pre><ol start="3"><li>指定 spring 要扫描的包</li></ol><pre><code>&lt;!-- 告知 spring，在创建容器时要扫描的包 --&gt; &lt;context:component-scan base-package="com.itheima"&gt;&lt;/context:component-scan&gt;或@ComponentScan（指定扫描的包） </code></pre><ol start="4"><li>把通知类也使用注解配置 </li></ol><pre><code>@Component("txManager") </code></pre><ol start="5"><li>在通知类上使用@Aspect 注解声明为切面 </li></ol><pre><code>@Aspect//表明当前类是一个切面类</code></pre><ol start="6"><li>在增强的方法上使用注解配置通知</li></ol><pre><code>@Before@AfterReturning(value="",returning="result")，方法参数可以加一个Object result，用于获取返回值@AfterThrowing(value="",throwing="exception"),方法参数可以加一个Exception exception，用于获取异常信息@After @Before("execution(* com.itheima.service.impl..(..))") 方法的参数可以加JoinPoint，且必须在参数的第一位joinponit.getSignature().getName()可以获取到被切方法的名字joinponit.getArgs()可以获取被切方法的参数列表</code></pre><ol start="7"><li>**在 spring 配置文件中开启 spring 对注解 AOP 的支持 **</li></ol><pre><code>&lt;aop:aspectj-autoproxy/&gt;  或纯注解方式  @EnableAspectJAutoProxy  public class SpringConfiguration { }</code></pre><ol start="8"><li>切入点表达式注解 </li></ol><pre><code>  @Pointcut("execution(* com.itheima.service.impl..(..))")   private void pt1() {}   @Around("pt1()")//注意：千万别忘了写括号    public Object printLog() {}</code></pre><blockquote><p>注意：</p><p>进行测试的时候，业务逻辑方法对象应该是从容器中获取，如果是自己new出来，不会有aop增强的效果</p></blockquote><ul><li>环绕通知注解配置 </li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.impl.*.*(..))"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> Object <span class="token function">transactionAround</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//定义返回值   </span>    Object rtValue <span class="token operator">=</span> null<span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取方法执行所需的参数    </span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//前置通知：开启事务    </span>        <span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行方法    </span>        rtValue <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后置通知：提交事务    </span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//异常通知：回滚事务    </span>        <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//最终通知：释放资源    </span>        <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ul><hr><h2 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h2><h3 id="JDBCTemplate和DBUtils对比："><a href="#JDBCTemplate和DBUtils对比：" class="headerlink" title="JDBCTemplate和DBUtils对比："></a>JDBCTemplate和DBUtils对比：</h3><ul><li>最重要的一点：jdbcTemplate的query方法是看不同query的返回值：query（查所有、查一个）、queryForObject（查一行一列），而参数都是new BeanProperty&lt;&gt;()  DBUtils的query方法只有query，是看query中不同参数new BeanHandler的返回值：BeanHandler、            BeanListHandler、BeanObjectHandler</li></ul><pre class=" language-java"><code class="language-java">查一个List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = ? "</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断list是否为空，空则返回null，不为空则返回该信息，因为是一个信息，所有get(0)是该信息</span><span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>null<span class="token operator">:</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li><p>导入依赖</p><pre><code> spring-jdbc-5.0.2.RELEASE.jar  spring-tx-5.0.2.RELEASE.jar</code></pre></li><li><p>配置数据源 </p><ul><li><p>C3P0</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///spring_day02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置 spring 内置数据源</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///spring_day02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>将数据库连接的信息配置到属性文件中:</p><pre><code>引入外部的属性文件&lt;context:property-placeholder location="classpath:jdbc.properties"/&gt; </code></pre></li><li><p> JdbcTemplate 的增删改查操作 </p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置一个数据库的操作模板：JdbcTemplate --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li><p>第一种方式（所有情况都适用）：在 dao 中定义 JdbcTemplate </p><pre><code>在 Dao类中定义 JdbcTemplate 的方式，适用于所有配置方式（xml和注解都可以）。 public class AccountDaoImpl implements IAccountDao {private JdbcTemplate jdbcTemplate;    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {   this.jdbcTemplate = jdbcTemplate;  }xml：&lt;!-- 配置一个 dao --&gt;  &lt;bean id="accountDao" class="com.itheima.dao.impl.AccountDaoImpl"&gt;       &lt;!-- 注入 jdbcTemplate --&gt;         &lt;property name="jdbcTemplate" ref="jdbcTemplate"&gt;&lt;/property&gt; &lt;/bean&gt;</code></pre></li><li><p>第二种方式（纯注解）：在配置类上加JDBCTemplate组件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数据源</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> DataSource <span class="token function">dateSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    ComboPoolDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPoolDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//JdbcTemplate</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> JdbcTemplate <span class="token function">jdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    jdbcTemplate jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>第三种方式（注解不适用）：让 dao 继承 JdbcDaoSupport </p><pre class=" language-java"><code class="language-java">让 Dao继承 JdbcDaoSupport 的方式，只能用于基于 XML 的方式，注解用不了。 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl2</span> <span class="token keyword">extends</span> <span class="token class-name">JdbcDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountDao</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//getJdbcTemplate()方法是从父类上继承下来的。   </span>     List<span class="token operator">&lt;</span>Account<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from account where id = ? "</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">AccountRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      xml<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置 dao2 <span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountDao2"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.itheima.dao.impl.AccountDaoImpl2"</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入 dataSource <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre></li></ul><hr><h2 id="Spring中的事务控制"><a href="#Spring中的事务控制" class="headerlink" title="Spring中的事务控制"></a>Spring中的事务控制</h2><ul><li><p>写在最前：Spring 提供了分层设计业务层的事务处理解决方案，spring 的事务控制都是基于 AOP 的</p></li><li><p> Spring中事务控制的 API介绍：</p></li><li><p>PlatformTransactionManager：此接口是 spring 的事务管理器</p></li><li><p>它的实现类：</p><pre><code>org.springframework.jdbc.datasource.DataSourceTransactionManager 使用 Spring JDBC 或 iBatis 进行持久化数据时使用 org.springframework.orm.hibernate5.HibernateTransactionManager  使用 Hibernate 版本进行持久化数据时使用</code></pre></li></ul><h3 id="基于-XML-的声明式事务控制（配置方式）"><a href="#基于-XML-的声明式事务控制（配置方式）" class="headerlink" title="基于 XML 的声明式事务控制（配置方式）"></a>基于 XML 的声明式事务控制（配置方式）</h3><ul><li><p>导入依赖</p><pre><code>spring-tx-5.0.2spring-jdbc-5.0.2</code></pre></li><li><p>创建 spring 的配置文件并导入约束 </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/tx         http://www.springframework.org/schema/tx/spring-tx.xsd           http://www.springframework.org/schema/aop            http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>准备数据库表和实体类</p></li><li><p>编写业务层接口和实现类</p></li><li><p>编写 Dao 接口和实现类 </p></li><li><p>在配置文件中配置业务层和持久层</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置 service --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置 dao --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 注入 dataSource 这里使用的是继承的方法，不需要配置JdbcTemplate，不适用于注解--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///spring_day04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> </code></pre></li><li><p>事务配置：配置事务管理器 </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置一个事务管理器 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 注入 DataSource --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置事务的通知，引用事务管理器</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 事务的配置 transaction-manager:引用事务管理器bean的id--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置事务的属性 </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在 tx:advice 标签内部 配置事务的属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 指定方法名称：是业务核心方法   *read-only：是否是只读事务。默认 false(适用于增删改)，不只读(适用于查询)。  isolation：指定事务的隔离级别。默认值是使用数据库的默认隔离级别。  *propagation：指定事务的传播行为，默认REQUIRED（创建事务，适用于增删改），SUPPORTS（适用于查询）。  timeout：指定超时时间。默认值为：-1。永不超时。  rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常，事务不回滚。 没有默认值，任何异常都回滚。  no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回 滚。没有默认值，任何异常都回滚。  --></span>  <span class="token comment" spellcheck="true">&lt;!--name可以用*占位符--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置 AOP 切入点表达式 </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置 aop --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置切入点表达式 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置切入点表达式和事务通知的对应关系</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 在 aop:config标签内部 advice-ref:事务配置的idpointcut-ref：切入点表达式的id--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> </code></pre></li></ul><h3 id="基于注解的配置方式"><a href="#基于注解的配置方式" class="headerlink" title="基于注解的配置方式"></a>基于注解的配置方式</h3><p>三大步：</p><ul><li>开启事务管理功能@EnableTransactionManagement</li><li>给方法标注上@Transactional ，表示当前方法是一个由事务接管的方法</li><li>配置事务管理器来控制事务</li></ul><ul><li><p>导入依赖</p><pre><code>aopaspectJ(解析切入点表达式)</code></pre></li><li><p>创建 spring 的配置文件导入约束并配置扫描的包 （纯注解请参考JDBCTemplate第二种方式配置数据源和jdbcTemplate）</p></li></ul><pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>      http://www.springframework.org/schema/beans              http://www.springframework.org/schema/beans/spring-beans.xsd            http://www.springframework.org/schema/aop          http://www.springframework.org/schema/aop/spring-aop.xsd          http://www.springframework.org/schema/tx           http://www.springframework.org/schema/tx/spring-tx.xsd          http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置 spring 创建容器时要扫描的包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 配置 JdbcTemplate 采用非继承形式，适用于所有情况--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 配置 spring 提供的内置数据源 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/spring_day02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span> </code></pre><ul><li><p>创建数据库表和实体类</p></li><li><p>创建业务层接口和实现类并使用注解让 spring 管理</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//其余代码和基于 XML 的配置相同 </span><span class="token punctuation">}</span> </code></pre></li><li><p>创建 Dao 接口和实现类并使用注解让 spring 管理 </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"accountDao"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//其余代码和基于 XML 的配置相同 </span><span class="token punctuation">}</span></code></pre></li><li><p>事务配置：配置事务管理器并注入数据源 </p><pre class=" language-java"><code class="language-java"> 在配置类上写 <span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> PlatformTransactionManager <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>在业务层使用@Transactional 注解配置事务通知</p><p>``` java<br>//创建bean<br>@Service(“accountService”)<br>//配置事务通知，并配置事务属性<br>@Transactional(readOnly=true,propagation=Propagation.SUPPORTS)<br>public class AccountServiceImpl implements IAccountService {</p><pre><code>//转账@Override  @Transactional(readOnly=false,propagation=Propagation.REQUIRED) public void transfer(String sourceName, String targeName, Float money) { </code></pre><p>/* @Transactional</p><pre><code>该注解的属性和 xml 中的属性含义一致。该注解可以出现在接口上，类上和方法上。 出现接口上，表示该接口的所有实现类都有事务支持。 </code></pre><p>  出现在类上，表示类中所有方法有事务支持<br>  出现在方法上，表示方法有事务支持。<br>  以上三个位置的优先级：方法&gt;类&gt;接口</p></li><li><p>/<br> ```</p></li><li><p>开启 spring 对注解事务的支持 </p><pre><code>&lt;!-- 开启 spring 对注解事务的支持 --&gt; &lt;tx:annotation-driven transaction-manager="transactionManager"/&gt; 或纯注解方式   @EnableTransactionManagement @Configuration @EnableTransactionManagement public class SpringTxConfiguration {  //里面配置数据源，配置 JdbcTemplate,配置事务管理器。 } </code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis框架</title>
      <link href="/2020/06/22/ssm-kuang-jia/mybatis/"/>
      <url>/2020/06/22/ssm-kuang-jia/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="框架-Framework"><a href="#框架-Framework" class="headerlink" title="框架(Framework)"></a>框架(Framework)</h1><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><ul><li>是一个优秀的基于 java 的持久层框架，它内部封装了 jdbc，使开发者只需要关注 sql语句本身， 而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程</li><li>采用 ORM 思想解决了实体和数据库映射的问题</li><li><strong>Mybatis 与 JDBC 编程的比较</strong></li><li><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/mybatis1.png" alt="image-20200527162139445"></li></ul><h3 id="Mybatis-框架开发的准备"><a href="#Mybatis-框架开发的准备" class="headerlink" title="Mybatis 框架开发的准备"></a>Mybatis 框架开发的准备</h3><ul><li>下载相关的 jar 包或 maven 开发的坐标:Mybatis 版本是 3.4.5 版本</li></ul><h3 id="搭建-Mybatis-开发环境"><a href="#搭建-Mybatis-开发环境" class="headerlink" title="搭建 Mybatis 开发环境"></a>搭建 Mybatis 开发环境</h3><ol><li><p>创建 maven 工程 </p></li><li><p>添加 Mybatis 3.4.5 的坐标（依赖）</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写 User 实体类 </p></li><li><p>编写持久层接口 IUserDao （也可以写成 UserDao 或者 UserMapper）</p></li><li><p>编写持久层接口的映射文件 IUserDao.xml （也可使用注解，不编写映射文件，具体方法在8）</p><ul><li><strong>要求</strong>：  <ul><li><strong>创建位置</strong>：必须和持久层接口在相同的包中。（目录和包不一样，需要创建三次，一次性创建为一级目录）  </li><li><strong>名称</strong>：必须以持久层接口名称一样，扩展名是.xml </li></ul></li></ul></li></ol><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/mybatis2.png" alt="image-20200526192732631" style="zoom: 80%;"><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token doctype">&lt;!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span> <span class="token comment" spellcheck="true">&lt;!-- 参数namespace是接口全类名 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.IUserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 配置查询所有操作 --></span>  <span class="token comment" spellcheck="true">&lt;!-- 参数id是接口的方法名，resultType是实体类的全类名 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     select * from user      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><ol start="6"><li> 编写 SqlMapConfig.xml 配置文件 </li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token doctype">&lt;!DOCTYPE configuration     PUBLIC "-//mybatis.org//DTD Config 3.0//EN"     "http://mybatis.org/dtd/mybatis-3-config.dtd"></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 配置 mybatis 的环境 --></span>  <span class="token comment" spellcheck="true">&lt;!-- 参数随便起 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!-- 配置 mysql 的环境 --></span>   <span class="token comment" spellcheck="true">&lt;!-- 参数与default保持一致--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 配置事务的类型 --></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- 配置连接数据库的信息：用的是数据源(连接池) --></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/eesy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 告知 mybatis 映射配置的位置 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/itheima/dao/IUserDao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ol start="7"><li><p>快速入门</p><ul><li>编写测试类：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.读取配置文件</span>        InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建SqlSessionFactory构建者对象</span>        SqlSessionFactoryBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.使用构建者创建工程对象SqlSessionFactory</span>        SqlSessionFactory factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.使用工厂生产SqlSession对象</span>        SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.使用SqlSession对象创建Dao接口代理对象</span>        IUserDao userDao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>IUserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//此处也可以写session.select(名称空间.方法id);直接进行crud操作，此时名称空间是随意起的，也不需要接口</span>        <span class="token comment" spellcheck="true">//6.使用代理对象执行查询所有的方法</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span>users<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//7.释放资源</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/mybatis3.png" alt="image-20200526215352563" style="zoom:150%;"></li><li><p>使用注解，不使用映射配置文件</p><ol><li>将dao接口上加上注解：</li></ol><pre><code>@select("select * from user")</code></pre><ol start="2"><li>修改mybatis总配置中的映射配置</li></ol><pre><code>&lt;mapper class="cn/hm/dao/IUserDao"/&gt;</code></pre><ol start="3"><li>注意：在使用基于注解的 Mybatis 配置时，请移除 xml 的映射配置（IUserDao.xml）。 </li></ol></li></ol><h3 id="自定义Mybatis底层"><a href="#自定义Mybatis底层" class="headerlink" title="自定义Mybatis底层"></a>自定义Mybatis底层</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/mybatis4.png" alt="image-20200527140709218"></p><hr><h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><ul><li>使用要求：  </li></ul><ol><li>持久层接口和持久层接口的映射配置必须在相同的包下  </li><li>持久层映射配置中 mapper 标签的 namespace 属性取值必须是持久层接口的全限定类名  </li><li>SQL 语句的配置标签<select>,,,的 id 属性必须和持久层接口的 方法名相同</select></li></ol><pre class=" language-xml"><code class="language-xml">插入操作:1.在持久层接口中添加新增方法  void saveUser(User user);2.在用户的映射配置文件中配置      <span class="token comment" spellcheck="true">&lt;!-- 保存用户--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>saveUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      insert into user(username,birthday,sex,address)          values(#{username},#{birthday},#{sex},#{address})     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span> 2.1.在总配置文件中加上映射配置 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn/hm/dao/IUserDao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>细节：  parameterType 属性：   代表参数的类型，因为我们要传入的是一个类的对象，所以类型就写类的全名称。 sql 语句中使用#{}字符：   它代表占位符，相当于原来 jdbc 部分所学的?，都是用于执行语句时替换实际的数据。   具体的数据是由#{}里面的内容决定的。  #{}中内容的写法：    由于我们保存方法的参数是 一个 User 对象，此处要写 User 对象中的属性名称。 它用的是 ognl 表达式。 ognl 表达式：  它是 apache 提供的一种表达式语言，全称是：   Object Graphic Navigation Language  对象图导航语言  它是按照一定的语法格式来获取数据的。  语法格式就是使用  #{对象.对象}的方式#{user.username}它会先去找 user 对象，然后在 user 对象中找到 username 属性，并调用 getUsername()方法把值取出来。但是我们在 parameterType 属性上指定了实体类名称，所以可以省略 user. 而直接写 username3.添加测试类中的测试方法     @Test     public void testSave(){      User user = new User();     user.setUsername("modify User property");      user.setAddress("北京市顺义区");     user.setSex("男");     user.setBirthday(new Date());     //执行保存方法      userDao.saveUser(user);     }打开 Mysql 数据库发现并没有添加任何记录，原因是什么？ 这一点和 jdbc 是一样的，我们在实现增删改时一定要去控制事务的提交，那么在 mybatis 中如何控制事务 提交呢？ 可以使用:session.commit();加入事务提交后的代码如下：     @After//在测试方法执行完成之后执行     public void destroy() throws Exception{      session.commit();      //释放资源      session.close();      in.close(); }拓展：查询新增用户 id 的返回值    在insert标签体内    <span class="token comment" spellcheck="true">&lt;!-- 配置保存时获取插入的 id  参数表中列名称、类中属性名、执行时期、返回值类型--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AFTER<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           select last_insert_id();      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>  </code></pre><pre class=" language-xml"><code class="language-xml">修改操作：1.在持久层接口中添加更新方法  int updateUser(User user); 2.在用户的映射配置文件中配置     <span class="token comment" spellcheck="true">&lt;!-- 更新用户 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      update user set username=#{username},birthday=#{birthday},sex=#{sex},  address=#{address} where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>3.加入更新的测试方法    @Test     public void testUpdateUser()throws Exception{      //1.根据 id 查询      User user = userDao.findById(52);      //2.更新操作     user.setAddress("北京市顺义区");     int res = userDao.updateUser(user);      System.out.println(res); }     </code></pre><pre class=" language-xml"><code class="language-xml">删除操作：1.在持久层接口中添加删除方法 int deleteUser(Integer userId); 2.在用户的映射配置文件中配置     <span class="token comment" spellcheck="true">&lt;!-- 删除用户 注意，该参数是Int类型，可以是int,Integer,java.lang.Integer--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 注意：#{}只是个占位符，如果只有一个参数且是基本数据类型就可以随便填写--></span>    delete from user where id = #{uid}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>3.加入删除的测试方法     @Test     public void testDeleteUser() throws Exception {     //执行操作     int res = userDao.deleteUser(52);     System.out.println(res); }</code></pre><pre class=" language-xml"><code class="language-xml">查询一个操作：1.在持久层接口中添加 findById 方法 2.在用户的映射配置文件中配置    <span class="token comment" spellcheck="true">&lt;!-- 根据 id 查询 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from user where id = #{uid}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>3. 在测试类添加测试模糊查询：1.在持久层接口中添加模糊查询方法 List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>User</span><span class="token punctuation">></span></span> findByName(String username); 2.在用户的映射配置文件中配置     <span class="token comment" spellcheck="true">&lt;!-- 根据名称模糊查询 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           select * from user where username like #{username}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>3.加入模糊查询的测试方法     @Test       public void testFindByName(){         //5.执行查询一个方法                 List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>User</span><span class="token punctuation">></span></span> users = userDao.findByName("%王%");       //注意这里的百分号        for(User user : users){                  System.out.println(user);               }        }    查询使用聚合函数1.在持久层接口中添加模糊查询方法 2.在用户的映射配置文件中配置     <span class="token comment" spellcheck="true">&lt;!-- 查询总记录条数 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findTotal<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select count(*) from user;     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    3.加入聚合查询的测试方法    @Test    public void testFindTotal(){    int total = userDao.findTotal();    System.out.println(total);    }</code></pre><hr><h2 id="parameterType-配置参数"><a href="#parameterType-配置参数" class="headerlink" title="parameterType 配置参数"></a>parameterType 配置参数</h2><ul><li><p>该属性的取值可以 是基本类型，引用类型（例如:String 类型），还可以是实体类类型（POJO 类）（需要使用全限定类名），同时也可以使用实体类的包装类。</p></li><li><p><strong>传递 pojo 包装对象（多个对象信息封装进一个查询对象中）</strong></p><ul><li>开发中通过 pojo 传递查询条件 ，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。 </li></ul><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>编写 QueryVo     <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryVo</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> User user<span class="token punctuation">;</span>          <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> user<span class="token punctuation">;</span>  <span class="token punctuation">}</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>  <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span>编写持久层接口<span class="token operator">:</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByVo</span><span class="token punctuation">(</span>QueryVo vo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">.</span>测试包装类作为参数     <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindByQueryVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         QueryVo vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"%王%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         vo<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByVo</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>User u <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="resultType-配置结果类型（作用：让类中属性与数据库列名保持一致）"><a href="#resultType-配置结果类型（作用：让类中属性与数据库列名保持一致）" class="headerlink" title="resultType 配置结果类型（作用：让类中属性与数据库列名保持一致）"></a>resultType 配置结果类型（作用：让类中属性与数据库列名保持一致）</h3><ul><li><p>以指定结果集的类型，它支持基本类型和实体类类型（需要全限定类名）。 </p></li><li><p>当是实体类名称时，实体类中的属性名称必须和查询语句中的列名保持一致，否则无法实现封装。</p><ul><li><p><strong>可以使用起别名的方式解决问题</strong></p></li><li><ol><li>在sql语句中起别名（效率高，但查询的多过于麻烦，不宜于维护）</li></ol><pre class=" language-xml"><code class="language-xml">使用别名查询 <span class="token comment" spellcheck="true">&lt;!--起的别名与实体类的属性名相同 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select id as userId,username as userName,birthday as userBirthday,  sex as userSex,address as userAddress from user <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> </code></pre></li><li><ol start="2"><li>使用 resultMap 建立 User 实体和数据库表的对应关系 （多插入了一个标签，效率低，但后期好维护）</li></ol><pre class=" language-xml"><code class="language-xml">1.定义 resultMap <span class="token comment" spellcheck="true">&lt;!-- 建立 User 实体和数据库表的对应关系  type 属性：指定实体类的全限定类名  id 属性：给定一个唯一标识，是给查询 select 标签引用时用的。 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userSex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAddress<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userBirthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span> id 标签：用于指定主键字段 result 标签：用于指定非主键字段 column 属性：用于指定数据库列名 property 属性：用于指定实体类属性名称2. 映射配置 <span class="token comment" spellcheck="true">&lt;!-- 不再需要resultType,而是使用resultMap来找到返回类型 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     select * from user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><hr><h2 id="SqlMapConfig-xml配置文件"><a href="#SqlMapConfig-xml配置文件" class="headerlink" title="SqlMapConfig.xml配置文件"></a>SqlMapConfig.xml配置文件</h2><h3 id="1-SqlMapConfig-xml-中配置的内容和顺序"><a href="#1-SqlMapConfig-xml-中配置的内容和顺序" class="headerlink" title="1. SqlMapConfig.xml 中配置的内容和顺序"></a>1. SqlMapConfig.xml 中配置的内容和顺序</h3><pre><code>-properties（属性）    --property -settings（全局配置参数）     --setting -typeAliases（类型别名）      --typeAliase      --package -typeHandlers（类型处理器）-objectFactory（对象工厂）-plugins（插件） -environments（环境集合属性对象）     --environment（环境子属性对象）      ---transactionManager（事务管理）      ---dataSource（数据源） -mappers（映射器）      --mapper      --package</code></pre><h3 id="2-properties（属性）（作用：加载外部配置文件）"><a href="#2-properties（属性）（作用：加载外部配置文件）" class="headerlink" title="2.properties（属性）（作用：加载外部配置文件）"></a>2.properties（属性）（作用：加载外部配置文件）</h3><ol><li> 第一种：在SqlMapConfig.xml配置文件中</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/eesy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>第二种：在classPath下定义 db.properties 文件 </p><pre><code>jdbc.driver=com.mysql.jdbc.Driver jdbc.url=jdbc:mysql://localhost:3306/eesy jdbc.username=root jdbc.password=1234</code></pre><pre class=" language-xml"><code class="language-xml">在SqlMapConfig.xml中加上properties：<span class="token comment" spellcheck="true">&lt;!-- 配置连接数据库的信息    resource 属性：用于指定 properties 配置文件的位置，要求配置文件必须在类路径下                            resource="jdbcConfig.properties" url 属性：    URL： Uniform Resource Locator 统一资源定位符         http://localhost:8080/mystroe/CategoryServlet  (如果是文件，协议就是file:///)        协议  主机   端口               URI    URI：Uniform Resource Identifier 统一资源标识符     /mystroe/CategoryServlet     它是可以在 web 应用中唯一定位一个资源的路径 --></span> <span class="token comment" spellcheck="true">&lt;!-- 属性常用resource 也可以用url 效果一样--></span>&lt;properties url= "file:///D:/IdeaProjects/day02_eesy_01mybatisCRUD/src/main/resources/jdbcConfig.prop erties"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span> </code></pre></li><li><p>dataSource 标签就变成了引用上面的配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="3-typeAliases（类型别名）（给类型起别名，resultType和parameterType在使用全类名时可直接写类名）"><a href="#3-typeAliases（类型别名）（给类型起别名，resultType和parameterType在使用全类名时可直接写类名）" class="headerlink" title="3.typeAliases（类型别名）（给类型起别名，resultType和parameterType在使用全类名时可直接写类名）"></a>3.typeAliases（类型别名）（给类型起别名，resultType和parameterType在使用全类名时可直接写类名）</h3><ul><li><p>自定义别名</p><pre class=" language-xml"><code class="language-xml">在 SqlMapConfig.xml 中配置：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 单个别名定义 alias:指定别名 type:原名 使用package标签就不需要typeAlias标签了--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（首字母大写或小写都可以） --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 包名 <span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span> </code></pre></li></ul><h4 id="4-mappers（映射器）（作用：不用单独映射，直接封装映射，注解和Xml配置都起效）"><a href="#4-mappers（映射器）（作用：不用单独映射，直接封装映射，注解和Xml配置都起效）" class="headerlink" title="4.mappers（映射器）（作用：不用单独映射，直接封装映射，注解和Xml配置都起效）"></a>4.mappers（映射器）（作用：不用单独映射，直接封装映射，注解和Xml配置都起效）</h4><ol><li> <mapper resource=" "> 用在配置文件的配置</mapper></li></ol><pre><code>使用相对于类路径的资源 如：&lt;mapper resource="com/itheima/dao/IUserDao.xml" /&gt; </code></pre><ol start="2"><li><p><mapper class=" ">用在注解配置</mapper></p><pre><code>使用 mapper 接口类路径 如：&lt;mapper class="com.itheima.dao.UserDao"/&gt; 注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。 </code></pre></li><li><p><package name="">用在批量配置</package></p><pre><code>注册指定包下的所有 mapper 接口 如：&lt;package name="cn.itcast.dao"/&gt; //name：接口文件夹注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中</code></pre></li></ol><h4 id="5-plugins插件标签"><a href="#5-plugins插件标签" class="headerlink" title="5.plugins插件标签"></a>5.plugins插件标签</h4><p>分页插件</p><ol><li><p>导入通用PageHelper坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.jsqlparser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsqlparser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在mybatis核心配置文件中配置PageHelper插件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageHelper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialect<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试：配置参数</p><pre class=" language-java"><code class="language-java">PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置当前页为1，一页3条</span><span class="token comment" spellcheck="true">//查看分页信息</span>PageInfo<span class="token operator">&lt;</span>User<span class="token operator">></span> userPageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前页："</span><span class="token operator">+</span>userPageInfo<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每页显示条数："</span><span class="token operator">+</span>userPageInfo<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总条数："</span><span class="token operator">+</span>userPageInfo<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总页数："</span><span class="token operator">+</span>userPageInfo<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="Mybatis-的连接池技术"><a href="#Mybatis-的连接池技术" class="headerlink" title="Mybatis 的连接池技术"></a>Mybatis 的连接池技术</h3><ul><li>在 Mybatis 的 SqlMapConfig.xml 配置文件中，通过<datasource type="pooled">来实 现 Mybatis 中连接池的配置。 </datasource></li><li><strong>Mybatis 连接池的分类（<datasource type="其中的属性">）</datasource></strong><ul><li>UNPOOLED     不使用连接池的数据源 </li><li>POOLED       使用连接池的数据源 </li><li>JNDI            使用 JNDI 实现的数据源 (根据服务器获得不同的连接池，c3p0,druid)</li></ul></li></ul><hr><h2 id="Mybatis-的事务控制"><a href="#Mybatis-的事务控制" class="headerlink" title="Mybatis 的事务控制"></a>Mybatis 的事务控制</h2><ul><li><p><strong>Mybatis 自动提交事务的设置</strong></p><pre><code>在测试类的init方法中，将openSession增加参数truesession = factory.openSession(true); </code></pre><ul><li>虽然这也是一种方式，但就 编程而言，设置为自动提交方式为 false再根据情况决定是否进行提交，这种方式更常用。因为我们可以根据业务 情况来决定提交是否进行提交。</li></ul></li></ul><hr><h2 id="动态-SQL（根据不同条件来追加sql语句）"><a href="#动态-SQL（根据不同条件来追加sql语句）" class="headerlink" title="动态 SQL（根据不同条件来追加sql语句）"></a>动态 SQL（根据不同条件来追加sql语句）</h2><ul><li><p><if>标签（拼接条件语句）</if></p><ul><li> 持久层 Dao 映射配置 </li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--注意：BindingException异常的原因：select的id属性和方法名不一样导致--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from user where 1=1  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username!<span class="token punctuation">=</span>null and username !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      and username like #{username}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       and address like #{address}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> 注意：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span><span class="token punctuation">></span></span>标签的 test 属性中写的是对象的属性名</code></pre></li><li><p><where>标签 (简化上面 where 1=1 的条件拼装)</where></p><ul><li> 持久层 Dao 映射配置 </li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username!<span class="token punctuation">=</span>null and username !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and username like #{username}       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         and address like #{address}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span></code></pre></li><li><p><foreach>标签 （拼接 in 条件语句：搜索id为1或2或3的用户）</foreach></p><ul><li><p>在 QueryVo 中加入一个 List 集合用于封装参数 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryVo</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids<span class="token punctuation">;</span>      <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> ids<span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIds</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>ids <span class="token operator">=</span> ids<span class="token punctuation">;</span>  <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre></li><li><p>持久层 Dao 映射配置 </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 查询所有用户在 id 的集合之中 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findInIds<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryvo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--  select * from user where id in (1,2,3,4,5); --></span>      select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids !<span class="token punctuation">=</span> null and ids.size() <span class="token punctuation">></span> 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id in ( <span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span>  <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     #{uid}                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> SQL 语句：    select 字段 from user where id in (?) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span><span class="token punctuation">></span></span>标签用于遍历集合，它的属性：      collection:代表要遍历的集合元素，注意编写时不要写#{}      open:代表语句的开始部分      close:代表结束部分    item:代表中间插入的数（随意写，#{要和item起的名一样}）    separator：分隔符</code></pre></li></ul></li><li><p>sql语句抽取</p><ul><li><p>作用：将多次用到的语句抽取出来</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>使用时：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><hr><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="一对一查询-多对一"><a href="#一对一查询-多对一" class="headerlink" title="一对一查询(多对一)"></a>一对一查询(多对一)</h3><ul><li><p>需求 ：查询所有账户信息，关联查询下单用户信息</p><ul><li><p>使用 resultMap，定义专门的 resultMap 用于映射一对一查询结果</p></li><li><ol start="0"><li>创建表</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>orders<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>ordertime<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>total<span class="token punctuation">`</span> <span class="token keyword">double</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>uid<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>uid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*外键的格式：CONSTRAINT 外键名 FOREIGN KEY (外键名) REFERENCES 目标库名 (目标库外键名)    */</span>  <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>orders_ibfk_1<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">4</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><p>```</p></li><li><ol><li> 修改 Account 类 </li></ol><pre class=" language-java"><code class="language-java">增加用户信息<span class="token keyword">private</span> User user<span class="token punctuation">;</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> user<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><ol start="2"><li>接口方法返回值</li></ol><pre><code>将返回值改 为了 Account 类型。 因为 Account 类中包含了一个 User 类的对象，它可以封装账户所对应的用户信息。 </code></pre></li><li><ol start="3"><li>重新定义 AccountDao.xml 文件 </li></ol></li></ul><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!-- 建立对应关系 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--column：数据表字段名称，property:当前类属性名称--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 它是用于指定从表方的引用实体属性的 --></span>         <span class="token comment" spellcheck="true">&lt;!--property:当前的实体属性名称，javaTape：当前的实体属性类型--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         select u.*,a.id as aid,a.uid,a.money from account a,user u where a.uid =u.id;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> </code></pre><blockquote><p>注意：resultMap内的每个对照关系，尤其是外键对应，否则数据会不对应</p></blockquote><ul><li><ol start="4"><li>在 AccountTest 类中加入测试方法 </li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>Account au <span class="token operator">:</span> accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>au<span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>au<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> </code></pre><blockquote><p>出现的错误：Cause: org.apache.ibatis.executor.ExecutorException</p><p>原因：没有找到空构造函数</p><p>解决：将两个实体类加上空参构造函数即可</p></blockquote></li></ul></li></ul><h3 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h3><ul><li><p>需求：  查询所有用户信息及用户关联的账户信息。 </p></li><li><p>分析：  用户信息和他的账户信息为一对多关系，并且查询过程中如果用户没有账户信息，此时也要将用户信息 查询出来，我们想到了左外连接查询比较合适</p></li><li><ol><li>修改User类</li></ol><pre class=" language-java"><code class="language-java">增加账户信息    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts<span class="token punctuation">;</span>          <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">getAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> accounts<span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccounts</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>accounts <span class="token operator">=</span> accounts<span class="token punctuation">;</span>  <span class="token punctuation">}</span> </code></pre></li><li><ol start="2"><li>重新定义 AccountDao.xml 文件 </li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- collection 是用于建立一对多中集合属性的对应关系    ofType 用于指定集合元素的数据类型    --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置查询所有操作 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select u.*,a.id as aid ,a.uid,a.money from user u left outer join account a on u.id =a.uid <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> collection  部分定义了用户关联的账户信息。表示关联查询结果集 property="accList" ：关联查询的结果集存储在 User 对象的上哪个属性。 ofType="account" ：指定关联查询的结果集中的对象类型即List中的对象类型。此处可以使用别名，也可以使用全限定名。 </code></pre></li></ul><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><ul><li><p>需求：  实现查询所有角色并且加载它所分配的用户信息。 </p></li><li><p>分析：  查询角色我们需要用到Role表，但角色分配的用户的信息我们并不能直接找到用户信息，而是要通过中 间表(USER_ROLE 表)才能关联到用户信息。</p><ul><li><ol><li>编写角色实体类 </li></ol><pre class=" language-java"><code class="language-java">     <span class="token keyword">private</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> users<span class="token punctuation">;</span>     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> users<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>users <span class="token operator">=</span> users<span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre></li><li><ol start="2"><li>编写 Role 持久层接口 </li></ol></li><li><ol start="3"><li> 编写映射文件 </li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token doctype">&lt;!DOCTYPE mapper         PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"         "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.IRoleDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--定义 role 表的 ResultMap--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--注意这里是rid，因为sql语句中重命名了，否则查询不到总裁信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleDesc<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role_desc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--查询所有--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            select u.*,r.id as rid,r.role_name,r.role_desc from role r         left outer join user_role ur  on r.id = ur.rid                left outer join user u on u.id = ur.uid        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><blockquote><p>总结：</p><ol><li>修改实体类，一对一增加实体类属性，一对多、多对多增加集合属性</li></ol><p>一对一使用association，一对多和多对多使用collection，column属性是查询的结果集列名</p></blockquote></li></ul></li></ul><hr><h2 id="Mybatis-延迟加载"><a href="#Mybatis-延迟加载" class="headerlink" title="Mybatis 延迟加载"></a>Mybatis 延迟加载</h2><ul><li><p>延迟加载：   就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载. </p></li><li><p>好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速 度要快。  </p></li><li><p>坏处：   因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗 时间，所以可能造成用户等待时间变长，造成用户体验下降</p></li><li><p>通常：一对一正常立即加载 一对多使用延迟加载</p></li><li><p><strong>使用 assocation 实现延迟加载</strong></p><ul><li><ol><li> SqlMapConfig.xml 文件中添加延迟加载的配置</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre></li><li><ol start="2"><li>持久层映射文件</li></ol><pre class=" language-xml"><code class="language-xml">resultMap中：<span class="token comment" spellcheck="true">&lt;!-- 它是用于指定从表方的引用实体属性的 select参数是调用的方法--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.IUserDao.findById<span class="token punctuation">"</span></span>     <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span></code></pre></li><li><ol start="3"><li>编写select对应的方法</li></ol></li></ul></li><li><p><strong>使用 Collection 实现延迟加载</strong></p><ul><li><ol><li>SqlMapConfig.xml 文件中添加延迟加载的配置</li><li>持久层映射文件</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- collection 是用于建立一对多中集合属性的对应关系     ofType 用于指定集合元素的数据类型    select 是用于指定查询账户的唯一标识（账户的 dao 全限定类名加上方法名称）    column 是用于指定使用哪个字段的值作为条件查询    --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span>      <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.IAccountDao.findByUid<span class="token punctuation">"</span></span>     <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span></code></pre></li><li><ol start="3"><li>编写select对应的方法</li></ol></li></ul></li></ul><hr><h2 id="Mybatis-缓存"><a href="#Mybatis-缓存" class="headerlink" title="Mybatis 缓存"></a>Mybatis 缓存</h2><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/mybatis5.png" alt="image-20200531153243729"></p><ul><li><p><strong>一级缓存</strong>：一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存。</p><ul><li><p>也可手动清除一级缓存：</p><pre><code>sqlSession.clearCache();//此方法也可以清空缓存        userDao = sqlSession.getMapper(IUserDao.class);</code></pre></li></ul></li><li><p><strong>二级缓存</strong>：二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。</p><ul><li><p>二级缓存的开启与关闭</p><ul><li><ol><li>在 SqlMapConfig.xml 文件开启二级缓存</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 开启二级缓存的支持 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span> 因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略。为 true 代表开启二级缓存</code></pre></li><li><ol start="2"><li> 配置相关的 Mapper 映射文件</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--&lt;cache>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。 --></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token doctype">&lt;!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.IUserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 开启二级缓存的支持 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span> </code></pre></li><li><ol start="3"><li> 配置 statement 上面的 useCache 属性 </li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 根据 id 查询 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from user where id = #{uid} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> 将 UserDao.xml 映射文件中的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>标签中设置 useCache=”true”代表当前这个 statement 要使用二级缓存，如果不使用二级缓存可以设置为 false。     注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存。</code></pre></li><li><ol start="4"><li>二级缓存需序列化接口</li></ol><pre><code>因为二级缓存保存到的是数据，不是map，当读取时会将数据重新封装成对象。public class User implements Serializable { }</code></pre></li></ul></li></ul></li></ul><hr><h2 id="Mybatis-注解开发"><a href="#Mybatis-注解开发" class="headerlink" title="Mybatis 注解开发"></a>Mybatis 注解开发</h2><ul><li><p>注意：使用注解开发就不能使用xml配置，mapper映射中使用package，如果同时存在会报错</p></li><li><p><strong>mybatis 的常用注解说明</strong></p><pre><code>*@Insert:实现新增 *@Update:实现更新 *@Delete:实现删除 *@Select:实现查询 *@Result:实现结果集封装 *@Results:可以与@Result 一起使用，封装多个结果集 @ResultMap:实现引用@Results 定义的封装 *@One:实现一对一结果集封装 *@Many:实现一对多结果集封装 @SelectProvider: 实现动态 SQL 映射 *@CacheNamespace:实现注解二级缓存的使用 true</code></pre></li><li><p><strong>Mybatis 注解实现基本 CRUD</strong></p><ul><li><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{uid} "</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//解决类属性名与数据库列名不对应的方式</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">,</span>property<span class="token operator">=</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                             <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">,</span>property<span class="token operator">=</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"sex"</span><span class="token punctuation">,</span>property<span class="token operator">=</span><span class="token string">"userSex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                 <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"address"</span><span class="token punctuation">,</span>property<span class="token operator">=</span><span class="token string">"userAddress"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"birthday"</span><span class="token punctuation">,</span>property<span class="token operator">=</span><span class="token string">"userBirthday"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//其他的方法可直接用 @Results("userMap")</span></code></pre></li><li><p>编写 SqlMapConfig 配置文件 </p><pre><code>&lt;!-- 配置映射信息 --&gt;  &lt;mappers&gt;    &lt;package name="com.itheima.dao"/&gt;  &lt;/mappers&gt; </code></pre></li><li><p>编写测试方法</p></li></ul></li><li><p><strong>注解实现复杂关系映射开发</strong></p></li><li><p>复杂关系映射的注解说明</p><pre><code>@Results 注解 代替的是标签&lt;resultMap&gt;  该注解中可以使用单个@Result 注解，也可以使用@Result 集合 @Results（{@Result（），@Result（）}）或@Results（@Result（）） @Result 注解 代替了 &lt;id&gt;标签和&lt;result&gt;标签@Result 中 属性介绍：   id 是否是主键字段  column 数据库的列名  property 需要装配的属性名  one  需要使用的@One 注解   @Result（one=@One（））many  需要使用的@Many 注解 @Result（many=@many（））@One 注解（一对一）  代替了&lt;assocation&gt;标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。 @One 注解属性介绍：  select  指定用来多表查询的 sqlmapper  select 是用于方法的唯一标识（dao全限定类名加上方法名称） fetchType(可省) 会覆盖全局的配置参数 lazyLoadingEnabled。  参数：FetchType.LAZY(延迟)、EAGER(立即)使用格式：  @Result(column="结果集中查询的条件（uid）",property="封装的属性名(user)",one=@One(select="dao方法的全限定类名" fetchType=)@Many 注解（一对多） 代替了&lt;Collection&gt;标签,是多表查询的关键，在注解中用来指定子查询返回对象集合。  注意：聚集元素用来处理“一对多”的关系。需要指定映射的 Java 实体类的属性，属性的 javaType （一般为 ArrayList）但是注解中可以不定义；  使用格式：   @Result(property="封装的属性名（orderList）",column="结果集中查询的条件（id）",many=@Many(select="dao方法的全限定类名")</code></pre><blockquote><p> 总结：使用一对一和一对多，首先要确定sql语句的两步骤，比如一对多当中的：查询用户下的所有订单，要先查询用户信息select * from user，之后根据Id查询订单信息select * from order where uid = #{id}</p></blockquote></li></ul><hr><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><ol><li>封装JDBC操作</li><li>利用反射打通Java类与SQL语句之间的相互转换,目的就是让我们对执行SQL语句时对输入输出的数据管理更加方便</li></ol><p>原理详解：</p><p>mybatis应用程序通过SqlSessionFactoryBuilder从xml配置文件（也可以用Java文件配置的方式，需要添加@Configuration）来构建SqlSessionFactory（SqlSessionFactory是线程安全的）；</p><p>然后，SqlSessionFactory的实例直接开启一个SqlSession，再通过SqlSession实例获得Mapper对象并运行Mapper映射的SQL语句，完成对数据库的CRUD和事务提交，之后关闭SqlSession。</p>]]></content>
      
      
      <categories>
          
          <category> ssm框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb综合案例</title>
      <link href="/2020/06/21/qian-duan/web-zong-he-an-li/"/>
      <url>/2020/06/21/qian-duan/web-zong-he-an-li/</url>
      
        <content type="html"><![CDATA[<h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><p>创建maven工程，加载依赖，设置tomcat插件快捷方式</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/web1.png" alt="image-20200515222153693"></p><pre><code>bug1：ava.lang.NullPointerException: inStream parameter is null提交数据库没有保存数据原因：JDBCUtils中的/druid.properties的"/"去掉InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties");bug2:信息不回写 注册失败原因：findUserByName的sql语句写错，查询不到值</code></pre><pre><code>注册功能：1.在前端进行异步表单校验（正则表达式，离焦事件（要定义在onload方法中，否则会无效）、提交事件（submit(fun()))2.提交表单ajax向servlet发送请求(serialize()方法将表单的值变成字符串)3.servlet：获取数据，封装对象，调用service方法完成注册，根据返回信息，回写信息4.service：调用dao方法查询用户信息，根据返回信息判断是否存在该用户，再调用保存信息5.dao：实现查询用户信息、保存用户信息的功能6.增加验证码验证，在servlet中获取验证码信息，获取存储在session中的验证码进行比对，回写信息7.前端增加信息提示，获取回写的数据</code></pre><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/web2.png" alt="image-20200517143251824" style="zoom: 67%;"><pre><code>bug1:u.setStatus("N")空指针异常原因：不是查询到的用户，而是传递过来的参数用户改为：user.setStatus("N")bug2:激活链接code= 没有值原因:正文的超链接写错，注意' "的位置bug3:回写信息，页面上没有显示超链接，原样输出了原因：没有设置回写的格式改为：加上response.setContentType("text/html;charset=utf-8");</code></pre><pre><code>邮件激活：1.在成功保存用户信息之后，使用邮件工具类（需要邮箱授权码）发送邮件，内容设置成点击激活2.在点击激活设置超链接，传参激活码，链接到servlet中3.servlet：获取激活码，调用service方法update，传入激活码，回写信息激活成功，请登录4.service：调用dao方法通过激活码查询用户信息，调用方法改变激活状态</code></pre><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/web3.png" alt="image-20200517161032800"></p><pre><code>bug1:angular.min.js找不到原因：没有该文件改为：找到导入的代码，导入一下bug2:点击按钮没反应||错误信息不提示原因：前端代码写错改为：注意#有没有加，data.有没有加bug3:点击登录出现你好,undefined原因：session中存储的是字符串，但异步获取的是字符串.name改为：session中存储user对象，异步获取对象.name</code></pre><pre><code>登录：1.前端绑定登录按钮事件，提交异步请求，获取信息，展示在错误信息div中2.后端：  servlet:获取表单信息，封装成对象，获取验证码，判断验证码是否正确，调用service方法查询user，返回user，判断是否存在，是否激活，响应错误信息  service：调用dao中的方法通过账号、密码查询用户信息，返回user3.页面展示：欢迎你，姓名</code></pre><pre><code>退出：1.前端退出的超链接设置路径到servlet(location.href='')2.servlet：删除session中的用户，重定向到主页（虚拟路径 request.getContextPath）</code></pre><pre><code>bug1:路径改过后，还是findNameServlet原因：缓存没有清楚改为：将缓存清空即可bug2:NoSuchMethodException原因：方法的修饰符是protected beanServlet没有权限获取该方法改为：修改成public</code></pre><pre><code>Servlet优化：减少Servlet数量，将一个模块的功能整合到一个Servlet中1.创建UserServlet,创建BaseServlet2.UserServlet继承BaseServlet，BaseServlet继承HttpServlet（目的让UserServlet拥有HttpServlet规范）3.BaseServlet:service方法：方法分发    获取请求路径uri    获取方法名称（截取uri）    获取方法对象（this.getMethod）    执行方法（invoke）4.修改方法的修饰符public（不改会出现bug2）5.将所有servlet整合到总servlet的方法中6.修改前端路径（user/方法名）</code></pre><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/web4.png" alt="image-20200518173356734" style="zoom: 67%;"><pre><code>bug1:InvocationTargetException原因：Dao层写错，在JdbcTemplate没有加参数，JDBCUtils.getDataSource()改为：JdbcTemplate(JDBCUtils.getDataSource());bug2:全部修改好，界面不显示原因：缓存没有清理改为：清空缓存</code></pre><pre><code>分类数据展示：1.创建categoryServlet,继承BeanServlet2.categoryServlet:findAll方法(public)：调用service方法，获取分类数据集合，将数据序列化json，回写给客服端（可以在BeanServlet封装序列化Json方法）3.service：调用dao方法，获取数据库分类数据集合4.dao：查询分类数据库，返回数据集合5.前端：header:发送ajax请求，获取数据，遍历数据添加在字符串成为li组，将字符串添加到ul中</code></pre><pre><code>注意:1.使用时需要先开启redis服务器bug1:数据仍然是通过数据库查询原因：存储redis时key值写错，redis中没有查询到该有的值（查询的和保存的不是一个Key）改为：将zrangeWithScores("categorys", 0, -1)--&gt;zrangeWithScores("category", 0, -1)bug2:list空指针异常原因：list在成员变量中设置的是null，在数据存在的情况下，没有创建List对象改为：list=new ArrayList&lt;Category&gt;();</code></pre><pre><code>分类数据缓存处理：* 分类数据不常修改，不需要每次都查询数据库，将数据存储到缓存当中，查询缓存即可1.CategoryServiceImpl中findAll方法：jedis获取缓存数据，判断数据是否存在    不存在：第一次访问，查询数据库的数据，并保存到缓存当中    存在：将缓存数据转换为list集合返回（因为findAll方法的返回类型是list）</code></pre><pre><code>分类传递id：* 点击分类的页面之后会传递一个?cid=xxx1.修改redis：将cid也传入redis当中（zrangeWithScore），将泛型从category改为Tuple2.修改前端代码：header.html 传递cid3.获取cid:location.search  (?cid=xxx)</code></pre><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/web5.png" alt="image-20200519224338551"></p><pre><code>bug1:显示0条记录原因：url中没有?cid=5改为：点击正确的链接进入bug2:点击页数，数据没有改变原因：没有将currentPage传入ajax参数中，load(参数需要拼接字符串'+cid+','+i+')bug3: 2.5设置好，但是分页不见了原因：当前页面currentPage是从ajax请求返回来的pb对象中的currentPage，第一次currentPage是没有值的改为：currentPage -- &gt; pb.currentPage</code></pre><pre><code>分页查询：1.后台：1.1.创建PageBean类：总记录数（数据库）、总页数（可计算）、当前页码（前端）、每页显示条数（前端）、每页展示的数据集合1.2.RouteServlet：pageQuery方法：获取参数、处理参数和初始化、调用service方法查询到pageBean对象，将对象序列化Json,回写json1.3.RouteDao:查询总记录数、查询每页展示的数据集合1.4.RouteServiceImpl:创建PageBean对象，调用方法/计算获取数据，将数据封装进对象2.前台：2.1展示总页码、总记录数：在route.html中发送异步请求，传递cid，获取到总页码、总记录数2.2加载分页栏:利用字符串拼接，分为三部分，首、中、末，中间应用循环遍历来拼接2.3加载分页数据：利用字符串拼接，应用循环遍历拼接2.4分页栏链接指定：将2.2，2.3封装为一个方法，方法内是异步请求，传参cid,currentPage，点击调用该方法重新异步加载，首末页、上下页指链接，上下一页做判断避免出现负页和超页，设置当前页的格式为curPage2.5分页栏显示10个：    前5后4    前不够5，后面补齐10个    后不够4，前面补齐10个</code></pre><pre><code>后台注意：1.获取输入框值的时候是val()，不要忘记括号2.前端获取url中的cid和rname，可以使用js封装的方法getParameter("cid") 3.在dao中拼接字符串，注意空格，like条件注意%%的拼接，sb.toString();params.toArray()不要忘记前台注意：1.加rname参数的时候注意单引号，需要转移字符的位置bug1:3.2 传入参数之后，数据和分页栏都消失原因：没有对rname解码，导致获取的值找不到改为：在3.1进行解码操作bug2:3.4 在首页搜索，cid为null,查询不到任何值 NumberFormatException原因：cid的值是null，在servlet中获取cidStr是字符串null,将其转换为int类型会报转换异常，将null的情况忽略掉，后台调用数据库就会忽略掉cid的条件，不影响搜数据改为：servlet:在转换的if中增加!"null".equals(cidStr)bug3:修改完之后，不搜索查看所有信息，点其他页查询不到任何信息原因：和bug2类似，增加的rname参数是字符串"null"，访问数据库rname的判断语句缺少，导致多拼接了条件rname改为:在访问数据库判断语句应该加上!"null".equals(rname)</code></pre><pre><code>线路查询：1.传递信息，跳转url：1.1.绑定查询按钮的单击事件，获取输入框的值rname，设置url并拼接字符串，cid,rname2.后台：2.1.servlet：获取rname，(tomcat8以前都要进行)将rname的url转码为String，将rname传入service方法中2.2.service:对Service方法和dao方法全部传入rname参数2.3.dao:将sql语句条件设置成where 1 = 1,之后用StringBuider增加条件，用ArrayList保存条件？的值3.前台：3.1.在route_list.html：获取cid,rname，将rname进行url解码decodeURIComponent（因为是字符串，浏览器会自动加码）3.2.将cid,rname传入异步请求当中3.3.将load()的参数全部加上rname3.4.解决不点route页面出现cid=null的问题    原因：在servlet中获取cidStr是字符串null,将其转换为int类型会报空指针异常    解决方法：在转换的if中增加!"null".equals(cidStr)</code></pre><pre><code>bug1:传递id url是rid= 没有值原因：字符串拼错，使用单引号，将javacript的jquery代码写在导包的后面改为：将js代码写在一起bug2:图片没有换,提示length无法获取原因：循环条件写错，应该是json中的数据名(routeImgList)，不是impl中存入的数据名(imgList)改为："routeImgList": 是json中的数据名    for(var i=0;i&lt;imgList.length;i++) --&gt; for(var i=0;i&lt;routeImgList.length;i++)    bug3:默认大图片还是原来的图片原因：没有修改默认大图片改为：将大图片拼接字符串，让其变为加载后图片的第一张bug4:点击上下三角没有反应原因：图片一共就4张bug5:没点上下三角显示的是5张图，点之后隐藏成4张原因：if语句写错，i从0开始，显示4张应该是&gt;3的隐藏改为：if(i&gt;3){}</code></pre><pre><code>旅游线路详情：1.传递id:1.1.点击查看详情，超链接传递?rid=route.rid2.后台：2.2.servlet:获取rid,并且调用service方法获取route对象，转换为json回写客户端2.3.service：调用routedao方法查询route基本数据，调用imgdao方法查询图片集合对象，将其封装进route对象中，调用sellerdao方法查询卖家信息对象，将其封装进route对象中，返回route2.4.dao:routedao通过rid查询，imgdao通过route对象的rid查询，sellerdao通过route对象的sid查询3.前台：3.1.route_detail.html：获取rid，发送ajax请求传递rid3.2.将获取到的route对象展示在页面上：基本信息、商家信息3.3.图片信息拼接字符串完成（图片只显示4个，其他的隐藏），将切换图片的效果代码封装成方法，在拼接完字符串后再调用</code></pre><pre><code>前台注意：2.2.未收藏是默认值，只需要修改flag为true的情况    修改是增加属性 class增加值：already                增加disabled属性，值为disabled，使用attr                 （attr：可以增加部分固有属性、非固有属性，prop：只能增加固有属性）</code></pre><pre><code>线路收藏状态、收藏次数：1.后台：1.1.servlet:获取rid（url中获取）,uid（session中获取），调用service方法查询出是否收藏的布尔值1.2.service:调用dao查询收藏记录对象，如果为空则返回false，不为空则true1.3.dao:查询数据库，获取收藏记录对象2.前台：2.1.使用ajax请求，传入rid，获取是否收藏的布尔值2.2.如果未收藏，改变按钮的样式，已收藏就不用动3.收藏次数：根据rid查询数据库收藏次数，封装进route对象中，在前台显示</code></pre><pre><code>点击收藏：1.后台：1.1.servlet:获取rid,uid，调用Service方法增加收藏1.2.service：调用dao方法增加收藏1.3.dao:访问数据库增加收藏2.前台：2.1.发送ajax请求获得用户信息，判断其是否登录2.2.未登录：弹出未登录，并跳转到登录界面2.3.已登录：刷新页面（不管用，不知道怎么回事）2.4.优化：已收藏（灰色按钮）不能再点击--&gt;删除单击事件（removeAttr是jquery的方法）</code></pre>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+matery主题目录结构详解</title>
      <link href="/2020/06/21/hexo/hexo-matery-zhu-ti-mu-lu-jie-gou-xiang-jie/"/>
      <url>/2020/06/21/hexo/hexo-matery-zhu-ti-mu-lu-jie-gou-xiang-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我将详细介绍hexo每个文件夹和文件的作用，未来不断更新，对目录结构和文件不熟悉的可以参考</p></blockquote><h3 id="主目录"><a href="#主目录" class="headerlink" title="主目录"></a>主目录</h3><p>我的hexo根目录位置：<code>C:\Users\user\Desktop\我的博客\lovelijunyi</code></p><h4 id="目录部分"><a href="#目录部分" class="headerlink" title="目录部分"></a>目录部分</h4><ul><li><code>deploy_git</code>，与<code>git</code>是<strong>git</strong>相关内容，如果无法git到仓库，需要检查git文件夹中配置</li><li><code>scaffolds</code>，存放的是默认生成md文件的配置，其中<code>post.md</code>是默认生成文章的配置</li><li><code>scripts</code>，扩展脚本目录，这里可以自定义一些javascript脚本存放的是页面加载脚本(非默认)</li><li><strong><code>source</code>，hexo源码目录，是核心目录，下面详解</strong></li><li><strong><code>themes</code>，是主题目录，下面详解</strong></li><li><code>packages，</code>是存放看板动画模型的(非默认)</li><li><code>public，</code>是通过hexo g编译出来的最终网页文件，也是部署到github上的文件，输出的静态网页内容目录</li><li><code>node_modules</code>，是hexo的一些库文件</li></ul><h4 id="文件部分"><a href="#文件部分" class="headerlink" title="文件部分"></a>文件部分</h4><ul><li><strong><code>_config.yml</code>，是hexo的全局配置文件(核心配置文件)，一些插件安装后都需在此文件开启</strong></li><li><code>CNAME</code>，可配置个人域名</li><li><code>package.json</code>，应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li><li><code>main.py</code>，个人快速执行脚本(非默认)</li></ul><h3 id="source目录"><a href="#source目录" class="headerlink" title="source目录"></a>source目录</h3><p>hexo的源码目录，写文章的主要目录</p><pre><code>├── _data              # 存放友链的friends.json和相册的json├── _posts             # 所有文章就在这里├── 404                # 404相关├── categories         # 归档页面├── contact            # 关于页面├── friends            # 友联页面├── galleries          # 相册页面├── images             # 图片页面，其他图，懒加载图存放位置├── media              # 多媒体├── tags               # 标签页├── 404.md             # 404崩溃页面└── CANME</code></pre><h3 id="themes目录"><a href="#themes目录" class="headerlink" title="themes目录"></a>themes目录</h3><blockquote><p> hexo-theme-matery主题为例，**<code>_config.yml</code>是主题配置文件，非常重要**</p></blockquote><pre><code>├── languages          # 多语言|   ├── default.yml    # 默认语言|   └── zh-CN.yml      # 中文语言├── layout             # 布局，根目录下的*.ejs文件是对主页，分页，存档等的控制|   ├── _partial       # 局部的布局，此目录下的*.ejs是对头尾等局部的控制|   └── _widget        # 小挂件的布局，页面下方小挂件的控制├── source             # 源码|   ├── css            # css源码 |   |   ├── _base      # *.styl基础css|   |   ├── _partial   # *.styl局部css|   |   ├── fonts      # 字体|   |   ├── images     # 图片|   |   └── style.styl # *.styl引入需要的css源码|   ├── fancybox       # fancybox效果源码|   └── js             # javascript源代码├── _config.yml        # 主题配置文件└── README.md          # 用GitHub的都知道</code></pre><h4 id="layout目录"><a href="#layout目录" class="headerlink" title="layout目录"></a>layout目录</h4><p>目录部分</p><ul><li><code>_partial</code>主要修改文件</li></ul><pre><code>bg-cover-content.ejs       # 主页背景图相关，banner图切换，打字机效果加字等footer.ejs                  # 页脚配置social-link.ejs            # 修改社交链接，微信，qq，微博等</code></pre><p>文件</p><pre><code>404.ejs                 # 404页面about.ejs               # 关于我页面，个人简历archive.ejscategories.ejscategory.ejscontact.ejsdouban.ejs                # 豆瓣插件friends.ejsgalleries.ejs            # 自定义相册gallery.ejs                # 自定义相册index.ejslayout.ejs                # 比较重要，我的天气，动态标签，鼠标点击特效等都在这开启post.ejstag.ejstags.ejs</code></pre><blockquote><p>重点是这个<strong>layout.ejs</strong>，几乎所有自定义特效都在这个文件开启</p></blockquote><h4 id="source目录-1"><a href="#source目录-1" class="headerlink" title="source目录"></a>source目录</h4><p>存放主题源码</p><pre><code>├── css            #css源码 |   ├── gallery.css      # 相册css|   ├── gitment.css   |   ├── matery.css          # 主页的css相关调整，字体调整，主题色修改|   ├── my-gitalk.css      |   └── my.css           # hexo-filter-github-emojis├── js                       # javascript源代码，自定义js|   ├── click.js          # 鼠标点击特效|   ├── crypto-js.js      # 加密相关|   ├── cursor.js         # 雪花背景特效|   ├── fireworks.js    # 鼠标点击烟花特效|   └── gallery-encrypt.js          # 相册加密├── libs         # 库文件，fancybox效果等插件需在这里打开├── medias       # 主题内用到的背景图，图标，打赏图等都在这里└── favicon.png            # 网页标签图</code></pre><blockquote><p><strong>js</strong>目录比较重要，所有自定特效，鼠标点击特效，背景特效在这里定义</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客部署到Coding</title>
      <link href="/2020/06/20/hexo/hexo-bo-ke-bu-shu-dao-coding/"/>
      <url>/2020/06/20/hexo/hexo-bo-ke-bu-shu-dao-coding/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上面的教程我们可以将博客部署到国外Github的仓库上，我们也可以将博客部署到国内Coding、Gitee仓库上，可以提高一些网站访问的速度，小苏只使用了Coding，这里也介绍一下。</p><h2 id="1-注册Coding"><a href="#1-注册Coding" class="headerlink" title="1. 注册Coding"></a>1. 注册Coding</h2><p>首先去官网进行<a href="https://e.coding.net/signup?from=dev-tencent">注册</a>，也可以用第三方微信进行注册。</p><h2 id="2-创建新项目"><a href="#2-创建新项目" class="headerlink" title="2. 创建新项目"></a>2. 创建新项目</h2><p>注册完成之后就会进入主页面，然后创建新项目，如下图所示：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding1.png" alt="image-20200620163359904"></p><p>填写信息</p><blockquote><p>注意：</p><ul><li>第一次使用，项目名称、项目标识就填自己的用户名（团队名），会避免很多步骤</li><li>如果是有多个博客，想将其他博客也部署到coding上，项目名称、项目标识也可以自己定义，不过还需要其他配置，下面会提到</li></ul></blockquote><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding2.png" alt="image-20200620163544075"></p><h2 id="3-增加公钥"><a href="#3-增加公钥" class="headerlink" title="3. 增加公钥"></a>3. 增加公钥</h2><p>在个人设置里面，点击SSH公钥，点击新增公钥。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding3.png" alt="image-20200620163938095"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding4.png" alt="image-20200620164001605"></p><blockquote><p>公钥名称：自定义<br>公钥内容：可以使用之前连接GitHub的公钥，在本地的C:\Users\你的电脑账户名.ssh，我的为C:\Users\Administrator.ssh，用文本编辑器打开id_rsa.pub，将里面的内容复制粘贴到此处即可。<br>公钥有效期：选择永久有效</p></blockquote><p>点击添加，然后回弹出一个密码框，输入你的用户密码验证一下即可。</p><h2 id="4-设置主机信任"><a href="#4-设置主机信任" class="headerlink" title="4. 设置主机信任"></a>4. 设置主机信任</h2><p>打开cmd控制台输入</p><pre><code>ssh -T git@e.coding.net</code></pre><blockquote><p>这个代码不需要改动，原封不动输入即可</p></blockquote><p>第一次建立连接会要求信任主机，输入相关的用户名或者密码，在控制台输入验证，验证成功即可。</p><blockquote><p>注意：</p><ul><li>用户名和密码是你创建Coding用户的时候输入的</li></ul><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding5.png" alt="image-20200620164413966"></p><ul><li>如果你输入错误，之后会出现<code>Authentication failed</code>的错误</li><li>win10的解决方法：</li><li>控制面板 –&gt;凭据管理器</li><li>找到要修改的那条, 编辑正确的用户名和密码，再次尝试即可</li></ul><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding6.png" alt="image-20200620164903120"></p></blockquote><h2 id="5-修改配置文件"><a href="#5-修改配置文件" class="headerlink" title="5. 修改配置文件"></a>5. 修改配置文件</h2><p>复制你的项目地址，粘贴到<strong>站点</strong>配置文件_config.yml，搜索<code>deploy</code>，如图所示：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding7.png" alt="image-20200620165115645"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding8.png" alt="image-20200620165350936"></p><h2 id="6-部署项目"><a href="#6-部署项目" class="headerlink" title="6. 部署项目"></a>6. 部署项目</h2><p>执行<code>hexo clean &amp;&amp; hexo g -d</code>部署到coding，你会发现代码仓库出现了很多文件</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding9.png" alt="image-20200620165603076"></p><p>打开你的coding项目管理页，进行静态网站构建，页面如下，按图中步骤操作即可：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding10.png" alt="image-20200620165734561"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding11.png" alt="image-20200620165800376"></p><p>接着会让你验证个人信息，跟着验证即可</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/codng12.png" alt="image-20200620170007413"></p><p>验证之后继续上面的步骤</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding13.png" alt="image-20200620170218940"></p><p>保存之后，点击立即部署，等待一会标识显示为绿色即部署成功，点击上面的网址查看一下，以后在coding仓库访问就是这个网址</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/coding14.png" alt="image-20200620170446083"></p><p>大功告成！之后使用<code>hexo d</code> 就会同时部署Github和coding两个仓库。</p><h2 id="部署gitee"><a href="#部署gitee" class="headerlink" title="部署gitee"></a>部署gitee</h2><blockquote><p>因为coding的静态网站服务已下线，改用Gitee，具体步骤如下</p></blockquote><h3 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h3><p>创建一个仓库，设置为公开或私有都可以。<br>仓库名如果设置成和个人空间地址一样，那么访问地址就是： &lt;个人空间地址名&gt;.gitee.io<br>个人空间地址可在个人资料中查看。我的个人空间地址是sq666，那么我的博客地址就是：sq666.gitee.io。仓库名如果设置成别的，那么访问地址则是：&lt;个人空间地址名&gt;.gitee.io/仓库名<br>例如我把仓库名设置为myblog，那么我的博客访问地址就是：sq666.gitee.io/myblog<br>创建完成后，我们需要在该仓库页面中 点击“服务” &gt; Gitee Pages &gt; 勾选“强制使用HTTPS” &gt; 点击“启动”即可。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery主题+Valine评论系统</title>
      <link href="/2020/06/19/hexo/matery-zhu-ti-valine-ping-lun-xi-tong/"/>
      <url>/2020/06/19/hexo/matery-zhu-ti-valine-ping-lun-xi-tong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是<a href="https://valine.js.org/">Valine官方文档</a></p><p>参考文档：<a href="https://yafine-blog.cn/posts/4ab2.html">励心大佬</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于matery主题可以搭建很多不同的评论系统，有来必力、Valine、Gitalk、Disqus，根据分析选择了Valine，因为很喜欢它强大的人性化功能，如：输入昵称就可以获取到qq邮箱即头像，个人很喜欢，所以在这里也很推荐大家使用。</p><h1 id="开始教程"><a href="#开始教程" class="headerlink" title="开始教程"></a>开始教程</h1><h2 id="1-注册LeanCloud"><a href="#1-注册LeanCloud" class="headerlink" title="1. 注册LeanCloud"></a>1. 注册LeanCloud</h2><blockquote><p>这相当于一个操作评论的后台，以后想要对评论进行管理删除，可以在这里操作</p></blockquote><ol><li><p>如果没有注册过LeanCloud，请<a href="https://leancloud.cn/dashboard/login.html#/signup">点击注册</a></p><ul><li>注册会有些麻烦，需要个人身份认证，不过没有什么看不懂的，这里就跳过注册教程    </li></ul><p>经过登录或者注册之后再登录，就会进入如下的页面：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-7.png" alt="image-20200619205625231"></p><p>创建应用完成后，会出现如下页面，然后点击设置</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-8.png" alt="image-20200619205703150"></p><p>会出现下面的页面，将其中APPID和APPKey复制，添加到主题配置文件中。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-9.png" alt="image-20200619205755541"></p><pre><code># Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: true   appId: #你的id  appKey: #你的Key  pageSize: 10   avatar: monsterid   lang: zh-CN   placeholder: 昵称填写qq可以显示qq头像和昵称哦~   guest_info: nick,mail,link   recordIP: true   serverURLs: ''   background: /medias/comment_bg.png   count: true </code></pre><blockquote><p>属性介绍：</p><p>pageSize：每页显示的条数</p><p>avatar：默认的头像 mm/identicon/monsterid/wavatar/retro/hide</p><p>lang：语言</p><p>placeholder：提示信息</p><p>background：背景图片</p></blockquote><p>然后执行相关部署命令，查看效果即可，此时简单的评论功能已经达成。</p></li></ol><h2 id="2-删除评论"><a href="#2-删除评论" class="headerlink" title="2. 删除评论"></a>2. 删除评论</h2><ol><li><p>进入LeanCloud应用设置</p><p><a href="https://leancloud.cn/dashboard/applist.html">https://leancloud.cn/dashboard/applist.html</a></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-10.png" alt="image-20200619210257494"></p></li><li><p>在设置界面点击存储→结构化数据→Comment→选中要操作的消息→删除</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-11.png" alt="image-20200619210558629"></p></li></ol><h2 id="3-Valine增强"><a href="#3-Valine增强" class="headerlink" title="3. Valine增强"></a>3. Valine增强</h2><blockquote><p>可以给Valine评论系统增强一些功能</p><p>提示：该增强必须是Valine的最新版，当前版本：1.4.14</p></blockquote><h3 id="3-1-修改Valine版本"><a href="#3-1-修改Valine版本" class="headerlink" title="3.1 修改Valine版本"></a>3.1 修改Valine版本</h3><p>matery主题修改最新版本很简单，不同主题修改的方式不同，这里只介绍关于matery的修改方式</p><p>在主题配置文件_config.yml中找到<code>libs:</code>，<code>libs:</code>下的js里有个valine，将其设置为<code>https://unpkg.com/valine/dist/Valine.min.js</code>，注意中间的空格，即：</p><pre><code>    valine: https://unpkg.com/valine/dist/Valine.min.js</code></pre><h3 id="3-2-增加功能"><a href="#3-2-增加功能" class="headerlink" title="3.2 增加功能"></a>3.2 增加功能</h3><ul><li><p>同款表情包</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-12.png" alt="image-20200619212958054"></p></li><li><p>昵称输入qq号会自动获取qq昵称和qq邮箱</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-13.png" alt="image-20200619213101621"></p></li><li><p>名称和邮箱必填</p></li></ul><p>在<code>themes\matery\layout\_partial</code>中找到<code>valine.ejs</code>，找到其中的<code>new Valine</code>，大概在249行，修改为以下内容：</p><pre><code>new Valine({        el: '#vcomments',        appId: '&lt;%- theme.valine.appId %&gt;',        appKey: '&lt;%- theme.valine.appKey %&gt;',        notify: '&lt;%- theme.valine.notify %&gt;' === 'true',        verify: '&lt;%- theme.valine.verify %&gt;' === 'true',        visitor: '&lt;%- theme.valine.visitor %&gt;' === 'true',        avatar: '&lt;%- theme.valine.avatar %&gt;',        pageSize: '&lt;%- theme.valine.pageSize %&gt;',        lang: '&lt;% if (config.language == "zh-CN") {  %&gt;zh-cn&lt;% } else { %&gt;en&lt;% } %&gt;',        placeholder: '&lt;%= theme.valine.placeholder %&gt;',        enableQQ: true,        emojiCDN: '//i0.hdslb.com/bfs/emote/',         // 表情title和图片映射        emojiMaps: {        "tv_doge": "6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png",        "tv_亲亲": "a8111ad55953ef5e3be3327ef94eb4a39d535d06.png",        "tv_偷笑": "bb690d4107620f1c15cff29509db529a73aee261.png",        "tv_再见": "180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png",        "tv_冷漠": "b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png",        "tv_发怒": "34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png",        "tv_发财": "34db290afd2963723c6eb3c4560667db7253a21a.png",        "tv_可爱": "9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png",        "tv_吐血": "09dd16a7aa59b77baa1155d47484409624470c77.png",        "tv_呆": "fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png",        "tv_呕吐": "9f996894a39e282ccf5e66856af49483f81870f3.png",        "tv_困": "241ee304e44c0af029adceb294399391e4737ef2.png",        "tv_坏笑": "1f0b87f731a671079842116e0991c91c2c88645a.png",        "tv_大佬": "093c1e2c490161aca397afc45573c877cdead616.png",        "tv_大哭": "23269aeb35f99daee28dda129676f6e9ea87934f.png",        "tv_委屈": "d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png",        "tv_害羞": "a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png",        "tv_尴尬": "7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png",        "tv_微笑": "70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png",        "tv_思考": "90cf159733e558137ed20aa04d09964436f618a1.png",        "tv_惊吓": "0d15c7e2ee58e935adc6a7193ee042388adc22af.png",        "tv_打脸": "56ab10b624063e966bfcb76ea5dc4794d87dfd47.png",        "tv_抓狂": "fe31c08edad661d63762b04e17b8d5ae3c71a757.png",        "tv_抠鼻": "c666f55e88d471e51bbd9fab9bb308110824a6eb.png",        "tv_斜眼笑": "911f987aa8bc1bee12d52aafe62bc41ef4474e6c.png",        "tv_无奈": "ea8ed89ee9878f2fece2dda0ea8a5dbfe21b5751.png",        "tv_晕": "5443c22b4d07fb1907ccc610c8e6db254f2461b7.png",        "tv_流汗": "cead1c351ab8d79e9f369605beb90148db0fbed3.png",        "tv_流泪": "7e71cde7858f0cd50d74b0264aa26db612a8a167.png",        "tv_流鼻血": "c32d39db2737f89b904ca32700d140a9241b0767.png",        "tv_点赞": "f85c354995bd99e28fc76c869bfe42ba6438eff4.png",        "tv_生气": "26702dcafdab5e8225b43ffd23c94ac1ff932654.png",        "tv_生病": "8b0ec90e6b86771092a498c54f09fc94621c1900.png",        "tv_疑问": "0793d949b18d7be716078349c202c15ff166f314.png",        "tv_白眼": "c1d59f439e379ee50eef488bcb5e5378e5044ea4.png",        "tv_皱眉": "72ccad6679fea0d14cce648b4d818e09b8ffea2d.png",        "tv_目瞪口呆": "0b8cb81a68de5d5365212c99375e7ace3e7891b7.png",        "tv_睡着": "8b196675b53af58264f383c50ad0945048290b33.png",        "tv_笑哭": "1abc628f6d4f4caf9d0e7800878f4697abbc8273.png",        "tv_腼腆": "89712c0d4af73e67f89e35cbc518420380a7f6f4.png",        "tv_色": "61822c7e9aae5da76475e7892534545336b23a6f.png",        "tv_调侃": "4bc022533ef31544ca0d72c12c808cf4a1cce3e3.png",        "tv_调皮": "b9c41de8e82dd7a8515ae5e3cb63e898bf245186.png",        "tv_鄙视": "6e72339f346a692a495b123174b49e4e8e781303.png",        "tv_闭嘴": "c9e990da7f6e93975e25fd8b70e2e290aa4086ef.png",        "tv_难过": "87f46748d3f142ebc6586ff58860d0e2fc8263ba.png",        "tv_馋": "fc7e829b845c43c623c8b490ee3602b7f0e76a31.png",        "tv_鬼脸": "0ffbbddf8a94d124ca2f54b360bbc04feb6bbfea.png",        "tv_黑人问号": "45821a01f51bc867da9edbaa2e070410819a95b2.png",        "tv_鼓掌": "1d21793f96ef4e6f48b23e53e3b9e42da833a0f6.png"            // ... 更多表情        },        requiredFields: ['nick','mail'], //设置必填项    });</code></pre><p>大功告成，重新部署查看效果</p><pre><code>hexo cl &amp; hexo g &amp; hexo s</code></pre><blockquote><p>此处的几个坑：</p><ol><li>这里很容易就出错，一定要注意复制粘贴的位置</li><li>如果没有效果，检查主题配置文件中valine的id和key是否正确，空格是否加上</li><li>如果还不行就一定和我保持一致（当然Id和key是你的），逐个增加功能再尝试</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
            <tag> Valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github搭建matery博客二（主题配置篇）</title>
      <link href="/2020/06/18/hexo/hexo-github-da-jian-matery-bo-ke-er-zhu-ti-pei-zhi-pian/"/>
      <url>/2020/06/18/hexo/hexo-github-da-jian-matery-bo-ke-er-zhu-ti-pei-zhi-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考<a href="https://yafine-blog.cn/posts/4ab2.html">过客~励む</a>，介绍搭建一个静态博客网站的全过程</p><p>本次主要记录关于matery主题的配置和遇到的坑</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>小苏在偶然间B站中看到CodeSheep介绍的Hexo搭建个人博客，本身也很想搭建一个属于自己的网站，虽然小苏是一个主Java后端的学习者，但是不影响对搭建静态博客的热情！于是在评论见看到了励心大佬细致入微的搭建全过程，于是开始了从零👉了解👉实践👉踩坑👉完成的全过程。</p><p>期间踩过多少坑，又解决了多少个问题，在期间完全不敢相信自己能搭建完成，现在就花上一些时间，将这个过程记录下来，记录自己踩坑经历，最后，再次感谢<a href="https://yafine-blog.cn/">过客~励む</a>大佬的文章，带我展开了新知识的一页。</p><h1 id="魔改记录"><a href="#魔改记录" class="headerlink" title="魔改记录"></a>魔改记录</h1><h2 id="增加功能"><a href="#增加功能" class="headerlink" title="增加功能"></a>增加功能</h2><ul><li><input checked="" disabled="" type="checkbox"> 增加标签、分类、归档、关于我、留言板、友情链接、爱好（二级导航）页面</li><li><input checked="" disabled="" type="checkbox"> 增加番剧、音乐页面</li><li><input checked="" disabled="" type="checkbox"> 增加相册页面</li><li><input checked="" disabled="" type="checkbox"> 增加emoji表情支持</li><li><input checked="" disabled="" type="checkbox"> 代码高亮</li><li><input checked="" disabled="" type="checkbox"> 搜索功能</li><li><input checked="" disabled="" type="checkbox"> 中文链接转拼音</li><li><input checked="" disabled="" type="checkbox"> 文章字数统计</li><li><input checked="" disabled="" type="checkbox"> 音乐播放器</li><li><input checked="" disabled="" type="checkbox"> 关于我页面添加个人简历</li><li><input checked="" disabled="" type="checkbox"> 添加404页面</li><li><input checked="" disabled="" type="checkbox"> 添加Valine评论系统</li><li><input checked="" disabled="" type="checkbox"> 增加公告(dream一栏)里的每日一句</li></ul><h2 id="视觉美化"><a href="#视觉美化" class="headerlink" title="视觉美化"></a>视觉美化</h2><ul><li><input checked="" disabled="" type="checkbox"> 主题背景颜色</li><li><input checked="" disabled="" type="checkbox"> 修改 banner 图和文章特色图</li><li><input checked="" disabled="" type="checkbox"> 修改页脚、跳动红心</li><li><input checked="" disabled="" type="checkbox"> 修改打赏二维码</li><li><input checked="" disabled="" type="checkbox"> 修改社交链接</li><li><input checked="" disabled="" type="checkbox"> 动态标题</li><li><input checked="" disabled="" type="checkbox"> 导航栏颜色以及透明效果</li><li><input checked="" disabled="" type="checkbox"> 鼠标点击文字、红心特效</li><li><input checked="" disabled="" type="checkbox"> 添加动态科技线条背景</li><li><input checked="" disabled="" type="checkbox"> 添加樱花飘落效果</li><li><input checked="" disabled="" type="checkbox"> 增加动态彩带效果</li><li><input checked="" disabled="" type="checkbox"> 页面获取标题</li><li><input checked="" disabled="" type="checkbox"> 打字机效果</li><li><input checked="" disabled="" type="checkbox"> 修改全局字体</li><li><input checked="" disabled="" type="checkbox"> 自定义鼠标样式</li></ul><h2 id="博客优化"><a href="#博客优化" class="headerlink" title="博客优化"></a>博客优化</h2><ul><li><input checked="" disabled="" type="checkbox"> gulp代码压缩</li><li><input checked="" disabled="" type="checkbox"> CDN加速</li><li><input checked="" disabled="" type="checkbox"> 打造图床</li><li><input checked="" disabled="" type="checkbox"> 部署到Coding</li><li><input checked="" disabled="" type="checkbox"> 新建文章自动打开本地Markdown编辑器</li></ul><h2 id="主题下载与安装"><a href="#主题下载与安装" class="headerlink" title="主题下载与安装"></a>主题下载与安装</h2><blockquote><p>说明：在之后提到的站点目录即根文件夹，主题目录就是主题文件夹，同理，站点配置文件就是根文件夹的配置文件，如我的：<code>E:\blog\_config.yml</code>，主题配置文件：<code> E:\blog\themes\matery\_config.yml</code></p></blockquote><ol><li>在你的目录文件夹下使用 git clone 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本(不定期更新优化)，自主选择版本，本文使用的是稳定版。</li></ol><pre><code># 来自励心大佬的链接git clone https://gitee.com/yafine66/hexo-theme-matery themes/matery     # 稳定版git clone -b develop https://gitee.com/yafine66/hexo-theme-matery themes/matery   #最新版(不定期进行优化更新)</code></pre><ol start="2"><li><p>切换主题：</p><p>将站点配置文件中的<code>theme</code>值修改为你下载主题的文件名，此处为<code>matery</code>，即<code>theme: matery</code>。</p><p>还需要修改的一些配置：</p><ul><li><p>语言选择：如果为中文用户，则在language:后添加值zh-CN，如果不修改，默认为英语；</p></li><li><p>网址修改：url:的值为你的网址名，如<a href="http://xxxx.github.io;/">http://xxxx.github.io；</a></p></li><li><p>站点配置文件有个per_page属性，建议修改为6的倍数，这样网站在适应设备时，有较好的显示效果。</p></li></ul></li></ol><h2 id="1-增加功能"><a href="#1-增加功能" class="headerlink" title="1.增加功能"></a>1.增加功能</h2><h3 id="1-1-增加页面"><a href="#1-1-增加页面" class="headerlink" title="1.1 增加页面"></a>1.1 增加页面</h3><blockquote><p>增加页面的步骤都基本相同，创建<code>tags</code>标签页、<code>categories</code>分类页，<code>about</code>关于我页、<code> contact</code>留言板页、<code>friends</code>友情链接页、均可以使用这个步骤</p></blockquote><ol><li><p>如果在你的博客 source 目录下还没有，就输入以下命令（站点目录打开的命令行）来新建一个：</p><pre><code>hexo new page "页面的英文"     # 如：hexo new page "tags"</code></pre></li><li><p>编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容：</p><pre><code>---title: tagsdate: 2020-06-19 16:23:38type: "页面的英文"    # 如：type: "tags"layout: "页面的英文" # 如：layout: "tags"---</code></pre><blockquote><p>关于<code> contact</code>留言板页：</p><p>留言板功能依赖于第三方评论系统，激活评论系统才有效果，下面会有介绍</p><p>关于<code>friends</code>友情链接页：</p><p>如果你想增加内容，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，输入以下内容：</p></blockquote><pre><code>[{    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/4027734.jpeg",    "name": "闪烁之狐",    "introduction": "编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬",    "url": "https://blinkfox.github.io/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/avatar.jpg",    "name": "ja_rome",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "https://me.csdn.net/jlh912008548",    "title": "前去学习"}]</code></pre></li></ol><h3 id="1-2-菜单导航配置"><a href="#1-2-菜单导航配置" class="headerlink" title="1.2 菜单导航配置"></a>1.2 菜单导航配置</h3><blockquote><p>关于导航的配置都在主题配置文件中</p></blockquote><h4 id="1-2-1-配置基本菜单导航的名称、路径url和图标icon"><a href="#1-2-1-配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="1.2.1 配置基本菜单导航的名称、路径url和图标icon"></a>1.2.1 配置基本菜单导航的名称、路径url和图标icon</h4><ul><li>导航名称可以设置成中文/英文</li><li>图标icon可以更换，具体属性值可以在<a href="https://fontawesome.com/icons">fontawesome</a>中查找</li></ul><pre><code>menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  友人帐: #可以使用中文，也可以在对应的md中设置title:友人帐    url: /friends    icon: fas fa-address-book</code></pre><h4 id="1-2-2-二级菜单配置方法"><a href="#1-2-2-二级菜单配置方法" class="headerlink" title="1.2.2 二级菜单配置方法"></a>1.2.2 二级菜单配置方法</h4><ol><li><p>在需要添加二级菜单的一级菜单下添加children关键字(如:爱好菜单下添加children)，一级菜单不需要增加url属性</p></li><li><p>创建二级页面，步骤与创建页面步骤相同，编辑md时不需要<code>layout</code>属性</p><pre><code>---title: 追番date: 2020-06-15 15:19:35type: "bangumis"---</code></pre></li><li><p>给二级菜单增加名称name,路径url和图标icon</p></li><li><p>注意每个二级菜单模块前要加<code> -</code></p></li><li><p>二级菜单要缩进到一级菜单内</p></li></ol><pre><code>爱好:    icon: fas fa-bicycle    children:      - name: 追番        url: /bangumis        icon: fas fa-play-circle      - name: 音乐        url: /musics        icon: fas fa-music</code></pre><h3 id="1-3-增加番剧、音乐页面"><a href="#1-3-增加番剧、音乐页面" class="headerlink" title="1.3 增加番剧、音乐页面"></a>1.3 增加番剧、音乐页面</h3><blockquote><p>此处可以设置一个二级导航爱好，将这些归纳到一个导航中效果更佳</p></blockquote><h4 id="1-3-1-Bilibili"><a href="#1-3-1-Bilibili" class="headerlink" title="1.3.1 Bilibili"></a>1.3.1 Bilibili</h4><blockquote><p>需要插件来获取你的番剧</p></blockquote><ol><li><p>安装插件</p><pre><code>npm install hexo-bilibili-bangumi --save</code></pre></li><li><p>安装番剧更新插件</p><pre><code>npm install hexo-bilibili-bangumi --update --save</code></pre></li><li><p>配置</p><p>将下面的配置写入站点配置文件<code>_config.yml</code>里（非主题）</p><pre><code>bangumi:  enable: true #是否开启  vmid: 1234567 #输入你番剧的uid，登录网址https://space.bilibili.com/1234567，后面数字就是你的uid  title: '追番列表' # 标题  quote: '生命不息，追番不止！' # 简介  show: 1 # 初始显示页面：0: 想看 , 1: 在看 , 2: 看过，默认为 1  loading: '/img/bangumi-loading.gif' # 图片加载完成前的 loading 图片</code></pre></li><li><p>创建番剧页面</p><p>输入命令</p><pre><code>hexo new page bangumis</code></pre><p>找到<code>source/bangumis/index.md</code>这个文件，修改这个文件，添加 <code>type: "bangumis"</code></p><pre><code>---title: bangumisdate: 2020-06-18 00:00:00type: "bangumis"---</code></pre></li><li><p>配置番剧页面为二级导航栏</p><p>参考上边的二级导航栏配置方式</p></li><li><p>使用</p><p>输入命令，更新番剧数据</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo bangumi -u &amp;&amp; hexo s</code></pre><blockquote><p>更新时遇到的坑：</p><p>错误：配置都完全正确，却出现Get bangumi data error</p><p>原因：你的B站设置了番剧仅自己可见</p><p>解决方法：进入B站个人空间，点击设置，将追番追剧设置为公开</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-1.png" alt="image-20200619164621242"></p></blockquote><p>如果想要删除数据，可以输入该命令</p><pre><code>hexo bangumi -d</code></pre><blockquote><p>注意：该插件不需要我们每次部署都要输入更新数据的命令，只有你自己番剧更新时才需要执行更新指令，之前的番剧数据会一直保留，直到被你删除</p></blockquote></li></ol><h4 id="1-3-2-网易云音乐"><a href="#1-3-2-网易云音乐" class="headerlink" title="1.3.2 网易云音乐"></a>1.3.2 网易云音乐</h4><blockquote><p>这个就非常简单了，不需要安装任何插件，只需要创建新页面，配置二级导航即可</p></blockquote><ol><li><p>创建音乐页面</p><p>输入命令</p><pre><code>hexo new page musics</code></pre><p>找到<code>source/musics/index.md</code>这个文件，修改这个文件，添加 <code>type: "music"</code></p><pre><code>---title: 音乐！音乐！date: 2020-06-16 14:45:30type: 'music'---</code></pre><p>在index.md文件中增加以下内容</p><pre><code>&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=530 height=520 src="//music.163.com/outchain/player?type=0&amp;id=2817562565&amp;auto=1&amp;height=430"&gt;&lt;/iframe&gt;</code></pre><blockquote><p>第二行的id的那串数字，需要改成你想要的歌单id</p><p>查看自己id的方式：</p><ol><li><p>点击网易云音乐软件，找到想设置的歌单→分享→复制链接</p></li><li><p><a href="https://music.163.com/playlist?id=531558923&amp;userid=375531677">https://music.163.com/playlist?id=531558923&amp;userid=375531677</a></p></li><li><p>id则是你想要的id，<strong>不是</strong>后面的userid</p></li></ol></blockquote></li><li><p>配置音乐页面为二级导航栏</p><p>参考上边的二级导航栏配置方式</p></li></ol><h3 id="1-4-增加自定义相册"><a href="#1-4-增加自定义相册" class="headerlink" title="1.4 增加自定义相册"></a>1.4 增加自定义相册</h3><blockquote><p>修改的原因：</p><p>matery主题原有的相册效果不佳，原因在于全部采用平铺式，没有分类的功能，自定义相册可以建立文件夹，方便分类</p><p>注意：本教程采用图床+CDN，图床采用的是github+Picgo</p><p>关于图床和cdn是什么：</p><p>通俗来说就是将本地图片上传到网上，通过cdn加速来加快读取图片的一种方式</p><p>具体看<a href="https://yafine-blog.cn/posts/eb3a.html">励心大佬关于github图床搭建的教程</a></p></blockquote><ol><li><p>新建相册页面</p><p>执行以下命令：</p><pre><code>hexo new page galleries</code></pre><p>到站点根目录的source目录下找名称为 <strong>galleries</strong> 的目录，打开目录下的 <strong>index.md</strong> 文档，添加以下配置：</p><pre><code>title: 相册date: 2020-06-13 10:59:30type: "galleries"layout: "galleries"</code></pre></li><li><p>配置导航菜单</p><p>在主题配置文件中menu加上</p><pre><code>相册:  url: /galleries   icon: fas fa-image</code></pre></li><li><p>创建ejs文件和css文件</p><p>在路径 <strong>matery/source/css</strong>目录下，新建<code>gallery.css</code>，增加以下代码</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.gallery-wrapper</span></span><span class="token punctuation">{</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-wrapper</span> <span class="token class">.gallery-box</span></span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-wrapper</span> <span class="token class">.gallery-item</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-cover-box</span></span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> center center no-repeat<span class="token punctuation">;</span>  <span class="token property">-webkit-background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-cover-box</span> <span class="token class">.gallery-cover-img</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-item</span> <span class="token class">.gallery-name</span></span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.waterfall</span> </span><span class="token punctuation">{</span>  <span class="token property">column-count</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">column-gap</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo-wrapper</span></span><span class="token punctuation">{</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo-item</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">-moz-page-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>  <span class="token property">-webkit-column-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>  <span class="token property">break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo-item</span> img </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.photo-item</span> <span class="token class">.photo-name</span></span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#dddddd</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*适配移动端布局*/</span><span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector"><span class="token class">.waterfall</span> </span><span class="token punctuation">{</span>    <span class="token property">column-count</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">column-gap</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在<strong>matery/layout</strong> 目录下创建 <strong>galleries.ejs</strong> ，增加以下代码，并修改代码</p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;link rel="stylesheet" href="/css/gallery<span class="token class">.css</span>">&lt;%- partial('_partial/bg-cover') %>&lt;main class="content">    &lt;div class="container">        &lt;% if (site<span class="token class">.data</span> &amp;&amp; site<span class="token class">.data.galleries</span>) </span><span class="token punctuation">{</span> <span class="token selector">%>        &lt;% var galleries = site<span class="token class">.data.galleries</span>; %>        &lt;div class="gallery-wrapper row">            &lt;% for (var i = 0, len = galleries<span class="token class">.length</span>; i &lt; len; i++) </span><span class="token punctuation">{</span> <span class="token number">%</span>>            &lt;<span class="token number">%</span> var gallery = galleries[i]<span class="token punctuation">;</span> <span class="token number">%</span>>            &lt;div class=<span class="token string">"col s6 m4 l4 xl3 gallery-box"</span>>                &lt;a href=<span class="token string">"./&lt;%- gallery.name %>"</span> class=<span class="token string">"gallery-item"</span> data-aos=<span class="token string">"zoom-in-up"</span>>                     &lt;div class=<span class="token string">"gallery-cover-box"</span> style=<span class="token string">"background-image: url(你的链接&lt;%- gallery.cover%>);"</span>>                    &lt;/div>                    &lt;p class=<span class="token string">"gallery-name"</span>>                        &lt;<span class="token number">%</span>- gallery<span class="token number">.</span>name <span class="token number">%</span>>                    &lt;/p>                &lt;/a>            &lt;/div>            &lt;<span class="token number">%</span> <span class="token punctuation">}</span> <span class="token number">%</span>>        &lt;/div>        &lt;<span class="token number">%</span> <span class="token punctuation">}</span> <span class="token number">%</span>>    &lt;/div>&lt;/main></code></pre><blockquote><p>修改代码：</p><p>在<strong>你的链接</strong>这填写你相册图床的<strong>根网址</strong>，解释一下什么叫根网址，</p><p>一张图片的目录是<a href="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/123/aaa.jpg">https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/123/aaa.jpg</a></p><p>那么它的根目录就是<a href="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/%EF%BC%8C123/%E5%8F%AA%E6%98%AF%E5%9B%BE%E5%BA%8A%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9">https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/，123/只是图床中的一个文件夹</a></p><p>比如我的修改为：url(<a href="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/">https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/</a>&lt;%- gallery.cover%&gt;);”&gt;</p></blockquote><p>仍然在此目录新建<code>gallery.ejs</code>文件，添加以下代码，并修改代码：</p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;link rel="stylesheet" href="/css/gallery<span class="token class">.css</span>">&lt;link type="text/css" href="/libs/fancybox/jquery<span class="token class">.fancybox.css</span>" rel="stylesheet">&lt;link type="text/css" href="/libs/justifiedGallery/justifiedGallery<span class="token class">.min.css</span>" rel="stylesheet">&lt;%- partial('_partial/post-cover') %>&lt;%let galleries = [];if (site<span class="token class">.data</span> &amp;&amp; site<span class="token class">.data.galleries</span>) </span><span class="token punctuation">{</span>    galleries = site<span class="token number">.</span>data<span class="token number">.</span>galleries<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">var pageTitle = page<span class="token class">.title</span>;function getCurrentGallery(galleries, pageTitle) </span><span class="token punctuation">{</span>    <span class="token selector">for (let i = 0; i &lt; galleries<span class="token class">.length</span>; i++) </span><span class="token punctuation">{</span>        <span class="token selector">if (galleries<span class="token attribute">[i]</span><span class="token attribute">['name']</span> == pageTitle) </span><span class="token punctuation">{</span>            return galleries[i]<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">var currentGallery = getCurrentGallery(galleries, pageTitle)var photos = currentGallery<span class="token class">.photos</span>;let imageStr = ''for (var i = 0, len = photos<span class="token class">.length</span>; i &lt; len; i++) </span><span class="token punctuation">{</span>    var photo = photos[i]<span class="token punctuation">;</span>     imageStr += <span class="token string">"&lt;a href=\"你的链接"</span> + photo + <span class="token string">"\""</span> +            <span class="token string">"     class=\"photo-item\" rel=\"example_group\""</span> +            <span class="token string">"     data-fancybox=\"images\">"</span> +            <span class="token string">"      &lt;img src=\"你的链接"</span> + photo + <span class="token string">"\""</span> +            <span class="token string">"       alt="</span> + photo + <span class="token string">">\n"</span> +            <span class="token string">"    &lt;/a>"</span><span class="token punctuation">}</span><span class="token selector">%>&lt;div class="container">    &lt;div class="photo-wrapper">        &lt;% if (page<span class="token class">.password</span> ) </span><span class="token punctuation">{</span> <span class="token number">%</span>>            &lt;script src=<span class="token string">"/js/crypto-js.js"</span>>&lt;/script>            &lt;script src=<span class="token string">"/js/gallery-encrypt.js"</span>>&lt;/script>            &lt;div id=<span class="token string">"hbe-security"</span>>                &lt;div class=<span class="token string">"hbe-input-container"</span>>                    &lt;input type=<span class="token string">"password"</span> class=<span class="token string">"hbe-form-control"</span> id=<span class="token string">"pass"</span>  placeholder=<span class="token string">"请输入密码查看内容"</span>/>                    &lt;a href=<span class="token string">"javascript:;"</span> class=<span class="token string">"btn-decrypt"</span> id=<span class="token string">"btn_decrypt"</span>>解密&lt;/a>                &lt;/div>            &lt;/div>            &lt;div  id=<span class="token string">"mygallery"</span>>                &lt;div class=<span class="token string">"waterfall"</span> id=<span class="token string">"encrypt-blog"</span> style=<span class="token string">"display:none"</span>>                    &lt;<span class="token number">%</span>- <span class="token function">aes</span><span class="token punctuation">(</span>imageStr, page<span class="token number">.</span>password<span class="token punctuation">)</span> <span class="token number">%</span>>                &lt;/div>            &lt;/div>        &lt;<span class="token number">%</span> <span class="token punctuation">}</span> <span class="token selector">else </span><span class="token punctuation">{</span> <span class="token number">%</span>>            &lt;div class=<span class="token string">"waterfall"</span> id=<span class="token string">"encrypt-blog"</span>>                &lt;<span class="token number">%</span>- imageStr <span class="token number">%</span>>            &lt;/div>        &lt;<span class="token number">%</span> <span class="token punctuation">}</span> <span class="token selector">%>    &lt;/div>&lt;/div>&lt;script src="/libs/fancybox/fancybox<span class="token class">.js</span>">&lt;/script>&lt;script src="/libs/justifiedGallery/justifiedGallery<span class="token class">.min.js</span>">&lt;/script>&lt;script>  $("a<span class="token attribute">[rel=example_group]</span>")<span class="token class">.fancybox</span>();  $("<span class="token id">#encrypt-blog</span>")<span class="token class">.justifiedGallery</span>(</span><span class="token punctuation">{</span><span class="token property">margins</span><span class="token punctuation">:</span> <span class="token number">5</span>, <span class="token property">rowHeight</span><span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&lt;/script></code></pre><blockquote><p>修改代码：</p><p>在<strong>你的链接</strong>这填写你相册图床的<strong>根网址</strong></p><p>注意：最后一定要带上 /</p></blockquote></li><li><p>添加相册json配置文件</p><p>在根目录<code>source\_data</code>新建 <strong>galleries.json</strong> 的文件，增加<strong>json</strong> 代码如下：</p><pre><code>[  {    "name": "相册名字",    "cover": "images/p0.png",      "description": "相册的描述",      "photos": [        "images/node-1.png",        "images/node-2.png",        "images/node-3.png",        "images/node-4.png",        "images/node-5.png",        "images/node-6.png",        "images/node-7.png",    ]  }]</code></pre><blockquote><p>属性介绍：</p><p>cover：相册的封面，值为图片的地址</p><p>photos：图片的地址，输入了地址界面才会显示该图片，前提是图床中有该图片</p></blockquote></li><li><p>新建相册</p><p>在galleries目录下建立对应的相册名称目录和文件，比如我这个相册需要新建名称为 2020 文件夹，然后在文件夹中新建index.md文件，文件内容为：</p><pre><code>---title: 2020date: 2020-02-19 10:51:50type: "gallery"layout: "gallery"---</code></pre></li><li><p>查看效果</p><p>重新部署</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></pre><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-2.png" alt="image-20200619173906320"></p></li></ol><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-3.png" alt="image-20200619173936370"></p><h3 id="1-5-增加emoji支持"><a href="#1-5-增加emoji支持" class="headerlink" title="1.5 增加emoji支持"></a>1.5 增加emoji支持</h3><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>    使你markdown博客里的emoji表情跳动起来</p><ol><li><p>安装插件</p><pre><code>npm install hexo-filter-github-emojis --save</code></pre></li><li><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><p>重新部署即可查看</p></li></ol><blockquote><p>小坑：</p><p>在配置支持前发布的文章中的表情并没有获得支持，并且连表情都不会显示，所以最好在配置之后再输入表情进行测试</p></blockquote><h3 id="1-6代码高亮"><a href="#1-6代码高亮" class="headerlink" title="1.6代码高亮"></a>1.6代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，用一个插件来替换它</p><ol><li><p>安装插件</p><pre><code>npm i -S hexo-prism-plugin</code></pre></li><li><p>修改 Hexo 站点配置文件 _config.yml 中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre><code>prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre></li></ol><h3 id="1-7-搜索功能"><a href="#1-7-搜索功能" class="headerlink" title="1.7 搜索功能"></a>1.7 搜索功能</h3><p>实现文章内容搜索</p><ol><li><p>安装插件</p><pre><code>npm install hexo-generator-search --save</code></pre></li><li><p>在 Hexo 站点配置文件 _config.yml 中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre></li></ol><h3 id="1-8-中文链接转拼音"><a href="#1-8-中文链接转拼音" class="headerlink" title="1.8 中文链接转拼音"></a>1.8 中文链接转拼音</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的文章链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 hexo-permalink-pinyin Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><ol><li><p>安装插件</p><pre><code>npm i hexo-permalink-pinyin --save</code></pre></li><li><p>在 Hexo 站点配置文件 _config.yml 中，新增以下的配置项：</p><pre><code>permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre></li></ol><h3 id="1-9-文章字数统计插件"><a href="#1-9-文章字数统计插件" class="headerlink" title="1.9 文章字数统计插件"></a>1.9 文章字数统计插件</h3><p>用于在文章中显示文章字数、阅读时长信息</p><ol><li><p>安装插件</p><pre><code>npm i --save hexo-wordcount</code></pre></li><li><p>在<strong>主题</strong>配置文件_config.yml 文件中，<strong>激活</strong>以下配置项即可：</p><pre><code>wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre></li></ol><h3 id="1-10-配置音乐播放器"><a href="#1-10-配置音乐播放器" class="headerlink" title="1.10 配置音乐播放器"></a>1.10 配置音乐播放器</h3><p>想支持音乐播放，在<strong>主题</strong>的 _config.yml 配置文件中激活music配置即可：</p><pre><code># 是否在首页显示音乐.music:  enable: true  title: #非吸底模式有效    enable: true    show: 听听音乐  autoHide: false    # hide automaticaly  server: netease   #require    music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 411680085     #require    song id / playlist id / album id / search keyword  fixed: true       # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false  # 列表默认折叠  hideLrc: true     # 隐藏歌词</code></pre><blockquote><p>属性介绍：</p><p>server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）</p><p>type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>id获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist的id即为这串数字。</p></blockquote><blockquote><p>小坑：</p><p>matery主题不支持pjax异步机制，在切换页面时音乐也会切换，不会继续一首歌播放</p><p>所以这个功能比较鸡肋，在于自己取舍</p></blockquote><h3 id="1-11-关于我页面添加个人简历"><a href="#1-11-关于我页面添加个人简历" class="headerlink" title="1.11 关于我页面添加个人简历"></a>1.11 关于我页面添加个人简历</h3><p>打开theme/matery/layout/about.ejs文件，大约在13行。有一个<code>card</code>标签，找出其对应结尾的标签，大约在61行左右，然后在下面新增如下代码</p><pre><code>&lt;div class="card"&gt;     &lt;div class="card-content"&gt;         &lt;div class="card-content article-card-content"&gt;             &lt;div class="title center-align" data-aos="zoom-in-up"&gt;                 &lt;i class="fa fa-address-book"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __('个人简历') %&gt;              &lt;/div&gt;                 &lt;div id="articleContent" data-aos="fade-up"&gt;                     &lt;%- page.content %&gt;                 &lt;/div&gt;           &lt;/div&gt;      &lt;/div&gt;&lt;/div&gt;</code></pre><p>注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个card，然后/source/about/index.md下面写上你的简历了（就像写博客一样）。</p><h3 id="1-12-配置404错误页面"><a href="#1-12-配置404错误页面" class="headerlink" title="1.12 配置404错误页面"></a>1.12 配置404错误页面</h3><p>站点根目录下的source文件夹下新建404.md文件，里面内容如下：</p><pre><code>---title: 404date: 2020-6-18 16:41:10type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面了"---</code></pre><p>在主题文件夹的layout目录下新建404.ejs文件，添加内容如下：</p><pre><code>&lt;style type="text/css"&gt;    /* don't remove. */    .about-cover {        height: 90.2vh;    }&lt;/style&gt;&lt;div class="bg-cover pd-header about-cover"&gt;    &lt;div class="container"&gt;        &lt;div class="row"&gt;            &lt;div class="col s10 offset-s1 m8 offset-m2 l8 offset-l2"&gt;                &lt;div class="brand"&gt;                    &lt;div class="title center-align"&gt;                        404                    &lt;/div&gt;                    &lt;div class="description center-align"&gt;                        &lt;%= page.description %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    // 每天切换 banner 图.  Switch banner image every day.    $('.bg-cover').css('background-image', 'url(https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.1/source/medias/banner/' + new Date().getDay() + '.jpg)');&lt;/script&gt;</code></pre><p>然后部署，再看看效果即可<a href="http://localhost:4000/404/">http://localhost:4000/404/</a></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-6.png" alt="image-20200619203902808"></p><h3 id="1-13-添加Valine评论系统"><a href="#1-13-添加Valine评论系统" class="headerlink" title="1.13 添加Valine评论系统"></a>1.13 添加Valine评论系统</h3><blockquote><p>此处篇幅较长，请看我写的博客：</p><p><a href="https://fenghen0918.github.io/2020/06/19/matery-zhu-ti-valine-ping-lun-xi-tong/#toc-heading-7">https://fenghen0918.github.io/2020/06/19/matery-zhu-ti-valine-ping-lun-xi-tong/#toc-heading-7</a></p></blockquote><h3 id="1-14-修改公告-dream一栏-里的每日一句"><a href="#1-14-修改公告-dream一栏-里的每日一句" class="headerlink" title="1.14 修改公告(dream一栏)里的每日一句"></a>1.14 修改公告(dream一栏)里的每日一句</h3><p>找到<code>/themes/matery/layout/index.ejs</code>，第17行改为：</p><pre><code>&lt;% if (theme.dream.enable) { %&gt;  &lt;!-- &lt;%- partial('_widget/dream') %&gt; --&gt;  &lt;i class="fa fa-volume-up fa-lg fa-fw text-color"&gt;&lt;/i&gt; &lt;%- '&lt;span id="hitokoto"&gt;一言API请求超时。请稍后重试。&lt;/span&gt; （来源：一言API）' %&gt;&lt;% } %&gt;</code></pre><p>同时在<code>/themes/matery/layout/_partial/head.ejs</code>增加代码：</p><pre><code>&lt;script src="https://v1.hitokoto.cn/?c=d&amp;encode=js&amp;select=%23hitokoto" defer&gt;&lt;/script&gt;</code></pre><h2 id="2-视觉美化"><a href="#2-视觉美化" class="headerlink" title="2. 视觉美化"></a>2. 视觉美化</h2><h3 id="2-1-修改主题颜色及导航透明效果"><a href="#2-1-修改主题颜色及导航透明效果" class="headerlink" title="2.1 修改主题颜色及导航透明效果"></a>2.1 修改主题颜色及导航透明效果</h3><p>在主题文件的 /source/css/matery.css 文件中，搜索 .bg-color 来修改背景颜色：</p><pre><code>/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色、透明效果. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);    opacity: 0.8;  //透明效果 值范围 0~1，看情况自己修改}/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><h3 id="2-2-修改-banner-图和文章特色图"><a href="#2-2-修改-banner-图和文章特色图" class="headerlink" title="2.2 修改 banner 图和文章特色图"></a>2.2 修改 banner 图和文章特色图</h3><p>你可以直接在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。</p><p>如果想改为每小时或者每分钟切换banner图的话，可以在 /layout/_partial/bg-cover-content.ejs 文件的 <code>bannerUrl</code> 代码中，将getDay()改为getHours()或者getMinutes()即可，当然需要再上述文件夹中有足够多的图片，如换成每小时就需要24张图。</p><pre><code>var bannerUrl = "&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/medias/banner/') %&gt;" + new Date().getDay() + '.jpg';</code></pre><h3 id="2-3-修改页脚、跳动红心"><a href="#2-3-修改页脚、跳动红心" class="headerlink" title="2.3 修改页脚、跳动红心"></a>2.3 修改页脚、跳动红心</h3><h4 id="2-3-1-跳动红心"><a href="#2-3-1-跳动红心" class="headerlink" title="2.3.1 跳动红心"></a>2.3.1 跳动红心</h4><ol><li><p>在文件的最下面加上以下代码</p><pre><code>&lt;head&gt;&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/HCLonely/images@master/others/heartbeat.min.css"&gt;&lt;/head&gt;</code></pre></li><li><p>将需要加跳动红心的地方加上以下代码</p><pre><code>&lt;i id="heartbeat" class="fa fas fa-heartbeat"&gt;&lt;/i&gt;</code></pre></li></ol><h4 id="2-3-2-修改页脚"><a href="#2-3-2-修改页脚" class="headerlink" title="2.3.2 修改页脚"></a>2.3.2 修改页脚</h4><p>修改的地方<code>themes\matery\layout\_partial/footer.ejs</code>文件中，包括站点、使用的主题、访问量等。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-14.png" alt="image-20200619215304130"></p><p>我的配置：</p><pre><code>&lt;div class="col s12 m8 l8 copy-right"&gt;    &amp;copy;&lt;span id="year"&gt;&lt;%- theme.time.year %&gt;&lt;/span&gt;-&lt;span id="year"&gt;&lt;%- theme.time.year +1 %&gt;&lt;/span&gt;&amp;nbsp;&lt;i id="heartbeat" class="fa fas fa-heartbeat"&gt;&lt;/i&gt;&amp;nbsp;    &lt;a href="&lt;%- url_for('/about') %&gt;" target="_blank"&gt;&lt;%- config.author %&gt;&lt;/a&gt;    &lt;br&gt;快乐每一天！    &lt;br&gt;&lt;% if (theme.postInfo.totalCount) { %&gt;</code></pre><h3 id="2-4-修改打赏二维码"><a href="#2-4-修改打赏二维码" class="headerlink" title="2.4 修改打赏二维码"></a>2.4 修改打赏二维码</h3><p>在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="2-5-修改社交链接"><a href="#2-5-修改社交链接" class="headerlink" title="2.5 修改社交链接"></a>2.5 修改社交链接</h3><p>在主题配置文件_config.yml中，搜索<code>socialLink</code>，不配置值代表不启用，这是我的配置：</p><pre><code># 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  github:  https://github.com/fenghen0918  email: 443175565@qq.com  facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  qq: 443175565  weibo: # https://weibo.com/xxx  zhihu: # https://www.zhihu.com/xxx  rss:  # true、false  weixin: https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io/medias/imgs/wechat.png</code></pre><p>其中的weixin我是用的图片链接，会跳转到一个新的标签页，之后还需要修改ejs文件，文件在主题目录下的layout文件夹下的_partial文件夹，修改social-link.ejs，添加相关的配置，我个人添加的配置如下：</p><pre><code>&lt;% if (theme.socialLink.weixin) { %&gt;    &lt;a href="&lt;%= theme.socialLink.weixin %&gt;" class="tooltipped" target="_blank" data-tooltip="微信联系我: " data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-weixin"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;</code></pre><h3 id="2-6-动态标题"><a href="#2-6-动态标题" class="headerlink" title="2.6 动态标题"></a>2.6 动态标题</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-15.png" alt="image-20200619221831563"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-16.png" alt="image-20200619222009100"></p><p>在主题文件下的<code>themes\matery\source\js</code>下新建<code>FunnyTitle.js</code>，增加以下代码</p><pre><code> var OriginTitle = document.title; var titleTime; document.addEventListener('visibilitychange', function () {     if (document.hidden) {         $('[rel="icon"]').attr('href', "https://cdn.jsdelivr.net/gh/Yafine/cdn@2.2/source/favicon.png");         document.title = 'ヽ(●-`Д´-)ノ你要玩捉迷藏嘛';         clearTimeout(titleTime);     }     else {         $('[rel="icon"]').attr('href', "https://cdn.jsdelivr.net/gh/Yafine/cdn@2.2/source/favicon.png");         document.title = 'ヾ(Ő∀Ő3)ノ好哦！' + OriginTitle;         titleTime = setTimeout(function () {             document.title = OriginTitle;         }, 2000);     } });</code></pre><p>在<code>themes/matery/layout/layout.ejs</code>文件中添加如下代码：</p><pre><code>  &lt;script type="text/javascript"&gt;        var OriginTitile=document.title,st;        document.addEventListener("visibilitychange",function(){            document.hidden?(document.title="ヽ(●-`Д´-)ノ你要玩捉迷藏嘛",clearTimeout(st)):(document.title="(Ő∀Ő3)ノ好哦！",st=setTimeout(function(){document.title=OriginTitile},3e3))        })    &lt;/script&gt;</code></pre><h3 id="2-7-鼠标点击文字特效"><a href="#2-7-鼠标点击文字特效" class="headerlink" title="2.7 鼠标点击文字特效"></a>2.7 鼠标点击文字特效</h3><p>在<code>themes/matery/layout/layout.ejs</code>中，在最后增加代码如下：</p><pre><code>    &lt;script type="text/javascript"&gt;    var a_idx = 0;jQuery(document).ready(function ($) {    $("body").click(function (e) {        var a = new Array("富强", "民主", "文明", "和谐", "自由", "平等", "公正", "法治", "爱国", "敬业", "诚信", "友善");        var $i = $("&lt;span/&gt;").text(a[a_idx]);        a_idx = (a_idx + 1) % a.length;        var x = e.pageX,            y = e.pageY;        $i.css({            "z-index": 5,            "top": y - 20,            "left": x,            "position": "absolute",            "font-weight": "bold",            "color": "#FF0000"        });        $("body").append($i);        $i.animate({                "top": y - 180,                "opacity": 0            },            3000,            function () {                $i.remove();            });    });    setTimeout('delay()', 2000);});function delay() {    $(".buryit").removeAttr("onclick");}    &lt;/script&gt;</code></pre><h3 id="2-8-点击“爱心”效果"><a href="#2-8-点击“爱心”效果" class="headerlink" title="2.8 点击“爱心”效果"></a>2.8 点击“爱心”效果</h3><p>在主题配置文件中搜索<code>clicklove</code>，将enable设置为true即可</p><pre><code>clicklove:  enable: true</code></pre><h3 id="2-9-背景动态科技线条"><a href="#2-9-背景动态科技线条" class="headerlink" title="2.9 背景动态科技线条"></a>2.9 背景动态科技线条</h3><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/Yafine/Yafine-imgs/images/04.gif" alt="1"></p><p>在<code>themes/matery/layout/layout.ejs</code>文件中添加如下代码：</p><pre><code>&lt;!--动态线条背景--&gt;&lt;script type="text/javascript"color="122 103 238" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;</code></pre><blockquote><p>属性介绍：</p><p>color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）<br>opacity：表示线条透明度（0~1），默认：0.5<br>count：表示线条的总数量，默认：150<br>zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</p></blockquote><h3 id="2-10-背景樱花飘落效果"><a href="#2-10-背景樱花飘落效果" class="headerlink" title="2.10 背景樱花飘落效果"></a>2.10 背景樱花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>sakura.js</code>文件，打开这个网址<a href="https://sulog.oss-cn-hangzhou.aliyuncs.com/Yafine/cdn@3.3.1/source/js/sakura.js">传送门</a>，将内容复制粘贴到<code>sakura.js</code>即可。</p><p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加下面的内容：</p><pre><code>&lt;script type="text/javascript"&gt;//只在桌面版网页启用特效var windowWidth = $(window).width();if (windowWidth &gt; 768) {    document.write('&lt;script type="text/javascript" src="/js/sakura.js"&gt;&lt;\/script&gt;');}&lt;/script&gt;</code></pre><h3 id="2-11-页面获取标题"><a href="#2-11-页面获取标题" class="headerlink" title="2.11 页面获取标题"></a>2.11 页面获取标题</h3><blockquote><p>让每个页面都获得相对应的标题，而不都是主页的标题</p></blockquote><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-17.png" alt="image-20200619224014710"></p><p>修改<code>themes\matery\layout\_partial</code>中的<code>bg-cover-content.ejs</code>文件，其中原主题中这个文件的代码为(大约在第4行)：</p><p>修改前：</p><pre><code>&lt;div class="title center-align"&gt;     &lt;% if (config.subtitle &amp;&amp; config.subtitle.length &gt; 0) { %&gt;            &lt;%= config.subtitle %&gt;     &lt;% } else { %&gt;            subtitle     &lt;% } %&gt;&lt;/div&gt;</code></pre><p>修改后(2、4行有修改)</p><pre><code>&lt;div class="title center-align"&gt;     &lt;% if (is_home() &amp;&amp; config.subtitle &amp;&amp; config.subtitle.length &gt; 0) { %&gt;        &lt;%= config.subtitle %&gt;     &lt;% } else { %&gt;        &lt;%= page.title %&gt;     &lt;% } %&gt;&lt;/div&gt;</code></pre><blockquote><p>这个有一点bug，归档页面标题无法显示，解决办法目前还没有。</p></blockquote><p>页面的标题在创建页面时的md文档中<code>front-matter</code>属性中<code>title</code>的值，可以是中/英文。</p><h3 id="2-12-打字机效果"><a href="#2-12-打字机效果" class="headerlink" title="2.12 打字机效果"></a>2.12 打字机效果</h3><p>在主题配置文件中搜索<code>subtitle</code>，修改以下配置</p><pre><code># 打字效果副标题.# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:  enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 130 # 打字速度  backSpeed: 80 # 删除速度  sub1: 欢迎来到小苏的博客！  sub2: 志之所向，金石为开，谁能御之？</code></pre><blockquote><p>注意：matery只提供了两个副标题</p></blockquote><h3 id="2-13-修改全局字体"><a href="#2-13-修改全局字体" class="headerlink" title="2.13 修改全局字体"></a>2.13 修改全局字体</h3><ol><li><p>在根目录下的 <code>source </code>文件夹内创建一个名为 <code>font</code> 的文件夹，即文件夹路径为 <code>/source/font/ </code>，用来统一存放你要用到的字体。</p></li><li><p>将你要用到的字体放入上述创建的文件夹内，字体名称最好为英文，如 /source/font/myFont.ttf</p><blockquote><p>字体下载推荐：<a href="http://www.diyiziti.com/">http://www.diyiziti.com/</a></p></blockquote></li><li><p>找到 <code>/themes/matery/source/css/</code>下的 my.css 文件，填入下面的代码：</p><pre><code>@font-face{    font-family: 'myFont';    src: url('../font/myFont.ttf');}body{    font-family: 'myFont';}</code></pre><blockquote><p>将上面的 myFont 改成你自己的字体名称即可</p></blockquote></li></ol><h3 id="2-14-自定义鼠标样式"><a href="#2-14-自定义鼠标样式" class="headerlink" title="2.14 自定义鼠标样式"></a>2.14 自定义鼠标样式</h3><p>首先将鼠标样式下载到本地，推荐大家一个网站：<a href="https://zhutix.com/ico/ori-cursors/">https://zhutix.com/ico/ori-cursors/</a></p><p>以我的为例，我将鼠标指针样式放在了主题文件夹下的medias目录下，然后打开<code>themes\matery\source\css</code>下的<strong>my.css</strong>文件，添加内容如下：</p><pre><code>*{    cursor: url("/medias/imgs/zhengchang.ico"),auto!important;}:active{    cursor: url("/medias/imgs/dianji.ico"),auto!important;}</code></pre><h2 id="3-博客优化"><a href="#3-博客优化" class="headerlink" title="3. 博客优化"></a>3. 博客优化</h2><h3 id="3-1-gulp代码压缩"><a href="#3-1-gulp代码压缩" class="headerlink" title="3.1 gulp代码压缩"></a>3.1 gulp代码压缩</h3><blockquote><p>hexo生成的html、css、js等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的“压缩”，减小一点资源文件的大小也是对访问速度有那么一点提升的。</p></blockquote><ol><li><p>在站点目录执行以下命令，安装插件</p><pre><code># 全局安装gulp模块npm install gulp -g# 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save# 额外的功能模块npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</code></pre></li><li><p>在Hexo根目录新建文件 gulpfile.js，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。（注意：文件名不能错，一定为gulpfile.js，否则会出错！）</p><pre><code>var gulp = require("gulp");var debug = require("gulp-debug");var cleancss = require("gulp-clean-css"); //css压缩组件var uglify = require("gulp-uglify"); //js压缩组件var htmlmin = require("gulp-htmlmin"); //html压缩组件var htmlclean = require("gulp-htmlclean"); //html清理组件var imagemin = require("gulp-imagemin"); //图片压缩组件var changed = require("gulp-changed"); //文件更改校验组件var gulpif = require("gulp-if"); //任务 帮助调用组件var plumber = require("gulp-plumber"); //容错组件（发生错误不跳出任务，并报出错误内容）var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)var isDebug = true; //是否调试显示 编译通过的文件var gulpBabel = require("gulp-babel");var es2015Preset = require("babel-preset-es2015");var del = require("del");var Hexo = require("hexo");var hexo = new Hexo(process.cwd(), {}); // 初始化一个hexo对象// 清除public文件夹gulp.task("clean", function () {    return del(["public/**/*"]);});// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return// 创建静态页面 （等同 hexo generate）gulp.task("generate", function () {    return hexo.init().then(function () {        return hexo            .call("generate", {                watch: false            })            .then(function () {                return hexo.exit();            })            .catch(function (err) {                return hexo.exit(err);            });    });});// 启动Hexo服务器gulp.task("server", function () {    return hexo        .init()        .then(function () {            return hexo.call("server", {});        })        .catch(function (err) {            console.log(err);        });});// 部署到服务器gulp.task("deploy", function () {    return hexo.init().then(function () {        return hexo            .call("deploy", {                watch: false            })            .then(function () {                return hexo.exit();            })            .catch(function (err) {                return hexo.exit(err);            });    });});// 压缩public目录下的js文件gulp.task("compressJs", function () {    return gulp        .src(["./public/**/*.js", "!./public/libs/**"]) //排除的js        .pipe(gulpif(!isScriptAll, changed("./public")))        .pipe(gulpif(isDebug, debug({ title: "Compress JS:" })))        .pipe(plumber())        .pipe(            gulpBabel({                presets: [es2015Preset] // es5检查机制            })        )        .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩        .pipe(gulp.dest("./public")); //输出到目标目录});// 压缩public目录下的css文件gulp.task("compressCss", function () {    var option = {        rebase: false,        //advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]        compatibility: "ie7" //保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]        //keepBreaks: true, //类型：Boolean 默认：false [是否保留换行]        //keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀    };    return gulp        .src(["./public/**/*.css", "!./public/**/*.min.css"]) //排除的css        .pipe(gulpif(!isScriptAll, changed("./public")))        .pipe(gulpif(isDebug, debug({ title: "Compress CSS:" })))        .pipe(plumber())        .pipe(cleancss(option))        .pipe(gulp.dest("./public"));});// 压缩public目录下的html文件gulp.task("compressHtml", function () {    var cleanOptions = {        protect: /&lt;\!--%fooTemplate\b.*?%--&gt;/g, //忽略处理        unprotect: /&lt;script [^&gt;]*\btype="text\/x-handlebars-template"[\s\S]+?&lt;\/script&gt;/gi //特殊处理    };    var minOption = {        collapseWhitespace: true, //压缩HTML        collapseBooleanAttributes: true, //省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;        removeEmptyAttributes: true, //删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt;        removeScriptTypeAttributes: true, //删除&lt;script&gt;的type="text/javascript"        removeStyleLinkTypeAttributes: true, //删除&lt;style&gt;和&lt;link&gt;的type="text/css"        removeComments: true, //清除HTML注释        minifyJS: true, //压缩页面JS        minifyCSS: true, //压缩页面CSS        minifyURLs: true //替换页面URL    };    return gulp        .src("./public/**/*.html")        .pipe(gulpif(isDebug, debug({ title: "Compress HTML:" })))        .pipe(plumber())        .pipe(htmlclean(cleanOptions))        .pipe(htmlmin(minOption))        .pipe(gulp.dest("./public"));});// 压缩 public/medias 目录内图片gulp.task("compressImage", function () {    var option = {        optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级）        progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片        interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染        multipass: false //类型：Boolean 默认：false 多次优化svg直到完全优化    };    return gulp        .src("./public/medias/**/*.*")        .pipe(gulpif(!isScriptAll, changed("./public/medias")))        .pipe(gulpif(isDebug, debug({ title: "Compress Images:" })))        .pipe(plumber())        .pipe(imagemin(option))        .pipe(gulp.dest("./public"));});// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器gulp.task(    "build",    gulp.series(        "clean",        "generate",        "compressHtml",        "compressCss",        "compressJs",        gulp.parallel("deploy")    ));// 默认任务gulp.task(    "default",    gulp.series(        "clean",        "generate",        gulp.parallel("compressHtml", "compressCss", "compressJs")    ));//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</code></pre><blockquote><p>注意：这里我去掉了图片的压缩，如果想要加上可以在第154行加上 “compressImage”, 和第165行的加上”compressImage” 即可</p></blockquote></li><li><p>使用（两种方式）：</p><ul><li>直接在Hexo根目录执行 gulp，这个命令相当于 hexo cl&amp;&amp;hexo g 并且再把代码压缩，再hexo s进行部署即可</li><li>在Hexo根目录执行 gulp build ，这个命令与第1种相比是：在最后又加了个 hexo d ，等于说生成、压缩文件后又帮你自动部署了</li></ul></li></ol><h3 id="3-1-CDN加速"><a href="#3-1-CDN加速" class="headerlink" title="3.1 CDN加速"></a>3.1 CDN加速</h3><blockquote><p>关于CDN是什么？参考<a href="https://yafine-blog.cn/posts/ee35.html">励心大佬</a></p><p>由于我们将博客部署到了国外的Github上，国内访问速度很慢，我们可以使用这个技术来实现全站加速</p></blockquote><p>在理解了CDN的含义和该如何使用CDN的前提下，matery主题有一个很人性化的操作，不需要我们将每个资源都逐个设置，在主题配置文件_config.yml中搜索<code>jsDelivr</code>，填写url为自己的博客仓库即可，如我的：</p><pre><code>jsDelivr:  url: https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io</code></pre><p>此时重新<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</code>部署你的项目体验效果，网站的加载速度会快很多（先看小苏经历的坑）。</p><blockquote><p>关于CDN加速的坑：</p><ol><li>配置了此项，就代表着hexo s本地调试的时候，网站依然会去GitHub请求资源（原来的资源），所以本地调试的时候记得将 此项配置 注释或者删除掉；</li><li>在hexo s本地调试好之后，需要hexo d部署到网上，要先配置到<code>url</code>，之后再<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</code>进行部署，否则不生效；</li><li>使用了matery提供的全局CDN加速，有可能你的樱花散落，鼠标图标等一些特效消失，具体原因还不清楚，不过加速效果才是小苏想要的，就舍弃掉了这些特效。</li></ol></blockquote><h3 id="3-2-打造图床"><a href="#3-2-打造图床" class="headerlink" title="3.2 打造图床"></a>3.2 打造图床</h3><blockquote><p>图床的选择有免费和收费，在这里推荐一种免费搭建图床的方式：</p><p>PicGo+Github：<a href="https://yafine-blog.cn/posts/eb3a.html">https://yafine-blog.cn/posts/eb3a.html</a></p><p>有了图床，我们可以实现自定义相册、markdown基于图床上传图片的功能，很强大</p></blockquote><h3 id="3-3-部署到Coding"><a href="#3-3-部署到Coding" class="headerlink" title="3.3 部署到Coding"></a>3.3 部署到Coding</h3><blockquote><p>在上面的教程我们可以将博客部署到国外Github的仓库上，我们也可以将博客部署到国内Coding、Gitee仓库上，可以提高一些网站访问的速度，小苏只使用了Coding，这里也介绍一下。</p></blockquote><ul><li><a href="https://fenghen0918.github.io/2020/06/20/hexo-bo-ke-bu-shu-dao-coding/">https://fenghen0918.github.io/2020/06/20/hexo-bo-ke-bu-shu-dao-coding/</a></li></ul><h3 id="3-4-新建文章自动打开本地Markdown编辑器"><a href="#3-4-新建文章自动打开本地Markdown编辑器" class="headerlink" title="3.4 新建文章自动打开本地Markdown编辑器"></a>3.4 新建文章自动打开本地Markdown编辑器</h3><blockquote><p>写新文章时，需要控制台执行hexo new “文章名字”生成一篇新文章，但需要手动打开，挺麻烦，我们可以设置在生成之后自动打开</p></blockquote><p>在站点根目录下新建scripts目录，然后在新建<code>auto_open.js</code>，在文件填入一下内容：</p><pre><code>var spawn = require('child_process').exec;// Hexo 2.x 用户复制这段//hexo.on('new', function(path){  //spawn('start  "markdown编辑器绝对路径.exe" ' + path);//});// Hexo 3 用户复制这段hexo.on('new', function(data){  spawn('start  "D:\Program Files\Typora\Typora.exe" ' + data.path);});</code></pre><blockquote><p>其中”D:\Program Files\Typora\Typora.exe”是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行<code>hexo cl &amp;&amp; hexo g -d</code>，部署到GitHub即可，以后在发布文章就会自动打开编辑器。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora简要语法</title>
      <link href="/2020/06/18/util/typora-jian-yao-yu-fa/"/>
      <url>/2020/06/18/util/typora-jian-yao-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="标题、引用"><a href="#标题、引用" class="headerlink" title="标题、引用"></a>标题、引用</h1><pre><code>标题的格式：# 一级标题## 二级### 三级#### 四级##### 五级###### 六级</code></pre><blockquote><p>这是一段引用</p></blockquote><pre><code>引用的格式：&gt; 引用</code></pre><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>把大象放进冰箱</p><ol><li>打开冰箱</li><li>把大象塞进去</li><li>关上冰箱</li></ol><p>无序列表：</p><ul><li><p>1111</p></li><li><p>2222</p></li></ul><ul><li>1111</li><li>2222</li></ul><pre><code>有序的格式：1. 有序列表无序的格式：* 无序列表- 无序列表</code></pre><hr><h1 id="复选按钮"><a href="#复选按钮" class="headerlink" title="复选按钮"></a>复选按钮</h1><ul><li><p><input disabled="" type="checkbox">  吃饭</p></li><li><p><input disabled="" type="checkbox">  睡觉</p></li><li><p><input disabled="" type="checkbox">  打豆豆</p></li></ul><pre><code>复选按钮的格式- [ ] 吃饭</code></pre><hr><h1 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h1><pre><code>代码块的格式：​``` 代码块​``` java</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个java代码块"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><hr><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th align="center">姓名</th><th align="center">年龄</th><th align="right">成绩</th></tr></thead><tbody><tr><td align="center">张三</td><td align="center">18</td><td align="right">99</td></tr></tbody></table><pre><code>表格的格式：|表头|表头||:--左对齐|--:右对齐|:-居中对齐-:|</code></pre><hr><h1 id="脚注："><a href="#脚注：" class="headerlink" title="脚注："></a>脚注：</h1><p>一键三连<a href="%E8%BF%99%E6%98%AF%E8%84%9A%E6%B3%A8%E7%9A%84%E8%A7%A3%E9%87%8A">^三连</a></p><pre><code>脚注的格式[^脚注][^脚注]:脚注的解释</code></pre><h1 id="横线："><a href="#横线：" class="headerlink" title="横线："></a>横线：</h1><hr><pre><code>横线的格式：--- </code></pre><hr><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p><a href="www.baidu.com" title="一个搜索引擎">百度</a></p><p><a href="baidu.com" title="一个搜索引擎">百度</a> </p><p><a href="#%E6%A0%87%E9%A2%981">标题1</a></p><p><a href="http://baidu.com/">http://baidu.com</a></p><p>图片链接：</p><img src="/2020/06/18/util/typora-jian-yao-yu-fa/百度云下载\day02_MySQL基础\笔记\MySQL数据库、表、数据的关系.bmp" alt="百度" style="zoom: 50%;"><pre><code>超链接:    [内容](地址"鼠标移上去的内容")    http://baidu.com 域名加地址，自动生成链接id链接：    [内容][id]    [id]:地址"鼠标移上去的内容"瞄点链接：    [内容](#文章内容)图片链接：    ![内容](图片的链接)</code></pre><hr><h1 id="行内格式"><a href="#行内格式" class="headerlink" title="行内格式"></a>行内格式</h1><p> <em>斜体</em></p><p><strong>加粗</strong></p><p><code>void eat()</code></p><p><u>下划线</u></p><p><del>被删除的文字</del></p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>x^2^</p><p>H<del>2</del>O</p><p>==高亮==</p><pre><code>行内格式：*斜体***加粗**`代码`&lt;u&gt;下划线&lt;/u&gt;~~删除~~:表情:X^2^H~2~O</code></pre><hr><h1 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h1><blockquote><p>使用空格和Tab不理想</p></blockquote><p>使用占位符：</p><p><code> &amp;emsp;</code>表示两个空格，一个汉字(推荐)</p><p><code> &amp;ensp;</code>表示一个空格</p>]]></content>
      
      
      <categories>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github搭建matery博客一（搭建环境篇）</title>
      <link href="/2020/06/17/hexo/hexo-github-da-jian-matery-bo-ke-yi-da-jian-huan-jing-pian/"/>
      <url>/2020/06/17/hexo/hexo-github-da-jian-matery-bo-ke-yi-da-jian-huan-jing-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考<a href="https://yafine-blog.cn/posts/4ab2.html">过客~励む</a>，介绍搭建一个静态博客网站的全过程</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>小苏在偶然间B站中看到CodeSheep介绍的Hexo搭建个人博客，本身也很想搭建一个属于自己的网站，虽然小苏是一个主Java后端的学习者，但是不影响对搭建静态博客的热情！于是在评论见看到了励心大佬细致入微的搭建全过程，于是开始了从零👉了解👉实践👉踩坑👉完成的全过程。</p><p>期间踩过多少坑，又解决了多少个问题，在期间完全不敢相信自己能搭建完成，现在就花上一些时间，将这个过程记录下来，记录自己踩坑经历，最后，再次感谢<a href="https://yafine-blog.cn/">过客~励む</a>大佬的文章，带我展开了新知识的一页。</p><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h2><blockquote><p>搭建静态博客网站，最重要的两个软件：Node.js、Git</p></blockquote><h3 id="1-1-下载、安装、配置Node-js"><a href="#1-1-下载、安装、配置Node-js" class="headerlink" title="1.1 下载、安装、配置Node.js"></a>1.1 下载、安装、配置Node.js</h3><h4 id="1-1-1-下载、安装"><a href="#1-1-1-下载、安装" class="headerlink" title="1.1.1 下载、安装"></a>1.1.1 下载、安装</h4><p>首先去<a href="https://nodejs.org/en/download/">Node.js</a>官网 下载node.js的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，具体安装步骤参考<a href="https://yafine-blog.cn/posts/4ab2.html">励心大佬</a>的文章。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery1.png" alt="image-20200618220836840"></p><blockquote><p>Node.js安装的坑</p><ol><li><p>错误：使用命令“npm install -g hexo-cli”安装hexo时出现错误</p><p>解决方法：安装不要装在C系统盘</p><p>原因：安装在系统盘，win10的电脑会出现系统盘保护，在之后使用命令行等操作会出现一系列问题，所以在安装时最好时选择在非系统盘</p></li></ol></blockquote><h4 id="1-1-2设置npm的内置路径——-gt-全局模块路径和缓存路径"><a href="#1-1-2设置npm的内置路径——-gt-全局模块路径和缓存路径" class="headerlink" title="1.1.2设置npm的内置路径——>全局模块路径和缓存路径"></a>1.1.2设置npm的内置路径——&gt;全局模块路径和缓存路径</h4><ul><li>在node.js安装目录创建两个文件夹【node_global】及【node_cache】</li></ul><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2.png" alt="image-20200618222325444"></p><ul><li><p>命令行输入</p><pre><code>npm config set prefix"D:\Develop\nodejs\node_global"npm config set cache "D:\Develop\nodejs\node_cache"" "里面是你的两个文件夹路径</code></pre></li></ul><h4 id="1-1-3-配置环境变量"><a href="#1-1-3-配置环境变量" class="headerlink" title="1.1.3 配置环境变量"></a>1.1.3 配置环境变量</h4><ul><li><p>点击“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”</p></li><li><p>将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery5.png" alt="image-20200618223314624"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery6.png" alt="image-20200618223352441"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery7.png" alt="image-20200618223417825"></p></li><li><p>将【系统变量】下的【Path】修改为【D:\Develop\nodejs\】</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery8.png" alt="image-20200618223816282"></p></li></ul><blockquote><p>Node.js环境变量的坑</p><ol><li><p>错误：在之后使用命令“hexo ***”出现bash: hexo command not found</p><p>解决方法：注意上面的用户变量和系统变量，重新配置</p></li></ol></blockquote><h4 id="1-1-4-设置npm的镜像源"><a href="#1-1-4-设置npm的镜像源" class="headerlink" title="1.1.4 设置npm的镜像源"></a>1.1.4 设置npm的镜像源</h4><p>改变原有的镜像源，改为国内淘宝的镜像源，下载速度会加快</p><pre><code># 查看npm的配置npm config list# 默认源npm config set registry https://registry.npmjs.org# 临时改变镜像源npm --registry=https://registry.npm.taobao.org# 永久设置为淘宝镜像源npm config set registry https://registry.npm.taobao.org</code></pre><h3 id="1-2-Git的安装与配置"><a href="#1-2-Git的安装与配置" class="headerlink" title="1.2 Git的安装与配置"></a>1.2 Git的安装与配置</h3><ul><li>首先就是去<a href="https://git-scm.com/">Git官网</a>下载Git，根据你电脑系统的配置信息，下载对应的安装程序，具体安装步骤参考<a href="https://yafine-blog.cn/posts/4ab2.html">励心大佬</a></li></ul><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery9.png" alt="image-20200618224848221"></p><ul><li>回到桌面，点击鼠标右键，会出现两个选项Git GUI Here和Git Bash Here，在打开Cmd(Win+R)，分别输入git和git –version，如果出现版本号，即安装成功！</li></ul><h2 id="2-Github注册以及Github-Pages创建"><a href="#2-Github注册以及Github-Pages创建" class="headerlink" title="2. Github注册以及Github Pages创建"></a>2. Github注册以及Github Pages创建</h2><h3 id="2-1Github注册"><a href="#2-1Github注册" class="headerlink" title="2.1Github注册"></a>2.1Github注册</h3><p>打开<a href="https://github.com/">Github</a>官网首页，点击右上角的Sign Up ，然后在出现的页面上填写你的相关信息，进行注册，具体步骤按<a href="https://yafine-blog.cn/posts/4ab2.html">励心大佬</a>的来</p><h3 id="2-2Github-Pages创建"><a href="#2-2Github-Pages创建" class="headerlink" title="2.2Github Pages创建"></a>2.2Github Pages创建</h3><p>开始创建库，如下图所示，仓库名创建格式必须为：&lt;用户名&gt;.github.io，勾选Initialize this repository with a README点击Creat repository进行创建。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery10.png" alt="image-20200618230042789"></p><p>我们来测试一下，点击Create new file，出现如下界面，然后命名文件名为index.html，在填写如图的内容，再点击Commit new file，即创建成功，然后打开一个新的网页，输入网址https://&lt;你的用户名&gt;.github.io，即可以看见一个新的网页，其中的内容就是你写的内容。</p><h2 id="3-配置Git用户名和邮箱"><a href="#3-配置Git用户名和邮箱" class="headerlink" title="3.配置Git用户名和邮箱"></a>3.配置Git用户名和邮箱</h2><p>在桌面点击鼠标右键，点击Git Bash Here，然后分别输入下面的两个命令，并回车：</p><pre><code>git config --global user.name "此处填写你注册时的用户名"git config --global user.email "此处填写你注册时的邮箱"# 一般只要不报错，可以跳过下面寻找.gitconfig文件</code></pre><p>然后找到.gitconfig文件，文件存放位置在C:/Users/[username]/.gitconfig（未找到的话，请开启显示隐藏文件的功能），查看配置是否成功。</p><h2 id="4-本地安装hexo静态博客框架以及发布到Github-Pages"><a href="#4-本地安装hexo静态博客框架以及发布到Github-Pages" class="headerlink" title="4.本地安装hexo静态博客框架以及发布到Github Pages"></a>4.本地安装hexo静态博客框架以及发布到Github Pages</h2><h3 id="4-1-本地安装hexo静态博客框架"><a href="#4-1-本地安装hexo静态博客框架" class="headerlink" title="4.1 本地安装hexo静态博客框架"></a>4.1 本地安装hexo静态博客框架</h3><p>选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为blog的文件夹，创建完后进入文件夹点击鼠标右键，选择Git Bash Here，然后依次输入如下命令，：</p><pre><code>npm install -g hexo-cli # hexo框架的安装# 等上一个命令完成后，在输入下面的命令hexo init #初始化文件夹npm install  # 安装博客所需要的依赖文件</code></pre><p>运行完之后，再输入</p><pre><code>hexo g #编译文件hexo s #本地部署文件</code></pre><p>之后在浏览器中打开<a href="http://locakhost:4000或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。">http://locakhost:4000或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。</a></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery11.png" alt="image-20200618231036493"></p><h3 id="4-2-本地博客发布到Github-Pages"><a href="#4-2-本地博客发布到Github-Pages" class="headerlink" title="4.2 本地博客发布到Github Pages"></a>4.2 本地博客发布到Github Pages</h3><p>具体步骤按<a href="https://yafine-blog.cn/posts/4ab2.html">励心大佬</a>的来</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常见指令</title>
      <link href="/2020/06/16/hexo/hexo-chang-jian-zhi-ling/"/>
      <url>/2020/06/16/hexo/hexo-chang-jian-zhi-ling/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考<a href="https://lovelijunyi.gitee.io/posts/83b6.html">会飞的小戈</a>，介绍一些比较常用的Hexo的命令，方便之后查看</p></blockquote><p><strong>说明</strong>：</p><ol><li><p>将博客上传，需要经过清理、编译、上传三步骤</p></li><li><p>如果使用了gulp代码压缩插件，只需要输入<strong>gulp</strong>即可实现清理、编译，再上传即可</p></li></ol><h2 id="清理指令"><a href="#清理指令" class="headerlink" title="清理指令"></a>清理指令</h2><p>用于将原编译文件（public文件夹中的文件）删除</p><pre><code>hexo clean ,简化写法: hexo cl</code></pre><h2 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h2><p>用于生成编译好的文件</p><pre><code>hexo g</code></pre><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>部署好可以在<a href="http://localhost:4000调试查看，这是本地的，不会上传上去">http://localhost:4000调试查看，这是本地的，不会上传上去</a></p><pre><code>hexo s</code></pre><blockquote><p>注意：matery使用cdn全局加速时，本地部署仍然会去访问网上已部署的，所以在调试时先将cdn加速注释掉</p></blockquote><h2 id="上传部署"><a href="#上传部署" class="headerlink" title="上传部署"></a>上传部署</h2><p>用于上传到网上</p><pre><code>hexo deploy ,简化写法 hexo d</code></pre><blockquote><p>注意：<strong>hexo deploy</strong>会和豆瓣部署冲突，所以建议这里最好不要简写</p></blockquote><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><pre><code>npm install 插件名 --save</code></pre><h2 id="卸载插件"><a href="#卸载插件" class="headerlink" title="卸载插件"></a>卸载插件</h2><pre><code>npm uninstall 插件名</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUG</title>
      <link href="/2020/06/15/xue-xi/bug/"/>
      <url>/2020/06/15/xue-xi/bug/</url>
      
        <content type="html"><![CDATA[<h1 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h1><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><ul><li>包分离<ul><li><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200515183345879.png" alt="image-20200515183345879" style="zoom:67%;"></li></ul></li><li>在选中字段中替换<ul><li>ctrl+r</li></ul></li><li>try catch快捷键<ul><li>ctrl+alt+t</li></ul></li></ul><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="TomCat"><a href="#TomCat" class="headerlink" title="TomCat"></a>TomCat</h3><ul><li><p>1.部署war 和 war exploded的区别</p><ul><li><p>答：</p><ul><li><p>war模式这种可以称之为是发布模式，这是先打包war包，再发布到tomcat路径的webapps上；</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200609160640973.png" alt="image-20200609160640973"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200609160622656.png" alt="image-20200609160622656"></p></li><li><p>war exploded模式是直接把文件夹，jsp页面，classes等等移到target文件夹里面，进行加载部署</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200609160701227.png" alt="image-20200609160701227"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200609160709307.png" alt="image-20200609160709307"></p></li></ul></li></ul></li><li><p>2.部署方式：找不到war包，只有文件夹</p></li><li><p>答：</p><ul><li><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/bug-web.png" alt="img"></li><li><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/8X%7D18EKVH$~S8BSYA%7BJ09E1.png" alt="img"></li><li>再部署war包就可以了</li></ul></li></ul><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><ul><li><p>1.idea maven在哪修改application context</p><ul><li><p>答：重新创建一个tomcat插件（往下滑！！）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200514231158870.png" alt="image-20200514231158870"></p></li></ul></li><li><p>2.不自动下载依赖</p><ul><li>答：将自动下载勾选上，点击download，等加载完毕后将依赖剪切再粘贴</li><li><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200515173902146.png" alt="image-20200515173902146"></li></ul></li><li><p>3.下载依赖只下载了lastUpdated（或下载依赖没有提示 ctrl+alt+空格）</p><ul><li>答：1.将lastUpdated删除，2.更新索引，3.关闭所有idea，等待一会重新打开</li><li><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200526162811970.png" alt="image-20200526162811970"></li></ul></li><li><p>4.Error:java: 错误: 不支持发行版本 5</p></li><li><p>答：修改jdk</p></li><li><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200526212051049.png" alt="image-20200526212051049"></p></li><li><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200526212106406.png" alt="image-20200526212106406"></p></li><li><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200526212119182.png" alt="image-20200526212119182"></p></li><li><p>5.IDEA maven变更后自动重置LanguageLevel和JavaCompiler版本</p></li><li><p>答：在pom.xml中指定maven-compiler-plugin的版本</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><ol><li>org.apache.ibatis.binding.BindingException</li></ol><ul><li>答：接口配置文件的select中id属性没有和方法名保持一致</li><li><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200528180950279.png" alt="image-20200528180950279"></li></ul><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200528181008231.png" alt="image-20200528181008231"></p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul><li><p><strong>BeanCreationException</strong>、<strong>ClassNotFoundException: org.aspectj.weaver.reflect</strong>（在最后）</p></li><li><p>答：使用aop 缺少依赖包aspectjweaver.jar 和spring-aop.jar报错</p><pre class=" language-x&amp;#39;m&amp;#39;l"><code class="language-x&amp;#39;m&amp;#39;l">导入依赖<dependency>    <groupId>org.aspectj</groupId>xml    <artifactId>aspectjweaver</artifactId>    <version>1.8.7</version></dependency></code></pre></li></ul><h3 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h3><ol><li><p>org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name ‘accountService’，测试spring-mybatis整合时，加载不出spring配置文件，创建不了service</p><p>答：spring配置文件写错</p><pre class=" language-xml"><code class="language-xml">错误：<span class="token comment" spellcheck="true">&lt;!--配置mapper映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperScannerConfigurer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>正确：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.hm.ssm.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></li><li><p>javax.servlet.ServletException: Servlet.init() for servlet [dispatcherServlet] threw exception</p><p>答：web.xml中的前端控制器配置错误</p><pre class=" language-xml"><code class="language-xml">错误： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  正确：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:SpringMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span></code></pre></li><li><p>访问页面pageContext被解析成：$%7BpageContext.request.contextPath%7D</p><p>答：查看web.xml中头文件web-app的版本低于2.4，修改web-app的版本即可正常获取相对路径</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>      <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span>      <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>访问响应字符串，出现乱码????</p><p>答：filter设置的字符编码，是解决请求接收数据的编码。需要再设置响应编码，可以在controller方法上设置编码</p><pre class=" language-xml"><code class="language-xml"> @RequestMapping(value = "/save",produces = "text/html;charset=UTF-8")</code></pre></li><li><p>查询使用ModelAndView保存的值，在jstl获取不到，却能获取到其他模块的值</p><p>答：ModelAndView没有给定Key值，能获取到其他值可能是之前保存的，</p><pre class=" language-java"><code class="language-java">错误：modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>正确：modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">,</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习历程</title>
      <link href="/2020/06/15/xue-xi/xue-xi-li-cheng/"/>
      <url>/2020/06/15/xue-xi/xue-xi-li-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="学习历程"><a href="#学习历程" class="headerlink" title="学习历程"></a>学习历程</h1><p>4.21 540P-553P（14P）</p><p>​        JDBC增删改查，</p><p>​        DriverManager：驱动管理对象</p><p>​        Connection：数据库连接对象</p><p>​        Statement：执行sql的对象</p><p>​        ResltSet：结果集对象</p><p>​        遍历数据</p><p>​        jdbc工具类</p><p>​        获取src路径下的文件的方式：ClassLoader 类加载器</p><p>4.22 554P-568P（15P）</p><p>​        PreparedStatement：执行sql的对象(预处理,?占位符)</p><p>​        jdbc工具类：配置文件，封装方法实现注册驱动，获取连接数据库对象，资源释放</p><p>​        JDBC控制事务：setAutoCommit(boolean autoCommit)、commit（）、rollback()</p><p>​        数据库连接池：帮助快速创建Connection对象，只需要配置文件就可以实现注册驱动，加载驱动</p><p>​        C3P0:数据库连接池技术，xml配置文件    自动，DataSource ds = new ComboPooledDataSource();</p><p>​        druid：数据库连接池技术，properties配置文件，手动，conn = JDBCUtils.getConnection();</p><p>​        JDBCTemplate：简化JDBC开发 </p><p>​                                    </p><p>4.24 569P-602P（34P）</p><p>​    HTML标签：文件标签、文本标签、图片标签、列表标签、链接标签、div和span、语义化标签、表格标签、                         表单标签</p><p>​    CSS样式：CSS语法 “：”，使用内联样式、内部样式、外部样式</p><p>​                        <link rel="stylesheet" href="css/a.css"></p><p>​    CSS选择器：id选择器、元素选择器、类选择器、选择所有元素、并集选择器、子/父选择器、属性选择器、                         伪类选择器</p><p>​    CSS属性：字体、文本、背景、边框、尺寸、盒子模型（根据视角）</p><p>4.25 603P-639P(37P)</p><p>​    JavaScript（ECMAScript）:基本语法、基本对象：Function对象、Array、Boolean、Date、Math、                                                Number、String、RegExp：正则表达式对象、Global（全局对象，编码解码）</p><p>​    DOM（文档对象模型）： Document：文档对象（创建元素对象、其他DOM对象）、Element：元素对象                                            （设置/删除属性）、Node：节点对象，其他5个的父对象（创建/删除/替换子节                                                点）</p><p>​    BOM（浏览器对象模型）：Window：窗口对象（定时器，弹窗，其他对象的父对象）、Navigator：浏览器                                                对象、Screen：显示器屏幕对象、History：历史记录对象、Location：地址栏对                                                象（刷新，设置/返回url）</p><p>4.26 640P-659（20P）</p><p>​    DOM：innerHTML（标签体设置/获得，样式控制）、事件监听机制：点击onclick、焦点onblur,onfocus、加载                onload、鼠标onmouse…、键盘onkey…、选择和改变onchange,onselect、表单onsubmit</p><p>​    Bootstrap（一个前端开发的框架）：响应式布局（栅格系统）：container,container-fluid,row,col-设备代号-格                        子数目(一个格子占几个位置)，CSS样式和JS插件：按钮、图片、表格、表单、组件（导航条、                        分页条）、插件（轮播图）</p><p>4.27 660P-674P(15P)</p><p>XML(可扩展标记语言)：用于配置文件，语法、约束：用于约束xml的写法（DTD简单约束，XSD复杂约束）、引                                        入约束的方法，读取（解析）xml文档：Jsoup解析器（对象）、快捷查询方式：                                        selector：选择器、xpath</p><p>4.28 675P-695P（21P）</p><p>​    WEB服务器（tomcat）:文件目录，idea安装、配置tomcat</p><p>​    Servlet：一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则，</p><p>​                    步骤：1.继承HttpServlet/GenericServlet/实现Servlet，2.实现方法doGet/doPost，3.配置（Servlet3.0                    注解）@WebServlet(“资源路径”)、Servlet中的生命周期方法：init初始化、service服务、destroy销毁</p><p>​    HTTP:（类似约束，约束客户端和服务器之间发送数据的格式）默认端口号:80、请求消息数据格式：请求行(请                求方式 请求url 请求协议/版本)、请求头（User-Agent：浏览器版本信息，Referer：当前请求的由来）、                请求空行、请求体（封装post参数）</p><p>4.29 696-712（17P）</p><p>​    request功能：获取虚拟目录 getContextPath()、获取请求URI：/day14/demo1 getRequestURI()、请求头的名称获取请                            求头的值getHeader(String name)</p><p>​    getParameter(String name)根据参数名称获取参数值、getParameterMap():获取所有参数    的map集合、中文乱码request.setCharacterEncoding(“utf-8”);请求转发(forward)、request    域：set/getAttribute（）</p><p>4.30 713-728（16P）</p><p>​    JavaBean（标准的Java类）：有空参的构造器、类必须被public修饰、成员变量必须使用                                                    private修饰、公共setter和getter方法</p><p>​    BeanUtils工具类，用于封装JavaBean：set/getProperty（将javabean封装/获取值）、populate(Object obj , Map map)                                                                    封装所有信息进javaBean</p><p>​    HTTP协议（响应消息）：响应行（状态码）、响应头（Content-Type编码格式、Content-disposition打开方式）、响应                                            体（传输的数据）</p><p>​    Response对象：重定向：sendRedirect(“虚拟路径+资源名称”)、重定向/转发的特点、服务器输出字符/字节数据到浏览                                            器、乱码问题：response.setContentType(“text/html;charset=utf-8”);、路径写法</p><p>5.3 729-761(33P)</p><p>​    ServletContext对象：获取MIME类型：getMimeType(String file)、域对象：共享数据（所有用户都可使用）、获取文                                        件的真实(服务器)路径getRealPath(String path)</p><p>​    客户端会话技术（Cookie）：1.new Cookie(String name, String value) 、2.response.addCookie(Cookie cookie) 、                                                    3.setPath(String path)、request.getCookies()  </p><p>​    服务器端会话技术（Session）：1.request.getSession()、2.set/get/removeAttribute</p><p>​    ==session与Cookie的区别==：</p><ol><li><p>session存储数据在服务器端，Cookie在客户端</p></li><li><p>session没有数据大小限制，Cookie有</p></li><li><p>session数据安全，Cookie相对于不安全</p><p>JSP：用于简化书写、JSP的脚本&lt;% %&gt;&lt;%! 成员变量%&gt;&lt;%= 代码 %&gt;，内置对象：request、response、out</p><p>​            response.getWriter()数据输出永远在out.write()之前</p></li></ol><p>5.4 762-786（25P）</p><p>​    JSP:指令（page配置页面、include包含文件、taglib标签库）、注释、9大内置对象（pageContext获取其他八个内置对            象、request、session、application、response、page、out、config、exception）</p><p>​    MVC：开发模式：（M：Model，模型。JavaBean）（V：View，视图。JSP）（C：Controller，控制器。Servlet）</p><p>​    EL表达式：${表达式}，作用：获取存储在域的值（值、对象、集合），获取内置对象：pageContext.JSP内置对象名</p><p>​    JSTL：标签库：&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core"</a> %&gt;，foreach:相当于java代码的for语句、                if:相当于java代码的if语句、choose:相当于java代码的switch语句</p><p>​    三层架构：web:(servlet、jsp)界面层(表示层)：用户看的得界面、业务逻辑层(service)：处理业务逻辑的、数据访问层                    （dao）：操作数据存储文件。</p><p>5.5 787-801（15P）</p><p>==案例==（用户信息操作）：三层架构</p><p>​    技术选型：Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat+javaScript+el+jstl</p><p>​    实现功能：登录、添加、删除、删除所选、修改、全选&amp;全不选、列表展示</p><p>5.6 802-808（7P）</p><p>==案例==（用户信息操作）：三层架构</p><p>​    实现功能：分页查询、复杂条件查询</p><p>5.7 809-824（16P）</p><p>Filter：过滤器：步骤：1.定义一个类，实现接口Filter、2.复写方法、3.配置拦截路径，过滤器执行流程：执行，执行放行，执行放行后代码，拦截路径配置、拦截方式配置：资源被访问的方式、过滤器链(配置多个过滤器)</p><p>增强对象的功能：代理模式，：增强方式：增强参数列表、增强返回值类型、增强方法体执行逻辑</p><p>Listener：创建监听器步骤：1.定义一个类，实现ServletContextListener接口、2.复写方法、3.配置@WebListener</p><p>监听器：ervletContextListener:监听ServletContext对象的创建和销毁，contextInitialized(ServletContextEvent sce) （一般用于加载全局配置文件）</p><p>5.8 825-849（25P）</p><p>JQuery 基础：一个JavaScript框架（封装了一些js代码），步骤：1.下载JQuery、2.导入JQuery的js文件、3.使用</p><p>​                        JQ对象–&gt;JS对象：$(js对象)</p><p>基本操作：事件绑定、入口函数(相当于window.onload )、样式控制：css方法</p><p>选择器：基本选择器、层级选择器、属性选择器、过滤选择器、表单过滤选择器</p><p>DOM操作：内容操作html()、text()、val()，属性操作attr()/prop()、removeAttr()、对class属性操作、（标签）CRUD操作</p><p>JQuery 高级：动画：show……([speed,[easing],[fn]])、遍历：jq对象.each(callback)、$.each(object, [callback])callback——遍历的逻辑方法</p><p>5.9 850-871（22P）</p><p>JQuery 高级：事件绑定：jq对象.事件方法(回调函数)、jq对象.on/off(“事件名称”,回调函数)</p><p>​                        插件：增强JQuery的功能：$.fn.extend(object) 定义jq对象的功能、$.extend(object)定义全局的功能</p><p>AJAX：（异步，提交不刷新页面）实现方式$.get(url, [data], [callback], [type])，</p><p>JSON：（JavaScript对象表示法）语法：obj obj = {“key”:”value”}    获取数据:json对象.键名    遍历</p><p>​                Java对象转换JSON:使用步骤：1.导入jackson的jar包，2.创建Jackson核心对象 ObjectMapper，3.调用方法                writeValue(参数1，obj)</p><p>5.11 872-891（20P）</p><p>Redis：非关系型数据库，redis的数据结构： string、hash、 list、set、sortedset、通用命令</p><p>​            持久化：RDB、AOF</p><p>Java客户端 Jedis（java操作redis数据库的工具）：操作数据类型</p><p>jedis连接池： JedisPool：1.new JedisPool([config],[“localhost”],[6379])、2.调用方法 getResource()方法获取Jedis连接、                        连接池工具类</p><p>5.12 Maven</p><p>Maven：是一个基于Java平台的 自动化构建工具（管理项目），jar包管理</p><p>​            下载配置、maven约定的目录结构、maven常见命令（compile、test、package、install、clean）</p><p>​            依赖：scope：依赖范围、依赖排除、依赖的传递性、继承、依赖原则：为了防止冲突、多个maven项目（模块）            之间依赖</p><p>​            在Eclipse中创建maven工程：创建maven工程、在Eclipse中配置maven</p><p>​            maven生命周期、修改项目的jdk</p><p>5.13-5.14 处理Maven配置问题</p><ol><li><p>将setting.xml中的本地仓库设置好，将阿里云镜像加入</p></li><li><p>在cmd中输入 mvn help:system测试</p></li><li><p>出现error 8 2.5，2.6，2.7……不能下载：将网络设置里的代理——自动检测设置关闭</p></li><li><p>出现can’t translter ——不能从阿里云下载，先将本地仓库中相关的jar文件夹删除，再重新添加该依赖</p></li><li><p>要把该依赖相关代码重新剪切，等加载一会再粘贴</p></li></ol><p>5.15 910-921（12P）</p><p>​    Web综合案例：注册：正则表达式校验、后台查询是否存在该用户、注册成功与失败信息回写、ajax不刷新获取回写信                                息、验证码校验</p><p>5.17 922-932 （11P）</p><p>​    Web综合案例：注册：发送邮件、激活用户</p><p>​                             登录：页面展示欢迎你+姓名    退出</p><p>5.18 933-937（5P）</p><p>​    Web综合案例：Servlet优化：减少Servlet数量，将一个模块的功能整合到一个Servlet中</p><p>​                            分类数据展示：查询数据库，动态显示分类导航栏信息</p><p>5.19 938-941（4P）</p><p>​    Web综合案例：分类数据缓存处理：将分类导航栏保存在redis中，避免多次访问数据库</p><p>​                                分页查询数据：分类传递id、分页查询（后台）：封装PageBean对象</p><p>5.20 942-948（6P）</p><p>​    Web综合案例：分页查询数据：前台：展示总页码、总记录数、分页栏、分页数据、分页栏显示10个</p><p>​                                线路查询：搜索信息进行模糊查询：和分页综合查询，在其他页面也可以查询线路</p><p>5.21 949-955（7P）</p><p>​    Web综合案例：旅游线路详情：动态获取线路的详情信息，商家信息，线路图片信息</p><p>​                            线路收藏状态：已激活和未激活的状态、激活的次数</p><p>5.24 961-979（19P）</p><p>​    Linux：安装虚拟机VMware 、图形化界面CentOS 7、远程操控虚拟机CRT</p><p>​                Linux的目录结构、Linux常见命令：文件、目录，Vim编辑器、Linux的权限命令、</p><p>​                常用网络操作：主机名配置、IP地址配置、域名映射、网络服务管理</p><p>5.25 981-985(5P)</p><p>​    Linux：常用上传下载工具、安装jdk（已安装）、mysql、Tomcat、redis</p><p>5.26 1-8（8P）</p><p>​    框架:Mybatis：搭建 Mybatis 开发环境：创建maven工程、增加依赖、编写实体类、编写持久层dao、编写dao映射、编写 SqlMapConfig.xml xml，编写测试类、自定义Mybatis（了解）</p><p>5.27 18-29（11P）</p><p>​    Mybatis：CRUD操作<select>,,,</select></p><p>5.28 37-51（15P）</p><p>​    Mybatis：parameterType 配置参数：传递 pojo 包装对象（多个对象信息封装进一个查询对象中）、</p><p>​                    resultType 配置结果类型（作用：让类中属性与数据库列名保持一致）、</p><p>​                    SqlMapConfig.xml配置文件：properties（属性）（作用：将参数封装在外部）、typeAliases（类型别名）（给类型起别名，resultType和parameterType在使用全类名时可直接写类名）、mappers（映射器）（作用：不用单独映射，直接封装映射，注解和Xml配置都起效）</p><p>​                    Mybatis 的连接池技术</p><p>​                    Mybatis 的事务控制：Mybatis 自动提交事务的设置</p><p>​                    动态 SQL（根据不同条件来追加sql语句）：<if>标签（拼接条件语句）、<where>标签 (简化上面 where 1=1 的条件拼装)、<foreach>标签 （拼接 in 条件语句）</foreach></where></if></p><p>​                    <strong>多表查询</strong>：一对一查询(多对一)：resultMap、association</p><p>5.30 52-67（15P）</p><p>​    Mybatis：一对多查询：resultMap、collection    多对多：resultMap、collection 连接中间表</p><p>​                    Mybatis 延迟加载：select、column（通常：一对一正常立即加载 一对多使用延迟加载）</p><p>​                    Mybatis 缓存：一级缓存（sqlsession范围）、二级缓存（mapper范围）</p><p>5.31 68-75（8P）</p><p>​    Mybatis：Mybatis 注解开发：基本 CRUD、实现复杂关系映射开发</p><p>6.1 76-97（22P）</p><p>​    Spring：概述（IOC反转控制、AOP面向切面编程）、工厂解耦、 IOC解决程序耦合</p><p>​                    基于 XML 的 IOC 细节：ApplicationContext 接口的三种实现类、BeanFactory和 ApplicationContext 的区别                                                        （创建对象时间点不同）</p><p>​                     bean 标签和管理对象细节：实例化 Bean 的三种方式 （默认构造、静态方法、实例化类方法）、bean 标签                                                                （scope：指定对象的作用范围）</p><p>6.2 98-109（12P）</p><p>​    Spring：xml方式依赖注入：构造函数注入、set方法注入、注入集合</p><p>​                  基于注解的 IOC 配置：常用注解：用于创建bean对象、用于注入数据、用于改变作用范围、和生命周期相关                                                        环境搭建</p><p>​                  关于 Spring 注解和 XML的选择问题</p><p>6.3 110-119（10P）</p><p>​    Spring：基于XML的IOC案例：DBUtils 、c3p0 ，环境搭建、编写Xml配置文件、编写测试类</p><p>​                  基于注解的IOC案例：环境搭建、注解编写业务层、持久层、编写Xml配置文件</p><p>​                  纯注解形式，将xml变为注解：@Configuration 、@ComponentScan、@Bean、@Import @PropertySource</p><p>6.4 120-139（20P）</p><p>​    Spring：Spring 整合 Junit：帮助创建容器，获取对象 @RunWith、@ContextConfiguration、@Autowired</p><p>​                  AOP：（面向切面编程），声明切入点与通知间的关系（给方法增强）、AOP 相关术语：连接点、切入点、                                通知、目标对象、织入、代理、切面，</p><p>​                  基于 XML 的 AOP 配置：导入依赖、约束、配置 spring 的 ioc 、通知类ioc、 aop:config声明 aop 配置 、                                                            aop:aspect 配置切面、aop:pointcut配置切入点表达式 、 aop:xxx配置对应的通知类                                                            型、环绕通知</p><p>6.5 140-148（9P）</p><p>​    Spring：基于注解的 AOP 配置：@Service(“accountService”)、@ComponentScan（指定扫描的包） 、                                                        @Component(“txManager”) 、@Aspect声明切面类、@Before、                                                        @EnableAspectJAutoProxy、@Pointcut(“execution(* com.itheima.service.impl.<em>.</em>(..))”)                                                         、@Around(“pt1()”)</p><p>​    JDBCTemplate：JDBCTemplate和DBUtils对比、步骤：导入依赖、配置数据源、在 dao 中定义 JdbcTemplate（所                                xml、注解均适用）、extends JdbcDaoSupport（注解不适用）</p><p>6.6 149-155（7P）</p><p>​    Spring：基于 XML 的声明式事务控制：导入依赖、导入约束、配置业务层和持久层IOC、配置事务管理器、配置事务                                                                    的通知、配置事务的属性、配置 AOP 切入点表达式、配置切入点表达式和事                                                                    务通知的对应关系</p><p>​                  基于注解的配置方式：导入依赖、创建 spring 的配置文件导入约束并配置扫描的包、注解Ioc、Xml配置事务管                                                        理器并注入数据源、在业务层使用@Transactional 注解配置事务通知、开启 spring 对                                                        注解事务的支持</p><p>6.7 159-165（7P）</p><p>​    Spring：案例：对IOC、AOP事务提交、XML和注解配置、纯注解配置进行复习</p><p>​    SpringMVC：三层架构和 MVC、SpringMVC 概述、SpringMVC的入门：步骤（依赖、核心控制器、扫描包、控制器、                          请求映射、试图解析器、开启注解支持）、MVC组件（前端控制器、处理器映射器、处理器、处理器适                          配器、视图解析器、视图）</p><p>6.8 166-182（16P）</p><p>​    SpringMVC：RequestMapping 注解（建立一二级方法关系）</p><p>​                          请求参数的绑定（获取值）：基本类型、实体类型、集合类型、解决中文乱码问题（spring过滤器）、自                                                                         定义类型转换器</p><p>​                          常用的注解：RequestParam注解 （解决参数名称和传递参数名称不一致）、RequestBody注解（获取请                                                求体）、RequestHeader注解（获取请求头）、CookieValue注解（获取cookie中的值）、                                                PathVariable注解（获取resultful占位符上的值）、ModelAttribute注解（优先执行、获取优                                                先执行的返回值）、SessionAttributes注解（存到session域中）</p><p>6.9 183-203（20P）</p><p>​    SpringMVC：响应数据和结果视图：返回值分类（String、void(转发、重定向)、ModelAndView、）、转发重定向、                                                              ResponseBody响应json数据</p><p>​                          SpringMVC实现文件上传：SpringMVC传统方式文件上传（省去了解析request域获取上传文件项的过                                                                      程，直接获得文件项）、SpringMVC跨服务器方式文件上传</p><p>​                          SpringMVC的异常处理（友好跳转错误页面）：自定义异常类、自定义异常处理器、配置异常处理器</p><p>​                          SpringMVC框架中的拦截器（类似过滤器）：创建拦截器类，实现接口（接口内部已经实现了方法，需要                                                                                                  自己重载）、配置拦截器类</p><p>6.10 204-212（9P）</p><p>​    SSM整合：搭建整合环境、Spring、SpringMVC、Spring整合SpringMVC框架、Mybatis、Spring整合MyBatis框架</p><p>6.11 练习SSM整合</p><p>6.12 - 6.22 </p><p>​    Hexo+matery+butterfly搭建两个静态博客</p><p>6.23 1-7 （7P）</p><p>​    Spring Boot：入门：环境搭建、微服务简介、分析Spring Boot 环境底层</p><p>6.24-6.29 8-41（34P）</p><p>​    Spring Boot：</p><p>日志（日志框架、SLF4j使用、SpringBoot日志关系、日志使用、切换日志框架）、</p><p>配置文件（YAML语法、配置文件值注入、配置文件占位符、Profile、配置文件加载位置、外部配置加载顺序、自动配置原理）</p><p>web开发：对静态资源的映射规则、模板引擎Thymeleaf、SpringMVC自动配置、如何修改SpringBoot默认配置、RestfulCRUD</p><p>6.30 42-51（9P）</p><p>​    Spring Boot：</p><p>错误处理原理、定制错误页面、定制错误数据、注册Servlet三大组件、切换嵌入式Servlet容器、使用外部Servlet容器、开启JSP支持</p><p>7.1 52-58（6P）</p><p>​    Docker：</p><p>Linux环境准备、docker安装启动停止、镜像操作常用指令、容器操作常用指令、安装Mysql</p><p>7.2-7.4 59-64（6P）</p><p>​    Spring Boot：</p><p>数据访问：JDBC、整合Druid数据源、整合Mybatis、注解使用Mybatis</p><p>7.5 Spring注解驱动教程 1-26（26P）</p><p>Spring注解驱动：</p><p>容器：组件添加、生命周期、组件赋值、自动装配（注入）、根据环境注册Bean</p><p>7.6 Spring注解驱动教程 27、36-37、53-58 （9P）</p><p>Spring注解驱动：</p><p>AOP：基于注解AOP的三大步:@Aspect、在切面类上的每一个通知方法上标注上通知注解、开启基于注解的AOP模式</p><p>声明式事务：基于注解的事务控制三大步：@EnableTransactionManagement、给方法标注上@Transactional ，表示当                        前方法是一个由事务接管的方法、配置事务管理器来控制事务</p><p>Spring整合SpringMVC框架（纯注解版）：创建Spring配置类、创建SpringMVC配置类、创建MyWebAppInitializer配置两                                                                    个配置类和MVC前端控制器的映射关系，定制MVC的三大步（在mvc配置类                                                                    中）：@EnableWebMvc，开启SpringMVC定制功能、继承                                                                    WebMvcConfigurerAdapter、重写方法，进行定制</p><p>（开学）</p><p>8.31 复习Spring</p><p><a href="https://www.bilibili.com/video/BV1WZ4y1H7du?p=27&amp;t=447">https://www.bilibili.com/video/BV1WZ4y1H7du?p=27&amp;t=447</a></p><p>P1-36：Spring IOC：XML和注解的方式，纯注解方式</p><p>，Spring整合Junit4的方式</p><p>9.1 复习Spring</p><p>P37-51：Spring AOP ： XML和注解的方式，纯注解方式</p><p>复习反射机制：P462-469、<a href="https://www.bilibili.com/video/BV1uJ411k7wy">https://www.bilibili.com/video/BV1uJ411k7wy</a></p><p>动态代理：P41、42，P820、821</p><p>9.2 配置JavaEE环境</p><p>安装Myeclipse2014（汉化、破解），配置Tomcat8，jre8</p><p>9.3 复习Spring</p><p>P52-71 : jdbcTemplate，Spring事务控制</p><p>9.4 复习SpringMVC</p><p>P72-127：maven工程创建web项目、SpringMVC执行过程、数据响应（页面跳转：String、modelAndView、model，回写数据：@ResponseBody，回写json）、参数绑定（基本类型、pojo、数组、集合）、Restful风格、拦截器、异常处理</p><p>9.5 复习Mybatis</p><p>P146-184 ：快速入门、增删改查、核心配置文件解析（environments、mappers、properties、typeAliases、plugins）、动态sql（if、foreach标签</p><p>、sql片段抽取）、一对一模型（requestMap标签、association）、一对多、多对多模型（collection）</p><p>9.6 复习SSM整合</p><p>P185-200：mybatis注解开发：一对一（@results,result，One(@One)），一对多，多对多（Many(@Many)），SSM整合（Spring-SpringMVC用监听器，Spring-Mybatis将sqlSessionFactory加入Spring容器中），整理配置文件笔记</p><p>9.7 复习Maven，学习Git</p><p>P201-221：依赖传递/冲突（排除依赖，版本锁定、第一声明者优先、路径近者优先）、使用maven搭建SSM工程、分模块搭建工程、部署tomcat</p><p>P229-256：Git下载安装、代码托管服务（码云、Github）注册账号、创建仓库、邀请用户，Git常用命令（初始化init，克隆clone，），（工作目录、暂存区、版本库，文件状态（未跟踪、已跟踪（已修改、未修改、已暂存））），（查看文件状态 status，加入暂存区add，取消暂存reset，提交本地仓库commit ，删除rm，日志log，），忽略列表，远程仓库操作（查看远程仓库remote，增加远程仓库remote add，克隆clone，移除远程仓库关系remote rm，抓取不合并fetch，抓取合并pull，推送push）</p><p>9.8 学习Git，整理博客</p><p>P257-285：Git分支（查看、创建、推送、合并、删除branch）、标签（查看、创建、检出、删除tag）、图形化工具TortoiseGit、idea使用Git、SSH协议</p><p>9.9 整理JavaEE笔记</p><p>复习JSP、整理JavaEE配置环境笔记</p><p>复习Sring boot：<a href="https://www.bilibili.com/video/BV1Et411Y7tQ?p=33">https://www.bilibili.com/video/BV1Et411Y7tQ?p=33</a></p><p>P1-7：创建spring boot项目，快速入门，自动配置原理分析（自动装配） </p><p>9.10 复习Spring boot</p><p><a href="https://www.bilibili.com/video/BV1PE411i7CV?p=21">https://www.bilibili.com/video/BV1PE411i7CV?p=21</a> 狂神说和雷丰阳</p><p>P6-34：自动配置原理、</p><p>配置：yaml配置、properties配置、多环境Profile支持、配置文件加载位置、加载顺序</p><p>日志：日志框架slf4j（接口）、logback（实现）</p><p>web：thymeleaf模板引擎、SpringMVC自动装配、自定义组件加入容器（编写配置类）</p><p>9.11-12 复习Spring boot</p><p>P35-42：编写CRUD实验</p><p>静态引入资源规则、国际化、登录拦截器、Restful风格、公共页抽取、链接高亮、替换真实数据、页面重用2合1、CRUD操作、js表单提交</p><p>9.13 复习Spring boot</p><p>P43-50 ：错误处理机制</p><p>自定义错误页面、自定义响应错误数据（不好写）</p><p>tomcat配置修改、注册servlet三大组件（servlet、Filter、Listener）、使用其他Servlet容器、使用外置tomcat容器</p><p>P325-335：<a href="https://www.bilibili.com/video/BV1WZ4y1H7du?t=797&amp;p=335">https://www.bilibili.com/video/BV1WZ4y1H7du?t=797&amp;p=335</a></p><p>lombok（简化实体类），hikari（数据源），事务，整合mybatis,通用mapper（简化dao），junit，redis，部署</p><p>9.14 复习Spring boot</p><p>P59-66：数据访问</p><p>整合Druid、配置数据源监控，整合Mybatis，整合SpringData JPA</p><p>看数据结构20页：逻辑结构（二元组、集合结构、线性、树形、图形），存储结构（顺序、链式、索引、哈希）</p><p>9.15 学习Redis、设计模式（单例）</p><p>P1-36：<a href="https://www.bilibili.com/video/BV1S54y1R7SB?p=36">https://www.bilibili.com/video/BV1S54y1R7SB?p=36</a></p><p>Nosql概述、redis五大数据类型、命令操作、持久化(RDB、AOF)、事务、消息订阅发布、主从复制、哨兵模式、缓存穿透、缓存击穿、缓存雪崩、(jedis、springboot整合)</p><p>单例模式的八种实现：饿汉式2种、懒汉式3种、双重检查锁、静态内部类、枚举</p><p>9.16 学习ZooKeeper、Kafka</p><p><a href="https://www.bilibili.com/video/BV1PW411r7iP?p=11">https://www.bilibili.com/video/BV1PW411r7iP?p=11</a></p><p>概述（分布式服务协调管理框架）、工作机制、特点（半数存活、全局数据一致、一主多从集群、数据原子性、实时性、更新请求顺序进行）、应用场景（统一命名服务、统一集群管理、统一配置管理、服务节点动态上下线、软负载均衡）、内部原理（选举机制、节点类型、监听器原理、写数据流程）、常用指令（ls path、ls2 path、create path value、set path value、get path、delete path、rmr path）</p><p><a href="https://www.bilibili.com/video/BV1a4411B7V9?p=5">https://www.bilibili.com/video/BV1a4411B7V9?p=5</a></p><p>定义（分布式的消息订阅模式的消息队列），好处（解耦、削峰），两种模式（点对点、发布/订阅），基本架构（生产者、消费者、broker、Topic主题、partition分区、主从、消费者组、zookeeper），工作流程（偏移量），存储机制（分片、索引），生产者（分区策略、ISR、ack，消息一致性：HW、LEO：故障解决措施），精准一次（幂等性）、消费者（消费方式：推、拉，分配策略：轮询、range的优缺点、高效读写数据的原因）、Zookeeper 在 Kafka 中的作用</p><p>9.17-9.20 学习SringCloud</p><p>SpringCloud技术栈（服务注册与发现：Eureka、Zookeeper、Consul，服务负载与调用：Ribbon、openFeign），微服务架构搭建、postman、热部署、工程重构</p><p>Eureka：（客户端、服务器端）、注册和调用原理、单机版（pom依赖、yml、主启动@EnableEurekaServer/@EnableEurekaClient）、集群（服务器yml互相注册，服务提供者@LoadBalanced）、服务发现（DiscoveryClient，主启动类@EnableDiscoveryClient）、自我保护机制（CAP中的AP高可用高容错）</p><p>Zookeeper：启动zookeeper服务器，客户端（服务提供者/消费者：pom依赖、yml：zookeeper服务器ip+端口号），集群（搭建，在yml配置文件中加上多个zk地址）</p><p>Consul：安装启动、客户端（服务提供者/消费者：pom依赖、yml：consul服务器ip+端口号、服务名）</p><p>三个注册中心的异同：Eureka：AP高可用（自我保护机制），Consul/Zookeeper：CP高一致性（临时节点）</p><p>Ribbon负载均衡服务调用：Ribbon和Nginx的区别（客户端负载均衡和服务器端负载均衡）、工作机制（负载均衡+restTemplate）、使用（pom、restTemplate）、负载均衡算法（7个，轮询、随机、过滤掉故障的……）、替换算法的方法（创建配置类，主启动@RibbonClient(name=”访问服务名”,configuration=”配置类.class”)）、轮询算法原理（rest接口第几次请求%集群总数量=调用服务的下标）</p><p>OpenFeigin服务接口调用：定义（定义一个接口，添加注解@FeignClient(“服务名”)，写上调用方法，使用时调用这个接口的方法，完成微服务调用），使用（pom、yml、主启动@EnableFeignClients，方法接口@FeignClient,调用时注入接口使用）、超时机制（yml设置远程调用时间）、OpenFeign日志（NONE、BASIC、HEADERS、FULL全，使用：定义日志配置类（指定http日志级别）、yml指定命令行日志输出级别、哪个接口受日志监控）</p><p>Hystrix服务熔断：概念（处理分布式的延迟和容错），服务降级（不等待，返回备选方案），服务熔断（出现故障，先关闭服务，再降级，再恢复），配置降级（兜底方法，@HystrixCommand，@EnableCircuitBreaker/@EnableHystrix），@DefaultProperties全局降级，服务熔断（@HystrixCommand(commandProperties={@HystriProperty(name=,value=)})）：到达阈值，错误率，断路器开启，休眠时间窗-降级，半开，关闭。服务监控@EnableHystrixDashboard</p><p>9.21 学习SringCloud</p><p>GateWay服务网关：概念（动态路由转发+执行过滤器链），使用（pom、yml）、断言（网关的规则）、过滤器（单一、全局(自定义实现接口)）</p><p>Config服务配置：概念（为不同微服务应用提供中心化外部配置），服务端、客户端，使用（服务端：git、pom、yml、@EnableConfigServer、本地hosts），访问配置文件规则，使用（客户端：pom、yml(bootstrap)、controller(根据rest风格将配置暴露)），动态刷新(Pom监控、yml暴露监控、@RefreshScope、外部post请求客户端)</p><p>SpringCloud Bus 消息总线：概念（解决config一次性多刷新），设计思想（发给客户端/服务端），原理（客户端监听同一主题，当刷新数据，消息会放在主题上，客户端会更新配置），使用（配置RabbitMQ环境、改服务端：yml(mq配置、暴露监控)、pom监控和mq，改客户端：pom监控和mq、yml(mq配置)），配置定点通知（发送消息后面加微服务名：端口号）</p><p>9.22 学习SringCloud</p><p>SpringCloud Stream消息驱动：概念（屏蔽消息中间件的差异，统一消息编程模型），业务流程（生产-source-channel-binder-mq-binder-channel-sink-消费），使用（生产者：pom,yml,service@EnableBinding(source.class)发送消息方法，controller，消费者：pom,yml,controller@EnableBinding(Sink.class),@StreamListener(Sink.INPUT)接收消息方法），自定义分组（解决重复消费，持久化）</p><p>Spring Cloud Sleuth链路追踪：概念（追踪每个请求的整体链路），原理（TraceID,SpanID,ParentID），使用（安装zipkin，pom,yml）</p><p>Nacos注册中心+配置中心：服务器端（安装，运行），注册中心（服务提供者Pom,yml,@EnableDiscoveryClient,controller，@LoadBalanced负载均衡），与其他服务注册对比（ap,cp可切换），配置中心（客户端pom,yml(bootstrap,application),@EnableDiscoveryClient,@RefreshScope支持动态刷新），配置中心增加配置信息（配置命名规则），分类配置（NameSpace,Group,DataID）</p><p>多线程面试题</p><p>9.24 学习SpringCloud</p><p>Seata分布式事务：概念（一个分布式事务的解决方案），XID,TC,TM,RM，seata安装，搭建业务环境，seata原理（AT模式，一阶段、二阶段）</p><p>mysql面试题：索引，b+树，Innodb和MyISAM，聚集/非聚集/联合索引，隔离级别，并发出现的3大问题，3大范式，ACID特性</p><p>9.24-10.11 复习javaSE基础</p><p>二刷JavaSE，主要针对多线程、集合、数组、IO流加强复习</p><p>查找算法（二分法），排序算法（冒泡、快排）</p><p>10.12-10.14</p><p>复习zookeeper、kafka、联表查询</p><p>10.15-10.16</p><p>复习SSM，练习SSM</p><p>Spring(IOC、AOP)原理，SpringMVC，Mybatis的运行机制</p><p>IOC:工厂模式+反射，AOP：动态代理模式</p><p>10.17</p><p>学习IOC底层工厂模式+反射的实现原理</p><p>Springboot的实现原理</p><p>复习redis</p><p>10.18-10.19</p><p>Vue基础：EL挂载点，data数据对象，指令，axios网络库，axios+Vue</p><p>10.20-10.22</p><p>优化matery个人博客</p><p>10.23-10.27</p><p>搭建springboot个人博客</p><p>10.28-10.31</p><p>面试题整理，人事整理</p><p>11.1 </p><p>java8新特性：</p><p>​    Lambda表达式：（六种情况：无参无返回、有参无返回、类型推断、1参、多参多语句有返回值、1语句）</p><p>​    函数式接口（只有一个抽象方法）：消费性接口、供给型接口、函数型接口、端定型接口</p><p>​    方法引用、构造器引用：特殊情况下（有参数和返回值相同的实现方法）替换lambda表达式</p><p>​    Stream API（java层面对数据进行操作）：Stream实例化、中间操作（筛选切片、映射、排序）、终止操作（匹配查找、归约、收集）</p><p>11.2</p><p>java8新特性：</p><p>​    Optional类</p><p>​    可重复注解、接口默认/静态方法、新类型注解</p><p>写毕业设计-任务书</p><p>复习反射、10.29面试题、redis数据库</p><p>11.3</p><p><a href="https://www.bilibili.com/video/BV12b411K7Zu?p=69">mysql基础</a>：1-69</p><p>概念（DB、DBMS、SQL），mysql软件操作、</p><p>mysql常用命令（show databases、use 库名、show tables、show tables from 库名、create table 表名(列名 列类型)、desc 表名、select version(),mysql –V,mysql –version）、</p><p>DQL数据库查询语言（基本查询select、条件查询where、排序查询order by、常见函数(单行函数、聚合函数)、分组查询group by）</p><p>11.4-11.5</p><p>70-132</p><p>DQL数据库查询语言</p><p>​    多表连接查询（内连接：等值连接、非等值连接、自连接、内连接，外连接：左外、右外连接、全外连接，交叉连接）</p><p>​    子查询（嵌套查询）：出现位置（select、from、where/having、exists），结果集（标量子查询、列子查询、行子查询、表子查询）</p><p>​    分页查询 limit m n</p><p>​    联合查询 union </p><p>DML数据操作语言</p><p>​    插入：insert into 表名（字段名，） values（值1）</p><p>​    修改：update 表名 set 字段名=新值 where 条件</p><p>​    删除：delete from  表名 where 条件；truncate清空</p><p>DDL数据库操作语言</p><p>​    库的管理：</p><p>​        创建库：create database if not exists 库名</p><p>​        修改库：alter database 库名 character set 字符集</p><p>​        删除库：drop database if not exists 库名</p><p>​    表的管理：</p><p>​        创建表：create table 表名（字段名 列的类型（长度 约束），）</p><p>​        修改表：alter table 表名 change/add/alter/drop/rename column 列名 【类型】</p><p>​        删除表：drop table 表名</p><p>​    常见类型：</p><p>​        整型：Tinyint、Smallint、Mediumint、int/Integer、Bigint</p><p>​        小数：float、double、dec、decimal</p><p>​        字符型：char、varchar</p><p>​        日期型：date、datetime、timestamp、time、year</p><p>​    常见约束：</p><p>​        NOTNULL、UNIQUE、DEFAULT、CHECK、PRIMARY KEY、FOREIGN KEY</p><p>​        <code>contraint 外键名 foreign key(从表列名) references 主表（主表列名）</code></p><p>11.6-11.7</p><p>133-178</p><p>标识列：自增长列，auto_increment</p><p>TCL事务控制语言：</p><p>​    特点（原子性、一致性、隔离性、持久性）、显式事务（set autocommit = 0,commit rollback）、隔离级别（读未提交、读已提交、可重复读、串行化）、问题（脏读、不可重复读、幻读）</p><p>视图：</p><p>​    视图与表的区别（一个是逻辑，一个是数据）、视图的创建（create view as），操作，修改视图数据</p><p>变量：</p><p>​    系统变量（全局变量、会话变量）、自定义变量（用户变量、局部变量）</p><p>​    用户变量 set @用户变量名=值</p><p>​    局部变量 declare 变量名 类型 default 值</p><p>存储过程（预先编译好的sql语句）：</p><p>​    create proceduce 存储过程名（in/out/inout 参数名 参数类型）</p><p>​    begin 存储过程体 end</p><p>​    新结束标记： delimiter $</p><p>​    调用： call 存储过程名（实参列表） 结束标记</p><p>函数：</p><p>​    函数与存储过程的区别（函数有且仅有一个返回值，存储过程有0-多个返回值）</p><p>​    create function(参数名 参数类型) returns 返回类型</p><p>​    begin 函数体 end</p><p>​    调用： select 函数名（实参列表）</p><p>流程控制结构：</p><p>​    if函数，双分支，可以用在任何地方 if(条件，值1，值2)</p><p>​    case语句：多分支</p><p>​        case 表达式 when 值1 then 值  else 值 end case</p><p>​        case when 条件1 then 结果1/语句1 else end case</p><p>​    if语句：多分支</p><p>​        if 条件1 then 语句1; elseif 条件2 then 语句2； else 语句n；end if；</p><p>循环结构：</p><p>​    while：先判断，后执行</p><p>​        标签：while 循环条件 do</p><p>​            循环体；</p><p>​        end while 标签;</p><p>​    loop：死循环</p><p>​        标签：loop</p><p>​            循环体；</p><p>​        end loop 标签</p><p>​    repeat：先执行，后判断</p><p>​        标签：repeat</p><p>​            循环体；</p><p>​            until 结束循环条件；</p><p>​        end repeat 标签；</p><p>11.8-11.15 mysql高级（P179—P242）</p><p>mysql架构：linux安装Mysql，mysql配置文件，存储引擎</p><p>索引优化分析：join语句，</p><ol><li>创建索引：create index 索引名 on 表名（索引列）</li><li>删除索引：drop index 索引名 on 表名</li><li>查看索引：show index from 表名</li></ol><p>性能分析：explain（用于查看表的读取顺序，是否使用到索引，数据读取操作类型）</p><ol><li>id</li><li>type（system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all）</li><li>key：实际用到的索引</li><li>extra（using filesort,using temporary,using index）</li></ol><p>索引优化：</p><ol><li>单表、两边表、多表（join条件加索引）</li><li>索引失效：<ol><li>最左前缀原则<ol><li>第一个索引丢失会失效</li><li>中间索引隔开会失效</li></ol></li><li>索引条件进行操作（计算、函数、类型转换：字符串没有加单引号）</li><li>范围查询后的索引会失效</li><li>is not null、or、!=会失效</li><li>like以%开头会失效（可使用覆盖索引解决）</li></ol></li><li>order by，group by优化：<ol><li>order by与where相连，最左前缀原则</li><li>没有where就不会使用到索引（可使用覆盖索引或强制索引解决）</li><li>order by 中出现其他非索引列会失效</li><li>group by分组前会先排序，所以和排序一样</li></ol></li></ol><p>查询截取分析：慢查询日志、show profile、全局查询日志（用于找到出问题的sql语句）</p><p>批量插入脚本：存储过程</p><p>锁机制：</p><ul><li><p>加锁：lock table 表名 read/write;</p></li><li><p>释放锁：unlock tables;</p></li><li><p>查看锁：show open tables</p></li><li><p>查看表锁状态：show status like ‘table%’</p></li><li><p>分析行锁状态：show status like ‘innodb_row_lock%’</p></li><li><p>锁定一行：begin;sql查询语句 for update;</p></li></ul><ol><li>读锁：<ol><li>读会阻塞写</li></ol></li><li>写锁<ol><li>写会阻塞读写，持有锁的session可以进行操作</li></ol></li><li>行锁：Innodb默认，索引失效会导致行锁变为表锁</li><li>表锁：myisam默认</li></ol><p>优化建议：</p><ol><li>尽量使用索引来完成，避免索引失效</li><li>缩小锁的范围，避免间隙锁</li><li>控制事务大小，减少缩影资源量和时间长度</li><li>尽可能使用低级别的事务隔离级别</li></ol><p>事务：</p><p>ACID：原子性、一致性、隔离性、持久性</p><p>并发问题：更新覆盖、脏读、不可重复读、幻读</p><p>隔离级别：读未提交、读已提交、可重复读、串行化</p><p>11.16-11.29</p><p>毕业设计任务书完成，文献综述完成ing…</p><p>个人博客网站搭建：</p><p>后端（登录、分类、标签、博客管理：分页查询、添加、修改、删除）</p><p>前端（首页展示、全局搜索、博客详情页、评论、分类、标签、归档、关于我）</p><p>11.30-12.16</p><p>毕业设计三件套完成：开题报告、任务书、文献综述</p><p>个人博客网站搭建前端完成，后端正在搭建ing</p><p>放假……</p><p>1.1-3.1</p><p>毕业设计个人博客网站前后端完成搭建</p><p>撰写毕业设计论文ing</p><p>3.1-3.18</p><p>毕业设计论文11797字完结撒花</p><p>3.19-3.20</p><p>复习mysql数据库</p><p>3.21</p><p>复习linux基础、高级</p><p>3.22</p><p>复习nginx、Git、Docker</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中使用MarkDown书写博客</title>
      <link href="/2020/06/14/hexo/hexo-zhong-shi-yong-markdown-shu-xie-bo-ke/"/>
      <url>/2020/06/14/hexo/hexo-zhong-shi-yong-markdown-shu-xie-bo-ke/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是小苏写的第一个博客，写的不好见谅哈，有问题可以留言呦，小苏会第一时间进行修改<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>毕竟是第一篇博客，需要先介绍一下该如何在Hexo个人静态博客中使用MarkDown来编写，有哪些注意事项，方便在之后写博客的时候有个参考，也希望能够给新博主一些帮助！</p><p>本篇使用的Typora编写的MarkDown，Hexo的主题是Matery，其实不同的主题都是基于Hexo，相差不是很大。</p><p><a href="https://fenghen0918.github.io/2020/06/18/typora-jian-yao-yu-fa/">MarkDown的简要语法</a></p><hr><h2 id="1-了解文章存放的位置"><a href="#1-了解文章存放的位置" class="headerlink" title="1.了解文章存放的位置"></a>1.了解文章存放的位置</h2><blockquote><p>说明：之后文章中提到的主目录都是你搭建个人博客的目录，如我的为blog目录</p></blockquote><p>系统生成的文章和你的文章都会存放在主目录<strong>source</strong>文件夹下的**_posts**中，此处是我的存放目录：<code> E:\blog\source\_posts</code></p><p>说明：</p><ol><li>将来文章会有很多，可以在_post目录下创建多级文件夹，系统是自动识别，便于分类</li></ol><hr><h2 id="2-创建文章"><a href="#2-创建文章" class="headerlink" title="2. 创建文章"></a>2. 创建文章</h2><h3 id="2-1方法一：使用命令创建"><a href="#2-1方法一：使用命令创建" class="headerlink" title="2.1方法一：使用命令创建"></a>2.1方法一：使用命令创建</h3><p>在主目录下右键，选择Git Bash Here进入命令行，输入</p><pre><code>hexo n 你的文章名</code></pre><p>之后，_post目录下就会出现你的文件名.md文件，在文件中书写保存即可</p><p><strong>好处</strong>：Hexo会帮助你一些配置，名为Front-matter，在后面会提到</p><h3 id="2-2方法二：将md文件复制粘贴"><a href="#2-2方法二：将md文件复制粘贴" class="headerlink" title="2.2方法二：将md文件复制粘贴"></a>2.2方法二：将md文件复制粘贴</h3><p>直接将写到的md文件复制粘贴到_post文件夹中即可</p><hr><h2 id="3-文章的配置Front-matter"><a href="#3-文章的配置Front-matter" class="headerlink" title="3.文章的配置Front-matter"></a>3.文章的配置Front-matter</h2><p>当我们使用命令创建md文章，Hexo会帮助我们生成一些配置信息(Front-matter)：</p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><p>复制粘贴插入配置信息的方法：右键文章的空白处，插入，YAML Front-matter</p><h3 id="3-1Front-matter配置详情信息"><a href="#3-1Front-matter配置详情信息" class="headerlink" title="3.1Front-matter配置详情信息"></a>3.1Front-matter配置详情信息</h3><p>这些主要是关于这篇文章的配置，这些所有的配置都是<strong>非必填项</strong>，不过最好将title和date值填写上，以下是关于配置的详情介绍：</p><table><thead><tr><th align="center">配置选项</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="center"><code>Markdown</code> 的文件标题</td><td align="center">文章标题，强烈建议填写此选项</td></tr><tr><td align="center">date</td><td align="center">文件创建时的日期时间</td><td align="center">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="center">author</td><td align="center">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="center">文章作者</td></tr><tr><td align="center">img</td><td align="center"><code>featureImages</code> 中的某个值</td><td align="center">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="center">top</td><td align="center"><code>true</code></td><td align="center">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="center">cover</td><td align="center"><code>false</code></td><td align="center"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="center">coverImg</td><td align="center">无</td><td align="center"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="center">password</td><td align="center">无</td><td align="center">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="center">toc</td><td align="center"><code>true</code></td><td align="center">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="center">mathjax</td><td align="center"><code>false</code></td><td align="center">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="center">summary</td><td align="center">无</td><td align="center">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="center">categories</td><td align="center">无</td><td align="center">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="center">tags</td><td align="center">无</td><td align="center">文章标签，一篇文章可以多个标签</td></tr><tr><td align="center">keywords</td><td align="center">文章标题</td><td align="center">文章关键字，SEO 时需要</td></tr><tr><td align="center">reprintPolicy</td><td align="center">cc_by</td><td align="center">文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p>注意：</p><ol><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li></ol></blockquote><p>关于Front-matter的演示：</p><p><strong>最简配置</strong>：</p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><p><strong>最全配置</strong>：</p><pre><code>---title: typora-vue-theme主题介绍date: 2020-06-18 13:30:00author: 小苏img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h3 id="3-2修改默认文章配置"><a href="#3-2修改默认文章配置" class="headerlink" title="3.2修改默认文章配置"></a>3.2修改默认文章配置</h3><p>在每次创建文章只有title和date，如果想要再设置其他属性还需要翻看文档，有些麻烦，因此我们可以设置常用的属性作为默认配置。</p><p>只要去主目录下找到<code>scaffolds</code>文件夹下找到一个<strong>post.md</strong> 文件修改即可，这里是我的目录<code> E:\blog\scaffolds</code></p><p>以下是我的配置：</p><pre><code># 标题title: {{ title }}date: {{ date }}author: 小苏# 简述summary: # 使用自定义封面 img: # 是否置顶true，或者去掉top: # 轮播cover: # 轮播图coverImg: # 标签tags: # 分类categories: # 是否加密文章，SHA256加密password: </code></pre><hr><h2 id="4-在Typora中插入图片"><a href="#4-在Typora中插入图片" class="headerlink" title="4.在Typora中插入图片"></a>4.在Typora中插入图片</h2><blockquote><p>由于使用原先的复制粘贴图片时，图片的地址会是本地地址，上传到网络就导致文章的图片加载不出来，于是我们可以采取将图片上传到图床上，再将图床的地址加入到文章中即可，此方法就是Typora集成PicGo图床的方法</p><p>感谢<a href="https://yafine-blog.cn/posts/15cb.html">励心大佬</a>的文章，解决了我的问题</p></blockquote><h3 id="4-1第一步：关于什么是图床，如何搭建"><a href="#4-1第一步：关于什么是图床，如何搭建" class="headerlink" title="4.1第一步：关于什么是图床，如何搭建"></a>4.1第一步：关于什么是图床，如何搭建</h3><blockquote><p>引用励心大佬的文章</p></blockquote><h4 id="4-1-1-基于Github图床的搭建"><a href="#4-1-1-基于Github图床的搭建" class="headerlink" title="4.1.1 基于Github图床的搭建"></a>4.1.1 基于Github图床的搭建</h4><ul><li><a href="https://yafine-blog.cn/posts/eb3a.html">https://yafine-blog.cn/posts/eb3a.html</a></li></ul><h4 id="4-1-2-基于Gitee图床的搭建"><a href="#4-1-2-基于Gitee图床的搭建" class="headerlink" title="4.1.2 基于Gitee图床的搭建"></a>4.1.2 基于Gitee图床的搭建</h4><ul><li><a href="https://yafine-blog.cn/posts/15cb.html">https://yafine-blog.cn/posts/15cb.html</a></li></ul><h3 id="4-2-第二步：设置PicGo"><a href="#4-2-第二步：设置PicGo" class="headerlink" title="4.2 第二步：设置PicGo"></a>4.2 第二步：设置PicGo</h3><p>点击PicGo设置、开启Server，监听地址不用进行更改，监听端口的值设置为36677，这个值可以在Typora软件中获取到，一般默认值都是36677</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/picgo1.png" alt="image-20200618210220798"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/picgo2.png" alt="image-20200618210255883"></p><h3 id="4-3第三步：设置Typora"><a href="#4-3第三步：设置Typora" class="headerlink" title="4.3第三步：设置Typora"></a>4.3第三步：设置Typora</h3><p>关于Typora软件的安装很简单，傻瓜式安装，打开typora软件，依次打开步骤为：文件 -&gt; 偏好设置 -&gt; 图像，具体配置参考下面的图中的配置：上传服务选择app即可，不需要使用core，路径就是你的PicGo.exe的路径</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/picgo3.png" alt="image-20200618210810842"></p><h3 id="4-4第四步：验证配置是否正确"><a href="#4-4第四步：验证配置是否正确" class="headerlink" title="4.4第四步：验证配置是否正确"></a>4.4第四步：验证配置是否正确</h3><p>点击上一步的<code>验证图片上传选项</code>，看看是否上传成功，成功会出现以下界面：</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/picgo4.png" alt="image-20200618211043882"></p><blockquote><p>出现错误，请看文章最后的错误分析</p></blockquote><h3 id="4-5使用方法"><a href="#4-5使用方法" class="headerlink" title="4.5使用方法"></a>4.5使用方法</h3><p>4.5.1 可以将图片直接拖拽文章中，Typora会自动上传</p><p>4.5.2  复制粘贴</p><p>4.5.3 使用快捷键Ctrl + Shift + I，选择图片路径即可</p><h3 id="4-6-错误分析"><a href="#4-6-错误分析" class="headerlink" title="4.6 错误分析"></a>4.6 错误分析</h3><h4 id="4-6-1-“success”-false"><a href="#4-6-1-“success”-false" class="headerlink" title="4.6.1 {“success”,false}"></a>4.6.1 {“success”,false}</h4><ul><li><p><strong>原因</strong>：是文件名冲突了，如果你上传过一张image1.jpg的图片，再上传名称一样的图片就会失败，log日志中也会写道。</p><p><strong>解决方法</strong>：打开picgo设置，将【时间戳重命名】打开，再上传图片是重命名即可，或者将图床中重名图片删掉</p></li><li><p><strong>原因</strong>：本地部署没有断开，ctrl+c断开hexo s的部署</p><p><strong>解决方法</strong>：断开部署后重新上传</p></li></ul><h4 id="4-6-2-Failed-to-fetch"><a href="#4-6-2-Failed-to-fetch" class="headerlink" title="4.6.2 Failed to fetch"></a>4.6.2 Failed to fetch</h4><p><strong>原因</strong>：一般是因为端口不一致而导致的，Typora监听的端口号为36677，有时在于端口冲突，如果你打开了多个picgo程序，就会端口冲突，picgo自动帮你把36677端口改为366771端口，导致错误。</p><p> <strong>解决方法</strong>：打开PicGo软件，然后依次打开PicGo设置、设置Server，查看当前的端口号，如果不是36677，则将监听端口号修改为36677即可。</p><h4 id="4-6-3-please-config-path-for-picgo-app-in-preferences-panel"><a href="#4-6-3-please-config-path-for-picgo-app-in-preferences-panel" class="headerlink" title="4.6.3 please config path for picgo(app) in preferences panel"></a>4.6.3 please config path for picgo(app) in preferences panel</h4><p><strong>原因</strong>：有可能设置了之后还没有生效</p><p><strong>解决方法</strong>：将Typora写的文章关闭后重新打开，尝试上传图片</p><h3 id="4-7-友情提醒"><a href="#4-7-友情提醒" class="headerlink" title="4.7 友情提醒"></a>4.7 友情提醒</h3><p>PicGo的日志(log)文件是个好东西，如果出现报错，图片上传不成功的情况，大家可以打开日志看看，根据日志输出，然后自己尝试解决，百度是个好东西！</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/picgo5.png" alt="image-20200618212911587"></p><hr><h2 id="5-在Typora中插入多媒体"><a href="#5-在Typora中插入多媒体" class="headerlink" title="5.在Typora中插入多媒体"></a>5.在Typora中插入多媒体</h2><blockquote><p>插入多媒体可以使用直接插入或者使用插件插入，这里只介绍直接插入：</p><p>直接插入：不需要安装插件，简单，但有的浏览器不支持</p><p>插件插入：支持所有，但是配置有些麻烦</p></blockquote><h3 id="5-1-插入音乐"><a href="#5-1-插入音乐" class="headerlink" title="5.1 插入音乐"></a>5.1 插入音乐</h3><p>音乐链接获取（网易云音乐为例）</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/image-20200621145050973.png" alt="image-20200621145050973"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/picgo6.png" alt="image-20200621145128708"></p><p>将音乐代码粘贴到markdown中即可，注意长宽尺寸</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=3&amp;id=2067668593&amp;auto=1&amp;height=66"></iframe><h3 id="5-2-插入视频"><a href="#5-2-插入视频" class="headerlink" title="5.2 插入视频"></a>5.2 插入视频</h3><blockquote><p>注意：插入的视频必须是视频的原URL</p></blockquote><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/picgo7.png" alt="image-20200621145922114"></p><iframe src="//player.bilibili.com/player.html?aid=243597466&amp;bvid=BV1nv411B7B6&amp;cid=203246371&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="800" height="450"> </iframe><blockquote><p>注意加上width(宽)，height（长），长宽可以是视频分辨率</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> MarkDown </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客迁移云服务器</title>
      <link href="/2020/01/27/hexo/hexo-bo-ke-qian-yi-yun-fu-wu-qi/"/>
      <url>/2020/01/27/hexo/hexo-bo-ke-qian-yi-yun-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 背景：我的博客是部署在github国外和coding国内的。自2021年12月30日，coding正式停止了静态网站托管服务，因此不得不换个国内的站点。</p><p>有尝试过Vercel，确实好用，但是新版Vercel和老的github博客无法兼容，导致连接老github博客仓库报404，至今不知道什么问题，如果有知道的可以评论区告诉我，不甚感激！</p><p>目前只能通过Vercel连接第三方仓库https，然后输入github老仓库的https地址，就可以正常访问了，但这有个问题：Vercel会在github新建一个仓库托管你的博客，我们不得不将博客部署在Vercel新仓库中，实现每次部署Vercel都会自动更新最新的页面。这就导致我们被迫迁移了新仓库，这会让我们的valine评论和卜算子访客量都清零了。</p><p>于是一不做二不休，我干脆弄个云服务器，将博客部署到云服务器上一步到位。于是，就有了下面的迁移云服务器。也让我学到了怎么购买云服务器和申请证书，配置nginx的https的方式。</p></blockquote><h2 id="精彩抢先看"><a href="#精彩抢先看" class="headerlink" title="精彩抢先看"></a>精彩抢先看</h2><p>本篇包含以下干货</p><ol><li>阿里云购买云服务器（试用免费版）</li><li>云服务器的使用</li><li>Hexo迁移云服务器</li><li>阿里云申请ssl证书</li></ol><h2 id="正片开始"><a href="#正片开始" class="headerlink" title="正片开始"></a>正片开始</h2><h3 id="阿里云购买云服务器"><a href="#阿里云购买云服务器" class="headerlink" title="阿里云购买云服务器"></a>阿里云购买云服务器</h3><blockquote><p>其实云服务器无所谓哪个华为云、腾讯云还是阿里云，这里我域名是提前在阿里云买的，于是也在阿里云买了云服务器，当然为了练习先领用了个免费的服务器1个月（白嫖使我快乐~hhh）</p></blockquote><ol><li><a href="https://www.aliyun.com/daily-act/ecs/free?spm=5176.19772248.d365.d365.6e8f514codP9Af&amp;scm=20140722.2719.4.2664">阿里云ECS试用中心</a></li><li>下方领取试用机型，我领取的是ECS共享型n4，1个月</li><li>操作系统选择熟悉的centos7.6，带宽选择最高的5Mbps</li><li>购买后进入控制台</li></ol><h3 id="云服务器的使用"><a href="#云服务器的使用" class="headerlink" title="云服务器的使用"></a>云服务器的使用</h3><ol><li>点击左侧，选择<code>云服务器ECS</code></li><li>点击实例，也就是你的云服务器</li></ol><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20220127132047.png"><ol start="3"><li>初次进去后可能会没有实例，这是因为你没有选择区域<ol><li>点击上方的区域，选择你云服务器所在的区域。就可以看到你的机器和公网IP</li></ol></li></ol><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20220127132224.png"><ol start="4"><li><p>点击管理，进入云服务的管理界面</p></li><li><p>有3处需要配置</p><ol><li><p>重置实例密码，就是你的服务器的root密码，要求有大小写、数字、符号</p></li><li><p>进入安全组，增加80和443的入口端口，按照现有的端口配置配就行（阿里云是由安全组限制的，就像操作系统的防火墙，因此我们需要打开80和443端口，为后续Nginx做准备）。</p><blockquote><p> 这里如果没有设置安全组443，在后续的Nginx配置https时，会访问不了</p></blockquote></li><li><p>远程连接，选择VNC连接方式，设置VNC密码，要求有大小写、数字，必须为6位</p></li></ol><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20220127132541.png"></li><li><p>连接，使用moba或者xshell等远程连接工具，连接公网IP，输入密码连接即可。</p></li></ol><h3 id="Hexo迁移云服务器"><a href="#Hexo迁移云服务器" class="headerlink" title="Hexo迁移云服务器"></a>Hexo迁移云服务器</h3><ol><li> 安装nginx</li></ol><pre><code>yum install nginx 安装nginxsystemctl start nginx 开启nginx服务systemctl enable nginx 跟随系统启动</code></pre><p>用公网IP访问，如果显示nginx或是centos的界面的话就是没问题的</p><ol start="2"><li> 新建存放博客的目录</li></ol><pre><code>cd /homemkdir wwwcd wwwmkdir website</code></pre><ol start="3"><li>安装git</li></ol><pre><code>//安装Gityum install git</code></pre><ol start="4"><li>新建用户并修改权限</li></ol><pre><code>adduser gitchmod 740 /etc/sudoersvim /etc/sudoers</code></pre><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20220127140404.png"><p>保存退出</p><p>修改权限</p><pre><code>chmod 400 /etc/sudoers</code></pre><ol start="5"><li><p>创建公钥</p><pre><code>sudo passwd git  //设置git密码su git    //切换到git用户cd ~    //切换目录mkdir .ssh    //新建.ssh文件夹cd .ssh    //进入文件夹vim authorized_keys    //创建文件将主机windows下的ssh公钥内容粘贴进去，位置在C:\Users\用户\.ssh\id_rsa.pub保存退出chmod 600 ~/.ssh/authorized_keyschmod 700 ~/.ssh</code></pre></li><li><p>测试</p><p>使用主机windows，以管理员的身份进入cmd命令行</p><pre><code>ssh -v git@你的公网IP</code></pre><p>期间会让你输入yes</p><p>如果提示 Welcome ……就代表不需要密码就可以登录了，成功了</p></li><li><p>创建git仓库(钩子)</p><pre><code>cd ~git init --bare blog.gitvi ~/blog.git/hooks/post-receive</code></pre><p>输入</p><pre><code>git --work-tree=/home/www/website --git-dir=/home/git/blog.git checkout -f</code></pre><p>保存退出</p><p>修改权限</p><pre><code>chmod +x ~/blog.git/hooks/post-receive</code></pre></li><li><p>部署</p><ol><li><p>修改hexo的配置文件_config.yml</p><pre><code>deploy:  type: git  repo: git@你的服务器公网IP:/home/git/blog.git  branch: master  message: </code></pre><blockquote><p>问题：出现–ssh：connect to host centos-py port 22: Connection refused</p><p>解决：</p><p>检查配置文件有没有配置对，我这里repo多了个”：“</p></blockquote></li><li><p>部署</p><pre><code>Hexo cleanHexo gHexo deploy</code></pre></li></ol></li><li><p>修改nginx配置文件</p><pre><code>cd /etc/nginx/vim nginx.conf</code></pre><pre><code>server {    listen       80; #端口号    server_name  localhost; #公网ip    location / { #访问路径配置        root   /home/www/website; #目录        index  index.html index.htm; #默认首页    }</code></pre><pre><code>nginx -s reload 重启nginx</code></pre></li><li><p>访问</p><p>这时通过ip访问即可</p></li></ol><blockquote><p>问题：访问时出现nginx403 forbiden</p><p>原因：因为文件夹权限不足，导致git上传文件没有正确上传。</p><p>解决方法：</p><pre><code>cd homechmod 777 wwwchmod 777 website/</code></pre></blockquote><h3 id="申请ssl证书与配置https"><a href="#申请ssl证书与配置https" class="headerlink" title="申请ssl证书与配置https"></a>申请ssl证书与配置https</h3><blockquote><p>背景：我们已经迁移了博客，但是没有配置域名，如果需要域名访问云服务器，两种方式，</p><ol><li>http，这种方式国内服务器需要备案，备案又需要服务器有效期至少3个月，我是免费1个月试用，因此没有采取这种方式</li><li>https，这种方式需要申请ssl证书，配置即可，我们采取这一种</li></ol></blockquote><p>2021年后，ssl证书购买的步骤分为两步，1.购买资源包，相当于个卡包，2.购买证书，相当于卡</p><p><strong>阿里云购买证书</strong></p><ol><li><a href="https://blog.csdn.net/kenkao/article/details/113627154">购买资源包，相当于个卡包</a></li></ol><p><a href="https://www.aliyun.com/product/cas">阿里云地址</a></p><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20220127143015.png"><ol start="2"><li><p><a href="https://blog.csdn.net/lianzhang861/article/details/108773365?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&amp;utm_relevant_index=1">购买证书，相当于卡</a></p><p>看第二步：<strong>配置nginx</strong></p></li></ol><p><strong>腾讯云购买证书</strong></p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/20230105161834.png">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客优化篇(matery)(二)</title>
      <link href="/2020/01/25/hexo/hexo-bo-ke-you-hua-pian-matery-er/"/>
      <url>/2020/01/25/hexo/hexo-bo-ke-you-hua-pian-matery-er/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>到年底了，想把最近的笔记整理一下，发现博客的域名过期了，于是给续了个费。同时也抽时间把小站优化一下，主要包括：一些功能的增删，迁移服务器，pjax的实现。</p><p>但……现实不尽人意，在此期间遇到了太多的坑，太过无奈，底层改了很多地方。有些改动的地方不清楚对不对，甚至现在的pjax还存在问题。</p><p>因此本次，原谅不能把每个改动都教学式的记录完整，只会把自己核心修改的地方记录一下，方便日后查看。</p><p><strong>言归正传</strong></p><h2 id="调整记录"><a href="#调整记录" class="headerlink" title="调整记录"></a>调整记录</h2><blockquote><p>本次不能说是优化了，对一些地方做了简单的调整</p></blockquote><h2 id="❌删除"><a href="#❌删除" class="headerlink" title="❌删除"></a>❌删除</h2><ul><li><input disabled="" type="checkbox"> 动态科技线条（小站建久了视觉疲劳，大道至简）</li><li><input disabled="" type="checkbox"> 樱花飘落（大道至简）</li><li><input disabled="" type="checkbox"> 首页视频，视频显示部分替换成公告（网站首页的加载速度变慢，效果不好）</li><li><input disabled="" type="checkbox"> 鼠标点击出现文字动画（大道至简）</li></ul><h2 id="✅新增功能"><a href="#✅新增功能" class="headerlink" title="✅新增功能"></a>✅新增功能</h2><ul><li><input checked="" disabled="" type="checkbox"> 夜间模式</li><li><input disabled="" type="checkbox"> 音乐控件（由于加了pjax，可以实现切换页面音乐不间断）</li></ul><h2 id="✅新增美化"><a href="#✅新增美化" class="headerlink" title="✅新增美化"></a>✅新增美化</h2><ul><li><input checked="" disabled="" type="checkbox"> 主页背景api替换cdn图片</li><li><input checked="" disabled="" type="checkbox"> 轮播图气泡动画</li><li><input checked="" disabled="" type="checkbox"> 字体更换（换个体积更小的字体，加速网页速度）</li><li><input checked="" disabled="" type="checkbox"> 更换文章卡片特色图片</li></ul><h2 id="🆗内容修改"><a href="#🆗内容修改" class="headerlink" title="🆗内容修改"></a>🆗内容修改</h2><ul><li><input checked="" disabled="" type="checkbox"> 增加首页公告内容</li><li><input checked="" disabled="" type="checkbox"> 更换音乐盒链接</li></ul><h2 id="🔱博客优化"><a href="#🔱博客优化" class="headerlink" title="🔱博客优化"></a>🔱博客优化</h2><ul><li><input checked="" disabled="" type="checkbox"> 图片CDN加速（加速页面加载）</li><li><input disabled="" type="checkbox"> 迁移云服务器（尝试）</li><li><input disabled="" type="checkbox"> pjax页面不刷新切换（仍有问题，仅供参考）</li><li><input disabled="" type="checkbox"> 升级hexo（提升构建速度）</li><li><input checked="" disabled="" type="checkbox"> 绑定域名a</li><li><input checked="" disabled="" type="checkbox"> 证书认证</li></ul><blockquote><p>本次魔改难度较大，遇坑较多，前提已经看了我之前的三期，再回头看这个会有很大的帮助：<a href="https://sulog.top/2020/06/18/hexo/hexo-github-da-jian-matery-bo-ke-er-zhu-ti-pei-zhi-pian/">Hexo+github搭建matery博客</a></p><p>再提一嘴：本篇的魔改部分仅供参考，想魔改到<code>Hexo博客优化篇(matery)（一）</code>就足够了。</p></blockquote><h1 id="正片开始"><a href="#正片开始" class="headerlink" title="正片开始"></a>正片开始</h1><h2 id="1-❌删除功能"><a href="#1-❌删除功能" class="headerlink" title="1. ❌删除功能"></a>1. ❌删除功能</h2><h3 id="1-1动态科技线条、樱花、点击文字"><a href="#1-1动态科技线条、樱花、点击文字" class="headerlink" title="1.1动态科技线条、樱花、点击文字"></a>1.1动态科技线条、樱花、点击文字</h3><p>还是那句话，大道至简，花里胡哨的东西只会越来越少。</p><p>主要是在主题的_config.yml文件中找到特效的开关，enable：false即可。</p><h3 id="1-2首页视频，视频显示部分替换成公告"><a href="#1-2首页视频，视频显示部分替换成公告" class="headerlink" title="1.2首页视频，视频显示部分替换成公告"></a>1.2首页视频，视频显示部分替换成公告</h3><ol><li><p>修改首页dream模块的东西<code>themes\matery\layout\_widget</code></p><blockquote><p>这里讲一下找模块在哪个文件的方法：</p><ol><li>打开你的网站，F12打开控制台，找到关键字，在layout的文件夹和子文件夹中找到</li></ol><img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/20220127102316.png"></blockquote></li></ol><pre><code>&lt;div class="dream"&gt;    &lt;% if (theme.dream.showTitle) { %&gt;        &lt;div class="title center-align"&gt;            &lt;i class="far fa-lightbulb"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%= theme.dream.title %&gt;            &lt;img src="https://cdn.jsdelivr.net/gh/fenghen0918/jm-imgs/markdown/maozhualove.gif" alt="Welcome" width="40px"&gt;        &lt;/div&gt;        &lt;% } %&gt;            &lt;div class="row"&gt;                &lt;div class="notices"&gt;                    &lt;div class="textssl"&gt;                        &lt;br&gt;你要加的内容                        &lt;%= theme.dream.text %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;/div&gt;</code></pre><ol start="2"><li>将_config.yml的dream.text内容去掉</li></ol><hr><h2 id="2-✅新增功能"><a href="#2-✅新增功能" class="headerlink" title="2.  ✅新增功能"></a>2.  ✅新增功能</h2><h3 id="2-1-夜间模式"><a href="#2-1-夜间模式" class="headerlink" title="2.1 夜间模式"></a>2.1 夜间模式</h3><blockquote><p>这里我按照闲花大佬的教程配的，是可以成功的。</p><p>但我想把按钮放在搜索的右边，于是我修改的一下，页面的样式还是有些问题，因此还是看<a href="https://www.islu.cn/posts/21369.html">闲花大佬的教程吧</a></p></blockquote><h3 id="2-2-音乐控件"><a href="#2-2-音乐控件" class="headerlink" title="2.2 音乐控件"></a>2.2 音乐控件</h3><p>matery主题有自带的音乐控件，上次因为慢影响页面加载速度，而且matery没有内置pjax，切换页面会导致音乐间断，体验不好。</p><p>因为本次优化加了pjax，就把这个控件打开了。在主题的_config.yml文件中搜索关键字<code>music</code>，enable：false即可。</p><hr><h2 id="3-✅新增美化"><a href="#3-✅新增美化" class="headerlink" title="3.✅新增美化"></a>3.✅新增美化</h2><h3 id="3-1-主页背景api替换cdn图片"><a href="#3-1-主页背景api替换cdn图片" class="headerlink" title="3.1 主页背景api替换cdn图片"></a>3.1 主页背景api替换cdn图片</h3><ol><li><p>找到<code>themes\matery\layout\_partial\bg-cover-content.ejs</code></p><blockquote><p>怎么找主页背景对应的文件，请看1.2</p></blockquote><p>替换</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>banner<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">// $('.bg-cover').css('background-image', 'url(https://api.ixiaowai.cn/gqapi/gqapi.php)');</span>        $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"https://cdn.jsdelivr.net/npm/typed.js@2.0.11"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(https://cdn.jsdelivr.net/gh/sakurasep/Wallpaper-01@1.0/wallpaper/043.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre></li></ol><h3 id="3-2轮播图气泡动画"><a href="#3-2轮播图气泡动画" class="headerlink" title="3.2轮播图气泡动画"></a>3.2轮播图气泡动画</h3><p>请看<a href="https://www.islu.cn/posts/38530.html">闲花大佬的教程</a></p><h3 id="3-3字体更换"><a href="#3-3字体更换" class="headerlink" title="3.3字体更换"></a>3.3字体更换</h3><blockquote><p>在页面加载时查看控制台发现，字体文件myfont.ttf加载总是二十多秒，很慢。于是想更换一个小点的ttf文件，从而加快浏览器加载</p></blockquote><ol><li><p>在根目录下的 <code>source </code>文件夹内创建一个名为 <code>font</code> 的文件夹，即文件夹路径为 <code>/source/font/ </code>，用来统一存放你要用到的字体。</p></li><li><p>找到 <code>/themes/matery/source/css/</code>下的 my.css 文件，填入下面的代码：</p><pre><code>@font-face{    font-family: 'myFont';    src: url('https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io/font/myfont.ttf');}body{    font-family: 'myFont';}</code></pre><blockquote><p>起初我以为cdn加速必须上传图床才可以，ttf无法上传图床，就放弃了。</p><p>但cdn对于github上传的东西都能加速。于是我直接配了cdn的链接，可以！</p></blockquote><blockquote><p>这里引申一点，因为github上所有东西都能加速，于是我看了下f12控制台，search.xml也大，加载的很慢，于是查看search.ejs中，引用的xml加了cdn的前缀，说明已经加速了。但是cdn前缀是我原github仓库。（现在我的仓库是云服务器，而cdn只能对Github的文件加速，云服务器不支持），为保证cdn加速的都是最新的，我部署的时候要同时在github上和云服务器都部署一份。github为cdn专用，云服务器为访问。</p></blockquote></li></ol><h3 id="3-4-更换文章卡片特色图片"><a href="#3-4-更换文章卡片特色图片" class="headerlink" title="3.4 更换文章卡片特色图片"></a>3.4 更换文章卡片特色图片</h3><blockquote><p>主要是之前的图片都是通过本地加载的，本次将所有图片上传至cdn</p></blockquote><ol><li><p>图片上传图床实现cdn加速</p><blockquote><p>具体怎么上传图床在我前三期教程里有，这里不多赘述</p></blockquote></li><li><p>修改主题配置文件_config.yml</p><ol><li>搜索关键字“featureImages”，改成cdn路径</li></ol></li><li><p>由于启用了matery内置的cdn，这些图片的链接会有两个cdn前缀，因此需要找到把前缀去掉</p><ol><li><code>themes\matery\layout\index.ejs</code>，搜索关键字”card-image“</li><li>将<code>&lt;%- theme.jsDelivr.url %&gt;</code>去掉</li></ol><blockquote><p>借此机会，将系统中重复出现两次cdn前缀的地方都修改下</p><ol><li>开启_config.yml的cdn开关</li><li>部署</li><li>进入页面F12，查看报错，如果有图片或js出现了两次，找到地方去掉<code>&lt;%- theme.jsDelivr.url %&gt;</code>即可</li></ol></blockquote></li></ol><hr><h2 id="4-🆗内容修改"><a href="#4-🆗内容修改" class="headerlink" title="4.🆗内容修改"></a>4.🆗内容修改</h2><h3 id="4-1更换音乐盒链接"><a href="#4-1更换音乐盒链接" class="headerlink" title="4.1更换音乐盒链接"></a>4.1更换音乐盒链接</h3><ol><li>链接在网易云音乐的网页端，找想要的歌单。</li><li>点击外部链接，有些是由权限限制的，多找几个，找到没有限制的复制粘贴到<code>source\musics\index.md</code>即可。</li></ol><hr><h2 id="5-🔱博客优化"><a href="#5-🔱博客优化" class="headerlink" title="5.🔱博客优化"></a>5.🔱博客优化</h2><h3 id="5-1图片CDN加速"><a href="#5-1图片CDN加速" class="headerlink" title="5.1图片CDN加速"></a>5.1图片CDN加速</h3><p>详见3.4</p><h3 id="5-2迁移云服务器"><a href="#5-2迁移云服务器" class="headerlink" title="5.2迁移云服务器"></a>5.2迁移云服务器</h3><blockquote><p>背景：我的博客是部署在github国外和coding国内的。自2021年12月30日，coding正式停止了静态网站托管服务，因此不得不换个国内的站点。</p><p>有尝试过Vercel，确实好用，但是新版Vercel和老的github博客无法兼容，导致连接老github博客仓库报404，至今不知道什么问题，如果有知道的可以评论区告诉我，不甚感激！</p><p>目前只能通过Vercel连接第三方仓库https，然后输入github老仓库的https地址，就可以正常访问了，但这有个问题：Vercel会在github新建一个仓库托管你的博客，我们不得不将博客部署在Vercel新仓库中，实现每次部署Vercel都会自动更新最新的页面。这就导致我们被迫迁移了新仓库，这会让我们的valine评论和卜算子访客量都清零了。</p><p>于是一不做二不休，我干脆弄个云服务器，将博客部署到云服务器上一步到位。于是，就有了下面的迁移云服务器。也让我学到了怎么购买云服务器和申请证书，配置nginx的https的方式。</p></blockquote><p>详见我的另一篇博客<a href="">Hexo博客迁移云服务器</a></p><h3 id="5-3pjax页面不刷新切换"><a href="#5-3pjax页面不刷新切换" class="headerlink" title="5.3pjax页面不刷新切换"></a>5.3pjax页面不刷新切换</h3><p>这里不多介绍了，毕竟自己的博客还有问题，在考虑要不要舍弃掉pjax。如果真的想要，就看<a href="https://www.islu.cn/posts/28555.html">闲花大佬的教程吧</a></p><blockquote><p>问题：增加pjax会出现很多问题</p><ol><li>pjax不会重载页面的js和方法，需要手动重载</li><li>说说和评论用的都是leancloud，进页面都需要初始化，pjax会导致页面不刷新，冲突让另一个无法重新初始化。</li></ol></blockquote><h3 id="5-4升级Hexo"><a href="#5-4升级Hexo" class="headerlink" title="5.4升级Hexo"></a>5.4升级Hexo</h3><blockquote><p>背景：由于自己每次hexo cl，hexo g，构建的速度都一分多，后来听说是因为hexo版本低，现在hexo已经优化了。并且6.0的Hexo内置了代码压缩，因此不需要gulp压缩了。于是尝试自己升级了hexo</p></blockquote><blockquote><p>数据无价：一定要先备份一份升级前的文件，以免升级后自己的博客无法打开了。</p></blockquote><ol start="2"><li><p>hexo版本升级</p><pre><code># 使用淘宝源的 cnpm 替换 npmnpm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm install -g cnpm                 # 升级 npmcnpm cache clean -f                 # 清除 npm 缓存===更新 hexo: 进入 blog 目录，执行如下命令=== # 更新 package.json 中的 hexo 及个插件版本cnpm install -g npm-check           # 检查之前安装的插件，都有哪些是可以升级的 cnpm install -g npm-upgrade         # 升级系统中的插件npm-checknpm-upgrade# 更新 hexo 及所有插件cnpm update# 确认 hexo 已经更新hexo -v</code></pre><blockquote><p>问题：会出现cnpm找不到</p><p>解决：</p><ol><li>卸载，卸载如果也出现找不到，直接找到cnpm文件，删除掉再卸载安装</li><li>安装</li></ol><p><a href="https://www.jianshu.com/p/c46d1f69a76b">https://www.jianshu.com/p/c46d1f69a76b</a></p></blockquote></li><li><p>hexo 4升级到6后需要修改的配置</p><p>hexo 报错 use_date_for_updated is deprecated…</p><p><a href="https://blog.csdn.net/weixin_44045218/article/details/109609788">https://blog.csdn.net/weixin_44045218/article/details/109609788</a></p></li></ol><h3 id="5-5绑定域名、证书申请"><a href="#5-5绑定域名、证书申请" class="headerlink" title="5.5绑定域名、证书申请"></a>5.5绑定域名、证书申请</h3><p>这里不多赘述，github绑定域名的方式在前三期中说过，有需要的可以查看前三期。</p><p>本次主要是迁移到了云服务器后，给云服务器绑定域名和申请证书，我的另一篇博客<a href="">Hexo博客迁移云服务器</a>。<a href="https://cdn.jsdelivr.net/gh/sakurasep/Wallpaper-01@1.0/wallpaper/043.jpg">https://cdn.jsdelivr.net/gh/sakurasep/Wallpaper-01@1.0/wallpaper/043.jpg</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
